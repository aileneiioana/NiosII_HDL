/*
Author: Bjørn-Jostein Singstad

 */
//#include "led_switch.h"
//#include "interrupt.h"
#include <stdio.h>
#include <io.h>
#include <system.h> // access to information about the Nios II hardware sytem
#include <altera_avalon_pio_regs.h> // access to functions that can read and write to the PIO core
#include <sys/alt_irq.h> // access to the IRQ routines
#include "i2c_avalon_mm_if.h"
#include "unistd.h"



#define ADXL345_ADDR 0x53 //gsensor_alt_addr=0
#define ADXL345_DEV_ID 0xe5

//typedef enum {
//ADXL345 registers, see table 19 in datasheet.
#define ADXL345_DEV_ID_REG         0x00
#define ADXL345_THRESH_TAP_REG     0x1D
#define ADXL345_OFSX_REG           0x1E
#define ADXL345_OFSY_REG           0x1F
#define ADXL345_OFSZ_REG           0x20
#define ADXL345_DUR_REG            0x21
#define ADXL345_LATENT_REG         0x22
#define ADXL345_WINDOW_REG         0x23
#define ADXL345_THRESH_ACT_REG     0x24
#define ADXL345_THRESH_INACT_REG   0x25
#define ADXL345_TIME_INAC_REGT     0x26
#define ADXL345_ACT_INACT_CTL_REG  0x27
#define ADXL345_THRESH_FF_REG      0x28
#define ADXL345_TIME_FF_REG        0x29
#define ADXL345_TAP_AXES_REG       0x2A
#define ADXL345_ACT_TAP_STATUS_REG 0x2B
#define ADXL345_BW_RATE_REG        0x2C
#define ADXL345_POWER_CTL_REG      0x2D
#define ADXL345_INT_ENABLE_REG     0x2E
#define ADXL345_INT_MAP_REG        0x2F
#define ADXL345_INT_SOURCE_REG     0x30
#define ADXL345_DATA_FORMAT_REG    0x31
#define ADXL345_DATAX0_REG         0x32
#define ADXL345_DATAX1_REG         0x33
#define ADXL345_DATAY0_REG         0x34
#define ADXL345_DATAY1_REG         0x35
#define ADXL345_DATAZ0_REG         0x36
#define ADXL345_DATAZ1_REG         0x37
#define ADXL345_FIFO_CTL_REG       0x38
#define ADXL345_FIFO_STATUS_REG    0x39
//} adxl345Registers_t;

#define OFFSET -32
#define PWM_PERIOD 16

alt_8 pwm = 0;
alt_u8 led;
int level;

// Accelerometer filter variables
#define FILTER_ORDER 49
float filter_coefficients[FILTER_ORDER] = { 0.00464135470656760, 0.00737747226463043, -0.00240768675012549, -0.00711018685736960, 0.00326564674118811, 6.11463173516297e-05, -0.00935761974859676, 0.00397493281996669, 0.00437887161977042, -0.0133160721439149, 0.00304771783859210, 0.0114361953193935, -0.0179286984033957, -0.00107408161324030, 0.0222597890359562, -0.0224772654507762, -0.0108744542661829, 0.0395972756447093, -0.0263221720611839, -0.0337570326573828, 0.0751987217099385, -0.0288978194901786, -0.120354853218164, 0.287921968939103, 0.636863388360281, 0.287921968939103, -0.120354853218164, -0.0288978194901786, 0.0751987217099385, -0.0337570326573828, -0.0263221720611839, 0.0395972756447093, -0.0108744542661829, -0.0224772654507762, 0.0222597890359562, -0.00107408161324030, -0.0179286984033957, 0.0114361953193935, 0.00304771783859210, -0.0133160721439149, 0.00437887161977042, 0.00397493281996669, -0.00935761974859676, 6.11463173516297e-05, 0.00326564674118811, -0.00711018685736960, -0.00240768675012549, 0.00737747226463043, 0.00464135470656760 };
alt_32 previous_readings[FILTER_ORDER];

// The led pattern is stored in 8-bits.
void led_write(alt_u8 led_pattern) {
    IOWR(LED_PIO_BASE, 0, led_pattern);
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_CLK_TIMER_BASE, 0);

    if (pwm < abs(level)) {

        if (level < 0) {
            led_write(led << 1);
        } else {
            led_write(led >> 1);
        }

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
        pwm = 0;
    } else {
        pwm++;
    }

}

void timer_init(void * isr) {

    IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_CLK_TIMER_BASE, 0x0003);
    IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_CLK_TIMER_BASE, 0);
    IOWR_ALTERA_AVALON_TIMER_PERIODL(SYS_CLK_TIMER_BASE, 0x0900);
    IOWR_ALTERA_AVALON_TIMER_PERIODH(SYS_CLK_TIMER_BASE, 0x0000);
    alt_irq_register(SYS_CLK_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_CLK_TIMER_BASE, 0x0007);

}

typedef struct {
    alt_u16 x;
    alt_u16 y;
    alt_u16 z;
} adxl345_raw_data_t;

typedef struct {
    float x;
    float y;
    float z;
} adxl345_data_t;




typedef enum
{
    ACCEL_RANGE_2G               = 2,// Sens 4/32768= 0,0001220703125 g/LSB (8192LSB/g)
    ACCEL_RANGE_4G               = 4,// Sens 8/32768= 0,000244140625 g/LSB  (4096LSB/g)
    ACCEL_RANGE_8G              = 8,// Sens 16/32768= 0,00048828125 g/LSB (2048LSB/g)
    ACCEL_RANGE_16G              = 16,// Sens 30/32768= 0,0009155273438 g/LSB (1024LSB/g)
} adxl345_accel_range_t;

typedef enum {
    ACCEL_RANGE = 2,
    RES_BITS = 10,

    THRES_TAP = 0x40,  // 62.5mg/LSB threshold for event
    OFSX = 0,
    OFSY = 0,
    OFSZ = 0,
    DUR = 0x30, // 625us/LSB (event should be less than duration) =0 disable tap functions
    LATENT = 0x40, // 1.25ms/LSB wait time from tap to start of time ADXL345_WINDOW
    WINDOW = 0xff, // 1.25ms/LSB window after wait time when second tap is valid
    TAP_X = 1,
    TAP_Y = 1,
    TAP_Z = 1,

    LOW_POWER_BIT = 0,
    BW_RATE = 0xA,
    MEASURE = 1,
    SLEEP = 0,
    WAKEUP = 0,
    INT_ENABLE = 0x60,
    INT_MAP = 0x20
} adxl345_config_t;


//adxl345_raw_data_t accel_raw_data;
//adxl345_data_t accel_data;
//read_acceleration_data_raw();
adxl345_accel_range_t accel_range;
float _range_accel;


void config_device(adxl345_accel_range_t accel_range){


    //Set device into measurement mode by making sure that the Measure bit is set to 1 in the
    //POWER_CTL register. Default value is 0xA, thus it is already on by default.
    write_to_i2c_device(ADXL345_ADDR,ADXL345_POWER_CTL_REG,1,0xA);

    //Set device data format
    _range_accel = accel_range;

    // Set bit D3 to full resolution
    // Set INT_INVERT bit to 1 to activate active low interrupt
    // All other values are default 0

    alt_u8 set_accel_config =  0x20 | 0x8;


    // Add settings for g-range
    switch(accel_range) {
    case (ACCEL_RANGE_2G):
        set_accel_config = set_accel_config | (0b00);
        break;
    case (ACCEL_RANGE_4G):
        set_accel_config= set_accel_config | (0b01);
        break;
    case (ACCEL_RANGE_8G):
        set_accel_config= set_accel_config | (0b10);
        break;
    case (ACCEL_RANGE_16G):
        set_accel_config= set_accel_config | (0b11);
        break;
    }




    //Data format register
    write_to_i2c_device(ADXL345_ADDR,ADXL345_DATA_FORMAT_REG,1,set_accel_config);
    printf("Configuring ADXL345\n");

    //Disable FIFO, STREAM and Trigger mode. Not necessary as default is 0x0.
    write_to_i2c_device(ADXL345_ADDR,ADXL345_FIFO_CTL_REG,1,0x00);

    //set tap thresholds
    // The THRESH_TAP register is eight bits and holds the threshold value for tap interrupts. The data format is unsigned, therefore, the magnitude of the tap event is compared with the value in THRESH_TAP for normal tap detection. The scale factor is 62.5 mg/LSB (that is, 0xFF = 16 g). A value of 0 may result in undesirable behavior if single tap/double tap interrupts are enabled.
    write_to_i2c_device(ADXL345_ADDR,ADXL345_THRESH_TAP_REG,1,0x20); //1000 mg
    //The DUR register is eight bits and contains an unsigned time value representing the maximum time that an event must be above the THRESH_TAP threshold to qualify as a tap event. The scale factor is 625 μs/LSB. A value of 0 disables the single tap/ double tap functions.
    write_to_i2c_device(ADXL345_ADDR,ADXL345_DUR_REG,1,0x40); // < 30 ms
    //The latent register is eight bits and contains an unsigned time value representing the wait time from the detection of a tap event to the start of the time window (defined by the window register) during which a possible second tap event can be detected. The scale factor is 1.25 ms/LSB. A value of 0 disables the double tap function.
    write_to_i2c_device(ADXL345_ADDR,ADXL345_LATENT_REG,1,0x60); //40 ms
    //The window register is eight bits and contains an unsigned time value representing the amount of time after the expiration of the latency time (determined by the latent register) during which a second valid tap can begin. The scale factor is 1.25 ms/LSB. A value of 0 disables the double tap function
    write_to_i2c_device(ADXL345_ADDR,ADXL345_WINDOW_REG,1,0xFF); //38.75 ms


    //Initialize interrupts to be used
    write_to_i2c_device(ADXL345_ADDR,ADXL345_INT_MAP_REG,1,0x20); // map double tap to int2 pin and data ready to int1 pin
    write_to_i2c_device(ADXL345_ADDR,ADXL345_TAP_AXES_REG,1,0x07); // x,y,z-axis
    write_to_i2c_device(ADXL345_ADDR,ADXL345_INT_ENABLE_REG,1,0xa0); // Enable data ready and double tap

}

alt_u8 read_device_id(void){

    alt_u8 data[8] = {0};
    read_from_i2c_device(ADXL345_ADDR,ADXL345_DEV_ID_REG,1,&data[0]);

    return ((alt_u8) data[0]) & 0xff;
}


alt_u8 read_irq_reg(void){
    alt_u8 data = 0;
    read_from_i2c_device(ADXL345_ADDR,ADXL345_INT_SOURCE_REG,1,&data);
    printf("IRQREG: 0x%x\n",data);
    return data;
}

alt_u8 read_adxl345_reg(int reg_addr){
    alt_u8 data = 0;
    read_from_i2c_device(ADXL345_ADDR,reg_addr,1,&data);
    printf("IRQREG: 0x%x\n",data);
    return data;
}


adxl345_data_t read_acceleration_data(){


    alt_u16 ax = 0, ay = 0, az = 0;
    float value = 0;
    adxl345_data_t accel_data;
    alt_u8 data[8] = {0};
    alt_u8 no_bytes =6;
    //read_from_i2c_device(ADXL345_ADDR,ADXL345_DATAX0_REG,no_bytes,&data[0]);

    read_from_i2c_device(ADXL345_ADDR,ADXL345_DATAX0_REG,1,&data[0]);
    read_from_i2c_device(ADXL345_ADDR,ADXL345_DATAX1_REG,1,&data[1]);
    read_from_i2c_device(ADXL345_ADDR,ADXL345_DATAY0_REG,1,&data[2]);
    read_from_i2c_device(ADXL345_ADDR,ADXL345_DATAY1_REG,1,&data[3]);
    read_from_i2c_device(ADXL345_ADDR,ADXL345_DATAZ0_REG,1,&data[4]);
    read_from_i2c_device(ADXL345_ADDR,ADXL345_DATAZ1_REG,1,&data[5]);

    ax = data[1] << 8 | data[0];
    ay = data[3] << 8 | data[2];
    az = data[5] << 8 | data[4];


    read_from_i2c_device(ADXL345_ADDR,ADXL345_DATA_FORMAT_REG,1,&data[0]);

    int full_res_bit = (data[0] >> 3 ) & 0x1;


    float resolution = (float) _range_accel / 512.0;

    if (full_res_bit) {
        resolution  = (float) 2/512;
    }



    value = (alt_16)ax;
    //accel_raw_data.x = ax;
    accel_data.x = value ;//* resolution;

    value = (alt_16)ay;
    //accel_raw_data.y = ay;
    accel_data.y = value ;//* resolution;

    value = (alt_16)az;
    //accel_raw_data.z = az;   //accRange * value / 32768;
    accel_data.z = value ;//* resolution;

    return accel_data;

}

volatile int edge_capture;




/* This is the ISR which will be called when the system signals an interrupt. */

static void handle_interrupts(void* context)
{
	//Cast context to edge_capture's type
	//Volatile to avoid compiler optimization
  //this will point to the edge_capture variable.
	volatile int* edge_capture_ptr = (volatile int*) context;

	//Read the edge capture register on the PIO and store the value
  //The value will be stored in the edge_capture variable and accessible
  //from other parts of the code.
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(INTERRUPT_PIO_BASE);

	//Write to edge capture register to reset it
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INTERRUPT_PIO_BASE,0);
}


/* This function is used to initializes and registers the interrupt handler. */
static void init_interrupt_pio()
{
	//Recast the edge_capture point to match the
	//alt_irq_register() function prototypo
	void* edge_capture_ptr = (void*)&edge_capture;

	//Enable all 3 interrupt inputs by writing a one to the corresponding interruptmask bit locations
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INTERRUPT_PIO_BASE,0x7);

	//Reset the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INTERRUPT_PIO_BASE,0);

	//Register the interrupt handler in the system
  //The ID and PIO_IRQ number is available from the system.h file.
	alt_ic_isr_register(INTERRUPT_PIO_IRQ_INTERRUPT_CONTROLLER_ID,
			INTERRUPT_PIO_IRQ, handle_interrupts, edge_capture_ptr, 0x0);
}
int main(void)
{
  //-----------------------------------
  // Hentet fra fasit

    alt_u8 dev_id =  0;
    adxl345_data_t accel_data;

    alt_u8 adxl345_int_reg;
//-----------------------------------
  //Initialize the interrupts
	init_interrupt_pio();

  //Variable to hold values from switches
	//int sw_data = 0;
	printf("Hello from Nios II!\n");

//-------------------------------------
// Hentet fra fasit
    dev_id = read_device_id();
    if(dev_id != ADXL345_DEV_ID){
      printf("Wrong device ID: 0x%x!\n",dev_id);
      usleep(5000000); //Wait for 5 seconds
    }
    config_device(ACCEL_RANGE_8G);

    //Variable to hold values from switches

    //alt_u64 adxl345_data = 0;
    accel_data = read_acceleration_data();
//-----------------------------------------


	while(1){

    //When an interrupt event has occurred, the edge_capture variable has been updated

	  if (edge_capture == 0x1) //bit position 0 corresponds to button press
	  	  {
		   printf("Hi from interrupt routine, Key1 was pressed!\n");
		   edge_capture = 0; // reset variable to "unregister" event
	  	  }
	  else
        {
            //printf("Hi from interrupt routine, ADXL345 IRQ 0 activated, ADXL345_INT_SOURCE_REG: 0x%x!\n",adxl345_int_reg);
            accel_data = read_acceleration_data(); // Reading data registers will clear data related interrupts
            edge_capture = 0;                     // reset variable to "unregister" event
            printf("ax: %-.5f, ay: %-.5f, az: %-.5f\n",accel_data.x,accel_data.y,accel_data.z);
            convert_read(accel_data.x, & level, & led);
            //usleep(5000000);
        }
  }
  return 0;

}
