module i2c_avalon_mm_if (
  input clk, 
  input reset_n, 
  input read, 
  input write, 
  input chipselect, 
  input [2:0] address, 
  input [31:0] writedata, 
  output reg [31:0] readdata, 
  inout sda, 
  inout scl
);

  reg [31:0] ctrl_reg;  // RW
  reg [31:0] addr_reg;  // RW
  reg [31:0] write_reg; // RW
  reg [63:0] read_reg;  // R


  reg [2:0] no_bytes;
  reg ack_error_i;
  reg busy_i;

  // Alias for i2c pointer and device address
  assign i2c_pointer     = addr_reg[15:8];
  assign i2c_device_addr = addr_reg[6:0];

  // I2C master signals
  reg i2c_valid;
  reg [6:0] i2c_addr;
  reg i2c_rnw;
  reg [7:0] i2c_data_wr;
  reg i2c_busy;
  wire [7:0] i2c_data_rd;
  wire i2c_ack_error;
  
  reg [2:0] byte_count ;
   
  reg cmd ;
  reg rnw ;
  reg ack_error ;
  reg busy  ;
  reg mm_if_busy   ;
  // Constants
  localparam GC_SYSTEM_CLK = 'd50000000;
  localparam GC_I2C_CLK    = 'd200000;
  
  localparam sIDLE       = 3'b000;
  localparam sADDR       = 3'b001;
  localparam sWRITE_DATA = 3'b010;
  localparam sWAIT_DATA  = 3'b011;
  localparam sWAIT_STOP  = 3'b100;
  

  // Wrapper state machine
  reg [1:0] state;

  // Intermediate signaling of busy for state machine
  reg mm_if_busy_state;

  // Clear cmd bit in ctrl_reg when command has been accepted
  reg cmd_rst;
  
   // Alias bits for the ctrl register
  always @(posedge clk or negedge reset_n) begin
	  cmd          <= ctrl_reg[0];  // RW: Starts transaction on I2C bus when enabled. Automatically reset.
	  rnw          <= ctrl_reg[1];  // RW: Read (1) or write (0) write transaction on the I2C bus
	  no_bytes     <= ctrl_reg[4:2];  // RW: Number of bytes to write or read for I2C transaction. 3 bit needed to allow for reading back 6 bytes in a row (16 bits of x,y,z accel. data)
	  ack_error    <= ctrl_reg[5];  // R
	  busy         <= ctrl_reg[6];  // R: register busy status bit from I2C master
	  mm_if_busy   <= ctrl_reg[7];  // R: busy signal of this module's control state machine
  end
 
  
  i2c_master #(GC_SYSTEM_CLK, GC_I2C_CLK) i2c_master_inst
  (
  .clk       (clk),
  .arst_n    (reset_n),
  .valid     (i2c_valid),
  .addr      (i2c_addr),
  .rnw       (i2c_rnw),
  .data_wr   (i2c_data_wr),
  .busy      (i2c_busy),
  .data_rd   (i2c_data_rd),
  .ack_error (i2c_ack_error),
  .sda       (sda),
  .scl       (scl)
  );

	
// general register interface
always @(posedge clk or negedge reset_n) begin
  if (~reset_n) begin
    ctrl_reg  <= 32'b0;
    addr_reg  <= 32'b0;
    write_reg <= 32'b0;
  end else begin
    // register control signals from I2C master
    busy_s         <= i2c_busy;
    ack_error    <= i2c_ack_error;
    mm_if_busy <= mm_if_busy_state;  // update from state machine

    // Automatically reset cmd after one clock cycle.
    if (cmd_rst) begin
      cmd <= 1'b0;
    end

    // Write data from CPU interface
    if (chipselect && write) begin
      case (address)
        3'b000: ctrl_reg[4:0] <= writedata[4:0];
        3'b001: addr_reg <= writedata;
        3'b010: write_reg[31:0] <= writedata;
        default: null;
      endcase

    // Read data to CPU interface
    end else if (chipselect && read) begin
      case (address)
        3'b000: readdata <= ctrl_reg;
        3'b001: readdata <= addr_reg;
        3'b010: readdata <= write_reg[31:0];
        3'b011: readdata <= read_reg[31:0];
        3'b100: readdata <= read_reg[63:32];
        default: readdata <= read_reg[31:0];
      endcase
    end
  end
end
	
	//wrapper state machine

always @(posedge clk or negedge reset_n) begin
  if (~reset_n) begin
    state         <= sIDLE;
    i2c_rnw       <= 'b0;
    i2c_data_wr   <= 8'b00000000;
    i2c_valid     <= 'b0;
    i2c_addr      <= 7'b0000000;
    byte_count    <= 'b0;
    read_reg      <= 32'h00000000;
    //wrapper ctrl signals
    cmd_rst       <= 'b0;
    mm_if_busy_state <= 1'b0;
  end else begin
    mm_if_busy_state <= 1'b1;
    cmd_rst       <= 'b0;
    case (state)
      sIDLE: begin
        byte_count     <= 'b0;
        i2c_valid      <= 'b0;
        i2c_rnw        <= 'b0;
        i2c_data_wr    <= 8'b00000000;
        i2c_addr       <= 7'b0000000;
        mm_if_busy_state <= 1'b0;
        if (cmd == 1'b1) begin
          state         <= sADDR;
          cmd_rst       <= 1'b1;
          byte_count    <= no_bytes;
          mm_if_busy_state <= 1'b1;
        end
      end
//------------------------------------------------------------------------------
//-- sADDR activate for writing address
//------------------------------------------------------------------------------

      sADDR: begin
        i2c_data_wr <= i2c_pointer;
        i2c_valid   <= 1'b1;
        i2c_addr    <= i2c_device_addr;
        i2c_rnw     <= rnw;
        if (!busy_s && i2c_busy) begin
          // wait for busy_s to be pulled
          state <= sWAIT_DATA;
        end
      end
      
      // sWAIT_DATA
      sWAIT_DATA: begin
        if (busy_s && !i2c_busy) begin
          // wait for busy_s to be pulled low sACK2 or sMACK
          if (!rnw) begin
            if (byte_count == 0) begin
              state <= sWAIT_STOP;
            end else begin
              state <= sWRITE_DATA;
            end
          end else begin
		    case (byte_count) 
				3'b000: read_reg[7:0]   <= i2c_data_rd;
				3'b001: read_reg[15:8]  <= i2c_data_rd;
				3'b010: read_reg[23:16] <= i2c_data_rd;
				3'b011: read_reg[31:24] <= i2c_data_rd;
				3'b100: read_reg[39:32] <= i2c_data_rd;
				3'b101: read_reg[47:40] <= i2c_data_rd;
				3'b110: read_reg[55:48] <= i2c_data_rd;
				3'b111: read_reg[63:56] <= i2c_data_rd;
			endcase
            // sample first data
            byte_count <= byte_count - 1;
            if (byte_count == 0) begin
              state <= sWAIT_STOP;
            end
          end
        end
      end
      
      // sWRITE_DATA
      sWRITE_DATA: begin
       // i2c_data_wr <= write_reg[(byte_count<<3-1) : (byte_count<<3-1)] ;
	    case (byte_count) 
				3'b000: i2c_data_wr <= write_reg[7:0] ; 
				3'b001: i2c_data_wr <= write_reg[15:8] ; 
				3'b010: i2c_data_wr <= write_reg[23:16] ; 
				3'b011: i2c_data_wr <= write_reg[31:24] ; 
			endcase
        if (!busy_s && i2c_busy) begin
          // busy_s just pulled high,cmd
          state      <= sWAIT_DATA;
          byte_count <= byte_count - 1;
        end
      end
      
      // sWAIT_STOP
      sWAIT_STOP: begin
        // end of transaction
        i2c_valid <= 1'b0;
        // wait for stop state to complete.
        if (busy_s && !i2c_busy) begin
          // busy_s just pulled low, stop
          // completed
          state <= sIDLE;
        end
      end
      
      default: begin
        state <= sIDLE;
      end
    endcase
  end
end
endmodule