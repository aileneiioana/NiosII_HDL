
Nios_ii_hal.elf:     file format elf32-littlenios2
Nios_ii_hal.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00011394 memsz 0x00011394 flags r-x
    LOAD off    0x000123b4 vaddr 0x000513b4 paddr 0x00052ea0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x0001498c vaddr 0x0005498c paddr 0x0005498c align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010d48  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000043c  00050f78  00050f78  00011f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000513b4  00052ea0  000123b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  0005498c  0005498c  0001498c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00054af8  00054af8  00013ea0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013ea0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fd8  00000000  00000000  00013ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000246df  00000000  00000000  00014ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000098ee  00000000  00000000  0003957f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bc91  00000000  00000000  00042e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002404  00000000  00000000  0004eb00  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d6e  00000000  00000000  00050f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018ce7  00000000  00000000  00054c72  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006d95c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a48  00000000  00000000  0006d9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007281a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0007281d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00072820  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00072821  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00072822  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00072826  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007282a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007282e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00072837  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00072840  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  00072849  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  00072855  2**0
                  CONTENTS, READONLY
 29 .jdi          00004a11  00000000  00000000  00072889  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004e3ac  00000000  00000000  0007729a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00050f78 l    d  .rodata	00000000 .rodata
000513b4 l    d  .rwdata	00000000 .rwdata
0005498c l    d  .bss	00000000 .bss
00054af8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Nios_ii_hal_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 adxl345.c
00000000 l    df *ABS*	00000000 hello_world.c
00040698 l     F .text	00000050 handle_interrupts
000406e8 l     F .text	0000006c init_interrupt_pio
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00051202 l     O .rodata	00000010 zeroes.4404
00043a18 l     F .text	000000bc __sbprintf
00051212 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00043c28 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00045780 l     F .text	00000008 __fp_unlock
00045794 l     F .text	0000019c __sinit.part.1
00045930 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000513b4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000517f8 l     O .rwdata	00000020 lc_ctype_charset
000517d8 l     O .rwdata	00000020 lc_message_charset
00051818 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00051244 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00048e04 l     F .text	000000fc __sprint_r.part.0
00051368 l     O .rodata	00000010 zeroes.4349
0004a440 l     F .text	000000bc __sbprintf
00051378 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0004e3fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004e510 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004e53c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0004e8d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004e9b8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004eaa4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004ec80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00052e94 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0004ef24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004f060 l     F .text	00000034 alt_dev_reg
00051e00 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004f354 l     F .text	0000020c altera_avalon_jtag_uart_irq
0004f560 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004fb98 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 i2c_avalon_mm_if.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00050180 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000503dc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0005053c l     F .text	0000003c alt_get_errno
00050578 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000549c4 g     O .bss	00000004 alt_instruction_exception_handler
00048448 g     F .text	00000074 _mprec_log10
00048534 g     F .text	0000008c __any_on
0004a9f4 g     F .text	00000054 _isatty_r
00051250 g     O .rodata	00000028 __mprec_tinytens
0004ebbc g     F .text	0000007c alt_main
000415b4 g     F .text	000000c0 _puts_r
000549f8 g     O .bss	00000100 alt_irq
0004aa48 g     F .text	00000060 _lseek_r
00052ea0 g       *ABS*	00000000 __flash_rwdata_start
0004ce38 g     F .text	00000088 .hidden __eqdf2
00054af8 g       *ABS*	00000000 __alt_heap_start
00041578 g     F .text	0000003c printf
0004ac60 g     F .text	0000009c _wcrtomb_r
00048cc4 g     F .text	0000005c __sseek
00045ae0 g     F .text	00000010 __sinit
0004ab08 g     F .text	00000140 __swbuf_r
000465b4 g     F .text	0000007c _setlocale_r
00045938 g     F .text	00000078 __sfmoreglue
0004ec5c g     F .text	00000024 __malloc_unlock
0004fd58 g     F .text	00000184 read_from_i2c_device
00040928 g     F .text	00000440 .hidden __divsf3
0004fc8c g     F .text	00000040 check_mm_if_busy
00047284 g     F .text	0000015c memmove
00045ac8 g     F .text	00000018 _cleanup
00047508 g     F .text	000000a8 _Balloc
0004cec0 g     F .text	000000dc .hidden __gtdf2
00050964 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00054994 g     O .bss	00000004 edge_capture
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004a998 g     F .text	0000005c _fstat_r
000549b0 g     O .bss	00000004 errno
00048c40 g     F .text	00000008 __seofread
000549bc g     O .bss	00000004 alt_argv
0005ae60 g       *ABS*	00000000 _gp
0004eef4 g     F .text	00000030 usleep
00051c80 g     O .rwdata	00000180 alt_fd_list
00050988 g     F .text	00000090 alt_find_dev
0004713c g     F .text	00000148 memcpy
00045788 g     F .text	0000000c _cleanup_r
0004e278 g     F .text	000000dc .hidden __floatsidf
000504c0 g     F .text	0000007c alt_io_redirect
0004cf9c g     F .text	000000f4 .hidden __ltdf2
00050f78 g       *ABS*	00000000 __DTOR_END__
00041674 g     F .text	00000014 puts
00050340 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00048b24 g     F .text	00000074 __fpclassifyd
000483a4 g     F .text	000000a4 __ratio
0004a424 g     F .text	0000001c __vfiprintf_internal
0004f758 g     F .text	0000021c altera_avalon_jtag_uart_read
00041548 g     F .text	00000030 _printf_r
0004bb00 g     F .text	00000064 .hidden __udivsi3
0004e90c g     F .text	000000ac isatty
000512a0 g     O .rodata	000000c8 __mprec_tens
00046630 g     F .text	0000000c __locale_charset
000549ac g     O .bss	00000004 __malloc_top_pad
00052e68 g     O .rwdata	00000004 __mb_cur_max
00046660 g     F .text	0000000c _localeconv_r
0004793c g     F .text	0000003c __i2b
00045f64 g     F .text	000004c8 __sfvwrite_r
00048b98 g     F .text	00000054 _sbrk_r
0004aaa8 g     F .text	00000060 _read_r
00052e88 g     O .rwdata	00000004 alt_max_fd
0004a68c g     F .text	000000f0 _fclose_r
000403e4 g     F .text	00000044 read_device_id
00045750 g     F .text	00000030 fflush
000549a8 g     O .bss	00000004 __malloc_max_sbrked_mem
000413ac g     F .text	00000110 .hidden __extendsfdf2
0004bbbc g     F .text	000008ac .hidden __adddf3
0004814c g     F .text	0000010c __b2d
0004b444 g     F .text	000005c4 .hidden __umoddi3
0004eae0 g     F .text	000000dc lseek
00052e60 g     O .rwdata	00000004 _global_impure_ptr
000485c0 g     F .text	00000564 _realloc_r
00054af8 g       *ABS*	00000000 __bss_end
0004e7e0 g     F .text	000000f0 alt_iic_isr_register
0005085c g     F .text	00000108 alt_tick
0004ae48 g     F .text	000005fc .hidden __udivdi3
0004a8f4 g     F .text	00000024 _fputwc_r
00051278 g     O .rodata	00000028 __mprec_bigtens
00047720 g     F .text	00000104 __s2b
0004e354 g     F .text	000000a8 .hidden __floatunsidf
00047e8c g     F .text	00000060 __mcmp
00045b00 g     F .text	00000018 __fp_lock_all
0004e794 g     F .text	0000004c alt_ic_irq_enabled
000507c0 g     F .text	0000009c alt_alarm_stop
000549b4 g     O .bss	00000004 alt_irq_active
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem
000400fc g     F .exceptions	000000d4 alt_irq_handler
00051c58 g     O .rwdata	00000028 alt_dev_null
00050160 g     F .text	00000020 alt_dcache_flush_all
00047824 g     F .text	00000068 __hi0bits
0004e1f8 g     F .text	00000080 .hidden __fixdfsi
00052ea0 g       *ABS*	00000000 __ram_rwdata_end
00052e80 g     O .rwdata	00000008 alt_dev_list
0004fccc g     F .text	0000008c write_to_i2c_device
0004ef60 g     F .text	00000100 write
000513b4 g       *ABS*	00000000 __ram_rodata_end
0004e578 g     F .text	000000b8 fstat
0004cf9c g     F .text	000000f4 .hidden __ledf2
00047c04 g     F .text	00000140 __pow5mult
00048f18 g     F .text	0000150c ___vfiprintf_internal_r
000549a0 g     O .bss	00000004 __nlocale_changed
0004bb64 g     F .text	00000058 .hidden __umodsi3
00054af8 g       *ABS*	00000000 end
0004f294 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00050f78 g       *ABS*	00000000 __CTOR_LIST__
00065800 g       *ABS*	00000000 __alt_stack_pointer
0004fc10 g     F .text	0000007c alt_avalon_timer_sc_init
000414bc g     F .text	00000064 .hidden __clzsi2
0004f974 g     F .text	00000224 altera_avalon_jtag_uart_write
00045af0 g     F .text	00000004 __sfp_lock_acquire
00047058 g     F .text	000000e4 memchr
00041720 g     F .text	000022dc ___vfprintf_internal_r
00045c54 g     F .text	00000310 _free_r
0004663c g     F .text	00000010 __locale_mb_cur_max
00050dc4 g     F .text	00000180 __call_exitprocs
0005499c g     O .bss	00000004 __mlocale_changed
00052e6c g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
000549c8 g     O .bss	00000004 _alt_tick_rate
00047d44 g     F .text	00000148 __lshift
000549cc g     O .bss	00000004 _alt_nticks
0004ecbc g     F .text	00000104 read
0004f0cc g     F .text	00000064 alt_sys_init
00041198 g     F .text	00000124 .hidden __floatsisf
00050cac g     F .text	00000118 __register_exitproc
00047978 g     F .text	0000028c __multiply
0004f600 g     F .text	00000068 altera_avalon_jtag_uart_close
00041520 g     F .text	00000028 .hidden __mulsi3
000513b4 g       *ABS*	00000000 __ram_rwdata_start
00050f78 g       *ABS*	00000000 __ram_rodata_start
000549d0 g     O .bss	00000028 __malloc_current_mallinfo
00048258 g     F .text	0000014c __d2b
0004026c g     F .text	00000178 config_device
0004f130 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00050b20 g     F .text	000000c4 alt_get_fd
00050008 g     F .text	00000158 alt_busy_sleep
0004a55c g     F .text	00000054 _close_r
00050c30 g     F .text	0000007c memcmp
0004f1f0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00054af8 g       *ABS*	00000000 __alt_stack_base
0004f240 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00043ad4 g     F .text	00000154 __swsetup_r
0004c468 g     F .text	000009d0 .hidden __divdf3
000459b0 g     F .text	00000118 __sfp
000484bc g     F .text	00000078 __copybits
00051850 g     O .rwdata	00000408 __malloc_av_
00045afc g     F .text	00000004 __sinit_lock_release
0004d090 g     F .text	0000086c .hidden __muldf3
00048bec g     F .text	00000054 __sread
00050a18 g     F .text	00000108 alt_find_file
000501bc g     F .text	000000a4 alt_dev_llist_insert
0004ec38 g     F .text	00000024 __malloc_lock
0004ee44 g     F .text	000000b0 sbrk
000456f4 g     F .text	0000005c _fflush_r
0004a5b0 g     F .text	000000dc _calloc_r
0005498c g       *ABS*	00000000 __bss_start
000473e0 g     F .text	00000128 memset
00040754 g     F .text	000001d4 main
000549c0 g     O .bss	00000004 alt_envp
000549a4 g     O .bss	00000004 __malloc_max_total_mem
0004f190 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004ac48 g     F .text	00000018 __swbuf
00048d20 g     F .text	00000008 __sclose
00065800 g       *ABS*	00000000 __alt_heap_limit
0004a77c g     F .text	00000014 fclose
00043e50 g     F .text	00001688 _dtoa_r
0004684c g     F .text	0000080c _malloc_r
0004adbc g     F .text	00000030 __ascii_wctomb
00040468 g     F .text	0000004c read_adxl345_reg
00052e8c g     O .rwdata	00000004 alt_errno
0004642c g     F .text	000000c4 _fwalk
0004ba08 g     F .text	00000084 .hidden __divsi3
00045b30 g     F .text	00000124 _malloc_trim_r
00050f78 g       *ABS*	00000000 __CTOR_END__
00040d68 g     F .text	00000430 .hidden __mulsf3
00048d28 g     F .text	000000dc strcmp
00050f78 g       *ABS*	00000000 __flash_rodata_start
00050f78 g       *ABS*	00000000 __DTOR_LIST__
0004ce38 g     F .text	00000088 .hidden __nedf2
0004f094 g     F .text	00000038 alt_irq_init
0004edc0 g     F .text	00000084 alt_release_fd
000510b9 g     O .rodata	00000100 .hidden __clz_tab
00054998 g     O .bss	00000004 _PathLocale
00050be4 g     F .text	00000014 atexit
0004a4fc g     F .text	00000060 _write_r
0004666c g     F .text	00000018 setlocale
00052e64 g     O .rwdata	00000004 _impure_ptr
000549b8 g     O .bss	00000004 alt_argc
000454d8 g     F .text	0000021c __sflush_r
000502c0 g     F .text	00000060 _do_dtors
00046658 g     F .text	00000008 __locale_cjk_lang
00040020 g       .exceptions	00000000 alt_irq_entry
000480e8 g     F .text	00000064 __ulp
00045b18 g     F .text	00000018 __fp_unlock_all
00052e78 g     O .rwdata	00000008 alt_fs_list
000404b4 g     F .text	000001e4 read_acceleration_data
00040020 g       *ABS*	00000000 __ram_exceptions_start
00046684 g     F .text	0000000c localeconv
0004e630 g     F .text	00000050 alt_ic_isr_register
00052ea0 g       *ABS*	00000000 _edata
00054af8 g       *ABS*	00000000 _end
0004a790 g     F .text	00000164 __fputwc
00040230 g       *ABS*	00000000 __ram_exceptions_end
0005498c g     O .bss	00000004 accel_range
0004f668 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00054990 g     O .bss	00000004 _range_accel
0004e708 g     F .text	0000008c alt_ic_irq_disable
00048c48 g     F .text	0000007c __swrite
00052e70 g     O .rwdata	00000004 __malloc_trim_threshold
0004664c g     F .text	0000000c __locale_msgcharset
00050bf8 g     F .text	00000038 exit
000464f0 g     F .text	000000c4 _fwalk_reent
000412bc g     F .text	000000f0 .hidden __floatunsisf
00047eec g     F .text	000001fc __mdiff
0004ba8c g     F .text	00000074 .hidden __modsi3
00065800 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00045af4 g     F .text	00000004 __sfp_lock_release
00050f44 g     F .text	00000034 _exit
0004fedc g     F .text	0000012c alt_alarm_start
00046690 g     F .text	000001bc __smakebuf_r
00041688 g     F .text	00000098 strlen
00040428 g     F .text	00000040 read_irq_reg
00050664 g     F .text	0000015c open
0004cec0 g     F .text	000000dc .hidden __gedf2
00052e74 g     O .rwdata	00000004 __wctomb
00048f00 g     F .text	00000018 __sprint_r
00050320 g     F .text	00000020 alt_icache_flush_all
00052e90 g     O .rwdata	00000004 alt_priority_mask
0004e680 g     F .text	00000088 alt_ic_irq_enable
000439fc g     F .text	0000001c __vfprintf_internal
0004adec g     F .text	0000005c _wctomb_r
0004d8fc g     F .text	000008fc .hidden __subdf3
0004788c g     F .text	000000b0 __lo0bits
00052e98 g     O .rwdata	00000008 alt_alarm_list
00050260 g     F .text	00000060 _do_ctors
0004acfc g     F .text	000000c0 wcrtomb
0004e438 g     F .text	000000d8 close
0004ea20 g     F .text	00000084 alt_load
0004a918 g     F .text	00000080 fputwc
00045af8 g     F .text	00000004 __sinit_lock_acquire
000475d8 g     F .text	00000148 __multadd
000475b0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10927e04 	addi	r2,r2,18936
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10927e04 	addi	r2,r2,18936
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffda92c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffda920>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a6d917 	ldw	r2,-25756(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a6d917 	ldw	r2,-25756(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	ded60014 	ori	sp,sp,22528
    movhi gp, %hi(_gp)
   40238:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   4023c:	d6ab9814 	ori	gp,gp,44640
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40244:	10926314 	ori	r2,r2,18828

    movhi r3, %hi(__bss_end)
   40248:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   4024c:	18d2be14 	ori	r3,r3,19192

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <__alt_data_end+0xfffdaa54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	004ea200 	call	4ea20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	004ebbc0 	call	4ebbc <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <__alt_data_end+0xfffdaa68>

0004026c <config_device>:
#include "adxl345.h"
#include "i2c_avalon_mm_if.h"


void config_device(adxl345_accel_range_t accel_range){
   4026c:	defffc04 	addi	sp,sp,-16
   40270:	dfc00315 	stw	ra,12(sp)
   40274:	df000215 	stw	fp,8(sp)
   40278:	df000204 	addi	fp,sp,8
   4027c:	e13fff15 	stw	r4,-4(fp)


    //Set device into measurement mode by making sure that the Measure bit is set to 1 in the
    //POWER_CTL register. Default value is 0xA, thus it is already on by default.
    write_to_i2c_device(ADXL345_ADDR,ADXL345_POWER_CTL_REG,1,0xA);
   40280:	01c00284 	movi	r7,10
   40284:	01800044 	movi	r6,1
   40288:	01400b44 	movi	r5,45
   4028c:	010014c4 	movi	r4,83
   40290:	004fccc0 	call	4fccc <write_to_i2c_device>

    //Set device data format
    _range_accel = accel_range;
   40294:	e13fff17 	ldw	r4,-4(fp)
   40298:	00412bc0 	call	412bc <__floatunsisf>
   4029c:	1007883a 	mov	r3,r2
   402a0:	d0e6cc15 	stw	r3,-25808(gp)

    // Set bit D3 to full resolution
    // Set INT_INVERT bit to 1 to activate active low interrupt
    // All other values are default 0

    alt_u8 set_accel_config =  0x20 | 0x8;
   402a4:	00800a04 	movi	r2,40
   402a8:	e0bffe05 	stb	r2,-8(fp)


    // Add settings for g-range
    switch(accel_range) {
   402ac:	e0bfff17 	ldw	r2,-4(fp)
   402b0:	10c00120 	cmpeqi	r3,r2,4
   402b4:	1800071e 	bne	r3,zero,402d4 <config_device+0x68>
   402b8:	10c00168 	cmpgeui	r3,r2,5
   402bc:	18001126 	beq	r3,zero,40304 <config_device+0x98>
   402c0:	10c00220 	cmpeqi	r3,r2,8
   402c4:	1800071e 	bne	r3,zero,402e4 <config_device+0x78>
   402c8:	10800420 	cmpeqi	r2,r2,16
   402cc:	1000091e 	bne	r2,zero,402f4 <config_device+0x88>
   402d0:	00000d06 	br	40308 <config_device+0x9c>
    case (ACCEL_RANGE_2G):
        set_accel_config = set_accel_config | (0b00);
        break;
    case (ACCEL_RANGE_4G):
        set_accel_config= set_accel_config | (0b01);
   402d4:	e0bffe03 	ldbu	r2,-8(fp)
   402d8:	10800054 	ori	r2,r2,1
   402dc:	e0bffe05 	stb	r2,-8(fp)
        break;
   402e0:	00000906 	br	40308 <config_device+0x9c>
    case (ACCEL_RANGE_8G):
        set_accel_config= set_accel_config | (0b10);
   402e4:	e0bffe03 	ldbu	r2,-8(fp)
   402e8:	10800094 	ori	r2,r2,2
   402ec:	e0bffe05 	stb	r2,-8(fp)
        break;
   402f0:	00000506 	br	40308 <config_device+0x9c>
    case (ACCEL_RANGE_16G):
        set_accel_config= set_accel_config | (0b11);
   402f4:	e0bffe03 	ldbu	r2,-8(fp)
   402f8:	108000d4 	ori	r2,r2,3
   402fc:	e0bffe05 	stb	r2,-8(fp)
        break;
   40300:	00000106 	br	40308 <config_device+0x9c>

    // Add settings for g-range
    switch(accel_range) {
    case (ACCEL_RANGE_2G):
        set_accel_config = set_accel_config | (0b00);
        break;
   40304:	0001883a 	nop




    //Data format register
    write_to_i2c_device(ADXL345_ADDR,ADXL345_DATA_FORMAT_REG,1,set_accel_config);
   40308:	e0bffe03 	ldbu	r2,-8(fp)
   4030c:	100f883a 	mov	r7,r2
   40310:	01800044 	movi	r6,1
   40314:	01400c44 	movi	r5,49
   40318:	010014c4 	movi	r4,83
   4031c:	004fccc0 	call	4fccc <write_to_i2c_device>
    printf("Configuring ADXL345\n");
   40320:	01000174 	movhi	r4,5
   40324:	2103de04 	addi	r4,r4,3960
   40328:	00416740 	call	41674 <puts>

    //Disable FIFO, STREAM and Trigger mode. Not necessary as default is 0x0.
    write_to_i2c_device(ADXL345_ADDR,ADXL345_FIFO_CTL_REG,1,0x00);
   4032c:	000f883a 	mov	r7,zero
   40330:	01800044 	movi	r6,1
   40334:	01400e04 	movi	r5,56
   40338:	010014c4 	movi	r4,83
   4033c:	004fccc0 	call	4fccc <write_to_i2c_device>

    //set tap thresholds
    // The THRESH_TAP register is eight bits and holds the threshold value for tap interrupts. The data format is unsigned, therefore, the magnitude of the tap event is compared with the value in THRESH_TAP for normal tap detection. The scale factor is 62.5 mg/LSB (that is, 0xFF = 16 g). A value of 0 may result in undesirable behavior if single tap/double tap interrupts are enabled.
    write_to_i2c_device(ADXL345_ADDR,ADXL345_THRESH_TAP_REG,1,0x20); //1000 mg
   40340:	01c00804 	movi	r7,32
   40344:	01800044 	movi	r6,1
   40348:	01400744 	movi	r5,29
   4034c:	010014c4 	movi	r4,83
   40350:	004fccc0 	call	4fccc <write_to_i2c_device>
    //The DUR register is eight bits and contains an unsigned time value representing the maximum time that an event must be above the THRESH_TAP threshold to qualify as a tap event. The scale factor is 625 μs/LSB. A value of 0 disables the single tap/ double tap functions.
    write_to_i2c_device(ADXL345_ADDR,ADXL345_DUR_REG,1,0x40); // < 30 ms
   40354:	01c01004 	movi	r7,64
   40358:	01800044 	movi	r6,1
   4035c:	01400844 	movi	r5,33
   40360:	010014c4 	movi	r4,83
   40364:	004fccc0 	call	4fccc <write_to_i2c_device>
    //The latent register is eight bits and contains an unsigned time value representing the wait time from the detection of a tap event to the start of the time window (defined by the window register) during which a possible second tap event can be detected. The scale factor is 1.25 ms/LSB. A value of 0 disables the double tap function.
    write_to_i2c_device(ADXL345_ADDR,ADXL345_LATENT_REG,1,0x60); //40 ms
   40368:	01c01804 	movi	r7,96
   4036c:	01800044 	movi	r6,1
   40370:	01400884 	movi	r5,34
   40374:	010014c4 	movi	r4,83
   40378:	004fccc0 	call	4fccc <write_to_i2c_device>
    //The window register is eight bits and contains an unsigned time value representing the amount of time after the expiration of the latency time (determined by the latent register) during which a second valid tap can begin. The scale factor is 1.25 ms/LSB. A value of 0 disables the double tap function
    write_to_i2c_device(ADXL345_ADDR,ADXL345_WINDOW_REG,1,0xFF); //38.75 ms
   4037c:	01c03fc4 	movi	r7,255
   40380:	01800044 	movi	r6,1
   40384:	014008c4 	movi	r5,35
   40388:	010014c4 	movi	r4,83
   4038c:	004fccc0 	call	4fccc <write_to_i2c_device>


    //Initialize interrupts to be used
    write_to_i2c_device(ADXL345_ADDR,ADXL345_INT_MAP_REG,1,0x20); // map double tap to int2 pin and data ready to int1 pin
   40390:	01c00804 	movi	r7,32
   40394:	01800044 	movi	r6,1
   40398:	01400bc4 	movi	r5,47
   4039c:	010014c4 	movi	r4,83
   403a0:	004fccc0 	call	4fccc <write_to_i2c_device>
    write_to_i2c_device(ADXL345_ADDR,ADXL345_TAP_AXES_REG,1,0x01); // z-axis only
   403a4:	01c00044 	movi	r7,1
   403a8:	01800044 	movi	r6,1
   403ac:	01400a84 	movi	r5,42
   403b0:	010014c4 	movi	r4,83
   403b4:	004fccc0 	call	4fccc <write_to_i2c_device>
    write_to_i2c_device(ADXL345_ADDR,ADXL345_INT_ENABLE_REG,1,0xa0); // Enable data ready and double tap
   403b8:	01c02804 	movi	r7,160
   403bc:	01800044 	movi	r6,1
   403c0:	01400b84 	movi	r5,46
   403c4:	010014c4 	movi	r4,83
   403c8:	004fccc0 	call	4fccc <write_to_i2c_device>

}
   403cc:	0001883a 	nop
   403d0:	e037883a 	mov	sp,fp
   403d4:	dfc00117 	ldw	ra,4(sp)
   403d8:	df000017 	ldw	fp,0(sp)
   403dc:	dec00204 	addi	sp,sp,8
   403e0:	f800283a 	ret

000403e4 <read_device_id>:

alt_u8 read_device_id(void){
   403e4:	defffc04 	addi	sp,sp,-16
   403e8:	dfc00315 	stw	ra,12(sp)
   403ec:	df000215 	stw	fp,8(sp)
   403f0:	df000204 	addi	fp,sp,8

    alt_u8 data[8] = {0};
   403f4:	e03ffe15 	stw	zero,-8(fp)
   403f8:	e03fff15 	stw	zero,-4(fp)
    read_from_i2c_device(ADXL345_ADDR,ADXL345_DEV_ID_REG,1,&data[0]);
   403fc:	e1fffe04 	addi	r7,fp,-8
   40400:	01800044 	movi	r6,1
   40404:	000b883a 	mov	r5,zero
   40408:	010014c4 	movi	r4,83
   4040c:	004fd580 	call	4fd58 <read_from_i2c_device>

    return ((alt_u8) data[0]) & 0xff;
   40410:	e0bffe03 	ldbu	r2,-8(fp)
}
   40414:	e037883a 	mov	sp,fp
   40418:	dfc00117 	ldw	ra,4(sp)
   4041c:	df000017 	ldw	fp,0(sp)
   40420:	dec00204 	addi	sp,sp,8
   40424:	f800283a 	ret

00040428 <read_irq_reg>:


alt_u8 read_irq_reg(void){
   40428:	defffd04 	addi	sp,sp,-12
   4042c:	dfc00215 	stw	ra,8(sp)
   40430:	df000115 	stw	fp,4(sp)
   40434:	df000104 	addi	fp,sp,4
    alt_u8 data = 0;
   40438:	e03fff05 	stb	zero,-4(fp)
    read_from_i2c_device(ADXL345_ADDR,ADXL345_INT_SOURCE_REG,1,&data);
   4043c:	e1ffff04 	addi	r7,fp,-4
   40440:	01800044 	movi	r6,1
   40444:	01400c04 	movi	r5,48
   40448:	010014c4 	movi	r4,83
   4044c:	004fd580 	call	4fd58 <read_from_i2c_device>
    //printf("IRQREG: 0x%x\n",data);
    return data;
   40450:	e0bfff03 	ldbu	r2,-4(fp)
}
   40454:	e037883a 	mov	sp,fp
   40458:	dfc00117 	ldw	ra,4(sp)
   4045c:	df000017 	ldw	fp,0(sp)
   40460:	dec00204 	addi	sp,sp,8
   40464:	f800283a 	ret

00040468 <read_adxl345_reg>:

alt_u8 read_adxl345_reg(int reg_addr){
   40468:	defffc04 	addi	sp,sp,-16
   4046c:	dfc00315 	stw	ra,12(sp)
   40470:	df000215 	stw	fp,8(sp)
   40474:	df000204 	addi	fp,sp,8
   40478:	e13fff15 	stw	r4,-4(fp)
    alt_u8 data = 0;
   4047c:	e03ffe05 	stb	zero,-8(fp)
    read_from_i2c_device(ADXL345_ADDR,reg_addr,1,&data);
   40480:	e0bfff17 	ldw	r2,-4(fp)
   40484:	10803fcc 	andi	r2,r2,255
   40488:	e1fffe04 	addi	r7,fp,-8
   4048c:	01800044 	movi	r6,1
   40490:	100b883a 	mov	r5,r2
   40494:	010014c4 	movi	r4,83
   40498:	004fd580 	call	4fd58 <read_from_i2c_device>
    //printf("IRQREG: 0x%x\n",data);
    return data;
   4049c:	e0bffe03 	ldbu	r2,-8(fp)
}
   404a0:	e037883a 	mov	sp,fp
   404a4:	dfc00117 	ldw	ra,4(sp)
   404a8:	df000017 	ldw	fp,0(sp)
   404ac:	dec00204 	addi	sp,sp,8
   404b0:	f800283a 	ret

000404b4 <read_acceleration_data>:


adxl345_data_t read_acceleration_data(){
   404b4:	defff204 	addi	sp,sp,-56
   404b8:	dfc00d15 	stw	ra,52(sp)
   404bc:	df000c15 	stw	fp,48(sp)
   404c0:	df000c04 	addi	fp,sp,48
   404c4:	e13fff15 	stw	r4,-4(fp)


    alt_u16 ax = 0, ay = 0, az = 0;
   404c8:	e03ff50d 	sth	zero,-44(fp)
   404cc:	e03ff58d 	sth	zero,-42(fp)
   404d0:	e03ff60d 	sth	zero,-40(fp)
    float value = 0;
   404d4:	e03ff715 	stw	zero,-36(fp)
    adxl345_data_t accel_data;
    alt_u8 data[8] = {0};
   404d8:	e03ffd15 	stw	zero,-12(fp)
   404dc:	e03ffe15 	stw	zero,-8(fp)
    alt_u8 no_bytes =6;
   404e0:	00800184 	movi	r2,6
   404e4:	e0bff805 	stb	r2,-32(fp)
    read_from_i2c_device(ADXL345_ADDR,ADXL345_DATAX0_REG,no_bytes,&data[0]);
   404e8:	e0bff803 	ldbu	r2,-32(fp)
   404ec:	e0fffd04 	addi	r3,fp,-12
   404f0:	180f883a 	mov	r7,r3
   404f4:	100d883a 	mov	r6,r2
   404f8:	01400c84 	movi	r5,50
   404fc:	010014c4 	movi	r4,83
   40500:	004fd580 	call	4fd58 <read_from_i2c_device>
    read_from_i2c_device(ADXL345_ADDR,ADXL345_DATAY1_REG,1,&data[3]);
    read_from_i2c_device(ADXL345_ADDR,ADXL345_DATAZ0_REG,1,&data[4]);
    read_from_i2c_device(ADXL345_ADDR,ADXL345_DATAZ1_REG,1,&data[5]);
*/

    ax = data[1] << 8 | data[0];
   40504:	e0bffd43 	ldbu	r2,-11(fp)
   40508:	10803fcc 	andi	r2,r2,255
   4050c:	1004923a 	slli	r2,r2,8
   40510:	1007883a 	mov	r3,r2
   40514:	e0bffd03 	ldbu	r2,-12(fp)
   40518:	10803fcc 	andi	r2,r2,255
   4051c:	1884b03a 	or	r2,r3,r2
   40520:	e0bff50d 	sth	r2,-44(fp)
    ay = data[3] << 8 | data[2];
   40524:	e0bffdc3 	ldbu	r2,-9(fp)
   40528:	10803fcc 	andi	r2,r2,255
   4052c:	1004923a 	slli	r2,r2,8
   40530:	1007883a 	mov	r3,r2
   40534:	e0bffd83 	ldbu	r2,-10(fp)
   40538:	10803fcc 	andi	r2,r2,255
   4053c:	1884b03a 	or	r2,r3,r2
   40540:	e0bff58d 	sth	r2,-42(fp)
    az = data[5] << 8 | data[4];
   40544:	e0bffe43 	ldbu	r2,-7(fp)
   40548:	10803fcc 	andi	r2,r2,255
   4054c:	1004923a 	slli	r2,r2,8
   40550:	1007883a 	mov	r3,r2
   40554:	e0bffe03 	ldbu	r2,-8(fp)
   40558:	10803fcc 	andi	r2,r2,255
   4055c:	1884b03a 	or	r2,r3,r2
   40560:	e0bff60d 	sth	r2,-40(fp)


    read_from_i2c_device(ADXL345_ADDR,ADXL345_DATA_FORMAT_REG,1,&data[0]);
   40564:	e0bffd04 	addi	r2,fp,-12
   40568:	100f883a 	mov	r7,r2
   4056c:	01800044 	movi	r6,1
   40570:	01400c44 	movi	r5,49
   40574:	010014c4 	movi	r4,83
   40578:	004fd580 	call	4fd58 <read_from_i2c_device>

    int full_res_bit = (data[0] >> 3 ) & 0x1;
   4057c:	e0bffd03 	ldbu	r2,-12(fp)
   40580:	10803fcc 	andi	r2,r2,255
   40584:	1004d0fa 	srli	r2,r2,3
   40588:	10803fcc 	andi	r2,r2,255
   4058c:	1080004c 	andi	r2,r2,1
   40590:	e0bff915 	stw	r2,-28(fp)


    float resolution = (float) _range_accel / 512.0;
   40594:	d0a6cc17 	ldw	r2,-25808(gp)
   40598:	01510034 	movhi	r5,17408
   4059c:	1009883a 	mov	r4,r2
   405a0:	00409280 	call	40928 <__divsf3>
   405a4:	1007883a 	mov	r3,r2
   405a8:	e0fff415 	stw	r3,-48(fp)

    if (full_res_bit) {
   405ac:	e0bff917 	ldw	r2,-28(fp)
   405b0:	10000226 	beq	r2,zero,405bc <read_acceleration_data+0x108>
        resolution  = (float) 2/512;
   405b4:	008ee034 	movhi	r2,15232
   405b8:	e0bff415 	stw	r2,-48(fp)
    }



    value = (alt_16)ax;
   405bc:	e0bff50b 	ldhu	r2,-44(fp)
   405c0:	10bfffcc 	andi	r2,r2,65535
   405c4:	10a0001c 	xori	r2,r2,32768
   405c8:	10a00004 	addi	r2,r2,-32768
   405cc:	1009883a 	mov	r4,r2
   405d0:	00411980 	call	41198 <__floatsisf>
   405d4:	1007883a 	mov	r3,r2
   405d8:	e0fff715 	stw	r3,-36(fp)
    //accel_raw_data.x = ax;
    accel_data.x = value * resolution;
   405dc:	e17ff417 	ldw	r5,-48(fp)
   405e0:	e13ff717 	ldw	r4,-36(fp)
   405e4:	0040d680 	call	40d68 <__mulsf3>
   405e8:	1007883a 	mov	r3,r2
   405ec:	1805883a 	mov	r2,r3
   405f0:	e0bffa15 	stw	r2,-24(fp)

    value = (alt_16)ay;
   405f4:	e0bff58b 	ldhu	r2,-42(fp)
   405f8:	10bfffcc 	andi	r2,r2,65535
   405fc:	10a0001c 	xori	r2,r2,32768
   40600:	10a00004 	addi	r2,r2,-32768
   40604:	1009883a 	mov	r4,r2
   40608:	00411980 	call	41198 <__floatsisf>
   4060c:	1007883a 	mov	r3,r2
   40610:	e0fff715 	stw	r3,-36(fp)
    //accel_raw_data.y = ay;
    accel_data.y = value * resolution;
   40614:	e17ff417 	ldw	r5,-48(fp)
   40618:	e13ff717 	ldw	r4,-36(fp)
   4061c:	0040d680 	call	40d68 <__mulsf3>
   40620:	1007883a 	mov	r3,r2
   40624:	1805883a 	mov	r2,r3
   40628:	e0bffb15 	stw	r2,-20(fp)

    value = (alt_16)az;
   4062c:	e0bff60b 	ldhu	r2,-40(fp)
   40630:	10bfffcc 	andi	r2,r2,65535
   40634:	10a0001c 	xori	r2,r2,32768
   40638:	10a00004 	addi	r2,r2,-32768
   4063c:	1009883a 	mov	r4,r2
   40640:	00411980 	call	41198 <__floatsisf>
   40644:	1007883a 	mov	r3,r2
   40648:	e0fff715 	stw	r3,-36(fp)
    //accel_raw_data.z = az;   //accRange * value / 32768;
    accel_data.z = value * resolution;
   4064c:	e17ff417 	ldw	r5,-48(fp)
   40650:	e13ff717 	ldw	r4,-36(fp)
   40654:	0040d680 	call	40d68 <__mulsf3>
   40658:	1007883a 	mov	r3,r2
   4065c:	1805883a 	mov	r2,r3
   40660:	e0bffc15 	stw	r2,-16(fp)

    return accel_data;
   40664:	e0bfff17 	ldw	r2,-4(fp)
   40668:	e0fffa17 	ldw	r3,-24(fp)
   4066c:	10c00015 	stw	r3,0(r2)
   40670:	e0fffb17 	ldw	r3,-20(fp)
   40674:	10c00115 	stw	r3,4(r2)
   40678:	e0fffc17 	ldw	r3,-16(fp)
   4067c:	10c00215 	stw	r3,8(r2)

}
   40680:	e0bfff17 	ldw	r2,-4(fp)
   40684:	e037883a 	mov	sp,fp
   40688:	dfc00117 	ldw	ra,4(sp)
   4068c:	df000017 	ldw	fp,0(sp)
   40690:	dec00204 	addi	sp,sp,8
   40694:	f800283a 	ret

00040698 <handle_interrupts>:


/* This is the ISR which will be called when the system signals an interrupt. */

static void handle_interrupts(void* context)
{
   40698:	defffd04 	addi	sp,sp,-12
   4069c:	df000215 	stw	fp,8(sp)
   406a0:	df000204 	addi	fp,sp,8
   406a4:	e13fff15 	stw	r4,-4(fp)
	//Cast context to edge_capture's type
	//Volatile to avoid compiler optimization
  //this will point to the edge_capture variable.
	volatile int* edge_capture_ptr = (volatile int*) context;
   406a8:	e0bfff17 	ldw	r2,-4(fp)
   406ac:	e0bffe15 	stw	r2,-8(fp)

	//Read the edge capture register on the PIO and store the value
  //The value will be stored in the edge_capture variable and accessible
  //from other parts of the code.
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(INTERRUPT_PIO_BASE);
   406b0:	00800234 	movhi	r2,8
   406b4:	10840b04 	addi	r2,r2,4140
   406b8:	10c00037 	ldwio	r3,0(r2)
   406bc:	e0bffe17 	ldw	r2,-8(fp)
   406c0:	10c00015 	stw	r3,0(r2)

	//Write to edge capture register to reset it
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INTERRUPT_PIO_BASE,0);
   406c4:	0007883a 	mov	r3,zero
   406c8:	00800234 	movhi	r2,8
   406cc:	10840b04 	addi	r2,r2,4140
   406d0:	10c00035 	stwio	r3,0(r2)
}
   406d4:	0001883a 	nop
   406d8:	e037883a 	mov	sp,fp
   406dc:	df000017 	ldw	fp,0(sp)
   406e0:	dec00104 	addi	sp,sp,4
   406e4:	f800283a 	ret

000406e8 <init_interrupt_pio>:


/* This function is used to initializes and registers the interrupt handler. */
static void init_interrupt_pio()
{
   406e8:	defffc04 	addi	sp,sp,-16
   406ec:	dfc00315 	stw	ra,12(sp)
   406f0:	df000215 	stw	fp,8(sp)
   406f4:	df000204 	addi	fp,sp,8
	//Recast the edge_capture point to match the
	//alt_irq_register() function prototypo
	void* edge_capture_ptr = (void*)&edge_capture;
   406f8:	d0a6cd04 	addi	r2,gp,-25804
   406fc:	e0bfff15 	stw	r2,-4(fp)

	//Enable all 3 interrupt inputs by writing a one to the corresponding interruptmask bit locations
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INTERRUPT_PIO_BASE,0x7);
   40700:	00c001c4 	movi	r3,7
   40704:	00800234 	movhi	r2,8
   40708:	10840a04 	addi	r2,r2,4136
   4070c:	10c00035 	stwio	r3,0(r2)

	//Reset the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INTERRUPT_PIO_BASE,0);
   40710:	0007883a 	mov	r3,zero
   40714:	00800234 	movhi	r2,8
   40718:	10840b04 	addi	r2,r2,4140
   4071c:	10c00035 	stwio	r3,0(r2)

	//Register the interrupt handler in the system
  //The ID and PIO_IRQ number is available from the system.h file.
	alt_ic_isr_register(INTERRUPT_PIO_IRQ_INTERRUPT_CONTROLLER_ID,
   40720:	d8000015 	stw	zero,0(sp)
   40724:	e1ffff17 	ldw	r7,-4(fp)
   40728:	01800134 	movhi	r6,4
   4072c:	3181a604 	addi	r6,r6,1688
   40730:	01400144 	movi	r5,5
   40734:	0009883a 	mov	r4,zero
   40738:	004e6300 	call	4e630 <alt_ic_isr_register>
			INTERRUPT_PIO_IRQ, handle_interrupts, edge_capture_ptr, 0x0);
}
   4073c:	0001883a 	nop
   40740:	e037883a 	mov	sp,fp
   40744:	dfc00117 	ldw	ra,4(sp)
   40748:	df000017 	ldw	fp,0(sp)
   4074c:	dec00204 	addi	sp,sp,8
   40750:	f800283a 	ret

00040754 <main>:
int main(void)
{
   40754:	deffef04 	addi	sp,sp,-68
   40758:	dfc01015 	stw	ra,64(sp)
   4075c:	df000f15 	stw	fp,60(sp)
   40760:	dcc00e15 	stw	r19,56(sp)
   40764:	dc800d15 	stw	r18,52(sp)
   40768:	dc400c15 	stw	r17,48(sp)
   4076c:	dc000b15 	stw	r16,44(sp)
   40770:	df000f04 	addi	fp,sp,60
  //-----------------------------------
  // Hentet fra fasit

    alt_u8 dev_id =  0;
   40774:	e03ff445 	stb	zero,-47(fp)
    adxl345_data_t accel_data;

    alt_u8 adxl345_int_reg;
//-----------------------------------
  //Initialize the interrupts
	init_interrupt_pio();
   40778:	00406e80 	call	406e8 <init_interrupt_pio>

  //Variable to hold values from switches
	int sw_data = 0;
   4077c:	e03ff515 	stw	zero,-44(fp)
	printf("Hello from Nios II!\n");
   40780:	01000174 	movhi	r4,5
   40784:	2103e304 	addi	r4,r4,3980
   40788:	00416740 	call	41674 <puts>

//-------------------------------------
// Hentet fra fasit
    dev_id = read_device_id();
   4078c:	00403e40 	call	403e4 <read_device_id>
   40790:	e0bff445 	stb	r2,-47(fp)
    if(dev_id != ADXL345_DEV_ID){
   40794:	e0bff443 	ldbu	r2,-47(fp)
   40798:	10803960 	cmpeqi	r2,r2,229
   4079c:	1000081e 	bne	r2,zero,407c0 <main+0x6c>
      printf("Wrong device ID: 0x%x!\n",dev_id);
   407a0:	e0bff443 	ldbu	r2,-47(fp)
   407a4:	100b883a 	mov	r5,r2
   407a8:	01000174 	movhi	r4,5
   407ac:	2103e804 	addi	r4,r4,4000
   407b0:	00415780 	call	41578 <printf>
      usleep(5000000); //Wait for 5 seconds
   407b4:	01001334 	movhi	r4,76
   407b8:	2112d004 	addi	r4,r4,19264
   407bc:	004eef40 	call	4eef4 <usleep>
    }
    config_device(ACCEL_RANGE_8G);
   407c0:	01000204 	movi	r4,8
   407c4:	004026c0 	call	4026c <config_device>

    //Variable to hold values from switches

    //alt_u64 adxl345_data = 0;
    accel_data = read_acceleration_data();
   407c8:	e0bff604 	addi	r2,fp,-40
   407cc:	1009883a 	mov	r4,r2
   407d0:	00404b40 	call	404b4 <read_acceleration_data>


	while(1){

    //use the IORD and IOWR functions to read and write from LEDs and SW
		sw_data = IORD(SW_PIO_BASE,0);
   407d4:	00800234 	movhi	r2,8
   407d8:	10841004 	addi	r2,r2,4160
   407dc:	10800037 	ldwio	r2,0(r2)
   407e0:	e0bff515 	stw	r2,-44(fp)
	  IOWR(LED_PIO_BASE,0,sw_data);
   407e4:	00800234 	movhi	r2,8
   407e8:	10840c04 	addi	r2,r2,4144
   407ec:	e0fff517 	ldw	r3,-44(fp)
   407f0:	10c00035 	stwio	r3,0(r2)

    //When an interrupt event has occurred, the edge_capture variable has been updated

	  if (edge_capture == 0x1) //bit position 0 corresponds to button press
   407f4:	d0a6cd17 	ldw	r2,-25804(gp)
   407f8:	10800058 	cmpnei	r2,r2,1
   407fc:	1000051e 	bne	r2,zero,40814 <main+0xc0>
	  	  {
		   printf("Hi from interrupt routine, Key1 was pressed!\n");
   40800:	01000174 	movhi	r4,5
   40804:	2103ee04 	addi	r4,r4,4024
   40808:	00416740 	call	41674 <puts>
		   edge_capture = 0; // reset variable to "unregister" event
   4080c:	d026cd15 	stw	zero,-25804(gp)
   40810:	003ff006 	br	407d4 <__alt_data_end+0xfffdafd4>
	  	  }
	  else if (edge_capture == 0x2)      // bit position 1 corresponds to ADXL345 IRQ 0, set to DATA_READY from ADXL345, that is print only when a convertion has produced data.
   40814:	d0a6cd17 	ldw	r2,-25804(gp)
   40818:	10800098 	cmpnei	r2,r2,2
   4081c:	1000231e 	bne	r2,zero,408ac <main+0x158>
        {
            //printf("Hi from interrupt routine, ADXL345 IRQ 0 activated, ADXL345_INT_SOURCE_REG: 0x%x!\n",adxl345_int_reg);
            accel_data = read_acceleration_data(); // Reading data registers will clear data related interrupts
   40820:	e0bff904 	addi	r2,fp,-28
   40824:	1009883a 	mov	r4,r2
   40828:	00404b40 	call	404b4 <read_acceleration_data>
   4082c:	e0bff917 	ldw	r2,-28(fp)
   40830:	e0bff615 	stw	r2,-40(fp)
   40834:	e0bffa17 	ldw	r2,-24(fp)
   40838:	e0bff715 	stw	r2,-36(fp)
   4083c:	e0bffb17 	ldw	r2,-20(fp)
   40840:	e0bff815 	stw	r2,-32(fp)
            edge_capture = 0;                     // reset variable to "unregister" event
   40844:	d026cd15 	stw	zero,-25804(gp)
            printf("ax: %-.5f, ay: %-.5f, az: %-.5f\n",accel_data.x,accel_data.y,accel_data.z);
   40848:	e0bff617 	ldw	r2,-40(fp)
   4084c:	1009883a 	mov	r4,r2
   40850:	00413ac0 	call	413ac <__extendsfdf2>
   40854:	1025883a 	mov	r18,r2
   40858:	1827883a 	mov	r19,r3
   4085c:	e0bff717 	ldw	r2,-36(fp)
   40860:	1009883a 	mov	r4,r2
   40864:	00413ac0 	call	413ac <__extendsfdf2>
   40868:	1021883a 	mov	r16,r2
   4086c:	1823883a 	mov	r17,r3
   40870:	e0bff817 	ldw	r2,-32(fp)
   40874:	1009883a 	mov	r4,r2
   40878:	00413ac0 	call	413ac <__extendsfdf2>
   4087c:	1009883a 	mov	r4,r2
   40880:	180b883a 	mov	r5,r3
   40884:	d9000115 	stw	r4,4(sp)
   40888:	d9400215 	stw	r5,8(sp)
   4088c:	dc400015 	stw	r17,0(sp)
   40890:	800f883a 	mov	r7,r16
   40894:	900b883a 	mov	r5,r18
   40898:	980d883a 	mov	r6,r19
   4089c:	01000174 	movhi	r4,5
   408a0:	2103fa04 	addi	r4,r4,4072
   408a4:	00415780 	call	41578 <printf>
   408a8:	003fca06 	br	407d4 <__alt_data_end+0xfffdafd4>

        }
    else if (edge_capture == 0x4)                 // bit position 2 corresponds to ADXL345 IRQ 1
   408ac:	d0a6cd17 	ldw	r2,-25804(gp)
   408b0:	10800118 	cmpnei	r2,r2,4
   408b4:	1000091e 	bne	r2,zero,408dc <main+0x188>
        {
            adxl345_int_reg = read_irq_reg();  //Read ADXL345 INT SOURCE register to clear interrupt
   408b8:	00404280 	call	40428 <read_irq_reg>
   408bc:	e0bff405 	stb	r2,-48(fp)
            printf("Hi from interrupt routine, ADXL345 IRQ 1 activated, ADXL345_INT_SOURCE_REG: 0x%x!\n",adxl345_int_reg);
   408c0:	e0bff403 	ldbu	r2,-48(fp)
   408c4:	100b883a 	mov	r5,r2
   408c8:	01000174 	movhi	r4,5
   408cc:	21040304 	addi	r4,r4,4108
   408d0:	00415780 	call	41578 <printf>
            edge_capture = 0;                     // reset variable to "unregister" event
   408d4:	d026cd15 	stw	zero,-25804(gp)
   408d8:	003fbe06 	br	407d4 <__alt_data_end+0xfffdafd4>
        } 
    else if (edge_capture == 6)
   408dc:	d0a6cd17 	ldw	r2,-25804(gp)
   408e0:	10800198 	cmpnei	r2,r2,6
   408e4:	103fbb1e 	bne	r2,zero,407d4 <__alt_data_end+0xfffdafd4>
        {
          accel_data = read_acceleration_data(); // Reading data registers will clear data related interrupts
   408e8:	e0bff904 	addi	r2,fp,-28
   408ec:	1009883a 	mov	r4,r2
   408f0:	00404b40 	call	404b4 <read_acceleration_data>
   408f4:	e0bff917 	ldw	r2,-28(fp)
   408f8:	e0bff615 	stw	r2,-40(fp)
   408fc:	e0bffa17 	ldw	r2,-24(fp)
   40900:	e0bff715 	stw	r2,-36(fp)
   40904:	e0bffb17 	ldw	r2,-20(fp)
   40908:	e0bff815 	stw	r2,-32(fp)
          printf("Hi from interrupt routine, ADXL345 IRQ 1 and 0 activated, ADXL345_INT_SOURCE_REG: 0x%x!\n",adxl345_int_reg);
   4090c:	e0bff403 	ldbu	r2,-48(fp)
   40910:	100b883a 	mov	r5,r2
   40914:	01000174 	movhi	r4,5
   40918:	21041804 	addi	r4,r4,4192
   4091c:	00415780 	call	41578 <printf>
          edge_capture = 0;
   40920:	d026cd15 	stw	zero,-25804(gp)
        }
  }
   40924:	003fab06 	br	407d4 <__alt_data_end+0xfffdafd4>

00040928 <__divsf3>:
   40928:	defff504 	addi	sp,sp,-44
   4092c:	200cd5fa 	srli	r6,r4,23
   40930:	dcc00415 	stw	r19,16(sp)
   40934:	2026d7fa 	srli	r19,r4,31
   40938:	00c02034 	movhi	r3,128
   4093c:	dd800715 	stw	r22,28(sp)
   40940:	dd000515 	stw	r20,20(sp)
   40944:	dc800315 	stw	r18,12(sp)
   40948:	18ffffc4 	addi	r3,r3,-1
   4094c:	dfc00a15 	stw	ra,40(sp)
   40950:	df000915 	stw	fp,36(sp)
   40954:	ddc00815 	stw	r23,32(sp)
   40958:	dd400615 	stw	r21,24(sp)
   4095c:	dc400215 	stw	r17,8(sp)
   40960:	dc000115 	stw	r16,4(sp)
   40964:	35003fcc 	andi	r20,r6,255
   40968:	1924703a 	and	r18,r3,r4
   4096c:	9d803fcc 	andi	r22,r19,255
   40970:	a0005226 	beq	r20,zero,40abc <__divsf3+0x194>
   40974:	00803fc4 	movi	r2,255
   40978:	a0802e26 	beq	r20,r2,40a34 <__divsf3+0x10c>
   4097c:	91002034 	orhi	r4,r18,128
   40980:	202490fa 	slli	r18,r4,3
   40984:	a53fe044 	addi	r20,r20,-127
   40988:	0021883a 	mov	r16,zero
   4098c:	002f883a 	mov	r23,zero
   40990:	280cd5fa 	srli	r6,r5,23
   40994:	282ad7fa 	srli	r21,r5,31
   40998:	00c02034 	movhi	r3,128
   4099c:	18ffffc4 	addi	r3,r3,-1
   409a0:	31803fcc 	andi	r6,r6,255
   409a4:	1962703a 	and	r17,r3,r5
   409a8:	af003fcc 	andi	fp,r21,255
   409ac:	30004a26 	beq	r6,zero,40ad8 <__divsf3+0x1b0>
   409b0:	00803fc4 	movi	r2,255
   409b4:	30804526 	beq	r6,r2,40acc <__divsf3+0x1a4>
   409b8:	89402034 	orhi	r5,r17,128
   409bc:	282290fa 	slli	r17,r5,3
   409c0:	31bfe044 	addi	r6,r6,-127
   409c4:	000b883a 	mov	r5,zero
   409c8:	2c20b03a 	or	r16,r5,r16
   409cc:	802090ba 	slli	r16,r16,2
   409d0:	00800134 	movhi	r2,4
   409d4:	10827d04 	addi	r2,r2,2548
   409d8:	80a1883a 	add	r16,r16,r2
   409dc:	81000017 	ldw	r4,0(r16)
   409e0:	9d46f03a 	xor	r3,r19,r21
   409e4:	180f883a 	mov	r7,r3
   409e8:	18803fcc 	andi	r2,r3,255
   409ec:	a18dc83a 	sub	r6,r20,r6
   409f0:	2000683a 	jmp	r4
   409f4:	00040bd8 	cmpnei	zero,zero,4143
   409f8:	00040a5c 	xori	zero,zero,4137
   409fc:	00040bcc 	andi	zero,zero,4143
   40a00:	00040a48 	cmpgei	zero,zero,4137
   40a04:	00040bcc 	andi	zero,zero,4143
   40a08:	00040ba4 	muli	zero,zero,4142
   40a0c:	00040bcc 	andi	zero,zero,4143
   40a10:	00040a48 	cmpgei	zero,zero,4137
   40a14:	00040a5c 	xori	zero,zero,4137
   40a18:	00040a5c 	xori	zero,zero,4137
   40a1c:	00040ba4 	muli	zero,zero,4142
   40a20:	00040a48 	cmpgei	zero,zero,4137
   40a24:	00040cb8 	rdprs	zero,zero,4146
   40a28:	00040cb8 	rdprs	zero,zero,4146
   40a2c:	00040cb8 	rdprs	zero,zero,4146
   40a30:	00040c6c 	andhi	zero,zero,4145
   40a34:	9000581e 	bne	r18,zero,40b98 <__divsf3+0x270>
   40a38:	04000204 	movi	r16,8
   40a3c:	05c00084 	movi	r23,2
   40a40:	003fd306 	br	40990 <__alt_data_end+0xfffdb190>
   40a44:	0023883a 	mov	r17,zero
   40a48:	e02d883a 	mov	r22,fp
   40a4c:	282f883a 	mov	r23,r5
   40a50:	00800084 	movi	r2,2
   40a54:	b8808f1e 	bne	r23,r2,40c94 <__divsf3+0x36c>
   40a58:	b005883a 	mov	r2,r22
   40a5c:	11c0004c 	andi	r7,r2,1
   40a60:	013fffc4 	movi	r4,-1
   40a64:	000d883a 	mov	r6,zero
   40a68:	21003fcc 	andi	r4,r4,255
   40a6c:	200895fa 	slli	r4,r4,23
   40a70:	38803fcc 	andi	r2,r7,255
   40a74:	00c02034 	movhi	r3,128
   40a78:	100497fa 	slli	r2,r2,31
   40a7c:	18ffffc4 	addi	r3,r3,-1
   40a80:	30c6703a 	and	r3,r6,r3
   40a84:	1906b03a 	or	r3,r3,r4
   40a88:	1884b03a 	or	r2,r3,r2
   40a8c:	dfc00a17 	ldw	ra,40(sp)
   40a90:	df000917 	ldw	fp,36(sp)
   40a94:	ddc00817 	ldw	r23,32(sp)
   40a98:	dd800717 	ldw	r22,28(sp)
   40a9c:	dd400617 	ldw	r21,24(sp)
   40aa0:	dd000517 	ldw	r20,20(sp)
   40aa4:	dcc00417 	ldw	r19,16(sp)
   40aa8:	dc800317 	ldw	r18,12(sp)
   40aac:	dc400217 	ldw	r17,8(sp)
   40ab0:	dc000117 	ldw	r16,4(sp)
   40ab4:	dec00b04 	addi	sp,sp,44
   40ab8:	f800283a 	ret
   40abc:	90002b1e 	bne	r18,zero,40b6c <__divsf3+0x244>
   40ac0:	04000104 	movi	r16,4
   40ac4:	05c00044 	movi	r23,1
   40ac8:	003fb106 	br	40990 <__alt_data_end+0xfffdb190>
   40acc:	8800251e 	bne	r17,zero,40b64 <__divsf3+0x23c>
   40ad0:	01400084 	movi	r5,2
   40ad4:	00000206 	br	40ae0 <__divsf3+0x1b8>
   40ad8:	88001a1e 	bne	r17,zero,40b44 <__divsf3+0x21c>
   40adc:	01400044 	movi	r5,1
   40ae0:	8160b03a 	or	r16,r16,r5
   40ae4:	802090ba 	slli	r16,r16,2
   40ae8:	00c00134 	movhi	r3,4
   40aec:	18c2c104 	addi	r3,r3,2820
   40af0:	80e1883a 	add	r16,r16,r3
   40af4:	80c00017 	ldw	r3,0(r16)
   40af8:	9d44f03a 	xor	r2,r19,r21
   40afc:	a18dc83a 	sub	r6,r20,r6
   40b00:	1800683a 	jmp	r3
   40b04:	00040a5c 	xori	zero,zero,4137
   40b08:	00040a5c 	xori	zero,zero,4137
   40b0c:	00040ca8 	cmpgeui	zero,zero,4146
   40b10:	00040a44 	movi	zero,4137
   40b14:	00040ca8 	cmpgeui	zero,zero,4146
   40b18:	00040ba4 	muli	zero,zero,4142
   40b1c:	00040ca8 	cmpgeui	zero,zero,4146
   40b20:	00040a44 	movi	zero,4137
   40b24:	00040a5c 	xori	zero,zero,4137
   40b28:	00040a5c 	xori	zero,zero,4137
   40b2c:	00040ba4 	muli	zero,zero,4142
   40b30:	00040a44 	movi	zero,4137
   40b34:	00040cb8 	rdprs	zero,zero,4146
   40b38:	00040cb8 	rdprs	zero,zero,4146
   40b3c:	00040cb8 	rdprs	zero,zero,4146
   40b40:	00040cd0 	cmplti	zero,zero,4147
   40b44:	8809883a 	mov	r4,r17
   40b48:	00414bc0 	call	414bc <__clzsi2>
   40b4c:	10fffec4 	addi	r3,r2,-5
   40b50:	10801d84 	addi	r2,r2,118
   40b54:	88e2983a 	sll	r17,r17,r3
   40b58:	008dc83a 	sub	r6,zero,r2
   40b5c:	000b883a 	mov	r5,zero
   40b60:	003f9906 	br	409c8 <__alt_data_end+0xfffdb1c8>
   40b64:	014000c4 	movi	r5,3
   40b68:	003f9706 	br	409c8 <__alt_data_end+0xfffdb1c8>
   40b6c:	9009883a 	mov	r4,r18
   40b70:	d9400015 	stw	r5,0(sp)
   40b74:	00414bc0 	call	414bc <__clzsi2>
   40b78:	10fffec4 	addi	r3,r2,-5
   40b7c:	11801d84 	addi	r6,r2,118
   40b80:	90e4983a 	sll	r18,r18,r3
   40b84:	01a9c83a 	sub	r20,zero,r6
   40b88:	0021883a 	mov	r16,zero
   40b8c:	002f883a 	mov	r23,zero
   40b90:	d9400017 	ldw	r5,0(sp)
   40b94:	003f7e06 	br	40990 <__alt_data_end+0xfffdb190>
   40b98:	04000304 	movi	r16,12
   40b9c:	05c000c4 	movi	r23,3
   40ba0:	003f7b06 	br	40990 <__alt_data_end+0xfffdb190>
   40ba4:	01802034 	movhi	r6,128
   40ba8:	000f883a 	mov	r7,zero
   40bac:	31bfffc4 	addi	r6,r6,-1
   40bb0:	013fffc4 	movi	r4,-1
   40bb4:	003fac06 	br	40a68 <__alt_data_end+0xfffdb268>
   40bb8:	01400044 	movi	r5,1
   40bbc:	2909c83a 	sub	r4,r5,r4
   40bc0:	00c006c4 	movi	r3,27
   40bc4:	19004b0e 	bge	r3,r4,40cf4 <__divsf3+0x3cc>
   40bc8:	114e703a 	and	r7,r2,r5
   40bcc:	0009883a 	mov	r4,zero
   40bd0:	000d883a 	mov	r6,zero
   40bd4:	003fa406 	br	40a68 <__alt_data_end+0xfffdb268>
   40bd8:	9006917a 	slli	r3,r18,5
   40bdc:	8822917a 	slli	r17,r17,5
   40be0:	1c40372e 	bgeu	r3,r17,40cc0 <__divsf3+0x398>
   40be4:	31bfffc4 	addi	r6,r6,-1
   40be8:	010006c4 	movi	r4,27
   40bec:	000b883a 	mov	r5,zero
   40bf0:	180f883a 	mov	r7,r3
   40bf4:	294b883a 	add	r5,r5,r5
   40bf8:	18c7883a 	add	r3,r3,r3
   40bfc:	38000116 	blt	r7,zero,40c04 <__divsf3+0x2dc>
   40c00:	1c400236 	bltu	r3,r17,40c0c <__divsf3+0x2e4>
   40c04:	1c47c83a 	sub	r3,r3,r17
   40c08:	29400054 	ori	r5,r5,1
   40c0c:	213fffc4 	addi	r4,r4,-1
   40c10:	203ff71e 	bne	r4,zero,40bf0 <__alt_data_end+0xfffdb3f0>
   40c14:	1806c03a 	cmpne	r3,r3,zero
   40c18:	1962b03a 	or	r17,r3,r5
   40c1c:	31001fc4 	addi	r4,r6,127
   40c20:	013fe50e 	bge	zero,r4,40bb8 <__alt_data_end+0xfffdb3b8>
   40c24:	88c001cc 	andi	r3,r17,7
   40c28:	18000426 	beq	r3,zero,40c3c <__divsf3+0x314>
   40c2c:	88c003cc 	andi	r3,r17,15
   40c30:	01400104 	movi	r5,4
   40c34:	19400126 	beq	r3,r5,40c3c <__divsf3+0x314>
   40c38:	8963883a 	add	r17,r17,r5
   40c3c:	88c2002c 	andhi	r3,r17,2048
   40c40:	18000426 	beq	r3,zero,40c54 <__divsf3+0x32c>
   40c44:	00fe0034 	movhi	r3,63488
   40c48:	18ffffc4 	addi	r3,r3,-1
   40c4c:	31002004 	addi	r4,r6,128
   40c50:	88e2703a 	and	r17,r17,r3
   40c54:	00c03f84 	movi	r3,254
   40c58:	193f8016 	blt	r3,r4,40a5c <__alt_data_end+0xfffdb25c>
   40c5c:	880c91ba 	slli	r6,r17,6
   40c60:	11c0004c 	andi	r7,r2,1
   40c64:	300cd27a 	srli	r6,r6,9
   40c68:	003f7f06 	br	40a68 <__alt_data_end+0xfffdb268>
   40c6c:	9080102c 	andhi	r2,r18,64
   40c70:	10000226 	beq	r2,zero,40c7c <__divsf3+0x354>
   40c74:	8880102c 	andhi	r2,r17,64
   40c78:	10001826 	beq	r2,zero,40cdc <__divsf3+0x3b4>
   40c7c:	00802034 	movhi	r2,128
   40c80:	91801034 	orhi	r6,r18,64
   40c84:	10bfffc4 	addi	r2,r2,-1
   40c88:	980f883a 	mov	r7,r19
   40c8c:	308c703a 	and	r6,r6,r2
   40c90:	003fc706 	br	40bb0 <__alt_data_end+0xfffdb3b0>
   40c94:	008000c4 	movi	r2,3
   40c98:	b8802d26 	beq	r23,r2,40d50 <__divsf3+0x428>
   40c9c:	00c00044 	movi	r3,1
   40ca0:	b005883a 	mov	r2,r22
   40ca4:	b8ffdd1e 	bne	r23,r3,40c1c <__alt_data_end+0xfffdb41c>
   40ca8:	11c0004c 	andi	r7,r2,1
   40cac:	0009883a 	mov	r4,zero
   40cb0:	000d883a 	mov	r6,zero
   40cb4:	003f6c06 	br	40a68 <__alt_data_end+0xfffdb268>
   40cb8:	9023883a 	mov	r17,r18
   40cbc:	003f6406 	br	40a50 <__alt_data_end+0xfffdb250>
   40cc0:	1c47c83a 	sub	r3,r3,r17
   40cc4:	01000684 	movi	r4,26
   40cc8:	01400044 	movi	r5,1
   40ccc:	003fc806 	br	40bf0 <__alt_data_end+0xfffdb3f0>
   40cd0:	9080102c 	andhi	r2,r18,64
   40cd4:	103fe926 	beq	r2,zero,40c7c <__alt_data_end+0xfffdb47c>
   40cd8:	0023883a 	mov	r17,zero
   40cdc:	00802034 	movhi	r2,128
   40ce0:	89801034 	orhi	r6,r17,64
   40ce4:	10bfffc4 	addi	r2,r2,-1
   40ce8:	a80f883a 	mov	r7,r21
   40cec:	308c703a 	and	r6,r6,r2
   40cf0:	003faf06 	br	40bb0 <__alt_data_end+0xfffdb3b0>
   40cf4:	01c00804 	movi	r7,32
   40cf8:	390fc83a 	sub	r7,r7,r4
   40cfc:	89ce983a 	sll	r7,r17,r7
   40d00:	890ad83a 	srl	r5,r17,r4
   40d04:	380ec03a 	cmpne	r7,r7,zero
   40d08:	29cab03a 	or	r5,r5,r7
   40d0c:	28c001cc 	andi	r3,r5,7
   40d10:	18000426 	beq	r3,zero,40d24 <__divsf3+0x3fc>
   40d14:	28c003cc 	andi	r3,r5,15
   40d18:	01000104 	movi	r4,4
   40d1c:	19000126 	beq	r3,r4,40d24 <__divsf3+0x3fc>
   40d20:	290b883a 	add	r5,r5,r4
   40d24:	28c1002c 	andhi	r3,r5,1024
   40d28:	18000426 	beq	r3,zero,40d3c <__divsf3+0x414>
   40d2c:	11c0004c 	andi	r7,r2,1
   40d30:	01000044 	movi	r4,1
   40d34:	000d883a 	mov	r6,zero
   40d38:	003f4b06 	br	40a68 <__alt_data_end+0xfffdb268>
   40d3c:	280a91ba 	slli	r5,r5,6
   40d40:	11c0004c 	andi	r7,r2,1
   40d44:	0009883a 	mov	r4,zero
   40d48:	280cd27a 	srli	r6,r5,9
   40d4c:	003f4606 	br	40a68 <__alt_data_end+0xfffdb268>
   40d50:	00802034 	movhi	r2,128
   40d54:	89801034 	orhi	r6,r17,64
   40d58:	10bfffc4 	addi	r2,r2,-1
   40d5c:	b00f883a 	mov	r7,r22
   40d60:	308c703a 	and	r6,r6,r2
   40d64:	003f9206 	br	40bb0 <__alt_data_end+0xfffdb3b0>

00040d68 <__mulsf3>:
   40d68:	defff504 	addi	sp,sp,-44
   40d6c:	dc000115 	stw	r16,4(sp)
   40d70:	2020d5fa 	srli	r16,r4,23
   40d74:	dd400615 	stw	r21,24(sp)
   40d78:	202ad7fa 	srli	r21,r4,31
   40d7c:	dc800315 	stw	r18,12(sp)
   40d80:	04802034 	movhi	r18,128
   40d84:	df000915 	stw	fp,36(sp)
   40d88:	dd000515 	stw	r20,20(sp)
   40d8c:	94bfffc4 	addi	r18,r18,-1
   40d90:	dfc00a15 	stw	ra,40(sp)
   40d94:	ddc00815 	stw	r23,32(sp)
   40d98:	dd800715 	stw	r22,28(sp)
   40d9c:	dcc00415 	stw	r19,16(sp)
   40da0:	dc400215 	stw	r17,8(sp)
   40da4:	84003fcc 	andi	r16,r16,255
   40da8:	9124703a 	and	r18,r18,r4
   40dac:	a829883a 	mov	r20,r21
   40db0:	af003fcc 	andi	fp,r21,255
   40db4:	80005426 	beq	r16,zero,40f08 <__mulsf3+0x1a0>
   40db8:	00803fc4 	movi	r2,255
   40dbc:	80802f26 	beq	r16,r2,40e7c <__mulsf3+0x114>
   40dc0:	91002034 	orhi	r4,r18,128
   40dc4:	202490fa 	slli	r18,r4,3
   40dc8:	843fe044 	addi	r16,r16,-127
   40dcc:	0023883a 	mov	r17,zero
   40dd0:	002f883a 	mov	r23,zero
   40dd4:	2804d5fa 	srli	r2,r5,23
   40dd8:	282cd7fa 	srli	r22,r5,31
   40ddc:	01002034 	movhi	r4,128
   40de0:	213fffc4 	addi	r4,r4,-1
   40de4:	10803fcc 	andi	r2,r2,255
   40de8:	2166703a 	and	r19,r4,r5
   40dec:	b1803fcc 	andi	r6,r22,255
   40df0:	10004c26 	beq	r2,zero,40f24 <__mulsf3+0x1bc>
   40df4:	00c03fc4 	movi	r3,255
   40df8:	10c04726 	beq	r2,r3,40f18 <__mulsf3+0x1b0>
   40dfc:	99002034 	orhi	r4,r19,128
   40e00:	202690fa 	slli	r19,r4,3
   40e04:	10bfe044 	addi	r2,r2,-127
   40e08:	0007883a 	mov	r3,zero
   40e0c:	80a1883a 	add	r16,r16,r2
   40e10:	010003c4 	movi	r4,15
   40e14:	1c44b03a 	or	r2,r3,r17
   40e18:	b56af03a 	xor	r21,r22,r21
   40e1c:	81c00044 	addi	r7,r16,1
   40e20:	20806b36 	bltu	r4,r2,40fd0 <__mulsf3+0x268>
   40e24:	100490ba 	slli	r2,r2,2
   40e28:	01000134 	movhi	r4,4
   40e2c:	21038f04 	addi	r4,r4,3644
   40e30:	1105883a 	add	r2,r2,r4
   40e34:	10800017 	ldw	r2,0(r2)
   40e38:	1000683a 	jmp	r2
   40e3c:	00040fd0 	cmplti	zero,zero,4159
   40e40:	00040e90 	cmplti	zero,zero,4154
   40e44:	00040e90 	cmplti	zero,zero,4154
   40e48:	00040e8c 	andi	zero,zero,4154
   40e4c:	00040fb4 	movhi	zero,4158
   40e50:	00040fb4 	movhi	zero,4158
   40e54:	00040fa0 	cmpeqi	zero,zero,4158
   40e58:	00040e8c 	andi	zero,zero,4154
   40e5c:	00040fb4 	movhi	zero,4158
   40e60:	00040fa0 	cmpeqi	zero,zero,4158
   40e64:	00040fb4 	movhi	zero,4158
   40e68:	00040e8c 	andi	zero,zero,4154
   40e6c:	00040fc0 	call	40fc <__alt_mem_onchip_mem-0x3bf04>
   40e70:	00040fc0 	call	40fc <__alt_mem_onchip_mem-0x3bf04>
   40e74:	00040fc0 	call	40fc <__alt_mem_onchip_mem-0x3bf04>
   40e78:	000410d0 	cmplti	zero,zero,4163
   40e7c:	90003b1e 	bne	r18,zero,40f6c <__mulsf3+0x204>
   40e80:	04400204 	movi	r17,8
   40e84:	05c00084 	movi	r23,2
   40e88:	003fd206 	br	40dd4 <__alt_data_end+0xfffdb5d4>
   40e8c:	302b883a 	mov	r21,r6
   40e90:	00800084 	movi	r2,2
   40e94:	18802626 	beq	r3,r2,40f30 <__mulsf3+0x1c8>
   40e98:	008000c4 	movi	r2,3
   40e9c:	1880b826 	beq	r3,r2,41180 <__mulsf3+0x418>
   40ea0:	00800044 	movi	r2,1
   40ea4:	1880af1e 	bne	r3,r2,41164 <__mulsf3+0x3fc>
   40ea8:	a829883a 	mov	r20,r21
   40eac:	0007883a 	mov	r3,zero
   40eb0:	0009883a 	mov	r4,zero
   40eb4:	18803fcc 	andi	r2,r3,255
   40eb8:	100695fa 	slli	r3,r2,23
   40ebc:	a0803fcc 	andi	r2,r20,255
   40ec0:	100a97fa 	slli	r5,r2,31
   40ec4:	00802034 	movhi	r2,128
   40ec8:	10bfffc4 	addi	r2,r2,-1
   40ecc:	2084703a 	and	r2,r4,r2
   40ed0:	10c4b03a 	or	r2,r2,r3
   40ed4:	1144b03a 	or	r2,r2,r5
   40ed8:	dfc00a17 	ldw	ra,40(sp)
   40edc:	df000917 	ldw	fp,36(sp)
   40ee0:	ddc00817 	ldw	r23,32(sp)
   40ee4:	dd800717 	ldw	r22,28(sp)
   40ee8:	dd400617 	ldw	r21,24(sp)
   40eec:	dd000517 	ldw	r20,20(sp)
   40ef0:	dcc00417 	ldw	r19,16(sp)
   40ef4:	dc800317 	ldw	r18,12(sp)
   40ef8:	dc400217 	ldw	r17,8(sp)
   40efc:	dc000117 	ldw	r16,4(sp)
   40f00:	dec00b04 	addi	sp,sp,44
   40f04:	f800283a 	ret
   40f08:	90000d1e 	bne	r18,zero,40f40 <__mulsf3+0x1d8>
   40f0c:	04400104 	movi	r17,4
   40f10:	05c00044 	movi	r23,1
   40f14:	003faf06 	br	40dd4 <__alt_data_end+0xfffdb5d4>
   40f18:	9806c03a 	cmpne	r3,r19,zero
   40f1c:	18c00084 	addi	r3,r3,2
   40f20:	003fba06 	br	40e0c <__alt_data_end+0xfffdb60c>
   40f24:	9800141e 	bne	r19,zero,40f78 <__mulsf3+0x210>
   40f28:	00c00044 	movi	r3,1
   40f2c:	003fb706 	br	40e0c <__alt_data_end+0xfffdb60c>
   40f30:	a829883a 	mov	r20,r21
   40f34:	00ffffc4 	movi	r3,-1
   40f38:	0009883a 	mov	r4,zero
   40f3c:	003fdd06 	br	40eb4 <__alt_data_end+0xfffdb6b4>
   40f40:	9009883a 	mov	r4,r18
   40f44:	d9400015 	stw	r5,0(sp)
   40f48:	00414bc0 	call	414bc <__clzsi2>
   40f4c:	10fffec4 	addi	r3,r2,-5
   40f50:	10801d84 	addi	r2,r2,118
   40f54:	90e4983a 	sll	r18,r18,r3
   40f58:	00a1c83a 	sub	r16,zero,r2
   40f5c:	0023883a 	mov	r17,zero
   40f60:	002f883a 	mov	r23,zero
   40f64:	d9400017 	ldw	r5,0(sp)
   40f68:	003f9a06 	br	40dd4 <__alt_data_end+0xfffdb5d4>
   40f6c:	04400304 	movi	r17,12
   40f70:	05c000c4 	movi	r23,3
   40f74:	003f9706 	br	40dd4 <__alt_data_end+0xfffdb5d4>
   40f78:	9809883a 	mov	r4,r19
   40f7c:	d9800015 	stw	r6,0(sp)
   40f80:	00414bc0 	call	414bc <__clzsi2>
   40f84:	10fffec4 	addi	r3,r2,-5
   40f88:	10801d84 	addi	r2,r2,118
   40f8c:	98e6983a 	sll	r19,r19,r3
   40f90:	0085c83a 	sub	r2,zero,r2
   40f94:	0007883a 	mov	r3,zero
   40f98:	d9800017 	ldw	r6,0(sp)
   40f9c:	003f9b06 	br	40e0c <__alt_data_end+0xfffdb60c>
   40fa0:	01002034 	movhi	r4,128
   40fa4:	0029883a 	mov	r20,zero
   40fa8:	213fffc4 	addi	r4,r4,-1
   40fac:	00ffffc4 	movi	r3,-1
   40fb0:	003fc006 	br	40eb4 <__alt_data_end+0xfffdb6b4>
   40fb4:	9027883a 	mov	r19,r18
   40fb8:	b807883a 	mov	r3,r23
   40fbc:	003fb406 	br	40e90 <__alt_data_end+0xfffdb690>
   40fc0:	9027883a 	mov	r19,r18
   40fc4:	e02b883a 	mov	r21,fp
   40fc8:	b807883a 	mov	r3,r23
   40fcc:	003fb006 	br	40e90 <__alt_data_end+0xfffdb690>
   40fd0:	9028d43a 	srli	r20,r18,16
   40fd4:	982cd43a 	srli	r22,r19,16
   40fd8:	94bfffcc 	andi	r18,r18,65535
   40fdc:	9cffffcc 	andi	r19,r19,65535
   40fe0:	980b883a 	mov	r5,r19
   40fe4:	9009883a 	mov	r4,r18
   40fe8:	d9c00015 	stw	r7,0(sp)
   40fec:	00415200 	call	41520 <__mulsi3>
   40ff0:	a00b883a 	mov	r5,r20
   40ff4:	9809883a 	mov	r4,r19
   40ff8:	1023883a 	mov	r17,r2
   40ffc:	00415200 	call	41520 <__mulsi3>
   41000:	a009883a 	mov	r4,r20
   41004:	b00b883a 	mov	r5,r22
   41008:	1027883a 	mov	r19,r2
   4100c:	00415200 	call	41520 <__mulsi3>
   41010:	b00b883a 	mov	r5,r22
   41014:	9009883a 	mov	r4,r18
   41018:	1029883a 	mov	r20,r2
   4101c:	00415200 	call	41520 <__mulsi3>
   41020:	8806d43a 	srli	r3,r17,16
   41024:	14c5883a 	add	r2,r2,r19
   41028:	d9c00017 	ldw	r7,0(sp)
   4102c:	1885883a 	add	r2,r3,r2
   41030:	14c0022e 	bgeu	r2,r19,4103c <__mulsf3+0x2d4>
   41034:	00c00074 	movhi	r3,1
   41038:	a0e9883a 	add	r20,r20,r3
   4103c:	1026943a 	slli	r19,r2,16
   41040:	8c7fffcc 	andi	r17,r17,65535
   41044:	1004d43a 	srli	r2,r2,16
   41048:	9c63883a 	add	r17,r19,r17
   4104c:	882691ba 	slli	r19,r17,6
   41050:	1505883a 	add	r2,r2,r20
   41054:	8822d6ba 	srli	r17,r17,26
   41058:	100891ba 	slli	r4,r2,6
   4105c:	9826c03a 	cmpne	r19,r19,zero
   41060:	9c62b03a 	or	r17,r19,r17
   41064:	8926b03a 	or	r19,r17,r4
   41068:	9882002c 	andhi	r2,r19,2048
   4106c:	10000426 	beq	r2,zero,41080 <__mulsf3+0x318>
   41070:	9804d07a 	srli	r2,r19,1
   41074:	9900004c 	andi	r4,r19,1
   41078:	3821883a 	mov	r16,r7
   4107c:	1126b03a 	or	r19,r2,r4
   41080:	80c01fc4 	addi	r3,r16,127
   41084:	00c0210e 	bge	zero,r3,4110c <__mulsf3+0x3a4>
   41088:	988001cc 	andi	r2,r19,7
   4108c:	10000426 	beq	r2,zero,410a0 <__mulsf3+0x338>
   41090:	988003cc 	andi	r2,r19,15
   41094:	01000104 	movi	r4,4
   41098:	11000126 	beq	r2,r4,410a0 <__mulsf3+0x338>
   4109c:	9927883a 	add	r19,r19,r4
   410a0:	9882002c 	andhi	r2,r19,2048
   410a4:	10000426 	beq	r2,zero,410b8 <__mulsf3+0x350>
   410a8:	00be0034 	movhi	r2,63488
   410ac:	10bfffc4 	addi	r2,r2,-1
   410b0:	80c02004 	addi	r3,r16,128
   410b4:	98a6703a 	and	r19,r19,r2
   410b8:	00803f84 	movi	r2,254
   410bc:	10ff9c16 	blt	r2,r3,40f30 <__alt_data_end+0xfffdb730>
   410c0:	980891ba 	slli	r4,r19,6
   410c4:	a829883a 	mov	r20,r21
   410c8:	2008d27a 	srli	r4,r4,9
   410cc:	003f7906 	br	40eb4 <__alt_data_end+0xfffdb6b4>
   410d0:	9080102c 	andhi	r2,r18,64
   410d4:	10000826 	beq	r2,zero,410f8 <__mulsf3+0x390>
   410d8:	9880102c 	andhi	r2,r19,64
   410dc:	1000061e 	bne	r2,zero,410f8 <__mulsf3+0x390>
   410e0:	00802034 	movhi	r2,128
   410e4:	99001034 	orhi	r4,r19,64
   410e8:	10bfffc4 	addi	r2,r2,-1
   410ec:	b029883a 	mov	r20,r22
   410f0:	2088703a 	and	r4,r4,r2
   410f4:	003fad06 	br	40fac <__alt_data_end+0xfffdb7ac>
   410f8:	00802034 	movhi	r2,128
   410fc:	91001034 	orhi	r4,r18,64
   41100:	10bfffc4 	addi	r2,r2,-1
   41104:	2088703a 	and	r4,r4,r2
   41108:	003fa806 	br	40fac <__alt_data_end+0xfffdb7ac>
   4110c:	00800044 	movi	r2,1
   41110:	10c7c83a 	sub	r3,r2,r3
   41114:	008006c4 	movi	r2,27
   41118:	10ff6316 	blt	r2,r3,40ea8 <__alt_data_end+0xfffdb6a8>
   4111c:	00800804 	movi	r2,32
   41120:	10c5c83a 	sub	r2,r2,r3
   41124:	9884983a 	sll	r2,r19,r2
   41128:	98c6d83a 	srl	r3,r19,r3
   4112c:	1004c03a 	cmpne	r2,r2,zero
   41130:	1884b03a 	or	r2,r3,r2
   41134:	10c001cc 	andi	r3,r2,7
   41138:	18000426 	beq	r3,zero,4114c <__mulsf3+0x3e4>
   4113c:	10c003cc 	andi	r3,r2,15
   41140:	01000104 	movi	r4,4
   41144:	19000126 	beq	r3,r4,4114c <__mulsf3+0x3e4>
   41148:	1105883a 	add	r2,r2,r4
   4114c:	10c1002c 	andhi	r3,r2,1024
   41150:	18000626 	beq	r3,zero,4116c <__mulsf3+0x404>
   41154:	a829883a 	mov	r20,r21
   41158:	00c00044 	movi	r3,1
   4115c:	0009883a 	mov	r4,zero
   41160:	003f5406 	br	40eb4 <__alt_data_end+0xfffdb6b4>
   41164:	3821883a 	mov	r16,r7
   41168:	003fc506 	br	41080 <__alt_data_end+0xfffdb880>
   4116c:	100491ba 	slli	r2,r2,6
   41170:	a829883a 	mov	r20,r21
   41174:	0007883a 	mov	r3,zero
   41178:	1008d27a 	srli	r4,r2,9
   4117c:	003f4d06 	br	40eb4 <__alt_data_end+0xfffdb6b4>
   41180:	00802034 	movhi	r2,128
   41184:	99001034 	orhi	r4,r19,64
   41188:	10bfffc4 	addi	r2,r2,-1
   4118c:	a829883a 	mov	r20,r21
   41190:	2088703a 	and	r4,r4,r2
   41194:	003f8506 	br	40fac <__alt_data_end+0xfffdb7ac>

00041198 <__floatsisf>:
   41198:	defffd04 	addi	sp,sp,-12
   4119c:	dfc00215 	stw	ra,8(sp)
   411a0:	dc400115 	stw	r17,4(sp)
   411a4:	dc000015 	stw	r16,0(sp)
   411a8:	20003526 	beq	r4,zero,41280 <__floatsisf+0xe8>
   411ac:	2021883a 	mov	r16,r4
   411b0:	2022d7fa 	srli	r17,r4,31
   411b4:	20003616 	blt	r4,zero,41290 <__floatsisf+0xf8>
   411b8:	8009883a 	mov	r4,r16
   411bc:	00414bc0 	call	414bc <__clzsi2>
   411c0:	00c02784 	movi	r3,158
   411c4:	1887c83a 	sub	r3,r3,r2
   411c8:	01002584 	movi	r4,150
   411cc:	20c01416 	blt	r4,r3,41220 <__floatsisf+0x88>
   411d0:	20c9c83a 	sub	r4,r4,r3
   411d4:	8120983a 	sll	r16,r16,r4
   411d8:	00802034 	movhi	r2,128
   411dc:	10bfffc4 	addi	r2,r2,-1
   411e0:	8809883a 	mov	r4,r17
   411e4:	80a0703a 	and	r16,r16,r2
   411e8:	18803fcc 	andi	r2,r3,255
   411ec:	100695fa 	slli	r3,r2,23
   411f0:	20803fcc 	andi	r2,r4,255
   411f4:	100897fa 	slli	r4,r2,31
   411f8:	00802034 	movhi	r2,128
   411fc:	10bfffc4 	addi	r2,r2,-1
   41200:	8084703a 	and	r2,r16,r2
   41204:	10c4b03a 	or	r2,r2,r3
   41208:	1104b03a 	or	r2,r2,r4
   4120c:	dfc00217 	ldw	ra,8(sp)
   41210:	dc400117 	ldw	r17,4(sp)
   41214:	dc000017 	ldw	r16,0(sp)
   41218:	dec00304 	addi	sp,sp,12
   4121c:	f800283a 	ret
   41220:	01002644 	movi	r4,153
   41224:	20c01c16 	blt	r4,r3,41298 <__floatsisf+0x100>
   41228:	20c9c83a 	sub	r4,r4,r3
   4122c:	8120983a 	sll	r16,r16,r4
   41230:	013f0034 	movhi	r4,64512
   41234:	213fffc4 	addi	r4,r4,-1
   41238:	814001cc 	andi	r5,r16,7
   4123c:	8108703a 	and	r4,r16,r4
   41240:	28000426 	beq	r5,zero,41254 <__floatsisf+0xbc>
   41244:	840003cc 	andi	r16,r16,15
   41248:	01400104 	movi	r5,4
   4124c:	81400126 	beq	r16,r5,41254 <__floatsisf+0xbc>
   41250:	2149883a 	add	r4,r4,r5
   41254:	2141002c 	andhi	r5,r4,1024
   41258:	28000526 	beq	r5,zero,41270 <__floatsisf+0xd8>
   4125c:	00c027c4 	movi	r3,159
   41260:	1887c83a 	sub	r3,r3,r2
   41264:	00bf0034 	movhi	r2,64512
   41268:	10bfffc4 	addi	r2,r2,-1
   4126c:	2088703a 	and	r4,r4,r2
   41270:	202091ba 	slli	r16,r4,6
   41274:	8809883a 	mov	r4,r17
   41278:	8020d27a 	srli	r16,r16,9
   4127c:	003fda06 	br	411e8 <__alt_data_end+0xfffdb9e8>
   41280:	0009883a 	mov	r4,zero
   41284:	0007883a 	mov	r3,zero
   41288:	0021883a 	mov	r16,zero
   4128c:	003fd606 	br	411e8 <__alt_data_end+0xfffdb9e8>
   41290:	0121c83a 	sub	r16,zero,r4
   41294:	003fc806 	br	411b8 <__alt_data_end+0xfffdb9b8>
   41298:	01002e44 	movi	r4,185
   4129c:	20c9c83a 	sub	r4,r4,r3
   412a0:	01400144 	movi	r5,5
   412a4:	8108983a 	sll	r4,r16,r4
   412a8:	288bc83a 	sub	r5,r5,r2
   412ac:	8160d83a 	srl	r16,r16,r5
   412b0:	2008c03a 	cmpne	r4,r4,zero
   412b4:	8120b03a 	or	r16,r16,r4
   412b8:	003fdd06 	br	41230 <__alt_data_end+0xfffdba30>

000412bc <__floatunsisf>:
   412bc:	defffe04 	addi	sp,sp,-8
   412c0:	dfc00115 	stw	ra,4(sp)
   412c4:	dc000015 	stw	r16,0(sp)
   412c8:	20002c26 	beq	r4,zero,4137c <__floatunsisf+0xc0>
   412cc:	2021883a 	mov	r16,r4
   412d0:	00414bc0 	call	414bc <__clzsi2>
   412d4:	00c02784 	movi	r3,158
   412d8:	1887c83a 	sub	r3,r3,r2
   412dc:	01002584 	movi	r4,150
   412e0:	20c00f16 	blt	r4,r3,41320 <__floatunsisf+0x64>
   412e4:	20c9c83a 	sub	r4,r4,r3
   412e8:	8108983a 	sll	r4,r16,r4
   412ec:	00802034 	movhi	r2,128
   412f0:	10bfffc4 	addi	r2,r2,-1
   412f4:	2088703a 	and	r4,r4,r2
   412f8:	18803fcc 	andi	r2,r3,255
   412fc:	100695fa 	slli	r3,r2,23
   41300:	00802034 	movhi	r2,128
   41304:	10bfffc4 	addi	r2,r2,-1
   41308:	2084703a 	and	r2,r4,r2
   4130c:	10c4b03a 	or	r2,r2,r3
   41310:	dfc00117 	ldw	ra,4(sp)
   41314:	dc000017 	ldw	r16,0(sp)
   41318:	dec00204 	addi	sp,sp,8
   4131c:	f800283a 	ret
   41320:	01002644 	movi	r4,153
   41324:	20c01816 	blt	r4,r3,41388 <__floatunsisf+0xcc>
   41328:	20c9c83a 	sub	r4,r4,r3
   4132c:	8108983a 	sll	r4,r16,r4
   41330:	017f0034 	movhi	r5,64512
   41334:	297fffc4 	addi	r5,r5,-1
   41338:	218001cc 	andi	r6,r4,7
   4133c:	214a703a 	and	r5,r4,r5
   41340:	30000426 	beq	r6,zero,41354 <__floatunsisf+0x98>
   41344:	210003cc 	andi	r4,r4,15
   41348:	01800104 	movi	r6,4
   4134c:	21800126 	beq	r4,r6,41354 <__floatunsisf+0x98>
   41350:	298b883a 	add	r5,r5,r6
   41354:	2901002c 	andhi	r4,r5,1024
   41358:	20000526 	beq	r4,zero,41370 <__floatunsisf+0xb4>
   4135c:	00c027c4 	movi	r3,159
   41360:	1887c83a 	sub	r3,r3,r2
   41364:	00bf0034 	movhi	r2,64512
   41368:	10bfffc4 	addi	r2,r2,-1
   4136c:	288a703a 	and	r5,r5,r2
   41370:	280891ba 	slli	r4,r5,6
   41374:	2008d27a 	srli	r4,r4,9
   41378:	003fdf06 	br	412f8 <__alt_data_end+0xfffdbaf8>
   4137c:	0007883a 	mov	r3,zero
   41380:	0009883a 	mov	r4,zero
   41384:	003fdc06 	br	412f8 <__alt_data_end+0xfffdbaf8>
   41388:	01402e44 	movi	r5,185
   4138c:	28cbc83a 	sub	r5,r5,r3
   41390:	01000144 	movi	r4,5
   41394:	2089c83a 	sub	r4,r4,r2
   41398:	814a983a 	sll	r5,r16,r5
   4139c:	8108d83a 	srl	r4,r16,r4
   413a0:	2820c03a 	cmpne	r16,r5,zero
   413a4:	2408b03a 	or	r4,r4,r16
   413a8:	003fe106 	br	41330 <__alt_data_end+0xfffdbb30>

000413ac <__extendsfdf2>:
   413ac:	200ad5fa 	srli	r5,r4,23
   413b0:	defffd04 	addi	sp,sp,-12
   413b4:	dc400115 	stw	r17,4(sp)
   413b8:	29403fcc 	andi	r5,r5,255
   413bc:	29800044 	addi	r6,r5,1
   413c0:	04402034 	movhi	r17,128
   413c4:	dc000015 	stw	r16,0(sp)
   413c8:	8c7fffc4 	addi	r17,r17,-1
   413cc:	dfc00215 	stw	ra,8(sp)
   413d0:	31803fcc 	andi	r6,r6,255
   413d4:	00800044 	movi	r2,1
   413d8:	8922703a 	and	r17,r17,r4
   413dc:	2020d7fa 	srli	r16,r4,31
   413e0:	1180110e 	bge	r2,r6,41428 <__extendsfdf2+0x7c>
   413e4:	880cd0fa 	srli	r6,r17,3
   413e8:	8822977a 	slli	r17,r17,29
   413ec:	2940e004 	addi	r5,r5,896
   413f0:	2941ffcc 	andi	r5,r5,2047
   413f4:	2804953a 	slli	r2,r5,20
   413f8:	01400434 	movhi	r5,16
   413fc:	800697fa 	slli	r3,r16,31
   41400:	297fffc4 	addi	r5,r5,-1
   41404:	314a703a 	and	r5,r6,r5
   41408:	288ab03a 	or	r5,r5,r2
   4140c:	28c6b03a 	or	r3,r5,r3
   41410:	8805883a 	mov	r2,r17
   41414:	dfc00217 	ldw	ra,8(sp)
   41418:	dc400117 	ldw	r17,4(sp)
   4141c:	dc000017 	ldw	r16,0(sp)
   41420:	dec00304 	addi	sp,sp,12
   41424:	f800283a 	ret
   41428:	2800111e 	bne	r5,zero,41470 <__extendsfdf2+0xc4>
   4142c:	88001c26 	beq	r17,zero,414a0 <__extendsfdf2+0xf4>
   41430:	8809883a 	mov	r4,r17
   41434:	00414bc0 	call	414bc <__clzsi2>
   41438:	00c00284 	movi	r3,10
   4143c:	18801b16 	blt	r3,r2,414ac <__extendsfdf2+0x100>
   41440:	018002c4 	movi	r6,11
   41444:	308dc83a 	sub	r6,r6,r2
   41448:	11000544 	addi	r4,r2,21
   4144c:	8986d83a 	srl	r3,r17,r6
   41450:	8922983a 	sll	r17,r17,r4
   41454:	0180e244 	movi	r6,905
   41458:	01400434 	movhi	r5,16
   4145c:	3085c83a 	sub	r2,r6,r2
   41460:	297fffc4 	addi	r5,r5,-1
   41464:	194c703a 	and	r6,r3,r5
   41468:	1141ffcc 	andi	r5,r2,2047
   4146c:	003fe006 	br	413f0 <__alt_data_end+0xfffdbbf0>
   41470:	88000826 	beq	r17,zero,41494 <__extendsfdf2+0xe8>
   41474:	880cd0fa 	srli	r6,r17,3
   41478:	00800434 	movhi	r2,16
   4147c:	10bfffc4 	addi	r2,r2,-1
   41480:	31800234 	orhi	r6,r6,8
   41484:	8822977a 	slli	r17,r17,29
   41488:	308c703a 	and	r6,r6,r2
   4148c:	0141ffc4 	movi	r5,2047
   41490:	003fd706 	br	413f0 <__alt_data_end+0xfffdbbf0>
   41494:	0141ffc4 	movi	r5,2047
   41498:	000d883a 	mov	r6,zero
   4149c:	003fd406 	br	413f0 <__alt_data_end+0xfffdbbf0>
   414a0:	000b883a 	mov	r5,zero
   414a4:	000d883a 	mov	r6,zero
   414a8:	003fd106 	br	413f0 <__alt_data_end+0xfffdbbf0>
   414ac:	11bffd44 	addi	r6,r2,-11
   414b0:	8986983a 	sll	r3,r17,r6
   414b4:	0023883a 	mov	r17,zero
   414b8:	003fe606 	br	41454 <__alt_data_end+0xfffdbc54>

000414bc <__clzsi2>:
   414bc:	00bfffd4 	movui	r2,65535
   414c0:	11000536 	bltu	r2,r4,414d8 <__clzsi2+0x1c>
   414c4:	00803fc4 	movi	r2,255
   414c8:	11000f36 	bltu	r2,r4,41508 <__clzsi2+0x4c>
   414cc:	00800804 	movi	r2,32
   414d0:	0007883a 	mov	r3,zero
   414d4:	00000506 	br	414ec <__clzsi2+0x30>
   414d8:	00804034 	movhi	r2,256
   414dc:	10bfffc4 	addi	r2,r2,-1
   414e0:	11000c2e 	bgeu	r2,r4,41514 <__clzsi2+0x58>
   414e4:	00800204 	movi	r2,8
   414e8:	00c00604 	movi	r3,24
   414ec:	20c8d83a 	srl	r4,r4,r3
   414f0:	00c00174 	movhi	r3,5
   414f4:	18c42e44 	addi	r3,r3,4281
   414f8:	1909883a 	add	r4,r3,r4
   414fc:	20c00003 	ldbu	r3,0(r4)
   41500:	10c5c83a 	sub	r2,r2,r3
   41504:	f800283a 	ret
   41508:	00800604 	movi	r2,24
   4150c:	00c00204 	movi	r3,8
   41510:	003ff606 	br	414ec <__alt_data_end+0xfffdbcec>
   41514:	00800404 	movi	r2,16
   41518:	1007883a 	mov	r3,r2
   4151c:	003ff306 	br	414ec <__alt_data_end+0xfffdbcec>

00041520 <__mulsi3>:
   41520:	0005883a 	mov	r2,zero
   41524:	20000726 	beq	r4,zero,41544 <__mulsi3+0x24>
   41528:	20c0004c 	andi	r3,r4,1
   4152c:	2008d07a 	srli	r4,r4,1
   41530:	18000126 	beq	r3,zero,41538 <__mulsi3+0x18>
   41534:	1145883a 	add	r2,r2,r5
   41538:	294b883a 	add	r5,r5,r5
   4153c:	203ffa1e 	bne	r4,zero,41528 <__alt_data_end+0xfffdbd28>
   41540:	f800283a 	ret
   41544:	f800283a 	ret

00041548 <_printf_r>:
   41548:	defffd04 	addi	sp,sp,-12
   4154c:	2805883a 	mov	r2,r5
   41550:	dfc00015 	stw	ra,0(sp)
   41554:	d9800115 	stw	r6,4(sp)
   41558:	d9c00215 	stw	r7,8(sp)
   4155c:	21400217 	ldw	r5,8(r4)
   41560:	d9c00104 	addi	r7,sp,4
   41564:	100d883a 	mov	r6,r2
   41568:	00417200 	call	41720 <___vfprintf_internal_r>
   4156c:	dfc00017 	ldw	ra,0(sp)
   41570:	dec00304 	addi	sp,sp,12
   41574:	f800283a 	ret

00041578 <printf>:
   41578:	defffc04 	addi	sp,sp,-16
   4157c:	dfc00015 	stw	ra,0(sp)
   41580:	d9400115 	stw	r5,4(sp)
   41584:	d9800215 	stw	r6,8(sp)
   41588:	d9c00315 	stw	r7,12(sp)
   4158c:	00800174 	movhi	r2,5
   41590:	108b9904 	addi	r2,r2,11876
   41594:	10800017 	ldw	r2,0(r2)
   41598:	200b883a 	mov	r5,r4
   4159c:	d9800104 	addi	r6,sp,4
   415a0:	11000217 	ldw	r4,8(r2)
   415a4:	00439fc0 	call	439fc <__vfprintf_internal>
   415a8:	dfc00017 	ldw	ra,0(sp)
   415ac:	dec00404 	addi	sp,sp,16
   415b0:	f800283a 	ret

000415b4 <_puts_r>:
   415b4:	defff604 	addi	sp,sp,-40
   415b8:	dc000715 	stw	r16,28(sp)
   415bc:	2021883a 	mov	r16,r4
   415c0:	2809883a 	mov	r4,r5
   415c4:	dc400815 	stw	r17,32(sp)
   415c8:	dfc00915 	stw	ra,36(sp)
   415cc:	2823883a 	mov	r17,r5
   415d0:	00416880 	call	41688 <strlen>
   415d4:	10c00044 	addi	r3,r2,1
   415d8:	d8800115 	stw	r2,4(sp)
   415dc:	00800174 	movhi	r2,5
   415e0:	10846f04 	addi	r2,r2,4540
   415e4:	d8800215 	stw	r2,8(sp)
   415e8:	00800044 	movi	r2,1
   415ec:	d8800315 	stw	r2,12(sp)
   415f0:	00800084 	movi	r2,2
   415f4:	dc400015 	stw	r17,0(sp)
   415f8:	d8c00615 	stw	r3,24(sp)
   415fc:	dec00415 	stw	sp,16(sp)
   41600:	d8800515 	stw	r2,20(sp)
   41604:	80000226 	beq	r16,zero,41610 <_puts_r+0x5c>
   41608:	80800e17 	ldw	r2,56(r16)
   4160c:	10001426 	beq	r2,zero,41660 <_puts_r+0xac>
   41610:	81400217 	ldw	r5,8(r16)
   41614:	2880030b 	ldhu	r2,12(r5)
   41618:	10c8000c 	andi	r3,r2,8192
   4161c:	1800061e 	bne	r3,zero,41638 <_puts_r+0x84>
   41620:	29001917 	ldw	r4,100(r5)
   41624:	00f7ffc4 	movi	r3,-8193
   41628:	10880014 	ori	r2,r2,8192
   4162c:	20c6703a 	and	r3,r4,r3
   41630:	2880030d 	sth	r2,12(r5)
   41634:	28c01915 	stw	r3,100(r5)
   41638:	d9800404 	addi	r6,sp,16
   4163c:	8009883a 	mov	r4,r16
   41640:	0045f640 	call	45f64 <__sfvwrite_r>
   41644:	1000091e 	bne	r2,zero,4166c <_puts_r+0xb8>
   41648:	00800284 	movi	r2,10
   4164c:	dfc00917 	ldw	ra,36(sp)
   41650:	dc400817 	ldw	r17,32(sp)
   41654:	dc000717 	ldw	r16,28(sp)
   41658:	dec00a04 	addi	sp,sp,40
   4165c:	f800283a 	ret
   41660:	8009883a 	mov	r4,r16
   41664:	0045ae00 	call	45ae0 <__sinit>
   41668:	003fe906 	br	41610 <__alt_data_end+0xfffdbe10>
   4166c:	00bfffc4 	movi	r2,-1
   41670:	003ff606 	br	4164c <__alt_data_end+0xfffdbe4c>

00041674 <puts>:
   41674:	00800174 	movhi	r2,5
   41678:	108b9904 	addi	r2,r2,11876
   4167c:	200b883a 	mov	r5,r4
   41680:	11000017 	ldw	r4,0(r2)
   41684:	00415b41 	jmpi	415b4 <_puts_r>

00041688 <strlen>:
   41688:	208000cc 	andi	r2,r4,3
   4168c:	10002026 	beq	r2,zero,41710 <strlen+0x88>
   41690:	20800007 	ldb	r2,0(r4)
   41694:	10002026 	beq	r2,zero,41718 <strlen+0x90>
   41698:	2005883a 	mov	r2,r4
   4169c:	00000206 	br	416a8 <strlen+0x20>
   416a0:	10c00007 	ldb	r3,0(r2)
   416a4:	18001826 	beq	r3,zero,41708 <strlen+0x80>
   416a8:	10800044 	addi	r2,r2,1
   416ac:	10c000cc 	andi	r3,r2,3
   416b0:	183ffb1e 	bne	r3,zero,416a0 <__alt_data_end+0xfffdbea0>
   416b4:	10c00017 	ldw	r3,0(r2)
   416b8:	01ffbff4 	movhi	r7,65279
   416bc:	39ffbfc4 	addi	r7,r7,-257
   416c0:	00ca303a 	nor	r5,zero,r3
   416c4:	01a02074 	movhi	r6,32897
   416c8:	19c7883a 	add	r3,r3,r7
   416cc:	31a02004 	addi	r6,r6,-32640
   416d0:	1946703a 	and	r3,r3,r5
   416d4:	1986703a 	and	r3,r3,r6
   416d8:	1800091e 	bne	r3,zero,41700 <strlen+0x78>
   416dc:	10800104 	addi	r2,r2,4
   416e0:	10c00017 	ldw	r3,0(r2)
   416e4:	19cb883a 	add	r5,r3,r7
   416e8:	00c6303a 	nor	r3,zero,r3
   416ec:	28c6703a 	and	r3,r5,r3
   416f0:	1986703a 	and	r3,r3,r6
   416f4:	183ff926 	beq	r3,zero,416dc <__alt_data_end+0xfffdbedc>
   416f8:	00000106 	br	41700 <strlen+0x78>
   416fc:	10800044 	addi	r2,r2,1
   41700:	10c00007 	ldb	r3,0(r2)
   41704:	183ffd1e 	bne	r3,zero,416fc <__alt_data_end+0xfffdbefc>
   41708:	1105c83a 	sub	r2,r2,r4
   4170c:	f800283a 	ret
   41710:	2005883a 	mov	r2,r4
   41714:	003fe706 	br	416b4 <__alt_data_end+0xfffdbeb4>
   41718:	0005883a 	mov	r2,zero
   4171c:	f800283a 	ret

00041720 <___vfprintf_internal_r>:
   41720:	deffb804 	addi	sp,sp,-288
   41724:	dfc04715 	stw	ra,284(sp)
   41728:	ddc04515 	stw	r23,276(sp)
   4172c:	dd404315 	stw	r21,268(sp)
   41730:	d9002d15 	stw	r4,180(sp)
   41734:	282f883a 	mov	r23,r5
   41738:	302b883a 	mov	r21,r6
   4173c:	d9c02e15 	stw	r7,184(sp)
   41740:	df004615 	stw	fp,280(sp)
   41744:	dd804415 	stw	r22,272(sp)
   41748:	dd004215 	stw	r20,264(sp)
   4174c:	dcc04115 	stw	r19,260(sp)
   41750:	dc804015 	stw	r18,256(sp)
   41754:	dc403f15 	stw	r17,252(sp)
   41758:	dc003e15 	stw	r16,248(sp)
   4175c:	00466600 	call	46660 <_localeconv_r>
   41760:	10800017 	ldw	r2,0(r2)
   41764:	1009883a 	mov	r4,r2
   41768:	d8803415 	stw	r2,208(sp)
   4176c:	00416880 	call	41688 <strlen>
   41770:	d8803715 	stw	r2,220(sp)
   41774:	d8802d17 	ldw	r2,180(sp)
   41778:	10000226 	beq	r2,zero,41784 <___vfprintf_internal_r+0x64>
   4177c:	10800e17 	ldw	r2,56(r2)
   41780:	1000fb26 	beq	r2,zero,41b70 <___vfprintf_internal_r+0x450>
   41784:	b880030b 	ldhu	r2,12(r23)
   41788:	10c8000c 	andi	r3,r2,8192
   4178c:	1800061e 	bne	r3,zero,417a8 <___vfprintf_internal_r+0x88>
   41790:	b9001917 	ldw	r4,100(r23)
   41794:	00f7ffc4 	movi	r3,-8193
   41798:	10880014 	ori	r2,r2,8192
   4179c:	20c6703a 	and	r3,r4,r3
   417a0:	b880030d 	sth	r2,12(r23)
   417a4:	b8c01915 	stw	r3,100(r23)
   417a8:	10c0020c 	andi	r3,r2,8
   417ac:	1800c326 	beq	r3,zero,41abc <___vfprintf_internal_r+0x39c>
   417b0:	b8c00417 	ldw	r3,16(r23)
   417b4:	1800c126 	beq	r3,zero,41abc <___vfprintf_internal_r+0x39c>
   417b8:	1080068c 	andi	r2,r2,26
   417bc:	00c00284 	movi	r3,10
   417c0:	10c0c626 	beq	r2,r3,41adc <___vfprintf_internal_r+0x3bc>
   417c4:	d8c00404 	addi	r3,sp,16
   417c8:	05000174 	movhi	r20,5
   417cc:	d9001e04 	addi	r4,sp,120
   417d0:	a5048084 	addi	r20,r20,4610
   417d4:	d8c01e15 	stw	r3,120(sp)
   417d8:	d8002015 	stw	zero,128(sp)
   417dc:	d8001f15 	stw	zero,124(sp)
   417e0:	d8003315 	stw	zero,204(sp)
   417e4:	d8003615 	stw	zero,216(sp)
   417e8:	d8003815 	stw	zero,224(sp)
   417ec:	1811883a 	mov	r8,r3
   417f0:	d8003915 	stw	zero,228(sp)
   417f4:	d8003a15 	stw	zero,232(sp)
   417f8:	d8002f15 	stw	zero,188(sp)
   417fc:	d9002815 	stw	r4,160(sp)
   41800:	a8800007 	ldb	r2,0(r21)
   41804:	10028b26 	beq	r2,zero,42234 <___vfprintf_internal_r+0xb14>
   41808:	00c00944 	movi	r3,37
   4180c:	a823883a 	mov	r17,r21
   41810:	10c0021e 	bne	r2,r3,4181c <___vfprintf_internal_r+0xfc>
   41814:	00001406 	br	41868 <___vfprintf_internal_r+0x148>
   41818:	10c00326 	beq	r2,r3,41828 <___vfprintf_internal_r+0x108>
   4181c:	8c400044 	addi	r17,r17,1
   41820:	88800007 	ldb	r2,0(r17)
   41824:	103ffc1e 	bne	r2,zero,41818 <__alt_data_end+0xfffdc018>
   41828:	8d61c83a 	sub	r16,r17,r21
   4182c:	80000e26 	beq	r16,zero,41868 <___vfprintf_internal_r+0x148>
   41830:	d8c02017 	ldw	r3,128(sp)
   41834:	d8801f17 	ldw	r2,124(sp)
   41838:	45400015 	stw	r21,0(r8)
   4183c:	1c07883a 	add	r3,r3,r16
   41840:	10800044 	addi	r2,r2,1
   41844:	d8c02015 	stw	r3,128(sp)
   41848:	44000115 	stw	r16,4(r8)
   4184c:	d8801f15 	stw	r2,124(sp)
   41850:	00c001c4 	movi	r3,7
   41854:	1880a916 	blt	r3,r2,41afc <___vfprintf_internal_r+0x3dc>
   41858:	42000204 	addi	r8,r8,8
   4185c:	d9402f17 	ldw	r5,188(sp)
   41860:	2c0b883a 	add	r5,r5,r16
   41864:	d9402f15 	stw	r5,188(sp)
   41868:	88800007 	ldb	r2,0(r17)
   4186c:	1000aa26 	beq	r2,zero,41b18 <___vfprintf_internal_r+0x3f8>
   41870:	8d400044 	addi	r21,r17,1
   41874:	8c400047 	ldb	r17,1(r17)
   41878:	0021883a 	mov	r16,zero
   4187c:	00bfffc4 	movi	r2,-1
   41880:	0025883a 	mov	r18,zero
   41884:	dc002905 	stb	r16,164(sp)
   41888:	d8002785 	stb	zero,158(sp)
   4188c:	d8002b05 	stb	zero,172(sp)
   41890:	d8802a15 	stw	r2,168(sp)
   41894:	d8003115 	stw	zero,196(sp)
   41898:	04c01604 	movi	r19,88
   4189c:	05800244 	movi	r22,9
   418a0:	9021883a 	mov	r16,r18
   418a4:	4039883a 	mov	fp,r8
   418a8:	ad400044 	addi	r21,r21,1
   418ac:	88bff804 	addi	r2,r17,-32
   418b0:	98833236 	bltu	r19,r2,4257c <___vfprintf_internal_r+0xe5c>
   418b4:	100490ba 	slli	r2,r2,2
   418b8:	00c00134 	movhi	r3,4
   418bc:	18c63304 	addi	r3,r3,6348
   418c0:	10c5883a 	add	r2,r2,r3
   418c4:	10800017 	ldw	r2,0(r2)
   418c8:	1000683a 	jmp	r2
   418cc:	00042474 	movhi	zero,4241
   418d0:	0004257c 	xorhi	zero,zero,4245
   418d4:	0004257c 	xorhi	zero,zero,4245
   418d8:	00042494 	movui	zero,4242
   418dc:	0004257c 	xorhi	zero,zero,4245
   418e0:	0004257c 	xorhi	zero,zero,4245
   418e4:	0004257c 	xorhi	zero,zero,4245
   418e8:	0004257c 	xorhi	zero,zero,4245
   418ec:	0004257c 	xorhi	zero,zero,4245
   418f0:	0004257c 	xorhi	zero,zero,4245
   418f4:	00041b7c 	xorhi	zero,zero,4205
   418f8:	00042384 	movi	zero,4238
   418fc:	0004257c 	xorhi	zero,zero,4245
   41900:	00041a40 	call	41a4 <__alt_mem_onchip_mem-0x3be5c>
   41904:	00041ba0 	cmpeqi	zero,zero,4206
   41908:	0004257c 	xorhi	zero,zero,4245
   4190c:	00041bf0 	cmpltui	zero,zero,4207
   41910:	00041bfc 	xorhi	zero,zero,4207
   41914:	00041bfc 	xorhi	zero,zero,4207
   41918:	00041bfc 	xorhi	zero,zero,4207
   4191c:	00041bfc 	xorhi	zero,zero,4207
   41920:	00041bfc 	xorhi	zero,zero,4207
   41924:	00041bfc 	xorhi	zero,zero,4207
   41928:	00041bfc 	xorhi	zero,zero,4207
   4192c:	00041bfc 	xorhi	zero,zero,4207
   41930:	00041bfc 	xorhi	zero,zero,4207
   41934:	0004257c 	xorhi	zero,zero,4245
   41938:	0004257c 	xorhi	zero,zero,4245
   4193c:	0004257c 	xorhi	zero,zero,4245
   41940:	0004257c 	xorhi	zero,zero,4245
   41944:	0004257c 	xorhi	zero,zero,4245
   41948:	0004257c 	xorhi	zero,zero,4245
   4194c:	0004257c 	xorhi	zero,zero,4245
   41950:	0004257c 	xorhi	zero,zero,4245
   41954:	0004257c 	xorhi	zero,zero,4245
   41958:	0004257c 	xorhi	zero,zero,4245
   4195c:	00041c38 	rdprs	zero,zero,4208
   41960:	00041d00 	call	41d0 <__alt_mem_onchip_mem-0x3be30>
   41964:	0004257c 	xorhi	zero,zero,4245
   41968:	00041d00 	call	41d0 <__alt_mem_onchip_mem-0x3be30>
   4196c:	0004257c 	xorhi	zero,zero,4245
   41970:	0004257c 	xorhi	zero,zero,4245
   41974:	0004257c 	xorhi	zero,zero,4245
   41978:	0004257c 	xorhi	zero,zero,4245
   4197c:	00041dac 	andhi	zero,zero,4214
   41980:	0004257c 	xorhi	zero,zero,4245
   41984:	0004257c 	xorhi	zero,zero,4245
   41988:	00041db8 	rdprs	zero,zero,4214
   4198c:	0004257c 	xorhi	zero,zero,4245
   41990:	0004257c 	xorhi	zero,zero,4245
   41994:	0004257c 	xorhi	zero,zero,4245
   41998:	0004257c 	xorhi	zero,zero,4245
   4199c:	0004257c 	xorhi	zero,zero,4245
   419a0:	0004223c 	xorhi	zero,zero,4232
   419a4:	0004257c 	xorhi	zero,zero,4245
   419a8:	0004257c 	xorhi	zero,zero,4245
   419ac:	000422a8 	cmpgeui	zero,zero,4234
   419b0:	0004257c 	xorhi	zero,zero,4245
   419b4:	0004257c 	xorhi	zero,zero,4245
   419b8:	0004257c 	xorhi	zero,zero,4245
   419bc:	0004257c 	xorhi	zero,zero,4245
   419c0:	0004257c 	xorhi	zero,zero,4245
   419c4:	0004257c 	xorhi	zero,zero,4245
   419c8:	0004257c 	xorhi	zero,zero,4245
   419cc:	0004257c 	xorhi	zero,zero,4245
   419d0:	0004257c 	xorhi	zero,zero,4245
   419d4:	0004257c 	xorhi	zero,zero,4245
   419d8:	00042520 	cmpeqi	zero,zero,4244
   419dc:	000424a0 	cmpeqi	zero,zero,4242
   419e0:	00041d00 	call	41d0 <__alt_mem_onchip_mem-0x3be30>
   419e4:	00041d00 	call	41d0 <__alt_mem_onchip_mem-0x3be30>
   419e8:	00041d00 	call	41d0 <__alt_mem_onchip_mem-0x3be30>
   419ec:	000424c0 	call	424c <__alt_mem_onchip_mem-0x3bdb4>
   419f0:	000424a0 	cmpeqi	zero,zero,4242
   419f4:	0004257c 	xorhi	zero,zero,4245
   419f8:	0004257c 	xorhi	zero,zero,4245
   419fc:	000424cc 	andi	zero,zero,4243
   41a00:	0004257c 	xorhi	zero,zero,4245
   41a04:	000424e0 	cmpeqi	zero,zero,4243
   41a08:	00042364 	muli	zero,zero,4237
   41a0c:	00041a4c 	andi	zero,zero,4201
   41a10:	0004239c 	xori	zero,zero,4238
   41a14:	0004257c 	xorhi	zero,zero,4245
   41a18:	000423a8 	cmpgeui	zero,zero,4238
   41a1c:	0004257c 	xorhi	zero,zero,4245
   41a20:	0004240c 	andi	zero,zero,4240
   41a24:	0004257c 	xorhi	zero,zero,4245
   41a28:	0004257c 	xorhi	zero,zero,4245
   41a2c:	0004242c 	andhi	zero,zero,4240
   41a30:	d8c03117 	ldw	r3,196(sp)
   41a34:	d8802e15 	stw	r2,184(sp)
   41a38:	00c7c83a 	sub	r3,zero,r3
   41a3c:	d8c03115 	stw	r3,196(sp)
   41a40:	84000114 	ori	r16,r16,4
   41a44:	ac400007 	ldb	r17,0(r21)
   41a48:	003f9706 	br	418a8 <__alt_data_end+0xfffdc0a8>
   41a4c:	00800c04 	movi	r2,48
   41a50:	d8802705 	stb	r2,156(sp)
   41a54:	00801e04 	movi	r2,120
   41a58:	d8802745 	stb	r2,157(sp)
   41a5c:	d9002a17 	ldw	r4,168(sp)
   41a60:	d8802e17 	ldw	r2,184(sp)
   41a64:	d8002785 	stb	zero,158(sp)
   41a68:	e011883a 	mov	r8,fp
   41a6c:	10c00104 	addi	r3,r2,4
   41a70:	14c00017 	ldw	r19,0(r2)
   41a74:	002d883a 	mov	r22,zero
   41a78:	80800094 	ori	r2,r16,2
   41a7c:	2002ca16 	blt	r4,zero,425a8 <___vfprintf_internal_r+0xe88>
   41a80:	00bfdfc4 	movi	r2,-129
   41a84:	80a4703a 	and	r18,r16,r2
   41a88:	d8c02e15 	stw	r3,184(sp)
   41a8c:	94800094 	ori	r18,r18,2
   41a90:	9802b41e 	bne	r19,zero,42564 <___vfprintf_internal_r+0xe44>
   41a94:	01400174 	movhi	r5,5
   41a98:	29447904 	addi	r5,r5,4580
   41a9c:	d9403915 	stw	r5,228(sp)
   41aa0:	04401e04 	movi	r17,120
   41aa4:	d8802a17 	ldw	r2,168(sp)
   41aa8:	0039883a 	mov	fp,zero
   41aac:	1001fa26 	beq	r2,zero,42298 <___vfprintf_internal_r+0xb78>
   41ab0:	0027883a 	mov	r19,zero
   41ab4:	002d883a 	mov	r22,zero
   41ab8:	00021906 	br	42320 <___vfprintf_internal_r+0xc00>
   41abc:	d9002d17 	ldw	r4,180(sp)
   41ac0:	b80b883a 	mov	r5,r23
   41ac4:	0043ad40 	call	43ad4 <__swsetup_r>
   41ac8:	1005dc1e 	bne	r2,zero,4323c <___vfprintf_internal_r+0x1b1c>
   41acc:	b880030b 	ldhu	r2,12(r23)
   41ad0:	00c00284 	movi	r3,10
   41ad4:	1080068c 	andi	r2,r2,26
   41ad8:	10ff3a1e 	bne	r2,r3,417c4 <__alt_data_end+0xfffdbfc4>
   41adc:	b880038f 	ldh	r2,14(r23)
   41ae0:	103f3816 	blt	r2,zero,417c4 <__alt_data_end+0xfffdbfc4>
   41ae4:	d9c02e17 	ldw	r7,184(sp)
   41ae8:	d9002d17 	ldw	r4,180(sp)
   41aec:	a80d883a 	mov	r6,r21
   41af0:	b80b883a 	mov	r5,r23
   41af4:	0043a180 	call	43a18 <__sbprintf>
   41af8:	00001106 	br	41b40 <___vfprintf_internal_r+0x420>
   41afc:	d9002d17 	ldw	r4,180(sp)
   41b00:	d9801e04 	addi	r6,sp,120
   41b04:	b80b883a 	mov	r5,r23
   41b08:	0048f000 	call	48f00 <__sprint_r>
   41b0c:	1000081e 	bne	r2,zero,41b30 <___vfprintf_internal_r+0x410>
   41b10:	da000404 	addi	r8,sp,16
   41b14:	003f5106 	br	4185c <__alt_data_end+0xfffdc05c>
   41b18:	d8802017 	ldw	r2,128(sp)
   41b1c:	10000426 	beq	r2,zero,41b30 <___vfprintf_internal_r+0x410>
   41b20:	d9002d17 	ldw	r4,180(sp)
   41b24:	d9801e04 	addi	r6,sp,120
   41b28:	b80b883a 	mov	r5,r23
   41b2c:	0048f000 	call	48f00 <__sprint_r>
   41b30:	b880030b 	ldhu	r2,12(r23)
   41b34:	1080100c 	andi	r2,r2,64
   41b38:	1005c01e 	bne	r2,zero,4323c <___vfprintf_internal_r+0x1b1c>
   41b3c:	d8802f17 	ldw	r2,188(sp)
   41b40:	dfc04717 	ldw	ra,284(sp)
   41b44:	df004617 	ldw	fp,280(sp)
   41b48:	ddc04517 	ldw	r23,276(sp)
   41b4c:	dd804417 	ldw	r22,272(sp)
   41b50:	dd404317 	ldw	r21,268(sp)
   41b54:	dd004217 	ldw	r20,264(sp)
   41b58:	dcc04117 	ldw	r19,260(sp)
   41b5c:	dc804017 	ldw	r18,256(sp)
   41b60:	dc403f17 	ldw	r17,252(sp)
   41b64:	dc003e17 	ldw	r16,248(sp)
   41b68:	dec04804 	addi	sp,sp,288
   41b6c:	f800283a 	ret
   41b70:	d9002d17 	ldw	r4,180(sp)
   41b74:	0045ae00 	call	45ae0 <__sinit>
   41b78:	003f0206 	br	41784 <__alt_data_end+0xfffdbf84>
   41b7c:	d9002e17 	ldw	r4,184(sp)
   41b80:	d9402e17 	ldw	r5,184(sp)
   41b84:	21000017 	ldw	r4,0(r4)
   41b88:	28800104 	addi	r2,r5,4
   41b8c:	d9003115 	stw	r4,196(sp)
   41b90:	203fa716 	blt	r4,zero,41a30 <__alt_data_end+0xfffdc230>
   41b94:	d8802e15 	stw	r2,184(sp)
   41b98:	ac400007 	ldb	r17,0(r21)
   41b9c:	003f4206 	br	418a8 <__alt_data_end+0xfffdc0a8>
   41ba0:	ac400007 	ldb	r17,0(r21)
   41ba4:	01000a84 	movi	r4,42
   41ba8:	a8c00044 	addi	r3,r21,1
   41bac:	89075826 	beq	r17,r4,43910 <___vfprintf_internal_r+0x21f0>
   41bb0:	8cbff404 	addi	r18,r17,-48
   41bb4:	b486ae36 	bltu	r22,r18,43670 <___vfprintf_internal_r+0x1f50>
   41bb8:	0009883a 	mov	r4,zero
   41bbc:	1823883a 	mov	r17,r3
   41bc0:	01400284 	movi	r5,10
   41bc4:	00415200 	call	41520 <__mulsi3>
   41bc8:	88c00007 	ldb	r3,0(r17)
   41bcc:	1489883a 	add	r4,r2,r18
   41bd0:	8d400044 	addi	r21,r17,1
   41bd4:	1cbff404 	addi	r18,r3,-48
   41bd8:	a823883a 	mov	r17,r21
   41bdc:	b4bff82e 	bgeu	r22,r18,41bc0 <__alt_data_end+0xfffdc3c0>
   41be0:	1823883a 	mov	r17,r3
   41be4:	2005f616 	blt	r4,zero,433c0 <___vfprintf_internal_r+0x1ca0>
   41be8:	d9002a15 	stw	r4,168(sp)
   41bec:	003f2f06 	br	418ac <__alt_data_end+0xfffdc0ac>
   41bf0:	84002014 	ori	r16,r16,128
   41bf4:	ac400007 	ldb	r17,0(r21)
   41bf8:	003f2b06 	br	418a8 <__alt_data_end+0xfffdc0a8>
   41bfc:	8cbff404 	addi	r18,r17,-48
   41c00:	d8003115 	stw	zero,196(sp)
   41c04:	0009883a 	mov	r4,zero
   41c08:	a823883a 	mov	r17,r21
   41c0c:	01400284 	movi	r5,10
   41c10:	00415200 	call	41520 <__mulsi3>
   41c14:	88c00007 	ldb	r3,0(r17)
   41c18:	9089883a 	add	r4,r18,r2
   41c1c:	ad400044 	addi	r21,r21,1
   41c20:	1cbff404 	addi	r18,r3,-48
   41c24:	a823883a 	mov	r17,r21
   41c28:	b4bff82e 	bgeu	r22,r18,41c0c <__alt_data_end+0xfffdc40c>
   41c2c:	1823883a 	mov	r17,r3
   41c30:	d9003115 	stw	r4,196(sp)
   41c34:	003f1d06 	br	418ac <__alt_data_end+0xfffdc0ac>
   41c38:	8025883a 	mov	r18,r16
   41c3c:	dc002903 	ldbu	r16,164(sp)
   41c40:	e011883a 	mov	r8,fp
   41c44:	84003fcc 	andi	r16,r16,255
   41c48:	8007531e 	bne	r16,zero,43998 <___vfprintf_internal_r+0x2278>
   41c4c:	94800414 	ori	r18,r18,16
   41c50:	9080080c 	andi	r2,r18,32
   41c54:	1003a326 	beq	r2,zero,42ae4 <___vfprintf_internal_r+0x13c4>
   41c58:	d9002e17 	ldw	r4,184(sp)
   41c5c:	20800117 	ldw	r2,4(r4)
   41c60:	24c00017 	ldw	r19,0(r4)
   41c64:	21000204 	addi	r4,r4,8
   41c68:	d9002e15 	stw	r4,184(sp)
   41c6c:	102d883a 	mov	r22,r2
   41c70:	10047316 	blt	r2,zero,42e40 <___vfprintf_internal_r+0x1720>
   41c74:	d9002a17 	ldw	r4,168(sp)
   41c78:	df002783 	ldbu	fp,158(sp)
   41c7c:	2003e416 	blt	r4,zero,42c10 <___vfprintf_internal_r+0x14f0>
   41c80:	00ffdfc4 	movi	r3,-129
   41c84:	9d84b03a 	or	r2,r19,r22
   41c88:	90e4703a 	and	r18,r18,r3
   41c8c:	10018026 	beq	r2,zero,42290 <___vfprintf_internal_r+0xb70>
   41c90:	b003ab26 	beq	r22,zero,42b40 <___vfprintf_internal_r+0x1420>
   41c94:	dc402915 	stw	r17,164(sp)
   41c98:	dc001e04 	addi	r16,sp,120
   41c9c:	b023883a 	mov	r17,r22
   41ca0:	402d883a 	mov	r22,r8
   41ca4:	9809883a 	mov	r4,r19
   41ca8:	880b883a 	mov	r5,r17
   41cac:	01800284 	movi	r6,10
   41cb0:	000f883a 	mov	r7,zero
   41cb4:	004b4440 	call	4b444 <__umoddi3>
   41cb8:	10800c04 	addi	r2,r2,48
   41cbc:	843fffc4 	addi	r16,r16,-1
   41cc0:	9809883a 	mov	r4,r19
   41cc4:	880b883a 	mov	r5,r17
   41cc8:	80800005 	stb	r2,0(r16)
   41ccc:	01800284 	movi	r6,10
   41cd0:	000f883a 	mov	r7,zero
   41cd4:	004ae480 	call	4ae48 <__udivdi3>
   41cd8:	1027883a 	mov	r19,r2
   41cdc:	10c4b03a 	or	r2,r2,r3
   41ce0:	1823883a 	mov	r17,r3
   41ce4:	103fef1e 	bne	r2,zero,41ca4 <__alt_data_end+0xfffdc4a4>
   41ce8:	d8c02817 	ldw	r3,160(sp)
   41cec:	dc402917 	ldw	r17,164(sp)
   41cf0:	b011883a 	mov	r8,r22
   41cf4:	1c07c83a 	sub	r3,r3,r16
   41cf8:	d8c02b15 	stw	r3,172(sp)
   41cfc:	00005f06 	br	41e7c <___vfprintf_internal_r+0x75c>
   41d00:	8025883a 	mov	r18,r16
   41d04:	dc002903 	ldbu	r16,164(sp)
   41d08:	e011883a 	mov	r8,fp
   41d0c:	84003fcc 	andi	r16,r16,255
   41d10:	80071e1e 	bne	r16,zero,4398c <___vfprintf_internal_r+0x226c>
   41d14:	9080020c 	andi	r2,r18,8
   41d18:	1004af26 	beq	r2,zero,42fd8 <___vfprintf_internal_r+0x18b8>
   41d1c:	d9002e17 	ldw	r4,184(sp)
   41d20:	d9402e17 	ldw	r5,184(sp)
   41d24:	d8802e17 	ldw	r2,184(sp)
   41d28:	21000017 	ldw	r4,0(r4)
   41d2c:	29400117 	ldw	r5,4(r5)
   41d30:	10800204 	addi	r2,r2,8
   41d34:	d9003615 	stw	r4,216(sp)
   41d38:	d9403815 	stw	r5,224(sp)
   41d3c:	d8802e15 	stw	r2,184(sp)
   41d40:	d9003617 	ldw	r4,216(sp)
   41d44:	d9403817 	ldw	r5,224(sp)
   41d48:	da003d15 	stw	r8,244(sp)
   41d4c:	04000044 	movi	r16,1
   41d50:	0048b240 	call	48b24 <__fpclassifyd>
   41d54:	da003d17 	ldw	r8,244(sp)
   41d58:	1404441e 	bne	r2,r16,42e6c <___vfprintf_internal_r+0x174c>
   41d5c:	d9003617 	ldw	r4,216(sp)
   41d60:	d9403817 	ldw	r5,224(sp)
   41d64:	000d883a 	mov	r6,zero
   41d68:	000f883a 	mov	r7,zero
   41d6c:	004cf9c0 	call	4cf9c <__ledf2>
   41d70:	da003d17 	ldw	r8,244(sp)
   41d74:	1005e316 	blt	r2,zero,43504 <___vfprintf_internal_r+0x1de4>
   41d78:	df002783 	ldbu	fp,158(sp)
   41d7c:	008011c4 	movi	r2,71
   41d80:	1445580e 	bge	r2,r17,432e4 <___vfprintf_internal_r+0x1bc4>
   41d84:	04000174 	movhi	r16,5
   41d88:	84047104 	addi	r16,r16,4548
   41d8c:	00c000c4 	movi	r3,3
   41d90:	00bfdfc4 	movi	r2,-129
   41d94:	d8c02915 	stw	r3,164(sp)
   41d98:	90a4703a 	and	r18,r18,r2
   41d9c:	d8c02b15 	stw	r3,172(sp)
   41da0:	d8002a15 	stw	zero,168(sp)
   41da4:	d8003215 	stw	zero,200(sp)
   41da8:	00003a06 	br	41e94 <___vfprintf_internal_r+0x774>
   41dac:	84000214 	ori	r16,r16,8
   41db0:	ac400007 	ldb	r17,0(r21)
   41db4:	003ebc06 	br	418a8 <__alt_data_end+0xfffdc0a8>
   41db8:	8025883a 	mov	r18,r16
   41dbc:	dc002903 	ldbu	r16,164(sp)
   41dc0:	e011883a 	mov	r8,fp
   41dc4:	84003fcc 	andi	r16,r16,255
   41dc8:	8007001e 	bne	r16,zero,439cc <___vfprintf_internal_r+0x22ac>
   41dcc:	94800414 	ori	r18,r18,16
   41dd0:	9080080c 	andi	r2,r18,32
   41dd4:	1002fa26 	beq	r2,zero,429c0 <___vfprintf_internal_r+0x12a0>
   41dd8:	d9002e17 	ldw	r4,184(sp)
   41ddc:	d9402a17 	ldw	r5,168(sp)
   41de0:	d8002785 	stb	zero,158(sp)
   41de4:	20800204 	addi	r2,r4,8
   41de8:	24c00017 	ldw	r19,0(r4)
   41dec:	25800117 	ldw	r22,4(r4)
   41df0:	2804b116 	blt	r5,zero,430b8 <___vfprintf_internal_r+0x1998>
   41df4:	013fdfc4 	movi	r4,-129
   41df8:	9d86b03a 	or	r3,r19,r22
   41dfc:	d8802e15 	stw	r2,184(sp)
   41e00:	9124703a 	and	r18,r18,r4
   41e04:	1802fb1e 	bne	r3,zero,429f4 <___vfprintf_internal_r+0x12d4>
   41e08:	d8c02a17 	ldw	r3,168(sp)
   41e0c:	0039883a 	mov	fp,zero
   41e10:	1805e526 	beq	r3,zero,435a8 <___vfprintf_internal_r+0x1e88>
   41e14:	0027883a 	mov	r19,zero
   41e18:	002d883a 	mov	r22,zero
   41e1c:	dc001e04 	addi	r16,sp,120
   41e20:	9806d0fa 	srli	r3,r19,3
   41e24:	b008977a 	slli	r4,r22,29
   41e28:	b02cd0fa 	srli	r22,r22,3
   41e2c:	9cc001cc 	andi	r19,r19,7
   41e30:	98800c04 	addi	r2,r19,48
   41e34:	843fffc4 	addi	r16,r16,-1
   41e38:	20e6b03a 	or	r19,r4,r3
   41e3c:	80800005 	stb	r2,0(r16)
   41e40:	9d86b03a 	or	r3,r19,r22
   41e44:	183ff61e 	bne	r3,zero,41e20 <__alt_data_end+0xfffdc620>
   41e48:	90c0004c 	andi	r3,r18,1
   41e4c:	18014126 	beq	r3,zero,42354 <___vfprintf_internal_r+0xc34>
   41e50:	10803fcc 	andi	r2,r2,255
   41e54:	1080201c 	xori	r2,r2,128
   41e58:	10bfe004 	addi	r2,r2,-128
   41e5c:	00c00c04 	movi	r3,48
   41e60:	10c13c26 	beq	r2,r3,42354 <___vfprintf_internal_r+0xc34>
   41e64:	80ffffc5 	stb	r3,-1(r16)
   41e68:	d8c02817 	ldw	r3,160(sp)
   41e6c:	80bfffc4 	addi	r2,r16,-1
   41e70:	1021883a 	mov	r16,r2
   41e74:	1887c83a 	sub	r3,r3,r2
   41e78:	d8c02b15 	stw	r3,172(sp)
   41e7c:	d8802b17 	ldw	r2,172(sp)
   41e80:	d9002a17 	ldw	r4,168(sp)
   41e84:	1100010e 	bge	r2,r4,41e8c <___vfprintf_internal_r+0x76c>
   41e88:	2005883a 	mov	r2,r4
   41e8c:	d8802915 	stw	r2,164(sp)
   41e90:	d8003215 	stw	zero,200(sp)
   41e94:	e7003fcc 	andi	fp,fp,255
   41e98:	e700201c 	xori	fp,fp,128
   41e9c:	e73fe004 	addi	fp,fp,-128
   41ea0:	e0000326 	beq	fp,zero,41eb0 <___vfprintf_internal_r+0x790>
   41ea4:	d8c02917 	ldw	r3,164(sp)
   41ea8:	18c00044 	addi	r3,r3,1
   41eac:	d8c02915 	stw	r3,164(sp)
   41eb0:	90c0008c 	andi	r3,r18,2
   41eb4:	d8c02c15 	stw	r3,176(sp)
   41eb8:	18000326 	beq	r3,zero,41ec8 <___vfprintf_internal_r+0x7a8>
   41ebc:	d8c02917 	ldw	r3,164(sp)
   41ec0:	18c00084 	addi	r3,r3,2
   41ec4:	d8c02915 	stw	r3,164(sp)
   41ec8:	90c0210c 	andi	r3,r18,132
   41ecc:	d8c03015 	stw	r3,192(sp)
   41ed0:	1801c51e 	bne	r3,zero,425e8 <___vfprintf_internal_r+0xec8>
   41ed4:	d9003117 	ldw	r4,196(sp)
   41ed8:	d8c02917 	ldw	r3,164(sp)
   41edc:	20e7c83a 	sub	r19,r4,r3
   41ee0:	04c1c10e 	bge	zero,r19,425e8 <___vfprintf_internal_r+0xec8>
   41ee4:	02400404 	movi	r9,16
   41ee8:	d8c02017 	ldw	r3,128(sp)
   41eec:	d8801f17 	ldw	r2,124(sp)
   41ef0:	4cc52f0e 	bge	r9,r19,433b0 <___vfprintf_internal_r+0x1c90>
   41ef4:	01400174 	movhi	r5,5
   41ef8:	29448484 	addi	r5,r5,4626
   41efc:	dc403b15 	stw	r17,236(sp)
   41f00:	d9403515 	stw	r5,212(sp)
   41f04:	9823883a 	mov	r17,r19
   41f08:	482d883a 	mov	r22,r9
   41f0c:	9027883a 	mov	r19,r18
   41f10:	070001c4 	movi	fp,7
   41f14:	8025883a 	mov	r18,r16
   41f18:	dc002d17 	ldw	r16,180(sp)
   41f1c:	00000306 	br	41f2c <___vfprintf_internal_r+0x80c>
   41f20:	8c7ffc04 	addi	r17,r17,-16
   41f24:	42000204 	addi	r8,r8,8
   41f28:	b440130e 	bge	r22,r17,41f78 <___vfprintf_internal_r+0x858>
   41f2c:	01000174 	movhi	r4,5
   41f30:	18c00404 	addi	r3,r3,16
   41f34:	10800044 	addi	r2,r2,1
   41f38:	21048484 	addi	r4,r4,4626
   41f3c:	41000015 	stw	r4,0(r8)
   41f40:	45800115 	stw	r22,4(r8)
   41f44:	d8c02015 	stw	r3,128(sp)
   41f48:	d8801f15 	stw	r2,124(sp)
   41f4c:	e0bff40e 	bge	fp,r2,41f20 <__alt_data_end+0xfffdc720>
   41f50:	d9801e04 	addi	r6,sp,120
   41f54:	b80b883a 	mov	r5,r23
   41f58:	8009883a 	mov	r4,r16
   41f5c:	0048f000 	call	48f00 <__sprint_r>
   41f60:	103ef31e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   41f64:	8c7ffc04 	addi	r17,r17,-16
   41f68:	d8c02017 	ldw	r3,128(sp)
   41f6c:	d8801f17 	ldw	r2,124(sp)
   41f70:	da000404 	addi	r8,sp,16
   41f74:	b47fed16 	blt	r22,r17,41f2c <__alt_data_end+0xfffdc72c>
   41f78:	9021883a 	mov	r16,r18
   41f7c:	9825883a 	mov	r18,r19
   41f80:	8827883a 	mov	r19,r17
   41f84:	dc403b17 	ldw	r17,236(sp)
   41f88:	d9403517 	ldw	r5,212(sp)
   41f8c:	98c7883a 	add	r3,r19,r3
   41f90:	10800044 	addi	r2,r2,1
   41f94:	41400015 	stw	r5,0(r8)
   41f98:	44c00115 	stw	r19,4(r8)
   41f9c:	d8c02015 	stw	r3,128(sp)
   41fa0:	d8801f15 	stw	r2,124(sp)
   41fa4:	010001c4 	movi	r4,7
   41fa8:	2082c516 	blt	r4,r2,42ac0 <___vfprintf_internal_r+0x13a0>
   41fac:	df002787 	ldb	fp,158(sp)
   41fb0:	42000204 	addi	r8,r8,8
   41fb4:	e0000c26 	beq	fp,zero,41fe8 <___vfprintf_internal_r+0x8c8>
   41fb8:	d8801f17 	ldw	r2,124(sp)
   41fbc:	d9002784 	addi	r4,sp,158
   41fc0:	18c00044 	addi	r3,r3,1
   41fc4:	10800044 	addi	r2,r2,1
   41fc8:	41000015 	stw	r4,0(r8)
   41fcc:	01000044 	movi	r4,1
   41fd0:	41000115 	stw	r4,4(r8)
   41fd4:	d8c02015 	stw	r3,128(sp)
   41fd8:	d8801f15 	stw	r2,124(sp)
   41fdc:	010001c4 	movi	r4,7
   41fe0:	20825e16 	blt	r4,r2,4295c <___vfprintf_internal_r+0x123c>
   41fe4:	42000204 	addi	r8,r8,8
   41fe8:	d8802c17 	ldw	r2,176(sp)
   41fec:	10000c26 	beq	r2,zero,42020 <___vfprintf_internal_r+0x900>
   41ff0:	d8801f17 	ldw	r2,124(sp)
   41ff4:	d9002704 	addi	r4,sp,156
   41ff8:	18c00084 	addi	r3,r3,2
   41ffc:	10800044 	addi	r2,r2,1
   42000:	41000015 	stw	r4,0(r8)
   42004:	01000084 	movi	r4,2
   42008:	41000115 	stw	r4,4(r8)
   4200c:	d8c02015 	stw	r3,128(sp)
   42010:	d8801f15 	stw	r2,124(sp)
   42014:	010001c4 	movi	r4,7
   42018:	20825816 	blt	r4,r2,4297c <___vfprintf_internal_r+0x125c>
   4201c:	42000204 	addi	r8,r8,8
   42020:	d9003017 	ldw	r4,192(sp)
   42024:	00802004 	movi	r2,128
   42028:	2081bb26 	beq	r4,r2,42718 <___vfprintf_internal_r+0xff8>
   4202c:	d9402a17 	ldw	r5,168(sp)
   42030:	d8802b17 	ldw	r2,172(sp)
   42034:	28adc83a 	sub	r22,r5,r2
   42038:	0580310e 	bge	zero,r22,42100 <___vfprintf_internal_r+0x9e0>
   4203c:	07000404 	movi	fp,16
   42040:	d8801f17 	ldw	r2,124(sp)
   42044:	e584360e 	bge	fp,r22,43120 <___vfprintf_internal_r+0x1a00>
   42048:	01400174 	movhi	r5,5
   4204c:	29448084 	addi	r5,r5,4610
   42050:	dc402a15 	stw	r17,168(sp)
   42054:	d9402c15 	stw	r5,176(sp)
   42058:	b023883a 	mov	r17,r22
   4205c:	04c001c4 	movi	r19,7
   42060:	a82d883a 	mov	r22,r21
   42064:	902b883a 	mov	r21,r18
   42068:	8025883a 	mov	r18,r16
   4206c:	dc002d17 	ldw	r16,180(sp)
   42070:	00000306 	br	42080 <___vfprintf_internal_r+0x960>
   42074:	8c7ffc04 	addi	r17,r17,-16
   42078:	42000204 	addi	r8,r8,8
   4207c:	e440110e 	bge	fp,r17,420c4 <___vfprintf_internal_r+0x9a4>
   42080:	18c00404 	addi	r3,r3,16
   42084:	10800044 	addi	r2,r2,1
   42088:	45000015 	stw	r20,0(r8)
   4208c:	47000115 	stw	fp,4(r8)
   42090:	d8c02015 	stw	r3,128(sp)
   42094:	d8801f15 	stw	r2,124(sp)
   42098:	98bff60e 	bge	r19,r2,42074 <__alt_data_end+0xfffdc874>
   4209c:	d9801e04 	addi	r6,sp,120
   420a0:	b80b883a 	mov	r5,r23
   420a4:	8009883a 	mov	r4,r16
   420a8:	0048f000 	call	48f00 <__sprint_r>
   420ac:	103ea01e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   420b0:	8c7ffc04 	addi	r17,r17,-16
   420b4:	d8c02017 	ldw	r3,128(sp)
   420b8:	d8801f17 	ldw	r2,124(sp)
   420bc:	da000404 	addi	r8,sp,16
   420c0:	e47fef16 	blt	fp,r17,42080 <__alt_data_end+0xfffdc880>
   420c4:	9021883a 	mov	r16,r18
   420c8:	a825883a 	mov	r18,r21
   420cc:	b02b883a 	mov	r21,r22
   420d0:	882d883a 	mov	r22,r17
   420d4:	dc402a17 	ldw	r17,168(sp)
   420d8:	d9002c17 	ldw	r4,176(sp)
   420dc:	1d87883a 	add	r3,r3,r22
   420e0:	10800044 	addi	r2,r2,1
   420e4:	41000015 	stw	r4,0(r8)
   420e8:	45800115 	stw	r22,4(r8)
   420ec:	d8c02015 	stw	r3,128(sp)
   420f0:	d8801f15 	stw	r2,124(sp)
   420f4:	010001c4 	movi	r4,7
   420f8:	20821016 	blt	r4,r2,4293c <___vfprintf_internal_r+0x121c>
   420fc:	42000204 	addi	r8,r8,8
   42100:	9080400c 	andi	r2,r18,256
   42104:	10013a1e 	bne	r2,zero,425f0 <___vfprintf_internal_r+0xed0>
   42108:	d9402b17 	ldw	r5,172(sp)
   4210c:	d8801f17 	ldw	r2,124(sp)
   42110:	44000015 	stw	r16,0(r8)
   42114:	1947883a 	add	r3,r3,r5
   42118:	10800044 	addi	r2,r2,1
   4211c:	41400115 	stw	r5,4(r8)
   42120:	d8c02015 	stw	r3,128(sp)
   42124:	d8801f15 	stw	r2,124(sp)
   42128:	010001c4 	movi	r4,7
   4212c:	2081f516 	blt	r4,r2,42904 <___vfprintf_internal_r+0x11e4>
   42130:	42000204 	addi	r8,r8,8
   42134:	9480010c 	andi	r18,r18,4
   42138:	90003226 	beq	r18,zero,42204 <___vfprintf_internal_r+0xae4>
   4213c:	d9403117 	ldw	r5,196(sp)
   42140:	d8802917 	ldw	r2,164(sp)
   42144:	28a1c83a 	sub	r16,r5,r2
   42148:	04002e0e 	bge	zero,r16,42204 <___vfprintf_internal_r+0xae4>
   4214c:	04400404 	movi	r17,16
   42150:	d8801f17 	ldw	r2,124(sp)
   42154:	8c04c40e 	bge	r17,r16,43468 <___vfprintf_internal_r+0x1d48>
   42158:	01400174 	movhi	r5,5
   4215c:	29448484 	addi	r5,r5,4626
   42160:	d9403515 	stw	r5,212(sp)
   42164:	048001c4 	movi	r18,7
   42168:	dcc02d17 	ldw	r19,180(sp)
   4216c:	00000306 	br	4217c <___vfprintf_internal_r+0xa5c>
   42170:	843ffc04 	addi	r16,r16,-16
   42174:	42000204 	addi	r8,r8,8
   42178:	8c00130e 	bge	r17,r16,421c8 <___vfprintf_internal_r+0xaa8>
   4217c:	01000174 	movhi	r4,5
   42180:	18c00404 	addi	r3,r3,16
   42184:	10800044 	addi	r2,r2,1
   42188:	21048484 	addi	r4,r4,4626
   4218c:	41000015 	stw	r4,0(r8)
   42190:	44400115 	stw	r17,4(r8)
   42194:	d8c02015 	stw	r3,128(sp)
   42198:	d8801f15 	stw	r2,124(sp)
   4219c:	90bff40e 	bge	r18,r2,42170 <__alt_data_end+0xfffdc970>
   421a0:	d9801e04 	addi	r6,sp,120
   421a4:	b80b883a 	mov	r5,r23
   421a8:	9809883a 	mov	r4,r19
   421ac:	0048f000 	call	48f00 <__sprint_r>
   421b0:	103e5f1e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   421b4:	843ffc04 	addi	r16,r16,-16
   421b8:	d8c02017 	ldw	r3,128(sp)
   421bc:	d8801f17 	ldw	r2,124(sp)
   421c0:	da000404 	addi	r8,sp,16
   421c4:	8c3fed16 	blt	r17,r16,4217c <__alt_data_end+0xfffdc97c>
   421c8:	d9403517 	ldw	r5,212(sp)
   421cc:	1c07883a 	add	r3,r3,r16
   421d0:	10800044 	addi	r2,r2,1
   421d4:	41400015 	stw	r5,0(r8)
   421d8:	44000115 	stw	r16,4(r8)
   421dc:	d8c02015 	stw	r3,128(sp)
   421e0:	d8801f15 	stw	r2,124(sp)
   421e4:	010001c4 	movi	r4,7
   421e8:	2080060e 	bge	r4,r2,42204 <___vfprintf_internal_r+0xae4>
   421ec:	d9002d17 	ldw	r4,180(sp)
   421f0:	d9801e04 	addi	r6,sp,120
   421f4:	b80b883a 	mov	r5,r23
   421f8:	0048f000 	call	48f00 <__sprint_r>
   421fc:	103e4c1e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42200:	d8c02017 	ldw	r3,128(sp)
   42204:	d8803117 	ldw	r2,196(sp)
   42208:	d9002917 	ldw	r4,164(sp)
   4220c:	1100010e 	bge	r2,r4,42214 <___vfprintf_internal_r+0xaf4>
   42210:	2005883a 	mov	r2,r4
   42214:	d9402f17 	ldw	r5,188(sp)
   42218:	288b883a 	add	r5,r5,r2
   4221c:	d9402f15 	stw	r5,188(sp)
   42220:	1801c01e 	bne	r3,zero,42924 <___vfprintf_internal_r+0x1204>
   42224:	a8800007 	ldb	r2,0(r21)
   42228:	d8001f15 	stw	zero,124(sp)
   4222c:	da000404 	addi	r8,sp,16
   42230:	103d751e 	bne	r2,zero,41808 <__alt_data_end+0xfffdc008>
   42234:	a823883a 	mov	r17,r21
   42238:	003d8b06 	br	41868 <__alt_data_end+0xfffdc068>
   4223c:	8025883a 	mov	r18,r16
   42240:	dc002903 	ldbu	r16,164(sp)
   42244:	e011883a 	mov	r8,fp
   42248:	84003fcc 	andi	r16,r16,255
   4224c:	8005e51e 	bne	r16,zero,439e4 <___vfprintf_internal_r+0x22c4>
   42250:	94800414 	ori	r18,r18,16
   42254:	9080080c 	andi	r2,r18,32
   42258:	10022b26 	beq	r2,zero,42b08 <___vfprintf_internal_r+0x13e8>
   4225c:	d9002e17 	ldw	r4,184(sp)
   42260:	d9402a17 	ldw	r5,168(sp)
   42264:	d8002785 	stb	zero,158(sp)
   42268:	20c00204 	addi	r3,r4,8
   4226c:	24c00017 	ldw	r19,0(r4)
   42270:	25800117 	ldw	r22,4(r4)
   42274:	28042e16 	blt	r5,zero,43330 <___vfprintf_internal_r+0x1c10>
   42278:	013fdfc4 	movi	r4,-129
   4227c:	9d84b03a 	or	r2,r19,r22
   42280:	d8c02e15 	stw	r3,184(sp)
   42284:	9124703a 	and	r18,r18,r4
   42288:	0039883a 	mov	fp,zero
   4228c:	103e801e 	bne	r2,zero,41c90 <__alt_data_end+0xfffdc490>
   42290:	d9002a17 	ldw	r4,168(sp)
   42294:	2002e01e 	bne	r4,zero,42e18 <___vfprintf_internal_r+0x16f8>
   42298:	d8002a15 	stw	zero,168(sp)
   4229c:	d8002b15 	stw	zero,172(sp)
   422a0:	dc001e04 	addi	r16,sp,120
   422a4:	003ef506 	br	41e7c <__alt_data_end+0xfffdc67c>
   422a8:	8025883a 	mov	r18,r16
   422ac:	dc002903 	ldbu	r16,164(sp)
   422b0:	e011883a 	mov	r8,fp
   422b4:	84003fcc 	andi	r16,r16,255
   422b8:	8005ba1e 	bne	r16,zero,439a4 <___vfprintf_internal_r+0x2284>
   422bc:	01000174 	movhi	r4,5
   422c0:	21047404 	addi	r4,r4,4560
   422c4:	d9003915 	stw	r4,228(sp)
   422c8:	9080080c 	andi	r2,r18,32
   422cc:	10006126 	beq	r2,zero,42454 <___vfprintf_internal_r+0xd34>
   422d0:	d9402e17 	ldw	r5,184(sp)
   422d4:	2cc00017 	ldw	r19,0(r5)
   422d8:	2d800117 	ldw	r22,4(r5)
   422dc:	29400204 	addi	r5,r5,8
   422e0:	d9402e15 	stw	r5,184(sp)
   422e4:	9080004c 	andi	r2,r18,1
   422e8:	1001ac26 	beq	r2,zero,4299c <___vfprintf_internal_r+0x127c>
   422ec:	9d84b03a 	or	r2,r19,r22
   422f0:	10038526 	beq	r2,zero,43108 <___vfprintf_internal_r+0x19e8>
   422f4:	d8c02a17 	ldw	r3,168(sp)
   422f8:	00800c04 	movi	r2,48
   422fc:	d8802705 	stb	r2,156(sp)
   42300:	dc402745 	stb	r17,157(sp)
   42304:	d8002785 	stb	zero,158(sp)
   42308:	90800094 	ori	r2,r18,2
   4230c:	18047916 	blt	r3,zero,434f4 <___vfprintf_internal_r+0x1dd4>
   42310:	00bfdfc4 	movi	r2,-129
   42314:	90a4703a 	and	r18,r18,r2
   42318:	94800094 	ori	r18,r18,2
   4231c:	0039883a 	mov	fp,zero
   42320:	d9003917 	ldw	r4,228(sp)
   42324:	dc001e04 	addi	r16,sp,120
   42328:	988003cc 	andi	r2,r19,15
   4232c:	b006973a 	slli	r3,r22,28
   42330:	2085883a 	add	r2,r4,r2
   42334:	9826d13a 	srli	r19,r19,4
   42338:	10800003 	ldbu	r2,0(r2)
   4233c:	b02cd13a 	srli	r22,r22,4
   42340:	843fffc4 	addi	r16,r16,-1
   42344:	1ce6b03a 	or	r19,r3,r19
   42348:	80800005 	stb	r2,0(r16)
   4234c:	9d84b03a 	or	r2,r19,r22
   42350:	103ff51e 	bne	r2,zero,42328 <__alt_data_end+0xfffdcb28>
   42354:	d8c02817 	ldw	r3,160(sp)
   42358:	1c07c83a 	sub	r3,r3,r16
   4235c:	d8c02b15 	stw	r3,172(sp)
   42360:	003ec606 	br	41e7c <__alt_data_end+0xfffdc67c>
   42364:	8025883a 	mov	r18,r16
   42368:	dc002903 	ldbu	r16,164(sp)
   4236c:	e011883a 	mov	r8,fp
   42370:	84003fcc 	andi	r16,r16,255
   42374:	803e9626 	beq	r16,zero,41dd0 <__alt_data_end+0xfffdc5d0>
   42378:	d8c02b03 	ldbu	r3,172(sp)
   4237c:	d8c02785 	stb	r3,158(sp)
   42380:	003e9306 	br	41dd0 <__alt_data_end+0xfffdc5d0>
   42384:	00c00044 	movi	r3,1
   42388:	d8c02905 	stb	r3,164(sp)
   4238c:	00c00ac4 	movi	r3,43
   42390:	d8c02b05 	stb	r3,172(sp)
   42394:	ac400007 	ldb	r17,0(r21)
   42398:	003d4306 	br	418a8 <__alt_data_end+0xfffdc0a8>
   4239c:	84000814 	ori	r16,r16,32
   423a0:	ac400007 	ldb	r17,0(r21)
   423a4:	003d4006 	br	418a8 <__alt_data_end+0xfffdc0a8>
   423a8:	d8802e17 	ldw	r2,184(sp)
   423ac:	8025883a 	mov	r18,r16
   423b0:	d8002785 	stb	zero,158(sp)
   423b4:	14000017 	ldw	r16,0(r2)
   423b8:	e011883a 	mov	r8,fp
   423bc:	14c00104 	addi	r19,r2,4
   423c0:	80042d26 	beq	r16,zero,43478 <___vfprintf_internal_r+0x1d58>
   423c4:	d8c02a17 	ldw	r3,168(sp)
   423c8:	1803e416 	blt	r3,zero,4335c <___vfprintf_internal_r+0x1c3c>
   423cc:	180d883a 	mov	r6,r3
   423d0:	000b883a 	mov	r5,zero
   423d4:	8009883a 	mov	r4,r16
   423d8:	df003d15 	stw	fp,244(sp)
   423dc:	00470580 	call	47058 <memchr>
   423e0:	da003d17 	ldw	r8,244(sp)
   423e4:	10046826 	beq	r2,zero,43588 <___vfprintf_internal_r+0x1e68>
   423e8:	1405c83a 	sub	r2,r2,r16
   423ec:	d8802b15 	stw	r2,172(sp)
   423f0:	1003e016 	blt	r2,zero,43374 <___vfprintf_internal_r+0x1c54>
   423f4:	df002783 	ldbu	fp,158(sp)
   423f8:	d8802915 	stw	r2,164(sp)
   423fc:	dcc02e15 	stw	r19,184(sp)
   42400:	d8002a15 	stw	zero,168(sp)
   42404:	d8003215 	stw	zero,200(sp)
   42408:	003ea206 	br	41e94 <__alt_data_end+0xfffdc694>
   4240c:	8025883a 	mov	r18,r16
   42410:	dc002903 	ldbu	r16,164(sp)
   42414:	e011883a 	mov	r8,fp
   42418:	84003fcc 	andi	r16,r16,255
   4241c:	803f8d26 	beq	r16,zero,42254 <__alt_data_end+0xfffdca54>
   42420:	d8c02b03 	ldbu	r3,172(sp)
   42424:	d8c02785 	stb	r3,158(sp)
   42428:	003f8a06 	br	42254 <__alt_data_end+0xfffdca54>
   4242c:	8025883a 	mov	r18,r16
   42430:	dc002903 	ldbu	r16,164(sp)
   42434:	e011883a 	mov	r8,fp
   42438:	84003fcc 	andi	r16,r16,255
   4243c:	8005661e 	bne	r16,zero,439d8 <___vfprintf_internal_r+0x22b8>
   42440:	01000174 	movhi	r4,5
   42444:	21047904 	addi	r4,r4,4580
   42448:	d9003915 	stw	r4,228(sp)
   4244c:	9080080c 	andi	r2,r18,32
   42450:	103f9f1e 	bne	r2,zero,422d0 <__alt_data_end+0xfffdcad0>
   42454:	9080040c 	andi	r2,r18,16
   42458:	1002eb26 	beq	r2,zero,43008 <___vfprintf_internal_r+0x18e8>
   4245c:	d8802e17 	ldw	r2,184(sp)
   42460:	002d883a 	mov	r22,zero
   42464:	14c00017 	ldw	r19,0(r2)
   42468:	10800104 	addi	r2,r2,4
   4246c:	d8802e15 	stw	r2,184(sp)
   42470:	003f9c06 	br	422e4 <__alt_data_end+0xfffdcae4>
   42474:	d8802b07 	ldb	r2,172(sp)
   42478:	1002e11e 	bne	r2,zero,43000 <___vfprintf_internal_r+0x18e0>
   4247c:	00c00044 	movi	r3,1
   42480:	d8c02905 	stb	r3,164(sp)
   42484:	00c00804 	movi	r3,32
   42488:	d8c02b05 	stb	r3,172(sp)
   4248c:	ac400007 	ldb	r17,0(r21)
   42490:	003d0506 	br	418a8 <__alt_data_end+0xfffdc0a8>
   42494:	84000054 	ori	r16,r16,1
   42498:	ac400007 	ldb	r17,0(r21)
   4249c:	003d0206 	br	418a8 <__alt_data_end+0xfffdc0a8>
   424a0:	8025883a 	mov	r18,r16
   424a4:	dc002903 	ldbu	r16,164(sp)
   424a8:	e011883a 	mov	r8,fp
   424ac:	84003fcc 	andi	r16,r16,255
   424b0:	803de726 	beq	r16,zero,41c50 <__alt_data_end+0xfffdc450>
   424b4:	d8c02b03 	ldbu	r3,172(sp)
   424b8:	d8c02785 	stb	r3,158(sp)
   424bc:	003de406 	br	41c50 <__alt_data_end+0xfffdc450>
   424c0:	84001014 	ori	r16,r16,64
   424c4:	ac400007 	ldb	r17,0(r21)
   424c8:	003cf706 	br	418a8 <__alt_data_end+0xfffdc0a8>
   424cc:	ac400007 	ldb	r17,0(r21)
   424d0:	00801b04 	movi	r2,108
   424d4:	88838f26 	beq	r17,r2,43314 <___vfprintf_internal_r+0x1bf4>
   424d8:	84000414 	ori	r16,r16,16
   424dc:	003cf206 	br	418a8 <__alt_data_end+0xfffdc0a8>
   424e0:	8025883a 	mov	r18,r16
   424e4:	dc002903 	ldbu	r16,164(sp)
   424e8:	e011883a 	mov	r8,fp
   424ec:	84003fcc 	andi	r16,r16,255
   424f0:	80053f1e 	bne	r16,zero,439f0 <___vfprintf_internal_r+0x22d0>
   424f4:	9080080c 	andi	r2,r18,32
   424f8:	1002d226 	beq	r2,zero,43044 <___vfprintf_internal_r+0x1924>
   424fc:	d9002e17 	ldw	r4,184(sp)
   42500:	d9402f17 	ldw	r5,188(sp)
   42504:	20800017 	ldw	r2,0(r4)
   42508:	2807d7fa 	srai	r3,r5,31
   4250c:	21000104 	addi	r4,r4,4
   42510:	d9002e15 	stw	r4,184(sp)
   42514:	11400015 	stw	r5,0(r2)
   42518:	10c00115 	stw	r3,4(r2)
   4251c:	003cb806 	br	41800 <__alt_data_end+0xfffdc000>
   42520:	d8c02e17 	ldw	r3,184(sp)
   42524:	d9002e17 	ldw	r4,184(sp)
   42528:	8025883a 	mov	r18,r16
   4252c:	18800017 	ldw	r2,0(r3)
   42530:	21000104 	addi	r4,r4,4
   42534:	00c00044 	movi	r3,1
   42538:	e011883a 	mov	r8,fp
   4253c:	d8c02915 	stw	r3,164(sp)
   42540:	d8002785 	stb	zero,158(sp)
   42544:	d8801405 	stb	r2,80(sp)
   42548:	d9002e15 	stw	r4,184(sp)
   4254c:	d8c02b15 	stw	r3,172(sp)
   42550:	d8002a15 	stw	zero,168(sp)
   42554:	d8003215 	stw	zero,200(sp)
   42558:	dc001404 	addi	r16,sp,80
   4255c:	0039883a 	mov	fp,zero
   42560:	003e5306 	br	41eb0 <__alt_data_end+0xfffdc6b0>
   42564:	01000174 	movhi	r4,5
   42568:	21047904 	addi	r4,r4,4580
   4256c:	0039883a 	mov	fp,zero
   42570:	d9003915 	stw	r4,228(sp)
   42574:	04401e04 	movi	r17,120
   42578:	003f6906 	br	42320 <__alt_data_end+0xfffdcb20>
   4257c:	8025883a 	mov	r18,r16
   42580:	dc002903 	ldbu	r16,164(sp)
   42584:	e011883a 	mov	r8,fp
   42588:	84003fcc 	andi	r16,r16,255
   4258c:	8005081e 	bne	r16,zero,439b0 <___vfprintf_internal_r+0x2290>
   42590:	883d6126 	beq	r17,zero,41b18 <__alt_data_end+0xfffdc318>
   42594:	00c00044 	movi	r3,1
   42598:	d8c02915 	stw	r3,164(sp)
   4259c:	dc401405 	stb	r17,80(sp)
   425a0:	d8002785 	stb	zero,158(sp)
   425a4:	003fe906 	br	4254c <__alt_data_end+0xfffdcd4c>
   425a8:	01400174 	movhi	r5,5
   425ac:	29447904 	addi	r5,r5,4580
   425b0:	d9403915 	stw	r5,228(sp)
   425b4:	d8c02e15 	stw	r3,184(sp)
   425b8:	1025883a 	mov	r18,r2
   425bc:	04401e04 	movi	r17,120
   425c0:	9d84b03a 	or	r2,r19,r22
   425c4:	1000fc1e 	bne	r2,zero,429b8 <___vfprintf_internal_r+0x1298>
   425c8:	0039883a 	mov	fp,zero
   425cc:	00800084 	movi	r2,2
   425d0:	10803fcc 	andi	r2,r2,255
   425d4:	00c00044 	movi	r3,1
   425d8:	10c20f26 	beq	r2,r3,42e18 <___vfprintf_internal_r+0x16f8>
   425dc:	00c00084 	movi	r3,2
   425e0:	10fd3326 	beq	r2,r3,41ab0 <__alt_data_end+0xfffdc2b0>
   425e4:	003e0b06 	br	41e14 <__alt_data_end+0xfffdc614>
   425e8:	d8c02017 	ldw	r3,128(sp)
   425ec:	003e7106 	br	41fb4 <__alt_data_end+0xfffdc7b4>
   425f0:	00801944 	movi	r2,101
   425f4:	14407e0e 	bge	r2,r17,427f0 <___vfprintf_internal_r+0x10d0>
   425f8:	d9003617 	ldw	r4,216(sp)
   425fc:	d9403817 	ldw	r5,224(sp)
   42600:	000d883a 	mov	r6,zero
   42604:	000f883a 	mov	r7,zero
   42608:	d8c03c15 	stw	r3,240(sp)
   4260c:	da003d15 	stw	r8,244(sp)
   42610:	004ce380 	call	4ce38 <__eqdf2>
   42614:	d8c03c17 	ldw	r3,240(sp)
   42618:	da003d17 	ldw	r8,244(sp)
   4261c:	1000f71e 	bne	r2,zero,429fc <___vfprintf_internal_r+0x12dc>
   42620:	d8801f17 	ldw	r2,124(sp)
   42624:	01000174 	movhi	r4,5
   42628:	21048004 	addi	r4,r4,4608
   4262c:	18c00044 	addi	r3,r3,1
   42630:	10800044 	addi	r2,r2,1
   42634:	41000015 	stw	r4,0(r8)
   42638:	01000044 	movi	r4,1
   4263c:	41000115 	stw	r4,4(r8)
   42640:	d8c02015 	stw	r3,128(sp)
   42644:	d8801f15 	stw	r2,124(sp)
   42648:	010001c4 	movi	r4,7
   4264c:	2082b816 	blt	r4,r2,43130 <___vfprintf_internal_r+0x1a10>
   42650:	42000204 	addi	r8,r8,8
   42654:	d8802617 	ldw	r2,152(sp)
   42658:	d9403317 	ldw	r5,204(sp)
   4265c:	11400216 	blt	r2,r5,42668 <___vfprintf_internal_r+0xf48>
   42660:	9080004c 	andi	r2,r18,1
   42664:	103eb326 	beq	r2,zero,42134 <__alt_data_end+0xfffdc934>
   42668:	d8803717 	ldw	r2,220(sp)
   4266c:	d9003417 	ldw	r4,208(sp)
   42670:	d9403717 	ldw	r5,220(sp)
   42674:	1887883a 	add	r3,r3,r2
   42678:	d8801f17 	ldw	r2,124(sp)
   4267c:	41000015 	stw	r4,0(r8)
   42680:	41400115 	stw	r5,4(r8)
   42684:	10800044 	addi	r2,r2,1
   42688:	d8c02015 	stw	r3,128(sp)
   4268c:	d8801f15 	stw	r2,124(sp)
   42690:	010001c4 	movi	r4,7
   42694:	20832916 	blt	r4,r2,4333c <___vfprintf_internal_r+0x1c1c>
   42698:	42000204 	addi	r8,r8,8
   4269c:	d8803317 	ldw	r2,204(sp)
   426a0:	143fffc4 	addi	r16,r2,-1
   426a4:	043ea30e 	bge	zero,r16,42134 <__alt_data_end+0xfffdc934>
   426a8:	04400404 	movi	r17,16
   426ac:	d8801f17 	ldw	r2,124(sp)
   426b0:	8c00880e 	bge	r17,r16,428d4 <___vfprintf_internal_r+0x11b4>
   426b4:	01400174 	movhi	r5,5
   426b8:	29448084 	addi	r5,r5,4610
   426bc:	d9402c15 	stw	r5,176(sp)
   426c0:	058001c4 	movi	r22,7
   426c4:	dcc02d17 	ldw	r19,180(sp)
   426c8:	00000306 	br	426d8 <___vfprintf_internal_r+0xfb8>
   426cc:	42000204 	addi	r8,r8,8
   426d0:	843ffc04 	addi	r16,r16,-16
   426d4:	8c00820e 	bge	r17,r16,428e0 <___vfprintf_internal_r+0x11c0>
   426d8:	18c00404 	addi	r3,r3,16
   426dc:	10800044 	addi	r2,r2,1
   426e0:	45000015 	stw	r20,0(r8)
   426e4:	44400115 	stw	r17,4(r8)
   426e8:	d8c02015 	stw	r3,128(sp)
   426ec:	d8801f15 	stw	r2,124(sp)
   426f0:	b0bff60e 	bge	r22,r2,426cc <__alt_data_end+0xfffdcecc>
   426f4:	d9801e04 	addi	r6,sp,120
   426f8:	b80b883a 	mov	r5,r23
   426fc:	9809883a 	mov	r4,r19
   42700:	0048f000 	call	48f00 <__sprint_r>
   42704:	103d0a1e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42708:	d8c02017 	ldw	r3,128(sp)
   4270c:	d8801f17 	ldw	r2,124(sp)
   42710:	da000404 	addi	r8,sp,16
   42714:	003fee06 	br	426d0 <__alt_data_end+0xfffdced0>
   42718:	d9403117 	ldw	r5,196(sp)
   4271c:	d8802917 	ldw	r2,164(sp)
   42720:	28adc83a 	sub	r22,r5,r2
   42724:	05be410e 	bge	zero,r22,4202c <__alt_data_end+0xfffdc82c>
   42728:	07000404 	movi	fp,16
   4272c:	d8801f17 	ldw	r2,124(sp)
   42730:	e5838f0e 	bge	fp,r22,43570 <___vfprintf_internal_r+0x1e50>
   42734:	01400174 	movhi	r5,5
   42738:	29448084 	addi	r5,r5,4610
   4273c:	dc403015 	stw	r17,192(sp)
   42740:	d9402c15 	stw	r5,176(sp)
   42744:	b023883a 	mov	r17,r22
   42748:	04c001c4 	movi	r19,7
   4274c:	a82d883a 	mov	r22,r21
   42750:	902b883a 	mov	r21,r18
   42754:	8025883a 	mov	r18,r16
   42758:	dc002d17 	ldw	r16,180(sp)
   4275c:	00000306 	br	4276c <___vfprintf_internal_r+0x104c>
   42760:	8c7ffc04 	addi	r17,r17,-16
   42764:	42000204 	addi	r8,r8,8
   42768:	e440110e 	bge	fp,r17,427b0 <___vfprintf_internal_r+0x1090>
   4276c:	18c00404 	addi	r3,r3,16
   42770:	10800044 	addi	r2,r2,1
   42774:	45000015 	stw	r20,0(r8)
   42778:	47000115 	stw	fp,4(r8)
   4277c:	d8c02015 	stw	r3,128(sp)
   42780:	d8801f15 	stw	r2,124(sp)
   42784:	98bff60e 	bge	r19,r2,42760 <__alt_data_end+0xfffdcf60>
   42788:	d9801e04 	addi	r6,sp,120
   4278c:	b80b883a 	mov	r5,r23
   42790:	8009883a 	mov	r4,r16
   42794:	0048f000 	call	48f00 <__sprint_r>
   42798:	103ce51e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   4279c:	8c7ffc04 	addi	r17,r17,-16
   427a0:	d8c02017 	ldw	r3,128(sp)
   427a4:	d8801f17 	ldw	r2,124(sp)
   427a8:	da000404 	addi	r8,sp,16
   427ac:	e47fef16 	blt	fp,r17,4276c <__alt_data_end+0xfffdcf6c>
   427b0:	9021883a 	mov	r16,r18
   427b4:	a825883a 	mov	r18,r21
   427b8:	b02b883a 	mov	r21,r22
   427bc:	882d883a 	mov	r22,r17
   427c0:	dc403017 	ldw	r17,192(sp)
   427c4:	d9002c17 	ldw	r4,176(sp)
   427c8:	1d87883a 	add	r3,r3,r22
   427cc:	10800044 	addi	r2,r2,1
   427d0:	41000015 	stw	r4,0(r8)
   427d4:	45800115 	stw	r22,4(r8)
   427d8:	d8c02015 	stw	r3,128(sp)
   427dc:	d8801f15 	stw	r2,124(sp)
   427e0:	010001c4 	movi	r4,7
   427e4:	20818e16 	blt	r4,r2,42e20 <___vfprintf_internal_r+0x1700>
   427e8:	42000204 	addi	r8,r8,8
   427ec:	003e0f06 	br	4202c <__alt_data_end+0xfffdc82c>
   427f0:	d9403317 	ldw	r5,204(sp)
   427f4:	00800044 	movi	r2,1
   427f8:	18c00044 	addi	r3,r3,1
   427fc:	1141530e 	bge	r2,r5,42d4c <___vfprintf_internal_r+0x162c>
   42800:	dc401f17 	ldw	r17,124(sp)
   42804:	00800044 	movi	r2,1
   42808:	40800115 	stw	r2,4(r8)
   4280c:	8c400044 	addi	r17,r17,1
   42810:	44000015 	stw	r16,0(r8)
   42814:	d8c02015 	stw	r3,128(sp)
   42818:	dc401f15 	stw	r17,124(sp)
   4281c:	008001c4 	movi	r2,7
   42820:	14416b16 	blt	r2,r17,42dd0 <___vfprintf_internal_r+0x16b0>
   42824:	42000204 	addi	r8,r8,8
   42828:	d8803717 	ldw	r2,220(sp)
   4282c:	d9003417 	ldw	r4,208(sp)
   42830:	8c400044 	addi	r17,r17,1
   42834:	10c7883a 	add	r3,r2,r3
   42838:	40800115 	stw	r2,4(r8)
   4283c:	41000015 	stw	r4,0(r8)
   42840:	d8c02015 	stw	r3,128(sp)
   42844:	dc401f15 	stw	r17,124(sp)
   42848:	008001c4 	movi	r2,7
   4284c:	14416916 	blt	r2,r17,42df4 <___vfprintf_internal_r+0x16d4>
   42850:	45800204 	addi	r22,r8,8
   42854:	d9003617 	ldw	r4,216(sp)
   42858:	d9403817 	ldw	r5,224(sp)
   4285c:	000d883a 	mov	r6,zero
   42860:	000f883a 	mov	r7,zero
   42864:	d8c03c15 	stw	r3,240(sp)
   42868:	004ce380 	call	4ce38 <__eqdf2>
   4286c:	d8c03c17 	ldw	r3,240(sp)
   42870:	1000bc26 	beq	r2,zero,42b64 <___vfprintf_internal_r+0x1444>
   42874:	d9403317 	ldw	r5,204(sp)
   42878:	84000044 	addi	r16,r16,1
   4287c:	8c400044 	addi	r17,r17,1
   42880:	28bfffc4 	addi	r2,r5,-1
   42884:	1887883a 	add	r3,r3,r2
   42888:	b0800115 	stw	r2,4(r22)
   4288c:	b4000015 	stw	r16,0(r22)
   42890:	d8c02015 	stw	r3,128(sp)
   42894:	dc401f15 	stw	r17,124(sp)
   42898:	008001c4 	movi	r2,7
   4289c:	14414316 	blt	r2,r17,42dac <___vfprintf_internal_r+0x168c>
   428a0:	b5800204 	addi	r22,r22,8
   428a4:	d9003a17 	ldw	r4,232(sp)
   428a8:	df0022c4 	addi	fp,sp,139
   428ac:	8c400044 	addi	r17,r17,1
   428b0:	20c7883a 	add	r3,r4,r3
   428b4:	b7000015 	stw	fp,0(r22)
   428b8:	b1000115 	stw	r4,4(r22)
   428bc:	d8c02015 	stw	r3,128(sp)
   428c0:	dc401f15 	stw	r17,124(sp)
   428c4:	008001c4 	movi	r2,7
   428c8:	14400e16 	blt	r2,r17,42904 <___vfprintf_internal_r+0x11e4>
   428cc:	b2000204 	addi	r8,r22,8
   428d0:	003e1806 	br	42134 <__alt_data_end+0xfffdc934>
   428d4:	01000174 	movhi	r4,5
   428d8:	21048084 	addi	r4,r4,4610
   428dc:	d9002c15 	stw	r4,176(sp)
   428e0:	d9002c17 	ldw	r4,176(sp)
   428e4:	1c07883a 	add	r3,r3,r16
   428e8:	44000115 	stw	r16,4(r8)
   428ec:	41000015 	stw	r4,0(r8)
   428f0:	10800044 	addi	r2,r2,1
   428f4:	d8c02015 	stw	r3,128(sp)
   428f8:	d8801f15 	stw	r2,124(sp)
   428fc:	010001c4 	movi	r4,7
   42900:	20be0b0e 	bge	r4,r2,42130 <__alt_data_end+0xfffdc930>
   42904:	d9002d17 	ldw	r4,180(sp)
   42908:	d9801e04 	addi	r6,sp,120
   4290c:	b80b883a 	mov	r5,r23
   42910:	0048f000 	call	48f00 <__sprint_r>
   42914:	103c861e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42918:	d8c02017 	ldw	r3,128(sp)
   4291c:	da000404 	addi	r8,sp,16
   42920:	003e0406 	br	42134 <__alt_data_end+0xfffdc934>
   42924:	d9002d17 	ldw	r4,180(sp)
   42928:	d9801e04 	addi	r6,sp,120
   4292c:	b80b883a 	mov	r5,r23
   42930:	0048f000 	call	48f00 <__sprint_r>
   42934:	103e3b26 	beq	r2,zero,42224 <__alt_data_end+0xfffdca24>
   42938:	003c7d06 	br	41b30 <__alt_data_end+0xfffdc330>
   4293c:	d9002d17 	ldw	r4,180(sp)
   42940:	d9801e04 	addi	r6,sp,120
   42944:	b80b883a 	mov	r5,r23
   42948:	0048f000 	call	48f00 <__sprint_r>
   4294c:	103c781e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42950:	d8c02017 	ldw	r3,128(sp)
   42954:	da000404 	addi	r8,sp,16
   42958:	003de906 	br	42100 <__alt_data_end+0xfffdc900>
   4295c:	d9002d17 	ldw	r4,180(sp)
   42960:	d9801e04 	addi	r6,sp,120
   42964:	b80b883a 	mov	r5,r23
   42968:	0048f000 	call	48f00 <__sprint_r>
   4296c:	103c701e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42970:	d8c02017 	ldw	r3,128(sp)
   42974:	da000404 	addi	r8,sp,16
   42978:	003d9b06 	br	41fe8 <__alt_data_end+0xfffdc7e8>
   4297c:	d9002d17 	ldw	r4,180(sp)
   42980:	d9801e04 	addi	r6,sp,120
   42984:	b80b883a 	mov	r5,r23
   42988:	0048f000 	call	48f00 <__sprint_r>
   4298c:	103c681e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42990:	d8c02017 	ldw	r3,128(sp)
   42994:	da000404 	addi	r8,sp,16
   42998:	003da106 	br	42020 <__alt_data_end+0xfffdc820>
   4299c:	d9402a17 	ldw	r5,168(sp)
   429a0:	d8002785 	stb	zero,158(sp)
   429a4:	283f0616 	blt	r5,zero,425c0 <__alt_data_end+0xfffdcdc0>
   429a8:	00ffdfc4 	movi	r3,-129
   429ac:	9d84b03a 	or	r2,r19,r22
   429b0:	90e4703a 	and	r18,r18,r3
   429b4:	103c3b26 	beq	r2,zero,41aa4 <__alt_data_end+0xfffdc2a4>
   429b8:	0039883a 	mov	fp,zero
   429bc:	003e5806 	br	42320 <__alt_data_end+0xfffdcb20>
   429c0:	9080040c 	andi	r2,r18,16
   429c4:	1001b326 	beq	r2,zero,43094 <___vfprintf_internal_r+0x1974>
   429c8:	d8c02e17 	ldw	r3,184(sp)
   429cc:	d9002a17 	ldw	r4,168(sp)
   429d0:	d8002785 	stb	zero,158(sp)
   429d4:	18800104 	addi	r2,r3,4
   429d8:	1cc00017 	ldw	r19,0(r3)
   429dc:	002d883a 	mov	r22,zero
   429e0:	2001b516 	blt	r4,zero,430b8 <___vfprintf_internal_r+0x1998>
   429e4:	00ffdfc4 	movi	r3,-129
   429e8:	d8802e15 	stw	r2,184(sp)
   429ec:	90e4703a 	and	r18,r18,r3
   429f0:	983d0526 	beq	r19,zero,41e08 <__alt_data_end+0xfffdc608>
   429f4:	0039883a 	mov	fp,zero
   429f8:	003d0806 	br	41e1c <__alt_data_end+0xfffdc61c>
   429fc:	dc402617 	ldw	r17,152(sp)
   42a00:	0441d30e 	bge	zero,r17,43150 <___vfprintf_internal_r+0x1a30>
   42a04:	dc403217 	ldw	r17,200(sp)
   42a08:	d8803317 	ldw	r2,204(sp)
   42a0c:	1440010e 	bge	r2,r17,42a14 <___vfprintf_internal_r+0x12f4>
   42a10:	1023883a 	mov	r17,r2
   42a14:	04400a0e 	bge	zero,r17,42a40 <___vfprintf_internal_r+0x1320>
   42a18:	d8801f17 	ldw	r2,124(sp)
   42a1c:	1c47883a 	add	r3,r3,r17
   42a20:	44000015 	stw	r16,0(r8)
   42a24:	10800044 	addi	r2,r2,1
   42a28:	44400115 	stw	r17,4(r8)
   42a2c:	d8c02015 	stw	r3,128(sp)
   42a30:	d8801f15 	stw	r2,124(sp)
   42a34:	010001c4 	movi	r4,7
   42a38:	20826516 	blt	r4,r2,433d0 <___vfprintf_internal_r+0x1cb0>
   42a3c:	42000204 	addi	r8,r8,8
   42a40:	88026116 	blt	r17,zero,433c8 <___vfprintf_internal_r+0x1ca8>
   42a44:	d9003217 	ldw	r4,200(sp)
   42a48:	2463c83a 	sub	r17,r4,r17
   42a4c:	04407b0e 	bge	zero,r17,42c3c <___vfprintf_internal_r+0x151c>
   42a50:	05800404 	movi	r22,16
   42a54:	d8801f17 	ldw	r2,124(sp)
   42a58:	b4419d0e 	bge	r22,r17,430d0 <___vfprintf_internal_r+0x19b0>
   42a5c:	01000174 	movhi	r4,5
   42a60:	21048084 	addi	r4,r4,4610
   42a64:	d9002c15 	stw	r4,176(sp)
   42a68:	070001c4 	movi	fp,7
   42a6c:	dcc02d17 	ldw	r19,180(sp)
   42a70:	00000306 	br	42a80 <___vfprintf_internal_r+0x1360>
   42a74:	42000204 	addi	r8,r8,8
   42a78:	8c7ffc04 	addi	r17,r17,-16
   42a7c:	b441970e 	bge	r22,r17,430dc <___vfprintf_internal_r+0x19bc>
   42a80:	18c00404 	addi	r3,r3,16
   42a84:	10800044 	addi	r2,r2,1
   42a88:	45000015 	stw	r20,0(r8)
   42a8c:	45800115 	stw	r22,4(r8)
   42a90:	d8c02015 	stw	r3,128(sp)
   42a94:	d8801f15 	stw	r2,124(sp)
   42a98:	e0bff60e 	bge	fp,r2,42a74 <__alt_data_end+0xfffdd274>
   42a9c:	d9801e04 	addi	r6,sp,120
   42aa0:	b80b883a 	mov	r5,r23
   42aa4:	9809883a 	mov	r4,r19
   42aa8:	0048f000 	call	48f00 <__sprint_r>
   42aac:	103c201e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42ab0:	d8c02017 	ldw	r3,128(sp)
   42ab4:	d8801f17 	ldw	r2,124(sp)
   42ab8:	da000404 	addi	r8,sp,16
   42abc:	003fee06 	br	42a78 <__alt_data_end+0xfffdd278>
   42ac0:	d9002d17 	ldw	r4,180(sp)
   42ac4:	d9801e04 	addi	r6,sp,120
   42ac8:	b80b883a 	mov	r5,r23
   42acc:	0048f000 	call	48f00 <__sprint_r>
   42ad0:	103c171e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42ad4:	d8c02017 	ldw	r3,128(sp)
   42ad8:	df002787 	ldb	fp,158(sp)
   42adc:	da000404 	addi	r8,sp,16
   42ae0:	003d3406 	br	41fb4 <__alt_data_end+0xfffdc7b4>
   42ae4:	9080040c 	andi	r2,r18,16
   42ae8:	10016126 	beq	r2,zero,43070 <___vfprintf_internal_r+0x1950>
   42aec:	d9402e17 	ldw	r5,184(sp)
   42af0:	2cc00017 	ldw	r19,0(r5)
   42af4:	29400104 	addi	r5,r5,4
   42af8:	d9402e15 	stw	r5,184(sp)
   42afc:	982dd7fa 	srai	r22,r19,31
   42b00:	b005883a 	mov	r2,r22
   42b04:	003c5a06 	br	41c70 <__alt_data_end+0xfffdc470>
   42b08:	9080040c 	andi	r2,r18,16
   42b0c:	10003526 	beq	r2,zero,42be4 <___vfprintf_internal_r+0x14c4>
   42b10:	d8c02e17 	ldw	r3,184(sp)
   42b14:	d9002a17 	ldw	r4,168(sp)
   42b18:	d8002785 	stb	zero,158(sp)
   42b1c:	18800104 	addi	r2,r3,4
   42b20:	1cc00017 	ldw	r19,0(r3)
   42b24:	002d883a 	mov	r22,zero
   42b28:	20003716 	blt	r4,zero,42c08 <___vfprintf_internal_r+0x14e8>
   42b2c:	00ffdfc4 	movi	r3,-129
   42b30:	d8802e15 	stw	r2,184(sp)
   42b34:	90e4703a 	and	r18,r18,r3
   42b38:	0039883a 	mov	fp,zero
   42b3c:	983dd426 	beq	r19,zero,42290 <__alt_data_end+0xfffdca90>
   42b40:	00800244 	movi	r2,9
   42b44:	14fc5336 	bltu	r2,r19,41c94 <__alt_data_end+0xfffdc494>
   42b48:	d8c02817 	ldw	r3,160(sp)
   42b4c:	dc001dc4 	addi	r16,sp,119
   42b50:	9cc00c04 	addi	r19,r19,48
   42b54:	1c07c83a 	sub	r3,r3,r16
   42b58:	dcc01dc5 	stb	r19,119(sp)
   42b5c:	d8c02b15 	stw	r3,172(sp)
   42b60:	003cc606 	br	41e7c <__alt_data_end+0xfffdc67c>
   42b64:	d8803317 	ldw	r2,204(sp)
   42b68:	143fffc4 	addi	r16,r2,-1
   42b6c:	043f4d0e 	bge	zero,r16,428a4 <__alt_data_end+0xfffdd0a4>
   42b70:	07000404 	movi	fp,16
   42b74:	e400810e 	bge	fp,r16,42d7c <___vfprintf_internal_r+0x165c>
   42b78:	01400174 	movhi	r5,5
   42b7c:	29448084 	addi	r5,r5,4610
   42b80:	d9402c15 	stw	r5,176(sp)
   42b84:	01c001c4 	movi	r7,7
   42b88:	dcc02d17 	ldw	r19,180(sp)
   42b8c:	00000306 	br	42b9c <___vfprintf_internal_r+0x147c>
   42b90:	b5800204 	addi	r22,r22,8
   42b94:	843ffc04 	addi	r16,r16,-16
   42b98:	e4007b0e 	bge	fp,r16,42d88 <___vfprintf_internal_r+0x1668>
   42b9c:	18c00404 	addi	r3,r3,16
   42ba0:	8c400044 	addi	r17,r17,1
   42ba4:	b5000015 	stw	r20,0(r22)
   42ba8:	b7000115 	stw	fp,4(r22)
   42bac:	d8c02015 	stw	r3,128(sp)
   42bb0:	dc401f15 	stw	r17,124(sp)
   42bb4:	3c7ff60e 	bge	r7,r17,42b90 <__alt_data_end+0xfffdd390>
   42bb8:	d9801e04 	addi	r6,sp,120
   42bbc:	b80b883a 	mov	r5,r23
   42bc0:	9809883a 	mov	r4,r19
   42bc4:	d9c03c15 	stw	r7,240(sp)
   42bc8:	0048f000 	call	48f00 <__sprint_r>
   42bcc:	d9c03c17 	ldw	r7,240(sp)
   42bd0:	103bd71e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42bd4:	d8c02017 	ldw	r3,128(sp)
   42bd8:	dc401f17 	ldw	r17,124(sp)
   42bdc:	dd800404 	addi	r22,sp,16
   42be0:	003fec06 	br	42b94 <__alt_data_end+0xfffdd394>
   42be4:	9080100c 	andi	r2,r18,64
   42be8:	d8002785 	stb	zero,158(sp)
   42bec:	10010e26 	beq	r2,zero,43028 <___vfprintf_internal_r+0x1908>
   42bf0:	d9402e17 	ldw	r5,184(sp)
   42bf4:	d8c02a17 	ldw	r3,168(sp)
   42bf8:	002d883a 	mov	r22,zero
   42bfc:	28800104 	addi	r2,r5,4
   42c00:	2cc0000b 	ldhu	r19,0(r5)
   42c04:	183fc90e 	bge	r3,zero,42b2c <__alt_data_end+0xfffdd32c>
   42c08:	d8802e15 	stw	r2,184(sp)
   42c0c:	0039883a 	mov	fp,zero
   42c10:	9d84b03a 	or	r2,r19,r22
   42c14:	103c1e1e 	bne	r2,zero,41c90 <__alt_data_end+0xfffdc490>
   42c18:	00800044 	movi	r2,1
   42c1c:	003e6c06 	br	425d0 <__alt_data_end+0xfffdcdd0>
   42c20:	d9002d17 	ldw	r4,180(sp)
   42c24:	d9801e04 	addi	r6,sp,120
   42c28:	b80b883a 	mov	r5,r23
   42c2c:	0048f000 	call	48f00 <__sprint_r>
   42c30:	103bbf1e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42c34:	d8c02017 	ldw	r3,128(sp)
   42c38:	da000404 	addi	r8,sp,16
   42c3c:	d9003217 	ldw	r4,200(sp)
   42c40:	d8802617 	ldw	r2,152(sp)
   42c44:	d9403317 	ldw	r5,204(sp)
   42c48:	8123883a 	add	r17,r16,r4
   42c4c:	11400216 	blt	r2,r5,42c58 <___vfprintf_internal_r+0x1538>
   42c50:	9100004c 	andi	r4,r18,1
   42c54:	20000d26 	beq	r4,zero,42c8c <___vfprintf_internal_r+0x156c>
   42c58:	d9003717 	ldw	r4,220(sp)
   42c5c:	d9403417 	ldw	r5,208(sp)
   42c60:	1907883a 	add	r3,r3,r4
   42c64:	d9001f17 	ldw	r4,124(sp)
   42c68:	41400015 	stw	r5,0(r8)
   42c6c:	d9403717 	ldw	r5,220(sp)
   42c70:	21000044 	addi	r4,r4,1
   42c74:	d8c02015 	stw	r3,128(sp)
   42c78:	41400115 	stw	r5,4(r8)
   42c7c:	d9001f15 	stw	r4,124(sp)
   42c80:	014001c4 	movi	r5,7
   42c84:	2901e816 	blt	r5,r4,43428 <___vfprintf_internal_r+0x1d08>
   42c88:	42000204 	addi	r8,r8,8
   42c8c:	d9003317 	ldw	r4,204(sp)
   42c90:	8121883a 	add	r16,r16,r4
   42c94:	2085c83a 	sub	r2,r4,r2
   42c98:	8461c83a 	sub	r16,r16,r17
   42c9c:	1400010e 	bge	r2,r16,42ca4 <___vfprintf_internal_r+0x1584>
   42ca0:	1021883a 	mov	r16,r2
   42ca4:	04000a0e 	bge	zero,r16,42cd0 <___vfprintf_internal_r+0x15b0>
   42ca8:	d9001f17 	ldw	r4,124(sp)
   42cac:	1c07883a 	add	r3,r3,r16
   42cb0:	44400015 	stw	r17,0(r8)
   42cb4:	21000044 	addi	r4,r4,1
   42cb8:	44000115 	stw	r16,4(r8)
   42cbc:	d8c02015 	stw	r3,128(sp)
   42cc0:	d9001f15 	stw	r4,124(sp)
   42cc4:	014001c4 	movi	r5,7
   42cc8:	2901fb16 	blt	r5,r4,434b8 <___vfprintf_internal_r+0x1d98>
   42ccc:	42000204 	addi	r8,r8,8
   42cd0:	8001f716 	blt	r16,zero,434b0 <___vfprintf_internal_r+0x1d90>
   42cd4:	1421c83a 	sub	r16,r2,r16
   42cd8:	043d160e 	bge	zero,r16,42134 <__alt_data_end+0xfffdc934>
   42cdc:	04400404 	movi	r17,16
   42ce0:	d8801f17 	ldw	r2,124(sp)
   42ce4:	8c3efb0e 	bge	r17,r16,428d4 <__alt_data_end+0xfffdd0d4>
   42ce8:	01400174 	movhi	r5,5
   42cec:	29448084 	addi	r5,r5,4610
   42cf0:	d9402c15 	stw	r5,176(sp)
   42cf4:	058001c4 	movi	r22,7
   42cf8:	dcc02d17 	ldw	r19,180(sp)
   42cfc:	00000306 	br	42d0c <___vfprintf_internal_r+0x15ec>
   42d00:	42000204 	addi	r8,r8,8
   42d04:	843ffc04 	addi	r16,r16,-16
   42d08:	8c3ef50e 	bge	r17,r16,428e0 <__alt_data_end+0xfffdd0e0>
   42d0c:	18c00404 	addi	r3,r3,16
   42d10:	10800044 	addi	r2,r2,1
   42d14:	45000015 	stw	r20,0(r8)
   42d18:	44400115 	stw	r17,4(r8)
   42d1c:	d8c02015 	stw	r3,128(sp)
   42d20:	d8801f15 	stw	r2,124(sp)
   42d24:	b0bff60e 	bge	r22,r2,42d00 <__alt_data_end+0xfffdd500>
   42d28:	d9801e04 	addi	r6,sp,120
   42d2c:	b80b883a 	mov	r5,r23
   42d30:	9809883a 	mov	r4,r19
   42d34:	0048f000 	call	48f00 <__sprint_r>
   42d38:	103b7d1e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42d3c:	d8c02017 	ldw	r3,128(sp)
   42d40:	d8801f17 	ldw	r2,124(sp)
   42d44:	da000404 	addi	r8,sp,16
   42d48:	003fee06 	br	42d04 <__alt_data_end+0xfffdd504>
   42d4c:	9088703a 	and	r4,r18,r2
   42d50:	203eab1e 	bne	r4,zero,42800 <__alt_data_end+0xfffdd000>
   42d54:	dc401f17 	ldw	r17,124(sp)
   42d58:	40800115 	stw	r2,4(r8)
   42d5c:	44000015 	stw	r16,0(r8)
   42d60:	8c400044 	addi	r17,r17,1
   42d64:	d8c02015 	stw	r3,128(sp)
   42d68:	dc401f15 	stw	r17,124(sp)
   42d6c:	008001c4 	movi	r2,7
   42d70:	14400e16 	blt	r2,r17,42dac <___vfprintf_internal_r+0x168c>
   42d74:	45800204 	addi	r22,r8,8
   42d78:	003eca06 	br	428a4 <__alt_data_end+0xfffdd0a4>
   42d7c:	01000174 	movhi	r4,5
   42d80:	21048084 	addi	r4,r4,4610
   42d84:	d9002c15 	stw	r4,176(sp)
   42d88:	d8802c17 	ldw	r2,176(sp)
   42d8c:	1c07883a 	add	r3,r3,r16
   42d90:	8c400044 	addi	r17,r17,1
   42d94:	b0800015 	stw	r2,0(r22)
   42d98:	b4000115 	stw	r16,4(r22)
   42d9c:	d8c02015 	stw	r3,128(sp)
   42da0:	dc401f15 	stw	r17,124(sp)
   42da4:	008001c4 	movi	r2,7
   42da8:	147ebd0e 	bge	r2,r17,428a0 <__alt_data_end+0xfffdd0a0>
   42dac:	d9002d17 	ldw	r4,180(sp)
   42db0:	d9801e04 	addi	r6,sp,120
   42db4:	b80b883a 	mov	r5,r23
   42db8:	0048f000 	call	48f00 <__sprint_r>
   42dbc:	103b5c1e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42dc0:	d8c02017 	ldw	r3,128(sp)
   42dc4:	dc401f17 	ldw	r17,124(sp)
   42dc8:	dd800404 	addi	r22,sp,16
   42dcc:	003eb506 	br	428a4 <__alt_data_end+0xfffdd0a4>
   42dd0:	d9002d17 	ldw	r4,180(sp)
   42dd4:	d9801e04 	addi	r6,sp,120
   42dd8:	b80b883a 	mov	r5,r23
   42ddc:	0048f000 	call	48f00 <__sprint_r>
   42de0:	103b531e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42de4:	d8c02017 	ldw	r3,128(sp)
   42de8:	dc401f17 	ldw	r17,124(sp)
   42dec:	da000404 	addi	r8,sp,16
   42df0:	003e8d06 	br	42828 <__alt_data_end+0xfffdd028>
   42df4:	d9002d17 	ldw	r4,180(sp)
   42df8:	d9801e04 	addi	r6,sp,120
   42dfc:	b80b883a 	mov	r5,r23
   42e00:	0048f000 	call	48f00 <__sprint_r>
   42e04:	103b4a1e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42e08:	d8c02017 	ldw	r3,128(sp)
   42e0c:	dc401f17 	ldw	r17,124(sp)
   42e10:	dd800404 	addi	r22,sp,16
   42e14:	003e8f06 	br	42854 <__alt_data_end+0xfffdd054>
   42e18:	0027883a 	mov	r19,zero
   42e1c:	003f4a06 	br	42b48 <__alt_data_end+0xfffdd348>
   42e20:	d9002d17 	ldw	r4,180(sp)
   42e24:	d9801e04 	addi	r6,sp,120
   42e28:	b80b883a 	mov	r5,r23
   42e2c:	0048f000 	call	48f00 <__sprint_r>
   42e30:	103b3f1e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   42e34:	d8c02017 	ldw	r3,128(sp)
   42e38:	da000404 	addi	r8,sp,16
   42e3c:	003c7b06 	br	4202c <__alt_data_end+0xfffdc82c>
   42e40:	d9402a17 	ldw	r5,168(sp)
   42e44:	04e7c83a 	sub	r19,zero,r19
   42e48:	07000b44 	movi	fp,45
   42e4c:	9804c03a 	cmpne	r2,r19,zero
   42e50:	05adc83a 	sub	r22,zero,r22
   42e54:	df002785 	stb	fp,158(sp)
   42e58:	b0adc83a 	sub	r22,r22,r2
   42e5c:	28017b16 	blt	r5,zero,4344c <___vfprintf_internal_r+0x1d2c>
   42e60:	00bfdfc4 	movi	r2,-129
   42e64:	90a4703a 	and	r18,r18,r2
   42e68:	003b8906 	br	41c90 <__alt_data_end+0xfffdc490>
   42e6c:	d9003617 	ldw	r4,216(sp)
   42e70:	d9403817 	ldw	r5,224(sp)
   42e74:	da003d15 	stw	r8,244(sp)
   42e78:	0048b240 	call	48b24 <__fpclassifyd>
   42e7c:	da003d17 	ldw	r8,244(sp)
   42e80:	1000f026 	beq	r2,zero,43244 <___vfprintf_internal_r+0x1b24>
   42e84:	d9002a17 	ldw	r4,168(sp)
   42e88:	05bff7c4 	movi	r22,-33
   42e8c:	00bfffc4 	movi	r2,-1
   42e90:	8dac703a 	and	r22,r17,r22
   42e94:	20820026 	beq	r4,r2,43698 <___vfprintf_internal_r+0x1f78>
   42e98:	008011c4 	movi	r2,71
   42e9c:	b081f726 	beq	r22,r2,4367c <___vfprintf_internal_r+0x1f5c>
   42ea0:	d9003817 	ldw	r4,224(sp)
   42ea4:	90c04014 	ori	r3,r18,256
   42ea8:	d8c02c15 	stw	r3,176(sp)
   42eac:	20021516 	blt	r4,zero,43704 <___vfprintf_internal_r+0x1fe4>
   42eb0:	dcc03817 	ldw	r19,224(sp)
   42eb4:	d8002905 	stb	zero,164(sp)
   42eb8:	00801984 	movi	r2,102
   42ebc:	8881f926 	beq	r17,r2,436a4 <___vfprintf_internal_r+0x1f84>
   42ec0:	00801184 	movi	r2,70
   42ec4:	88821c26 	beq	r17,r2,43738 <___vfprintf_internal_r+0x2018>
   42ec8:	00801144 	movi	r2,69
   42ecc:	b081ef26 	beq	r22,r2,4368c <___vfprintf_internal_r+0x1f6c>
   42ed0:	d8c02a17 	ldw	r3,168(sp)
   42ed4:	d8802104 	addi	r2,sp,132
   42ed8:	d8800315 	stw	r2,12(sp)
   42edc:	d9403617 	ldw	r5,216(sp)
   42ee0:	d8802504 	addi	r2,sp,148
   42ee4:	d9002d17 	ldw	r4,180(sp)
   42ee8:	d8800215 	stw	r2,8(sp)
   42eec:	d8802604 	addi	r2,sp,152
   42ef0:	d8c00015 	stw	r3,0(sp)
   42ef4:	d8800115 	stw	r2,4(sp)
   42ef8:	01c00084 	movi	r7,2
   42efc:	980d883a 	mov	r6,r19
   42f00:	d8c03c15 	stw	r3,240(sp)
   42f04:	da003d15 	stw	r8,244(sp)
   42f08:	0043e500 	call	43e50 <_dtoa_r>
   42f0c:	1021883a 	mov	r16,r2
   42f10:	008019c4 	movi	r2,103
   42f14:	d8c03c17 	ldw	r3,240(sp)
   42f18:	da003d17 	ldw	r8,244(sp)
   42f1c:	88817126 	beq	r17,r2,434e4 <___vfprintf_internal_r+0x1dc4>
   42f20:	008011c4 	movi	r2,71
   42f24:	88829126 	beq	r17,r2,4396c <___vfprintf_internal_r+0x224c>
   42f28:	80f9883a 	add	fp,r16,r3
   42f2c:	d9003617 	ldw	r4,216(sp)
   42f30:	000d883a 	mov	r6,zero
   42f34:	000f883a 	mov	r7,zero
   42f38:	980b883a 	mov	r5,r19
   42f3c:	da003d15 	stw	r8,244(sp)
   42f40:	004ce380 	call	4ce38 <__eqdf2>
   42f44:	da003d17 	ldw	r8,244(sp)
   42f48:	10018d26 	beq	r2,zero,43580 <___vfprintf_internal_r+0x1e60>
   42f4c:	d8802117 	ldw	r2,132(sp)
   42f50:	1700062e 	bgeu	r2,fp,42f6c <___vfprintf_internal_r+0x184c>
   42f54:	01000c04 	movi	r4,48
   42f58:	10c00044 	addi	r3,r2,1
   42f5c:	d8c02115 	stw	r3,132(sp)
   42f60:	11000005 	stb	r4,0(r2)
   42f64:	d8802117 	ldw	r2,132(sp)
   42f68:	173ffb36 	bltu	r2,fp,42f58 <__alt_data_end+0xfffdd758>
   42f6c:	1405c83a 	sub	r2,r2,r16
   42f70:	d8803315 	stw	r2,204(sp)
   42f74:	008011c4 	movi	r2,71
   42f78:	b0817626 	beq	r22,r2,43554 <___vfprintf_internal_r+0x1e34>
   42f7c:	00801944 	movi	r2,101
   42f80:	1442800e 	bge	r2,r17,43984 <___vfprintf_internal_r+0x2264>
   42f84:	d8c02617 	ldw	r3,152(sp)
   42f88:	00801984 	movi	r2,102
   42f8c:	d8c03215 	stw	r3,200(sp)
   42f90:	8881fe26 	beq	r17,r2,4378c <___vfprintf_internal_r+0x206c>
   42f94:	d8c03217 	ldw	r3,200(sp)
   42f98:	d9003317 	ldw	r4,204(sp)
   42f9c:	1901dd16 	blt	r3,r4,43714 <___vfprintf_internal_r+0x1ff4>
   42fa0:	9480004c 	andi	r18,r18,1
   42fa4:	90022b1e 	bne	r18,zero,43854 <___vfprintf_internal_r+0x2134>
   42fa8:	1805883a 	mov	r2,r3
   42fac:	18028316 	blt	r3,zero,439bc <___vfprintf_internal_r+0x229c>
   42fb0:	d8c03217 	ldw	r3,200(sp)
   42fb4:	044019c4 	movi	r17,103
   42fb8:	d8c02b15 	stw	r3,172(sp)
   42fbc:	df002907 	ldb	fp,164(sp)
   42fc0:	e001531e 	bne	fp,zero,43510 <___vfprintf_internal_r+0x1df0>
   42fc4:	df002783 	ldbu	fp,158(sp)
   42fc8:	d8802915 	stw	r2,164(sp)
   42fcc:	dc802c17 	ldw	r18,176(sp)
   42fd0:	d8002a15 	stw	zero,168(sp)
   42fd4:	003baf06 	br	41e94 <__alt_data_end+0xfffdc694>
   42fd8:	d8c02e17 	ldw	r3,184(sp)
   42fdc:	d9002e17 	ldw	r4,184(sp)
   42fe0:	d9402e17 	ldw	r5,184(sp)
   42fe4:	18c00017 	ldw	r3,0(r3)
   42fe8:	21000117 	ldw	r4,4(r4)
   42fec:	29400204 	addi	r5,r5,8
   42ff0:	d8c03615 	stw	r3,216(sp)
   42ff4:	d9003815 	stw	r4,224(sp)
   42ff8:	d9402e15 	stw	r5,184(sp)
   42ffc:	003b5006 	br	41d40 <__alt_data_end+0xfffdc540>
   43000:	ac400007 	ldb	r17,0(r21)
   43004:	003a2806 	br	418a8 <__alt_data_end+0xfffdc0a8>
   43008:	9080100c 	andi	r2,r18,64
   4300c:	1000a826 	beq	r2,zero,432b0 <___vfprintf_internal_r+0x1b90>
   43010:	d8c02e17 	ldw	r3,184(sp)
   43014:	002d883a 	mov	r22,zero
   43018:	1cc0000b 	ldhu	r19,0(r3)
   4301c:	18c00104 	addi	r3,r3,4
   43020:	d8c02e15 	stw	r3,184(sp)
   43024:	003caf06 	br	422e4 <__alt_data_end+0xfffdcae4>
   43028:	d9002e17 	ldw	r4,184(sp)
   4302c:	d9402a17 	ldw	r5,168(sp)
   43030:	002d883a 	mov	r22,zero
   43034:	20800104 	addi	r2,r4,4
   43038:	24c00017 	ldw	r19,0(r4)
   4303c:	283ebb0e 	bge	r5,zero,42b2c <__alt_data_end+0xfffdd32c>
   43040:	003ef106 	br	42c08 <__alt_data_end+0xfffdd408>
   43044:	9080040c 	andi	r2,r18,16
   43048:	1000921e 	bne	r2,zero,43294 <___vfprintf_internal_r+0x1b74>
   4304c:	9480100c 	andi	r18,r18,64
   43050:	90013926 	beq	r18,zero,43538 <___vfprintf_internal_r+0x1e18>
   43054:	d9402e17 	ldw	r5,184(sp)
   43058:	d8c02f17 	ldw	r3,188(sp)
   4305c:	28800017 	ldw	r2,0(r5)
   43060:	29400104 	addi	r5,r5,4
   43064:	d9402e15 	stw	r5,184(sp)
   43068:	10c0000d 	sth	r3,0(r2)
   4306c:	0039e406 	br	41800 <__alt_data_end+0xfffdc000>
   43070:	9080100c 	andi	r2,r18,64
   43074:	10008026 	beq	r2,zero,43278 <___vfprintf_internal_r+0x1b58>
   43078:	d8802e17 	ldw	r2,184(sp)
   4307c:	14c0000f 	ldh	r19,0(r2)
   43080:	10800104 	addi	r2,r2,4
   43084:	d8802e15 	stw	r2,184(sp)
   43088:	982dd7fa 	srai	r22,r19,31
   4308c:	b005883a 	mov	r2,r22
   43090:	003af706 	br	41c70 <__alt_data_end+0xfffdc470>
   43094:	9080100c 	andi	r2,r18,64
   43098:	d8002785 	stb	zero,158(sp)
   4309c:	10008a1e 	bne	r2,zero,432c8 <___vfprintf_internal_r+0x1ba8>
   430a0:	d9002e17 	ldw	r4,184(sp)
   430a4:	d9402a17 	ldw	r5,168(sp)
   430a8:	002d883a 	mov	r22,zero
   430ac:	20800104 	addi	r2,r4,4
   430b0:	24c00017 	ldw	r19,0(r4)
   430b4:	283e4b0e 	bge	r5,zero,429e4 <__alt_data_end+0xfffdd1e4>
   430b8:	9d86b03a 	or	r3,r19,r22
   430bc:	d8802e15 	stw	r2,184(sp)
   430c0:	183e4c1e 	bne	r3,zero,429f4 <__alt_data_end+0xfffdd1f4>
   430c4:	0039883a 	mov	fp,zero
   430c8:	0005883a 	mov	r2,zero
   430cc:	003d4006 	br	425d0 <__alt_data_end+0xfffdcdd0>
   430d0:	01400174 	movhi	r5,5
   430d4:	29448084 	addi	r5,r5,4610
   430d8:	d9402c15 	stw	r5,176(sp)
   430dc:	d9402c17 	ldw	r5,176(sp)
   430e0:	1c47883a 	add	r3,r3,r17
   430e4:	10800044 	addi	r2,r2,1
   430e8:	41400015 	stw	r5,0(r8)
   430ec:	44400115 	stw	r17,4(r8)
   430f0:	d8c02015 	stw	r3,128(sp)
   430f4:	d8801f15 	stw	r2,124(sp)
   430f8:	010001c4 	movi	r4,7
   430fc:	20bec816 	blt	r4,r2,42c20 <__alt_data_end+0xfffdd420>
   43100:	42000204 	addi	r8,r8,8
   43104:	003ecd06 	br	42c3c <__alt_data_end+0xfffdd43c>
   43108:	d9002a17 	ldw	r4,168(sp)
   4310c:	d8002785 	stb	zero,158(sp)
   43110:	203d2d16 	blt	r4,zero,425c8 <__alt_data_end+0xfffdcdc8>
   43114:	00bfdfc4 	movi	r2,-129
   43118:	90a4703a 	and	r18,r18,r2
   4311c:	003a6106 	br	41aa4 <__alt_data_end+0xfffdc2a4>
   43120:	01000174 	movhi	r4,5
   43124:	21048084 	addi	r4,r4,4610
   43128:	d9002c15 	stw	r4,176(sp)
   4312c:	003bea06 	br	420d8 <__alt_data_end+0xfffdc8d8>
   43130:	d9002d17 	ldw	r4,180(sp)
   43134:	d9801e04 	addi	r6,sp,120
   43138:	b80b883a 	mov	r5,r23
   4313c:	0048f000 	call	48f00 <__sprint_r>
   43140:	103a7b1e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   43144:	d8c02017 	ldw	r3,128(sp)
   43148:	da000404 	addi	r8,sp,16
   4314c:	003d4106 	br	42654 <__alt_data_end+0xfffdce54>
   43150:	d8801f17 	ldw	r2,124(sp)
   43154:	01400174 	movhi	r5,5
   43158:	01000044 	movi	r4,1
   4315c:	18c00044 	addi	r3,r3,1
   43160:	10800044 	addi	r2,r2,1
   43164:	29448004 	addi	r5,r5,4608
   43168:	41000115 	stw	r4,4(r8)
   4316c:	41400015 	stw	r5,0(r8)
   43170:	d8c02015 	stw	r3,128(sp)
   43174:	d8801f15 	stw	r2,124(sp)
   43178:	010001c4 	movi	r4,7
   4317c:	20805c16 	blt	r4,r2,432f0 <___vfprintf_internal_r+0x1bd0>
   43180:	42000204 	addi	r8,r8,8
   43184:	8800041e 	bne	r17,zero,43198 <___vfprintf_internal_r+0x1a78>
   43188:	d8803317 	ldw	r2,204(sp)
   4318c:	1000021e 	bne	r2,zero,43198 <___vfprintf_internal_r+0x1a78>
   43190:	9080004c 	andi	r2,r18,1
   43194:	103be726 	beq	r2,zero,42134 <__alt_data_end+0xfffdc934>
   43198:	d9003717 	ldw	r4,220(sp)
   4319c:	d8801f17 	ldw	r2,124(sp)
   431a0:	d9403417 	ldw	r5,208(sp)
   431a4:	20c7883a 	add	r3,r4,r3
   431a8:	10800044 	addi	r2,r2,1
   431ac:	41000115 	stw	r4,4(r8)
   431b0:	41400015 	stw	r5,0(r8)
   431b4:	d8c02015 	stw	r3,128(sp)
   431b8:	d8801f15 	stw	r2,124(sp)
   431bc:	010001c4 	movi	r4,7
   431c0:	20812116 	blt	r4,r2,43648 <___vfprintf_internal_r+0x1f28>
   431c4:	42000204 	addi	r8,r8,8
   431c8:	0463c83a 	sub	r17,zero,r17
   431cc:	0440730e 	bge	zero,r17,4339c <___vfprintf_internal_r+0x1c7c>
   431d0:	05800404 	movi	r22,16
   431d4:	b440860e 	bge	r22,r17,433f0 <___vfprintf_internal_r+0x1cd0>
   431d8:	01400174 	movhi	r5,5
   431dc:	29448084 	addi	r5,r5,4610
   431e0:	d9402c15 	stw	r5,176(sp)
   431e4:	070001c4 	movi	fp,7
   431e8:	dcc02d17 	ldw	r19,180(sp)
   431ec:	00000306 	br	431fc <___vfprintf_internal_r+0x1adc>
   431f0:	42000204 	addi	r8,r8,8
   431f4:	8c7ffc04 	addi	r17,r17,-16
   431f8:	b440800e 	bge	r22,r17,433fc <___vfprintf_internal_r+0x1cdc>
   431fc:	18c00404 	addi	r3,r3,16
   43200:	10800044 	addi	r2,r2,1
   43204:	45000015 	stw	r20,0(r8)
   43208:	45800115 	stw	r22,4(r8)
   4320c:	d8c02015 	stw	r3,128(sp)
   43210:	d8801f15 	stw	r2,124(sp)
   43214:	e0bff60e 	bge	fp,r2,431f0 <__alt_data_end+0xfffdd9f0>
   43218:	d9801e04 	addi	r6,sp,120
   4321c:	b80b883a 	mov	r5,r23
   43220:	9809883a 	mov	r4,r19
   43224:	0048f000 	call	48f00 <__sprint_r>
   43228:	103a411e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   4322c:	d8c02017 	ldw	r3,128(sp)
   43230:	d8801f17 	ldw	r2,124(sp)
   43234:	da000404 	addi	r8,sp,16
   43238:	003fee06 	br	431f4 <__alt_data_end+0xfffdd9f4>
   4323c:	00bfffc4 	movi	r2,-1
   43240:	003a3f06 	br	41b40 <__alt_data_end+0xfffdc340>
   43244:	008011c4 	movi	r2,71
   43248:	1440b816 	blt	r2,r17,4352c <___vfprintf_internal_r+0x1e0c>
   4324c:	04000174 	movhi	r16,5
   43250:	84047204 	addi	r16,r16,4552
   43254:	00c000c4 	movi	r3,3
   43258:	00bfdfc4 	movi	r2,-129
   4325c:	d8c02915 	stw	r3,164(sp)
   43260:	90a4703a 	and	r18,r18,r2
   43264:	df002783 	ldbu	fp,158(sp)
   43268:	d8c02b15 	stw	r3,172(sp)
   4326c:	d8002a15 	stw	zero,168(sp)
   43270:	d8003215 	stw	zero,200(sp)
   43274:	003b0706 	br	41e94 <__alt_data_end+0xfffdc694>
   43278:	d8c02e17 	ldw	r3,184(sp)
   4327c:	1cc00017 	ldw	r19,0(r3)
   43280:	18c00104 	addi	r3,r3,4
   43284:	d8c02e15 	stw	r3,184(sp)
   43288:	982dd7fa 	srai	r22,r19,31
   4328c:	b005883a 	mov	r2,r22
   43290:	003a7706 	br	41c70 <__alt_data_end+0xfffdc470>
   43294:	d8c02e17 	ldw	r3,184(sp)
   43298:	d9002f17 	ldw	r4,188(sp)
   4329c:	18800017 	ldw	r2,0(r3)
   432a0:	18c00104 	addi	r3,r3,4
   432a4:	d8c02e15 	stw	r3,184(sp)
   432a8:	11000015 	stw	r4,0(r2)
   432ac:	00395406 	br	41800 <__alt_data_end+0xfffdc000>
   432b0:	d9002e17 	ldw	r4,184(sp)
   432b4:	002d883a 	mov	r22,zero
   432b8:	24c00017 	ldw	r19,0(r4)
   432bc:	21000104 	addi	r4,r4,4
   432c0:	d9002e15 	stw	r4,184(sp)
   432c4:	003c0706 	br	422e4 <__alt_data_end+0xfffdcae4>
   432c8:	d9402e17 	ldw	r5,184(sp)
   432cc:	d8c02a17 	ldw	r3,168(sp)
   432d0:	002d883a 	mov	r22,zero
   432d4:	28800104 	addi	r2,r5,4
   432d8:	2cc0000b 	ldhu	r19,0(r5)
   432dc:	183dc10e 	bge	r3,zero,429e4 <__alt_data_end+0xfffdd1e4>
   432e0:	003f7506 	br	430b8 <__alt_data_end+0xfffdd8b8>
   432e4:	04000174 	movhi	r16,5
   432e8:	84047004 	addi	r16,r16,4544
   432ec:	003aa706 	br	41d8c <__alt_data_end+0xfffdc58c>
   432f0:	d9002d17 	ldw	r4,180(sp)
   432f4:	d9801e04 	addi	r6,sp,120
   432f8:	b80b883a 	mov	r5,r23
   432fc:	0048f000 	call	48f00 <__sprint_r>
   43300:	103a0b1e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   43304:	dc402617 	ldw	r17,152(sp)
   43308:	d8c02017 	ldw	r3,128(sp)
   4330c:	da000404 	addi	r8,sp,16
   43310:	003f9c06 	br	43184 <__alt_data_end+0xfffdd984>
   43314:	ac400043 	ldbu	r17,1(r21)
   43318:	84000814 	ori	r16,r16,32
   4331c:	ad400044 	addi	r21,r21,1
   43320:	8c403fcc 	andi	r17,r17,255
   43324:	8c40201c 	xori	r17,r17,128
   43328:	8c7fe004 	addi	r17,r17,-128
   4332c:	00395e06 	br	418a8 <__alt_data_end+0xfffdc0a8>
   43330:	d8c02e15 	stw	r3,184(sp)
   43334:	0039883a 	mov	fp,zero
   43338:	003e3506 	br	42c10 <__alt_data_end+0xfffdd410>
   4333c:	d9002d17 	ldw	r4,180(sp)
   43340:	d9801e04 	addi	r6,sp,120
   43344:	b80b883a 	mov	r5,r23
   43348:	0048f000 	call	48f00 <__sprint_r>
   4334c:	1039f81e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   43350:	d8c02017 	ldw	r3,128(sp)
   43354:	da000404 	addi	r8,sp,16
   43358:	003cd006 	br	4269c <__alt_data_end+0xfffdce9c>
   4335c:	8009883a 	mov	r4,r16
   43360:	df003d15 	stw	fp,244(sp)
   43364:	00416880 	call	41688 <strlen>
   43368:	d8802b15 	stw	r2,172(sp)
   4336c:	da003d17 	ldw	r8,244(sp)
   43370:	103c200e 	bge	r2,zero,423f4 <__alt_data_end+0xfffdcbf4>
   43374:	0005883a 	mov	r2,zero
   43378:	003c1e06 	br	423f4 <__alt_data_end+0xfffdcbf4>
   4337c:	d9002d17 	ldw	r4,180(sp)
   43380:	d9801e04 	addi	r6,sp,120
   43384:	b80b883a 	mov	r5,r23
   43388:	0048f000 	call	48f00 <__sprint_r>
   4338c:	1039e81e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   43390:	d8c02017 	ldw	r3,128(sp)
   43394:	d8801f17 	ldw	r2,124(sp)
   43398:	da000404 	addi	r8,sp,16
   4339c:	d9403317 	ldw	r5,204(sp)
   433a0:	10800044 	addi	r2,r2,1
   433a4:	44000015 	stw	r16,0(r8)
   433a8:	28c7883a 	add	r3,r5,r3
   433ac:	003b5b06 	br	4211c <__alt_data_end+0xfffdc91c>
   433b0:	01000174 	movhi	r4,5
   433b4:	21048484 	addi	r4,r4,4626
   433b8:	d9003515 	stw	r4,212(sp)
   433bc:	003af206 	br	41f88 <__alt_data_end+0xfffdc788>
   433c0:	013fffc4 	movi	r4,-1
   433c4:	003a0806 	br	41be8 <__alt_data_end+0xfffdc3e8>
   433c8:	0023883a 	mov	r17,zero
   433cc:	003d9d06 	br	42a44 <__alt_data_end+0xfffdd244>
   433d0:	d9002d17 	ldw	r4,180(sp)
   433d4:	d9801e04 	addi	r6,sp,120
   433d8:	b80b883a 	mov	r5,r23
   433dc:	0048f000 	call	48f00 <__sprint_r>
   433e0:	1039d31e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   433e4:	d8c02017 	ldw	r3,128(sp)
   433e8:	da000404 	addi	r8,sp,16
   433ec:	003d9406 	br	42a40 <__alt_data_end+0xfffdd240>
   433f0:	01000174 	movhi	r4,5
   433f4:	21048084 	addi	r4,r4,4610
   433f8:	d9002c15 	stw	r4,176(sp)
   433fc:	d9002c17 	ldw	r4,176(sp)
   43400:	1c47883a 	add	r3,r3,r17
   43404:	10800044 	addi	r2,r2,1
   43408:	41000015 	stw	r4,0(r8)
   4340c:	44400115 	stw	r17,4(r8)
   43410:	d8c02015 	stw	r3,128(sp)
   43414:	d8801f15 	stw	r2,124(sp)
   43418:	010001c4 	movi	r4,7
   4341c:	20bfd716 	blt	r4,r2,4337c <__alt_data_end+0xfffddb7c>
   43420:	42000204 	addi	r8,r8,8
   43424:	003fdd06 	br	4339c <__alt_data_end+0xfffddb9c>
   43428:	d9002d17 	ldw	r4,180(sp)
   4342c:	d9801e04 	addi	r6,sp,120
   43430:	b80b883a 	mov	r5,r23
   43434:	0048f000 	call	48f00 <__sprint_r>
   43438:	1039bd1e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   4343c:	d8802617 	ldw	r2,152(sp)
   43440:	d8c02017 	ldw	r3,128(sp)
   43444:	da000404 	addi	r8,sp,16
   43448:	003e1006 	br	42c8c <__alt_data_end+0xfffdd48c>
   4344c:	00800044 	movi	r2,1
   43450:	10803fcc 	andi	r2,r2,255
   43454:	00c00044 	movi	r3,1
   43458:	10fa0d26 	beq	r2,r3,41c90 <__alt_data_end+0xfffdc490>
   4345c:	00c00084 	movi	r3,2
   43460:	10fbaf26 	beq	r2,r3,42320 <__alt_data_end+0xfffdcb20>
   43464:	003a6d06 	br	41e1c <__alt_data_end+0xfffdc61c>
   43468:	01000174 	movhi	r4,5
   4346c:	21048484 	addi	r4,r4,4626
   43470:	d9003515 	stw	r4,212(sp)
   43474:	003b5406 	br	421c8 <__alt_data_end+0xfffdc9c8>
   43478:	d8802a17 	ldw	r2,168(sp)
   4347c:	00c00184 	movi	r3,6
   43480:	1880012e 	bgeu	r3,r2,43488 <___vfprintf_internal_r+0x1d68>
   43484:	1805883a 	mov	r2,r3
   43488:	d8802b15 	stw	r2,172(sp)
   4348c:	1000ef16 	blt	r2,zero,4384c <___vfprintf_internal_r+0x212c>
   43490:	04000174 	movhi	r16,5
   43494:	d8802915 	stw	r2,164(sp)
   43498:	dcc02e15 	stw	r19,184(sp)
   4349c:	d8002a15 	stw	zero,168(sp)
   434a0:	d8003215 	stw	zero,200(sp)
   434a4:	84047e04 	addi	r16,r16,4600
   434a8:	0039883a 	mov	fp,zero
   434ac:	003a8006 	br	41eb0 <__alt_data_end+0xfffdc6b0>
   434b0:	0021883a 	mov	r16,zero
   434b4:	003e0706 	br	42cd4 <__alt_data_end+0xfffdd4d4>
   434b8:	d9002d17 	ldw	r4,180(sp)
   434bc:	d9801e04 	addi	r6,sp,120
   434c0:	b80b883a 	mov	r5,r23
   434c4:	0048f000 	call	48f00 <__sprint_r>
   434c8:	1039991e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   434cc:	d8802617 	ldw	r2,152(sp)
   434d0:	d9403317 	ldw	r5,204(sp)
   434d4:	d8c02017 	ldw	r3,128(sp)
   434d8:	da000404 	addi	r8,sp,16
   434dc:	2885c83a 	sub	r2,r5,r2
   434e0:	003dfb06 	br	42cd0 <__alt_data_end+0xfffdd4d0>
   434e4:	9080004c 	andi	r2,r18,1
   434e8:	103e8f1e 	bne	r2,zero,42f28 <__alt_data_end+0xfffdd728>
   434ec:	d8802117 	ldw	r2,132(sp)
   434f0:	003e9e06 	br	42f6c <__alt_data_end+0xfffdd76c>
   434f4:	1025883a 	mov	r18,r2
   434f8:	0039883a 	mov	fp,zero
   434fc:	00800084 	movi	r2,2
   43500:	003fd306 	br	43450 <__alt_data_end+0xfffddc50>
   43504:	07000b44 	movi	fp,45
   43508:	df002785 	stb	fp,158(sp)
   4350c:	003a1b06 	br	41d7c <__alt_data_end+0xfffdc57c>
   43510:	00c00b44 	movi	r3,45
   43514:	d8c02785 	stb	r3,158(sp)
   43518:	d8802915 	stw	r2,164(sp)
   4351c:	dc802c17 	ldw	r18,176(sp)
   43520:	d8002a15 	stw	zero,168(sp)
   43524:	07000b44 	movi	fp,45
   43528:	003a5e06 	br	41ea4 <__alt_data_end+0xfffdc6a4>
   4352c:	04000174 	movhi	r16,5
   43530:	84047304 	addi	r16,r16,4556
   43534:	003f4706 	br	43254 <__alt_data_end+0xfffdda54>
   43538:	d9002e17 	ldw	r4,184(sp)
   4353c:	d9402f17 	ldw	r5,188(sp)
   43540:	20800017 	ldw	r2,0(r4)
   43544:	21000104 	addi	r4,r4,4
   43548:	d9002e15 	stw	r4,184(sp)
   4354c:	11400015 	stw	r5,0(r2)
   43550:	0038ab06 	br	41800 <__alt_data_end+0xfffdc000>
   43554:	dd802617 	ldw	r22,152(sp)
   43558:	00bfff44 	movi	r2,-3
   4355c:	b0801c16 	blt	r22,r2,435d0 <___vfprintf_internal_r+0x1eb0>
   43560:	d9402a17 	ldw	r5,168(sp)
   43564:	2d801a16 	blt	r5,r22,435d0 <___vfprintf_internal_r+0x1eb0>
   43568:	dd803215 	stw	r22,200(sp)
   4356c:	003e8906 	br	42f94 <__alt_data_end+0xfffdd794>
   43570:	01000174 	movhi	r4,5
   43574:	21048084 	addi	r4,r4,4610
   43578:	d9002c15 	stw	r4,176(sp)
   4357c:	003c9106 	br	427c4 <__alt_data_end+0xfffdcfc4>
   43580:	e005883a 	mov	r2,fp
   43584:	003e7906 	br	42f6c <__alt_data_end+0xfffdd76c>
   43588:	d9002a17 	ldw	r4,168(sp)
   4358c:	df002783 	ldbu	fp,158(sp)
   43590:	dcc02e15 	stw	r19,184(sp)
   43594:	d9002915 	stw	r4,164(sp)
   43598:	d9002b15 	stw	r4,172(sp)
   4359c:	d8002a15 	stw	zero,168(sp)
   435a0:	d8003215 	stw	zero,200(sp)
   435a4:	003a3b06 	br	41e94 <__alt_data_end+0xfffdc694>
   435a8:	9080004c 	andi	r2,r18,1
   435ac:	0039883a 	mov	fp,zero
   435b0:	10000426 	beq	r2,zero,435c4 <___vfprintf_internal_r+0x1ea4>
   435b4:	00800c04 	movi	r2,48
   435b8:	dc001dc4 	addi	r16,sp,119
   435bc:	d8801dc5 	stb	r2,119(sp)
   435c0:	003b6406 	br	42354 <__alt_data_end+0xfffdcb54>
   435c4:	d8002b15 	stw	zero,172(sp)
   435c8:	dc001e04 	addi	r16,sp,120
   435cc:	003a2b06 	br	41e7c <__alt_data_end+0xfffdc67c>
   435d0:	8c7fff84 	addi	r17,r17,-2
   435d4:	b5bfffc4 	addi	r22,r22,-1
   435d8:	dd802615 	stw	r22,152(sp)
   435dc:	dc4022c5 	stb	r17,139(sp)
   435e0:	b000bf16 	blt	r22,zero,438e0 <___vfprintf_internal_r+0x21c0>
   435e4:	00800ac4 	movi	r2,43
   435e8:	d8802305 	stb	r2,140(sp)
   435ec:	00800244 	movi	r2,9
   435f0:	15807016 	blt	r2,r22,437b4 <___vfprintf_internal_r+0x2094>
   435f4:	00800c04 	movi	r2,48
   435f8:	b5800c04 	addi	r22,r22,48
   435fc:	d8802345 	stb	r2,141(sp)
   43600:	dd802385 	stb	r22,142(sp)
   43604:	d88023c4 	addi	r2,sp,143
   43608:	df0022c4 	addi	fp,sp,139
   4360c:	d8c03317 	ldw	r3,204(sp)
   43610:	1739c83a 	sub	fp,r2,fp
   43614:	d9003317 	ldw	r4,204(sp)
   43618:	e0c7883a 	add	r3,fp,r3
   4361c:	df003a15 	stw	fp,232(sp)
   43620:	d8c02b15 	stw	r3,172(sp)
   43624:	00800044 	movi	r2,1
   43628:	1100b30e 	bge	r2,r4,438f8 <___vfprintf_internal_r+0x21d8>
   4362c:	d8c02b17 	ldw	r3,172(sp)
   43630:	18c00044 	addi	r3,r3,1
   43634:	d8c02b15 	stw	r3,172(sp)
   43638:	1805883a 	mov	r2,r3
   4363c:	1800ac16 	blt	r3,zero,438f0 <___vfprintf_internal_r+0x21d0>
   43640:	d8003215 	stw	zero,200(sp)
   43644:	003e5d06 	br	42fbc <__alt_data_end+0xfffdd7bc>
   43648:	d9002d17 	ldw	r4,180(sp)
   4364c:	d9801e04 	addi	r6,sp,120
   43650:	b80b883a 	mov	r5,r23
   43654:	0048f000 	call	48f00 <__sprint_r>
   43658:	1039351e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdc330>
   4365c:	dc402617 	ldw	r17,152(sp)
   43660:	d8c02017 	ldw	r3,128(sp)
   43664:	d8801f17 	ldw	r2,124(sp)
   43668:	da000404 	addi	r8,sp,16
   4366c:	003ed606 	br	431c8 <__alt_data_end+0xfffdd9c8>
   43670:	182b883a 	mov	r21,r3
   43674:	d8002a15 	stw	zero,168(sp)
   43678:	00388c06 	br	418ac <__alt_data_end+0xfffdc0ac>
   4367c:	d8802a17 	ldw	r2,168(sp)
   43680:	103e071e 	bne	r2,zero,42ea0 <__alt_data_end+0xfffdd6a0>
   43684:	dc002a15 	stw	r16,168(sp)
   43688:	003e0506 	br	42ea0 <__alt_data_end+0xfffdd6a0>
   4368c:	d9002a17 	ldw	r4,168(sp)
   43690:	20c00044 	addi	r3,r4,1
   43694:	003e0f06 	br	42ed4 <__alt_data_end+0xfffdd6d4>
   43698:	01400184 	movi	r5,6
   4369c:	d9402a15 	stw	r5,168(sp)
   436a0:	003dff06 	br	42ea0 <__alt_data_end+0xfffdd6a0>
   436a4:	d8802104 	addi	r2,sp,132
   436a8:	d8800315 	stw	r2,12(sp)
   436ac:	d8802504 	addi	r2,sp,148
   436b0:	d8800215 	stw	r2,8(sp)
   436b4:	d8802604 	addi	r2,sp,152
   436b8:	d8800115 	stw	r2,4(sp)
   436bc:	d8802a17 	ldw	r2,168(sp)
   436c0:	d9403617 	ldw	r5,216(sp)
   436c4:	d9002d17 	ldw	r4,180(sp)
   436c8:	d8800015 	stw	r2,0(sp)
   436cc:	01c000c4 	movi	r7,3
   436d0:	980d883a 	mov	r6,r19
   436d4:	da003d15 	stw	r8,244(sp)
   436d8:	0043e500 	call	43e50 <_dtoa_r>
   436dc:	d8c02a17 	ldw	r3,168(sp)
   436e0:	da003d17 	ldw	r8,244(sp)
   436e4:	1021883a 	mov	r16,r2
   436e8:	10f9883a 	add	fp,r2,r3
   436ec:	81000007 	ldb	r4,0(r16)
   436f0:	00800c04 	movi	r2,48
   436f4:	20805e26 	beq	r4,r2,43870 <___vfprintf_internal_r+0x2150>
   436f8:	d8c02617 	ldw	r3,152(sp)
   436fc:	e0f9883a 	add	fp,fp,r3
   43700:	003e0a06 	br	42f2c <__alt_data_end+0xfffdd72c>
   43704:	00c00b44 	movi	r3,45
   43708:	24e0003c 	xorhi	r19,r4,32768
   4370c:	d8c02905 	stb	r3,164(sp)
   43710:	003de906 	br	42eb8 <__alt_data_end+0xfffdd6b8>
   43714:	d8c03217 	ldw	r3,200(sp)
   43718:	00c07a0e 	bge	zero,r3,43904 <___vfprintf_internal_r+0x21e4>
   4371c:	00800044 	movi	r2,1
   43720:	d9003317 	ldw	r4,204(sp)
   43724:	1105883a 	add	r2,r2,r4
   43728:	d8802b15 	stw	r2,172(sp)
   4372c:	10004e16 	blt	r2,zero,43868 <___vfprintf_internal_r+0x2148>
   43730:	044019c4 	movi	r17,103
   43734:	003e2106 	br	42fbc <__alt_data_end+0xfffdd7bc>
   43738:	d9002a17 	ldw	r4,168(sp)
   4373c:	d8802104 	addi	r2,sp,132
   43740:	d8800315 	stw	r2,12(sp)
   43744:	d9000015 	stw	r4,0(sp)
   43748:	d8802504 	addi	r2,sp,148
   4374c:	d9403617 	ldw	r5,216(sp)
   43750:	d9002d17 	ldw	r4,180(sp)
   43754:	d8800215 	stw	r2,8(sp)
   43758:	d8802604 	addi	r2,sp,152
   4375c:	d8800115 	stw	r2,4(sp)
   43760:	01c000c4 	movi	r7,3
   43764:	980d883a 	mov	r6,r19
   43768:	da003d15 	stw	r8,244(sp)
   4376c:	0043e500 	call	43e50 <_dtoa_r>
   43770:	d8c02a17 	ldw	r3,168(sp)
   43774:	da003d17 	ldw	r8,244(sp)
   43778:	1021883a 	mov	r16,r2
   4377c:	00801184 	movi	r2,70
   43780:	80f9883a 	add	fp,r16,r3
   43784:	88bfd926 	beq	r17,r2,436ec <__alt_data_end+0xfffddeec>
   43788:	003de806 	br	42f2c <__alt_data_end+0xfffdd72c>
   4378c:	d9002a17 	ldw	r4,168(sp)
   43790:	00c04d0e 	bge	zero,r3,438c8 <___vfprintf_internal_r+0x21a8>
   43794:	2000441e 	bne	r4,zero,438a8 <___vfprintf_internal_r+0x2188>
   43798:	9480004c 	andi	r18,r18,1
   4379c:	9000421e 	bne	r18,zero,438a8 <___vfprintf_internal_r+0x2188>
   437a0:	1805883a 	mov	r2,r3
   437a4:	18006f16 	blt	r3,zero,43964 <___vfprintf_internal_r+0x2244>
   437a8:	d8c03217 	ldw	r3,200(sp)
   437ac:	d8c02b15 	stw	r3,172(sp)
   437b0:	003e0206 	br	42fbc <__alt_data_end+0xfffdd7bc>
   437b4:	df0022c4 	addi	fp,sp,139
   437b8:	dc002a15 	stw	r16,168(sp)
   437bc:	4027883a 	mov	r19,r8
   437c0:	e021883a 	mov	r16,fp
   437c4:	b009883a 	mov	r4,r22
   437c8:	01400284 	movi	r5,10
   437cc:	004ba8c0 	call	4ba8c <__modsi3>
   437d0:	10800c04 	addi	r2,r2,48
   437d4:	843fffc4 	addi	r16,r16,-1
   437d8:	b009883a 	mov	r4,r22
   437dc:	01400284 	movi	r5,10
   437e0:	80800005 	stb	r2,0(r16)
   437e4:	004ba080 	call	4ba08 <__divsi3>
   437e8:	102d883a 	mov	r22,r2
   437ec:	00800244 	movi	r2,9
   437f0:	15bff416 	blt	r2,r22,437c4 <__alt_data_end+0xfffddfc4>
   437f4:	9811883a 	mov	r8,r19
   437f8:	b0800c04 	addi	r2,r22,48
   437fc:	8027883a 	mov	r19,r16
   43800:	997fffc4 	addi	r5,r19,-1
   43804:	98bfffc5 	stb	r2,-1(r19)
   43808:	dc002a17 	ldw	r16,168(sp)
   4380c:	2f006d2e 	bgeu	r5,fp,439c4 <___vfprintf_internal_r+0x22a4>
   43810:	d9c02384 	addi	r7,sp,142
   43814:	3ccfc83a 	sub	r7,r7,r19
   43818:	d9002344 	addi	r4,sp,141
   4381c:	e1cf883a 	add	r7,fp,r7
   43820:	00000106 	br	43828 <___vfprintf_internal_r+0x2108>
   43824:	28800003 	ldbu	r2,0(r5)
   43828:	20800005 	stb	r2,0(r4)
   4382c:	21000044 	addi	r4,r4,1
   43830:	29400044 	addi	r5,r5,1
   43834:	393ffb1e 	bne	r7,r4,43824 <__alt_data_end+0xfffde024>
   43838:	d8802304 	addi	r2,sp,140
   4383c:	14c5c83a 	sub	r2,r2,r19
   43840:	d8c02344 	addi	r3,sp,141
   43844:	1885883a 	add	r2,r3,r2
   43848:	003f7006 	br	4360c <__alt_data_end+0xfffdde0c>
   4384c:	0005883a 	mov	r2,zero
   43850:	003f0f06 	br	43490 <__alt_data_end+0xfffddc90>
   43854:	d8c03217 	ldw	r3,200(sp)
   43858:	18c00044 	addi	r3,r3,1
   4385c:	d8c02b15 	stw	r3,172(sp)
   43860:	1805883a 	mov	r2,r3
   43864:	183fb20e 	bge	r3,zero,43730 <__alt_data_end+0xfffddf30>
   43868:	0005883a 	mov	r2,zero
   4386c:	003fb006 	br	43730 <__alt_data_end+0xfffddf30>
   43870:	d9003617 	ldw	r4,216(sp)
   43874:	000d883a 	mov	r6,zero
   43878:	000f883a 	mov	r7,zero
   4387c:	980b883a 	mov	r5,r19
   43880:	d8c03c15 	stw	r3,240(sp)
   43884:	da003d15 	stw	r8,244(sp)
   43888:	004ce380 	call	4ce38 <__eqdf2>
   4388c:	d8c03c17 	ldw	r3,240(sp)
   43890:	da003d17 	ldw	r8,244(sp)
   43894:	103f9826 	beq	r2,zero,436f8 <__alt_data_end+0xfffddef8>
   43898:	00800044 	movi	r2,1
   4389c:	10c7c83a 	sub	r3,r2,r3
   438a0:	d8c02615 	stw	r3,152(sp)
   438a4:	003f9506 	br	436fc <__alt_data_end+0xfffddefc>
   438a8:	d9002a17 	ldw	r4,168(sp)
   438ac:	d8c03217 	ldw	r3,200(sp)
   438b0:	20800044 	addi	r2,r4,1
   438b4:	1885883a 	add	r2,r3,r2
   438b8:	d8802b15 	stw	r2,172(sp)
   438bc:	103dbf0e 	bge	r2,zero,42fbc <__alt_data_end+0xfffdd7bc>
   438c0:	0005883a 	mov	r2,zero
   438c4:	003dbd06 	br	42fbc <__alt_data_end+0xfffdd7bc>
   438c8:	2000201e 	bne	r4,zero,4394c <___vfprintf_internal_r+0x222c>
   438cc:	9480004c 	andi	r18,r18,1
   438d0:	90001e1e 	bne	r18,zero,4394c <___vfprintf_internal_r+0x222c>
   438d4:	00800044 	movi	r2,1
   438d8:	d8802b15 	stw	r2,172(sp)
   438dc:	003db706 	br	42fbc <__alt_data_end+0xfffdd7bc>
   438e0:	00800b44 	movi	r2,45
   438e4:	05adc83a 	sub	r22,zero,r22
   438e8:	d8802305 	stb	r2,140(sp)
   438ec:	003f3f06 	br	435ec <__alt_data_end+0xfffdddec>
   438f0:	0005883a 	mov	r2,zero
   438f4:	003f5206 	br	43640 <__alt_data_end+0xfffdde40>
   438f8:	90a4703a 	and	r18,r18,r2
   438fc:	903f4e26 	beq	r18,zero,43638 <__alt_data_end+0xfffdde38>
   43900:	003f4a06 	br	4362c <__alt_data_end+0xfffdde2c>
   43904:	00800084 	movi	r2,2
   43908:	10c5c83a 	sub	r2,r2,r3
   4390c:	003f8406 	br	43720 <__alt_data_end+0xfffddf20>
   43910:	d9402e17 	ldw	r5,184(sp)
   43914:	d9002e17 	ldw	r4,184(sp)
   43918:	ac400043 	ldbu	r17,1(r21)
   4391c:	29400017 	ldw	r5,0(r5)
   43920:	20800104 	addi	r2,r4,4
   43924:	d8802e15 	stw	r2,184(sp)
   43928:	d9402a15 	stw	r5,168(sp)
   4392c:	182b883a 	mov	r21,r3
   43930:	283e7b0e 	bge	r5,zero,43320 <__alt_data_end+0xfffddb20>
   43934:	8c403fcc 	andi	r17,r17,255
   43938:	017fffc4 	movi	r5,-1
   4393c:	8c40201c 	xori	r17,r17,128
   43940:	d9402a15 	stw	r5,168(sp)
   43944:	8c7fe004 	addi	r17,r17,-128
   43948:	0037d706 	br	418a8 <__alt_data_end+0xfffdc0a8>
   4394c:	d8c02a17 	ldw	r3,168(sp)
   43950:	18c00084 	addi	r3,r3,2
   43954:	d8c02b15 	stw	r3,172(sp)
   43958:	1805883a 	mov	r2,r3
   4395c:	183d970e 	bge	r3,zero,42fbc <__alt_data_end+0xfffdd7bc>
   43960:	003fd706 	br	438c0 <__alt_data_end+0xfffde0c0>
   43964:	0005883a 	mov	r2,zero
   43968:	003f8f06 	br	437a8 <__alt_data_end+0xfffddfa8>
   4396c:	9080004c 	andi	r2,r18,1
   43970:	103f821e 	bne	r2,zero,4377c <__alt_data_end+0xfffddf7c>
   43974:	d8802117 	ldw	r2,132(sp)
   43978:	1405c83a 	sub	r2,r2,r16
   4397c:	d8803315 	stw	r2,204(sp)
   43980:	b47ef426 	beq	r22,r17,43554 <__alt_data_end+0xfffddd54>
   43984:	dd802617 	ldw	r22,152(sp)
   43988:	003f1206 	br	435d4 <__alt_data_end+0xfffdddd4>
   4398c:	d8c02b03 	ldbu	r3,172(sp)
   43990:	d8c02785 	stb	r3,158(sp)
   43994:	0038df06 	br	41d14 <__alt_data_end+0xfffdc514>
   43998:	d8c02b03 	ldbu	r3,172(sp)
   4399c:	d8c02785 	stb	r3,158(sp)
   439a0:	0038aa06 	br	41c4c <__alt_data_end+0xfffdc44c>
   439a4:	d8c02b03 	ldbu	r3,172(sp)
   439a8:	d8c02785 	stb	r3,158(sp)
   439ac:	003a4306 	br	422bc <__alt_data_end+0xfffdcabc>
   439b0:	d8c02b03 	ldbu	r3,172(sp)
   439b4:	d8c02785 	stb	r3,158(sp)
   439b8:	003af506 	br	42590 <__alt_data_end+0xfffdcd90>
   439bc:	0005883a 	mov	r2,zero
   439c0:	003d7b06 	br	42fb0 <__alt_data_end+0xfffdd7b0>
   439c4:	d8802344 	addi	r2,sp,141
   439c8:	003f1006 	br	4360c <__alt_data_end+0xfffdde0c>
   439cc:	d8c02b03 	ldbu	r3,172(sp)
   439d0:	d8c02785 	stb	r3,158(sp)
   439d4:	0038fd06 	br	41dcc <__alt_data_end+0xfffdc5cc>
   439d8:	d8c02b03 	ldbu	r3,172(sp)
   439dc:	d8c02785 	stb	r3,158(sp)
   439e0:	003a9706 	br	42440 <__alt_data_end+0xfffdcc40>
   439e4:	d8c02b03 	ldbu	r3,172(sp)
   439e8:	d8c02785 	stb	r3,158(sp)
   439ec:	003a1806 	br	42250 <__alt_data_end+0xfffdca50>
   439f0:	d8c02b03 	ldbu	r3,172(sp)
   439f4:	d8c02785 	stb	r3,158(sp)
   439f8:	003abe06 	br	424f4 <__alt_data_end+0xfffdccf4>

000439fc <__vfprintf_internal>:
   439fc:	00800174 	movhi	r2,5
   43a00:	108b9904 	addi	r2,r2,11876
   43a04:	300f883a 	mov	r7,r6
   43a08:	280d883a 	mov	r6,r5
   43a0c:	200b883a 	mov	r5,r4
   43a10:	11000017 	ldw	r4,0(r2)
   43a14:	00417201 	jmpi	41720 <___vfprintf_internal_r>

00043a18 <__sbprintf>:
   43a18:	2880030b 	ldhu	r2,12(r5)
   43a1c:	2ac01917 	ldw	r11,100(r5)
   43a20:	2a80038b 	ldhu	r10,14(r5)
   43a24:	2a400717 	ldw	r9,28(r5)
   43a28:	2a000917 	ldw	r8,36(r5)
   43a2c:	defee204 	addi	sp,sp,-1144
   43a30:	00c10004 	movi	r3,1024
   43a34:	dc011a15 	stw	r16,1128(sp)
   43a38:	10bfff4c 	andi	r2,r2,65533
   43a3c:	2821883a 	mov	r16,r5
   43a40:	d8cb883a 	add	r5,sp,r3
   43a44:	dc811c15 	stw	r18,1136(sp)
   43a48:	dc411b15 	stw	r17,1132(sp)
   43a4c:	dfc11d15 	stw	ra,1140(sp)
   43a50:	2025883a 	mov	r18,r4
   43a54:	d881030d 	sth	r2,1036(sp)
   43a58:	dac11915 	stw	r11,1124(sp)
   43a5c:	da81038d 	sth	r10,1038(sp)
   43a60:	da410715 	stw	r9,1052(sp)
   43a64:	da010915 	stw	r8,1060(sp)
   43a68:	dec10015 	stw	sp,1024(sp)
   43a6c:	dec10415 	stw	sp,1040(sp)
   43a70:	d8c10215 	stw	r3,1032(sp)
   43a74:	d8c10515 	stw	r3,1044(sp)
   43a78:	d8010615 	stw	zero,1048(sp)
   43a7c:	00417200 	call	41720 <___vfprintf_internal_r>
   43a80:	1023883a 	mov	r17,r2
   43a84:	10000416 	blt	r2,zero,43a98 <__sbprintf+0x80>
   43a88:	d9410004 	addi	r5,sp,1024
   43a8c:	9009883a 	mov	r4,r18
   43a90:	00456f40 	call	456f4 <_fflush_r>
   43a94:	10000d1e 	bne	r2,zero,43acc <__sbprintf+0xb4>
   43a98:	d881030b 	ldhu	r2,1036(sp)
   43a9c:	1080100c 	andi	r2,r2,64
   43aa0:	10000326 	beq	r2,zero,43ab0 <__sbprintf+0x98>
   43aa4:	8080030b 	ldhu	r2,12(r16)
   43aa8:	10801014 	ori	r2,r2,64
   43aac:	8080030d 	sth	r2,12(r16)
   43ab0:	8805883a 	mov	r2,r17
   43ab4:	dfc11d17 	ldw	ra,1140(sp)
   43ab8:	dc811c17 	ldw	r18,1136(sp)
   43abc:	dc411b17 	ldw	r17,1132(sp)
   43ac0:	dc011a17 	ldw	r16,1128(sp)
   43ac4:	dec11e04 	addi	sp,sp,1144
   43ac8:	f800283a 	ret
   43acc:	047fffc4 	movi	r17,-1
   43ad0:	003ff106 	br	43a98 <__alt_data_end+0xfffde298>

00043ad4 <__swsetup_r>:
   43ad4:	00800174 	movhi	r2,5
   43ad8:	defffd04 	addi	sp,sp,-12
   43adc:	108b9904 	addi	r2,r2,11876
   43ae0:	dc400115 	stw	r17,4(sp)
   43ae4:	2023883a 	mov	r17,r4
   43ae8:	11000017 	ldw	r4,0(r2)
   43aec:	dc000015 	stw	r16,0(sp)
   43af0:	dfc00215 	stw	ra,8(sp)
   43af4:	2821883a 	mov	r16,r5
   43af8:	20000226 	beq	r4,zero,43b04 <__swsetup_r+0x30>
   43afc:	20800e17 	ldw	r2,56(r4)
   43b00:	10003126 	beq	r2,zero,43bc8 <__swsetup_r+0xf4>
   43b04:	8080030b 	ldhu	r2,12(r16)
   43b08:	10c0020c 	andi	r3,r2,8
   43b0c:	1009883a 	mov	r4,r2
   43b10:	18000f26 	beq	r3,zero,43b50 <__swsetup_r+0x7c>
   43b14:	80c00417 	ldw	r3,16(r16)
   43b18:	18001526 	beq	r3,zero,43b70 <__swsetup_r+0x9c>
   43b1c:	1100004c 	andi	r4,r2,1
   43b20:	20001c1e 	bne	r4,zero,43b94 <__swsetup_r+0xc0>
   43b24:	1080008c 	andi	r2,r2,2
   43b28:	1000291e 	bne	r2,zero,43bd0 <__swsetup_r+0xfc>
   43b2c:	80800517 	ldw	r2,20(r16)
   43b30:	80800215 	stw	r2,8(r16)
   43b34:	18001c26 	beq	r3,zero,43ba8 <__swsetup_r+0xd4>
   43b38:	0005883a 	mov	r2,zero
   43b3c:	dfc00217 	ldw	ra,8(sp)
   43b40:	dc400117 	ldw	r17,4(sp)
   43b44:	dc000017 	ldw	r16,0(sp)
   43b48:	dec00304 	addi	sp,sp,12
   43b4c:	f800283a 	ret
   43b50:	2080040c 	andi	r2,r4,16
   43b54:	10002e26 	beq	r2,zero,43c10 <__swsetup_r+0x13c>
   43b58:	2080010c 	andi	r2,r4,4
   43b5c:	10001e1e 	bne	r2,zero,43bd8 <__swsetup_r+0x104>
   43b60:	80c00417 	ldw	r3,16(r16)
   43b64:	20800214 	ori	r2,r4,8
   43b68:	8080030d 	sth	r2,12(r16)
   43b6c:	183feb1e 	bne	r3,zero,43b1c <__alt_data_end+0xfffde31c>
   43b70:	1100a00c 	andi	r4,r2,640
   43b74:	01408004 	movi	r5,512
   43b78:	217fe826 	beq	r4,r5,43b1c <__alt_data_end+0xfffde31c>
   43b7c:	800b883a 	mov	r5,r16
   43b80:	8809883a 	mov	r4,r17
   43b84:	00466900 	call	46690 <__smakebuf_r>
   43b88:	8080030b 	ldhu	r2,12(r16)
   43b8c:	80c00417 	ldw	r3,16(r16)
   43b90:	003fe206 	br	43b1c <__alt_data_end+0xfffde31c>
   43b94:	80800517 	ldw	r2,20(r16)
   43b98:	80000215 	stw	zero,8(r16)
   43b9c:	0085c83a 	sub	r2,zero,r2
   43ba0:	80800615 	stw	r2,24(r16)
   43ba4:	183fe41e 	bne	r3,zero,43b38 <__alt_data_end+0xfffde338>
   43ba8:	80c0030b 	ldhu	r3,12(r16)
   43bac:	0005883a 	mov	r2,zero
   43bb0:	1900200c 	andi	r4,r3,128
   43bb4:	203fe126 	beq	r4,zero,43b3c <__alt_data_end+0xfffde33c>
   43bb8:	18c01014 	ori	r3,r3,64
   43bbc:	80c0030d 	sth	r3,12(r16)
   43bc0:	00bfffc4 	movi	r2,-1
   43bc4:	003fdd06 	br	43b3c <__alt_data_end+0xfffde33c>
   43bc8:	0045ae00 	call	45ae0 <__sinit>
   43bcc:	003fcd06 	br	43b04 <__alt_data_end+0xfffde304>
   43bd0:	0005883a 	mov	r2,zero
   43bd4:	003fd606 	br	43b30 <__alt_data_end+0xfffde330>
   43bd8:	81400c17 	ldw	r5,48(r16)
   43bdc:	28000626 	beq	r5,zero,43bf8 <__swsetup_r+0x124>
   43be0:	80801004 	addi	r2,r16,64
   43be4:	28800326 	beq	r5,r2,43bf4 <__swsetup_r+0x120>
   43be8:	8809883a 	mov	r4,r17
   43bec:	0045c540 	call	45c54 <_free_r>
   43bf0:	8100030b 	ldhu	r4,12(r16)
   43bf4:	80000c15 	stw	zero,48(r16)
   43bf8:	80c00417 	ldw	r3,16(r16)
   43bfc:	00bff6c4 	movi	r2,-37
   43c00:	1108703a 	and	r4,r2,r4
   43c04:	80000115 	stw	zero,4(r16)
   43c08:	80c00015 	stw	r3,0(r16)
   43c0c:	003fd506 	br	43b64 <__alt_data_end+0xfffde364>
   43c10:	00800244 	movi	r2,9
   43c14:	88800015 	stw	r2,0(r17)
   43c18:	20801014 	ori	r2,r4,64
   43c1c:	8080030d 	sth	r2,12(r16)
   43c20:	00bfffc4 	movi	r2,-1
   43c24:	003fc506 	br	43b3c <__alt_data_end+0xfffde33c>

00043c28 <quorem>:
   43c28:	defff204 	addi	sp,sp,-56
   43c2c:	ddc00b15 	stw	r23,44(sp)
   43c30:	20800417 	ldw	r2,16(r4)
   43c34:	2dc00417 	ldw	r23,16(r5)
   43c38:	dfc00d15 	stw	ra,52(sp)
   43c3c:	df000c15 	stw	fp,48(sp)
   43c40:	dd800a15 	stw	r22,40(sp)
   43c44:	dd400915 	stw	r21,36(sp)
   43c48:	dd000815 	stw	r20,32(sp)
   43c4c:	dcc00715 	stw	r19,28(sp)
   43c50:	dc800615 	stw	r18,24(sp)
   43c54:	dc400515 	stw	r17,20(sp)
   43c58:	dc000415 	stw	r16,16(sp)
   43c5c:	15c07a16 	blt	r2,r23,43e48 <quorem+0x220>
   43c60:	bdffffc4 	addi	r23,r23,-1
   43c64:	bde9883a 	add	r20,r23,r23
   43c68:	28c00504 	addi	r3,r5,20
   43c6c:	a529883a 	add	r20,r20,r20
   43c70:	1d39883a 	add	fp,r3,r20
   43c74:	24c00504 	addi	r19,r4,20
   43c78:	d9400215 	stw	r5,8(sp)
   43c7c:	9d29883a 	add	r20,r19,r20
   43c80:	e1400017 	ldw	r5,0(fp)
   43c84:	d9000015 	stw	r4,0(sp)
   43c88:	a1000017 	ldw	r4,0(r20)
   43c8c:	29400044 	addi	r5,r5,1
   43c90:	d8c00115 	stw	r3,4(sp)
   43c94:	dd000315 	stw	r20,12(sp)
   43c98:	004bb000 	call	4bb00 <__udivsi3>
   43c9c:	1025883a 	mov	r18,r2
   43ca0:	10003026 	beq	r2,zero,43d64 <quorem+0x13c>
   43ca4:	dc400117 	ldw	r17,4(sp)
   43ca8:	9829883a 	mov	r20,r19
   43cac:	002d883a 	mov	r22,zero
   43cb0:	0021883a 	mov	r16,zero
   43cb4:	8d400017 	ldw	r21,0(r17)
   43cb8:	900b883a 	mov	r5,r18
   43cbc:	8c400104 	addi	r17,r17,4
   43cc0:	a93fffcc 	andi	r4,r21,65535
   43cc4:	00415200 	call	41520 <__mulsi3>
   43cc8:	a808d43a 	srli	r4,r21,16
   43ccc:	900b883a 	mov	r5,r18
   43cd0:	15ad883a 	add	r22,r2,r22
   43cd4:	00415200 	call	41520 <__mulsi3>
   43cd8:	a1000017 	ldw	r4,0(r20)
   43cdc:	b00cd43a 	srli	r6,r22,16
   43ce0:	b0ffffcc 	andi	r3,r22,65535
   43ce4:	217fffcc 	andi	r5,r4,65535
   43ce8:	2c21883a 	add	r16,r5,r16
   43cec:	80c7c83a 	sub	r3,r16,r3
   43cf0:	2008d43a 	srli	r4,r4,16
   43cf4:	1185883a 	add	r2,r2,r6
   43cf8:	1821d43a 	srai	r16,r3,16
   43cfc:	117fffcc 	andi	r5,r2,65535
   43d00:	2149c83a 	sub	r4,r4,r5
   43d04:	2421883a 	add	r16,r4,r16
   43d08:	8008943a 	slli	r4,r16,16
   43d0c:	18ffffcc 	andi	r3,r3,65535
   43d10:	102cd43a 	srli	r22,r2,16
   43d14:	20c8b03a 	or	r4,r4,r3
   43d18:	a1000015 	stw	r4,0(r20)
   43d1c:	8021d43a 	srai	r16,r16,16
   43d20:	a5000104 	addi	r20,r20,4
   43d24:	e47fe32e 	bgeu	fp,r17,43cb4 <__alt_data_end+0xfffde4b4>
   43d28:	d8c00317 	ldw	r3,12(sp)
   43d2c:	18800017 	ldw	r2,0(r3)
   43d30:	10000c1e 	bne	r2,zero,43d64 <quorem+0x13c>
   43d34:	18bfff04 	addi	r2,r3,-4
   43d38:	9880082e 	bgeu	r19,r2,43d5c <quorem+0x134>
   43d3c:	18ffff17 	ldw	r3,-4(r3)
   43d40:	18000326 	beq	r3,zero,43d50 <quorem+0x128>
   43d44:	00000506 	br	43d5c <quorem+0x134>
   43d48:	10c00017 	ldw	r3,0(r2)
   43d4c:	1800031e 	bne	r3,zero,43d5c <quorem+0x134>
   43d50:	10bfff04 	addi	r2,r2,-4
   43d54:	bdffffc4 	addi	r23,r23,-1
   43d58:	98bffb36 	bltu	r19,r2,43d48 <__alt_data_end+0xfffde548>
   43d5c:	d8c00017 	ldw	r3,0(sp)
   43d60:	1dc00415 	stw	r23,16(r3)
   43d64:	d9400217 	ldw	r5,8(sp)
   43d68:	d9000017 	ldw	r4,0(sp)
   43d6c:	0047e8c0 	call	47e8c <__mcmp>
   43d70:	10002816 	blt	r2,zero,43e14 <quorem+0x1ec>
   43d74:	dc400117 	ldw	r17,4(sp)
   43d78:	94800044 	addi	r18,r18,1
   43d7c:	980d883a 	mov	r6,r19
   43d80:	0007883a 	mov	r3,zero
   43d84:	31000017 	ldw	r4,0(r6)
   43d88:	89400017 	ldw	r5,0(r17)
   43d8c:	31800104 	addi	r6,r6,4
   43d90:	20bfffcc 	andi	r2,r4,65535
   43d94:	10c7883a 	add	r3,r2,r3
   43d98:	28bfffcc 	andi	r2,r5,65535
   43d9c:	1885c83a 	sub	r2,r3,r2
   43da0:	280ad43a 	srli	r5,r5,16
   43da4:	2008d43a 	srli	r4,r4,16
   43da8:	1007d43a 	srai	r3,r2,16
   43dac:	10bfffcc 	andi	r2,r2,65535
   43db0:	2149c83a 	sub	r4,r4,r5
   43db4:	20c9883a 	add	r4,r4,r3
   43db8:	200a943a 	slli	r5,r4,16
   43dbc:	8c400104 	addi	r17,r17,4
   43dc0:	2007d43a 	srai	r3,r4,16
   43dc4:	2884b03a 	or	r2,r5,r2
   43dc8:	30bfff15 	stw	r2,-4(r6)
   43dcc:	e47fed2e 	bgeu	fp,r17,43d84 <__alt_data_end+0xfffde584>
   43dd0:	bdc5883a 	add	r2,r23,r23
   43dd4:	1085883a 	add	r2,r2,r2
   43dd8:	9887883a 	add	r3,r19,r2
   43ddc:	18800017 	ldw	r2,0(r3)
   43de0:	10000c1e 	bne	r2,zero,43e14 <quorem+0x1ec>
   43de4:	18bfff04 	addi	r2,r3,-4
   43de8:	9880082e 	bgeu	r19,r2,43e0c <quorem+0x1e4>
   43dec:	18ffff17 	ldw	r3,-4(r3)
   43df0:	18000326 	beq	r3,zero,43e00 <quorem+0x1d8>
   43df4:	00000506 	br	43e0c <quorem+0x1e4>
   43df8:	10c00017 	ldw	r3,0(r2)
   43dfc:	1800031e 	bne	r3,zero,43e0c <quorem+0x1e4>
   43e00:	10bfff04 	addi	r2,r2,-4
   43e04:	bdffffc4 	addi	r23,r23,-1
   43e08:	98bffb36 	bltu	r19,r2,43df8 <__alt_data_end+0xfffde5f8>
   43e0c:	d8c00017 	ldw	r3,0(sp)
   43e10:	1dc00415 	stw	r23,16(r3)
   43e14:	9005883a 	mov	r2,r18
   43e18:	dfc00d17 	ldw	ra,52(sp)
   43e1c:	df000c17 	ldw	fp,48(sp)
   43e20:	ddc00b17 	ldw	r23,44(sp)
   43e24:	dd800a17 	ldw	r22,40(sp)
   43e28:	dd400917 	ldw	r21,36(sp)
   43e2c:	dd000817 	ldw	r20,32(sp)
   43e30:	dcc00717 	ldw	r19,28(sp)
   43e34:	dc800617 	ldw	r18,24(sp)
   43e38:	dc400517 	ldw	r17,20(sp)
   43e3c:	dc000417 	ldw	r16,16(sp)
   43e40:	dec00e04 	addi	sp,sp,56
   43e44:	f800283a 	ret
   43e48:	0005883a 	mov	r2,zero
   43e4c:	003ff206 	br	43e18 <__alt_data_end+0xfffde618>

00043e50 <_dtoa_r>:
   43e50:	20801017 	ldw	r2,64(r4)
   43e54:	deffde04 	addi	sp,sp,-136
   43e58:	df002015 	stw	fp,128(sp)
   43e5c:	dcc01b15 	stw	r19,108(sp)
   43e60:	dc801a15 	stw	r18,104(sp)
   43e64:	dc401915 	stw	r17,100(sp)
   43e68:	dc001815 	stw	r16,96(sp)
   43e6c:	dfc02115 	stw	ra,132(sp)
   43e70:	ddc01f15 	stw	r23,124(sp)
   43e74:	dd801e15 	stw	r22,120(sp)
   43e78:	dd401d15 	stw	r21,116(sp)
   43e7c:	dd001c15 	stw	r20,112(sp)
   43e80:	d9c00315 	stw	r7,12(sp)
   43e84:	2039883a 	mov	fp,r4
   43e88:	3023883a 	mov	r17,r6
   43e8c:	2825883a 	mov	r18,r5
   43e90:	dc002417 	ldw	r16,144(sp)
   43e94:	3027883a 	mov	r19,r6
   43e98:	10000826 	beq	r2,zero,43ebc <_dtoa_r+0x6c>
   43e9c:	21801117 	ldw	r6,68(r4)
   43ea0:	00c00044 	movi	r3,1
   43ea4:	100b883a 	mov	r5,r2
   43ea8:	1986983a 	sll	r3,r3,r6
   43eac:	11800115 	stw	r6,4(r2)
   43eb0:	10c00215 	stw	r3,8(r2)
   43eb4:	00475b00 	call	475b0 <_Bfree>
   43eb8:	e0001015 	stw	zero,64(fp)
   43ebc:	88002e16 	blt	r17,zero,43f78 <_dtoa_r+0x128>
   43ec0:	80000015 	stw	zero,0(r16)
   43ec4:	889ffc2c 	andhi	r2,r17,32752
   43ec8:	00dffc34 	movhi	r3,32752
   43ecc:	10c01c26 	beq	r2,r3,43f40 <_dtoa_r+0xf0>
   43ed0:	000d883a 	mov	r6,zero
   43ed4:	000f883a 	mov	r7,zero
   43ed8:	9009883a 	mov	r4,r18
   43edc:	980b883a 	mov	r5,r19
   43ee0:	004ce380 	call	4ce38 <__eqdf2>
   43ee4:	10002b1e 	bne	r2,zero,43f94 <_dtoa_r+0x144>
   43ee8:	d9c02317 	ldw	r7,140(sp)
   43eec:	00800044 	movi	r2,1
   43ef0:	38800015 	stw	r2,0(r7)
   43ef4:	d8802517 	ldw	r2,148(sp)
   43ef8:	10019e26 	beq	r2,zero,44574 <_dtoa_r+0x724>
   43efc:	d8c02517 	ldw	r3,148(sp)
   43f00:	00800174 	movhi	r2,5
   43f04:	10848044 	addi	r2,r2,4609
   43f08:	18800015 	stw	r2,0(r3)
   43f0c:	10bfffc4 	addi	r2,r2,-1
   43f10:	dfc02117 	ldw	ra,132(sp)
   43f14:	df002017 	ldw	fp,128(sp)
   43f18:	ddc01f17 	ldw	r23,124(sp)
   43f1c:	dd801e17 	ldw	r22,120(sp)
   43f20:	dd401d17 	ldw	r21,116(sp)
   43f24:	dd001c17 	ldw	r20,112(sp)
   43f28:	dcc01b17 	ldw	r19,108(sp)
   43f2c:	dc801a17 	ldw	r18,104(sp)
   43f30:	dc401917 	ldw	r17,100(sp)
   43f34:	dc001817 	ldw	r16,96(sp)
   43f38:	dec02204 	addi	sp,sp,136
   43f3c:	f800283a 	ret
   43f40:	d8c02317 	ldw	r3,140(sp)
   43f44:	0089c3c4 	movi	r2,9999
   43f48:	18800015 	stw	r2,0(r3)
   43f4c:	90017726 	beq	r18,zero,4452c <_dtoa_r+0x6dc>
   43f50:	00800174 	movhi	r2,5
   43f54:	10848c04 	addi	r2,r2,4656
   43f58:	d9002517 	ldw	r4,148(sp)
   43f5c:	203fec26 	beq	r4,zero,43f10 <__alt_data_end+0xfffde710>
   43f60:	10c000c7 	ldb	r3,3(r2)
   43f64:	1801781e 	bne	r3,zero,44548 <_dtoa_r+0x6f8>
   43f68:	10c000c4 	addi	r3,r2,3
   43f6c:	d9802517 	ldw	r6,148(sp)
   43f70:	30c00015 	stw	r3,0(r6)
   43f74:	003fe606 	br	43f10 <__alt_data_end+0xfffde710>
   43f78:	04e00034 	movhi	r19,32768
   43f7c:	9cffffc4 	addi	r19,r19,-1
   43f80:	00800044 	movi	r2,1
   43f84:	8ce6703a 	and	r19,r17,r19
   43f88:	80800015 	stw	r2,0(r16)
   43f8c:	9823883a 	mov	r17,r19
   43f90:	003fcc06 	br	43ec4 <__alt_data_end+0xfffde6c4>
   43f94:	d8800204 	addi	r2,sp,8
   43f98:	d8800015 	stw	r2,0(sp)
   43f9c:	d9c00104 	addi	r7,sp,4
   43fa0:	900b883a 	mov	r5,r18
   43fa4:	980d883a 	mov	r6,r19
   43fa8:	e009883a 	mov	r4,fp
   43fac:	8820d53a 	srli	r16,r17,20
   43fb0:	00482580 	call	48258 <__d2b>
   43fb4:	d8800915 	stw	r2,36(sp)
   43fb8:	8001651e 	bne	r16,zero,44550 <_dtoa_r+0x700>
   43fbc:	dd800217 	ldw	r22,8(sp)
   43fc0:	dc000117 	ldw	r16,4(sp)
   43fc4:	00800804 	movi	r2,32
   43fc8:	b421883a 	add	r16,r22,r16
   43fcc:	80c10c84 	addi	r3,r16,1074
   43fd0:	10c2d10e 	bge	r2,r3,44b18 <_dtoa_r+0xcc8>
   43fd4:	00801004 	movi	r2,64
   43fd8:	81010484 	addi	r4,r16,1042
   43fdc:	10c7c83a 	sub	r3,r2,r3
   43fe0:	9108d83a 	srl	r4,r18,r4
   43fe4:	88e2983a 	sll	r17,r17,r3
   43fe8:	2448b03a 	or	r4,r4,r17
   43fec:	004e3540 	call	4e354 <__floatunsidf>
   43ff0:	017f8434 	movhi	r5,65040
   43ff4:	01800044 	movi	r6,1
   43ff8:	1009883a 	mov	r4,r2
   43ffc:	194b883a 	add	r5,r3,r5
   44000:	843fffc4 	addi	r16,r16,-1
   44004:	d9801115 	stw	r6,68(sp)
   44008:	000d883a 	mov	r6,zero
   4400c:	01cffe34 	movhi	r7,16376
   44010:	004d8fc0 	call	4d8fc <__subdf3>
   44014:	0198dbf4 	movhi	r6,25455
   44018:	01cff4f4 	movhi	r7,16339
   4401c:	3190d844 	addi	r6,r6,17249
   44020:	39e1e9c4 	addi	r7,r7,-30809
   44024:	1009883a 	mov	r4,r2
   44028:	180b883a 	mov	r5,r3
   4402c:	004d0900 	call	4d090 <__muldf3>
   44030:	01a2d874 	movhi	r6,35681
   44034:	01cff1f4 	movhi	r7,16327
   44038:	31b22cc4 	addi	r6,r6,-14157
   4403c:	39e28a04 	addi	r7,r7,-30168
   44040:	180b883a 	mov	r5,r3
   44044:	1009883a 	mov	r4,r2
   44048:	004bbbc0 	call	4bbbc <__adddf3>
   4404c:	8009883a 	mov	r4,r16
   44050:	1029883a 	mov	r20,r2
   44054:	1823883a 	mov	r17,r3
   44058:	004e2780 	call	4e278 <__floatsidf>
   4405c:	019427f4 	movhi	r6,20639
   44060:	01cff4f4 	movhi	r7,16339
   44064:	319e7ec4 	addi	r6,r6,31227
   44068:	39d104c4 	addi	r7,r7,17427
   4406c:	1009883a 	mov	r4,r2
   44070:	180b883a 	mov	r5,r3
   44074:	004d0900 	call	4d090 <__muldf3>
   44078:	100d883a 	mov	r6,r2
   4407c:	180f883a 	mov	r7,r3
   44080:	a009883a 	mov	r4,r20
   44084:	880b883a 	mov	r5,r17
   44088:	004bbbc0 	call	4bbbc <__adddf3>
   4408c:	1009883a 	mov	r4,r2
   44090:	180b883a 	mov	r5,r3
   44094:	1029883a 	mov	r20,r2
   44098:	1823883a 	mov	r17,r3
   4409c:	004e1f80 	call	4e1f8 <__fixdfsi>
   440a0:	000d883a 	mov	r6,zero
   440a4:	000f883a 	mov	r7,zero
   440a8:	a009883a 	mov	r4,r20
   440ac:	880b883a 	mov	r5,r17
   440b0:	d8800515 	stw	r2,20(sp)
   440b4:	004cf9c0 	call	4cf9c <__ledf2>
   440b8:	10028716 	blt	r2,zero,44ad8 <_dtoa_r+0xc88>
   440bc:	d8c00517 	ldw	r3,20(sp)
   440c0:	00800584 	movi	r2,22
   440c4:	10c27536 	bltu	r2,r3,44a9c <_dtoa_r+0xc4c>
   440c8:	180490fa 	slli	r2,r3,3
   440cc:	00c00174 	movhi	r3,5
   440d0:	18c4a804 	addi	r3,r3,4768
   440d4:	1885883a 	add	r2,r3,r2
   440d8:	11000017 	ldw	r4,0(r2)
   440dc:	11400117 	ldw	r5,4(r2)
   440e0:	900d883a 	mov	r6,r18
   440e4:	980f883a 	mov	r7,r19
   440e8:	004cec00 	call	4cec0 <__gedf2>
   440ec:	00828d0e 	bge	zero,r2,44b24 <_dtoa_r+0xcd4>
   440f0:	d9000517 	ldw	r4,20(sp)
   440f4:	d8000e15 	stw	zero,56(sp)
   440f8:	213fffc4 	addi	r4,r4,-1
   440fc:	d9000515 	stw	r4,20(sp)
   44100:	b42dc83a 	sub	r22,r22,r16
   44104:	b5bfffc4 	addi	r22,r22,-1
   44108:	b0026f16 	blt	r22,zero,44ac8 <_dtoa_r+0xc78>
   4410c:	d8000815 	stw	zero,32(sp)
   44110:	d9c00517 	ldw	r7,20(sp)
   44114:	38026416 	blt	r7,zero,44aa8 <_dtoa_r+0xc58>
   44118:	b1ed883a 	add	r22,r22,r7
   4411c:	d9c00d15 	stw	r7,52(sp)
   44120:	d8000a15 	stw	zero,40(sp)
   44124:	d9800317 	ldw	r6,12(sp)
   44128:	00800244 	movi	r2,9
   4412c:	11811436 	bltu	r2,r6,44580 <_dtoa_r+0x730>
   44130:	00800144 	movi	r2,5
   44134:	1184e10e 	bge	r2,r6,454bc <_dtoa_r+0x166c>
   44138:	31bfff04 	addi	r6,r6,-4
   4413c:	d9800315 	stw	r6,12(sp)
   44140:	0023883a 	mov	r17,zero
   44144:	d9800317 	ldw	r6,12(sp)
   44148:	008000c4 	movi	r2,3
   4414c:	30836726 	beq	r6,r2,44eec <_dtoa_r+0x109c>
   44150:	1183410e 	bge	r2,r6,44e58 <_dtoa_r+0x1008>
   44154:	d9c00317 	ldw	r7,12(sp)
   44158:	00800104 	movi	r2,4
   4415c:	38827c26 	beq	r7,r2,44b50 <_dtoa_r+0xd00>
   44160:	00800144 	movi	r2,5
   44164:	3884c41e 	bne	r7,r2,45478 <_dtoa_r+0x1628>
   44168:	00800044 	movi	r2,1
   4416c:	d8800b15 	stw	r2,44(sp)
   44170:	d8c00517 	ldw	r3,20(sp)
   44174:	d9002217 	ldw	r4,136(sp)
   44178:	1907883a 	add	r3,r3,r4
   4417c:	19800044 	addi	r6,r3,1
   44180:	d8c00c15 	stw	r3,48(sp)
   44184:	d9800615 	stw	r6,24(sp)
   44188:	0183a40e 	bge	zero,r6,4501c <_dtoa_r+0x11cc>
   4418c:	d9800617 	ldw	r6,24(sp)
   44190:	3021883a 	mov	r16,r6
   44194:	e0001115 	stw	zero,68(fp)
   44198:	008005c4 	movi	r2,23
   4419c:	1184c92e 	bgeu	r2,r6,454c4 <_dtoa_r+0x1674>
   441a0:	00c00044 	movi	r3,1
   441a4:	00800104 	movi	r2,4
   441a8:	1085883a 	add	r2,r2,r2
   441ac:	11000504 	addi	r4,r2,20
   441b0:	180b883a 	mov	r5,r3
   441b4:	18c00044 	addi	r3,r3,1
   441b8:	313ffb2e 	bgeu	r6,r4,441a8 <__alt_data_end+0xfffde9a8>
   441bc:	e1401115 	stw	r5,68(fp)
   441c0:	e009883a 	mov	r4,fp
   441c4:	00475080 	call	47508 <_Balloc>
   441c8:	d8800715 	stw	r2,28(sp)
   441cc:	e0801015 	stw	r2,64(fp)
   441d0:	00800384 	movi	r2,14
   441d4:	1400f736 	bltu	r2,r16,445b4 <_dtoa_r+0x764>
   441d8:	8800f626 	beq	r17,zero,445b4 <_dtoa_r+0x764>
   441dc:	d9c00517 	ldw	r7,20(sp)
   441e0:	01c39a0e 	bge	zero,r7,4504c <_dtoa_r+0x11fc>
   441e4:	388003cc 	andi	r2,r7,15
   441e8:	100490fa 	slli	r2,r2,3
   441ec:	382bd13a 	srai	r21,r7,4
   441f0:	00c00174 	movhi	r3,5
   441f4:	18c4a804 	addi	r3,r3,4768
   441f8:	1885883a 	add	r2,r3,r2
   441fc:	a8c0040c 	andi	r3,r21,16
   44200:	12400017 	ldw	r9,0(r2)
   44204:	12000117 	ldw	r8,4(r2)
   44208:	18037926 	beq	r3,zero,44ff0 <_dtoa_r+0x11a0>
   4420c:	00800174 	movhi	r2,5
   44210:	10849e04 	addi	r2,r2,4728
   44214:	11800817 	ldw	r6,32(r2)
   44218:	11c00917 	ldw	r7,36(r2)
   4421c:	9009883a 	mov	r4,r18
   44220:	980b883a 	mov	r5,r19
   44224:	da001715 	stw	r8,92(sp)
   44228:	da401615 	stw	r9,88(sp)
   4422c:	004c4680 	call	4c468 <__divdf3>
   44230:	da001717 	ldw	r8,92(sp)
   44234:	da401617 	ldw	r9,88(sp)
   44238:	ad4003cc 	andi	r21,r21,15
   4423c:	040000c4 	movi	r16,3
   44240:	1023883a 	mov	r17,r2
   44244:	1829883a 	mov	r20,r3
   44248:	a8001126 	beq	r21,zero,44290 <_dtoa_r+0x440>
   4424c:	05c00174 	movhi	r23,5
   44250:	bdc49e04 	addi	r23,r23,4728
   44254:	4805883a 	mov	r2,r9
   44258:	4007883a 	mov	r3,r8
   4425c:	a980004c 	andi	r6,r21,1
   44260:	1009883a 	mov	r4,r2
   44264:	a82bd07a 	srai	r21,r21,1
   44268:	180b883a 	mov	r5,r3
   4426c:	30000426 	beq	r6,zero,44280 <_dtoa_r+0x430>
   44270:	b9800017 	ldw	r6,0(r23)
   44274:	b9c00117 	ldw	r7,4(r23)
   44278:	84000044 	addi	r16,r16,1
   4427c:	004d0900 	call	4d090 <__muldf3>
   44280:	bdc00204 	addi	r23,r23,8
   44284:	a83ff51e 	bne	r21,zero,4425c <__alt_data_end+0xfffdea5c>
   44288:	1013883a 	mov	r9,r2
   4428c:	1811883a 	mov	r8,r3
   44290:	480d883a 	mov	r6,r9
   44294:	400f883a 	mov	r7,r8
   44298:	8809883a 	mov	r4,r17
   4429c:	a00b883a 	mov	r5,r20
   442a0:	004c4680 	call	4c468 <__divdf3>
   442a4:	d8800f15 	stw	r2,60(sp)
   442a8:	d8c01015 	stw	r3,64(sp)
   442ac:	d8c00e17 	ldw	r3,56(sp)
   442b0:	18000626 	beq	r3,zero,442cc <_dtoa_r+0x47c>
   442b4:	d9000f17 	ldw	r4,60(sp)
   442b8:	d9401017 	ldw	r5,64(sp)
   442bc:	000d883a 	mov	r6,zero
   442c0:	01cffc34 	movhi	r7,16368
   442c4:	004cf9c0 	call	4cf9c <__ledf2>
   442c8:	10040b16 	blt	r2,zero,452f8 <_dtoa_r+0x14a8>
   442cc:	8009883a 	mov	r4,r16
   442d0:	004e2780 	call	4e278 <__floatsidf>
   442d4:	d9800f17 	ldw	r6,60(sp)
   442d8:	d9c01017 	ldw	r7,64(sp)
   442dc:	1009883a 	mov	r4,r2
   442e0:	180b883a 	mov	r5,r3
   442e4:	004d0900 	call	4d090 <__muldf3>
   442e8:	000d883a 	mov	r6,zero
   442ec:	01d00734 	movhi	r7,16412
   442f0:	1009883a 	mov	r4,r2
   442f4:	180b883a 	mov	r5,r3
   442f8:	004bbbc0 	call	4bbbc <__adddf3>
   442fc:	1021883a 	mov	r16,r2
   44300:	d8800617 	ldw	r2,24(sp)
   44304:	047f3034 	movhi	r17,64704
   44308:	1c63883a 	add	r17,r3,r17
   4430c:	10031826 	beq	r2,zero,44f70 <_dtoa_r+0x1120>
   44310:	d8c00517 	ldw	r3,20(sp)
   44314:	db000617 	ldw	r12,24(sp)
   44318:	d8c01315 	stw	r3,76(sp)
   4431c:	d9000b17 	ldw	r4,44(sp)
   44320:	20038f26 	beq	r4,zero,45160 <_dtoa_r+0x1310>
   44324:	60bfffc4 	addi	r2,r12,-1
   44328:	100490fa 	slli	r2,r2,3
   4432c:	00c00174 	movhi	r3,5
   44330:	18c4a804 	addi	r3,r3,4768
   44334:	1885883a 	add	r2,r3,r2
   44338:	11800017 	ldw	r6,0(r2)
   4433c:	11c00117 	ldw	r7,4(r2)
   44340:	d8800717 	ldw	r2,28(sp)
   44344:	0009883a 	mov	r4,zero
   44348:	014ff834 	movhi	r5,16352
   4434c:	db001615 	stw	r12,88(sp)
   44350:	15c00044 	addi	r23,r2,1
   44354:	004c4680 	call	4c468 <__divdf3>
   44358:	800d883a 	mov	r6,r16
   4435c:	880f883a 	mov	r7,r17
   44360:	1009883a 	mov	r4,r2
   44364:	180b883a 	mov	r5,r3
   44368:	004d8fc0 	call	4d8fc <__subdf3>
   4436c:	d9401017 	ldw	r5,64(sp)
   44370:	d9000f17 	ldw	r4,60(sp)
   44374:	102b883a 	mov	r21,r2
   44378:	d8c01215 	stw	r3,72(sp)
   4437c:	004e1f80 	call	4e1f8 <__fixdfsi>
   44380:	1009883a 	mov	r4,r2
   44384:	1029883a 	mov	r20,r2
   44388:	004e2780 	call	4e278 <__floatsidf>
   4438c:	d9000f17 	ldw	r4,60(sp)
   44390:	d9401017 	ldw	r5,64(sp)
   44394:	100d883a 	mov	r6,r2
   44398:	180f883a 	mov	r7,r3
   4439c:	004d8fc0 	call	4d8fc <__subdf3>
   443a0:	1823883a 	mov	r17,r3
   443a4:	d8c00717 	ldw	r3,28(sp)
   443a8:	d9401217 	ldw	r5,72(sp)
   443ac:	a2000c04 	addi	r8,r20,48
   443b0:	1021883a 	mov	r16,r2
   443b4:	1a000005 	stb	r8,0(r3)
   443b8:	800d883a 	mov	r6,r16
   443bc:	880f883a 	mov	r7,r17
   443c0:	a809883a 	mov	r4,r21
   443c4:	4029883a 	mov	r20,r8
   443c8:	004cec00 	call	4cec0 <__gedf2>
   443cc:	00841d16 	blt	zero,r2,45444 <_dtoa_r+0x15f4>
   443d0:	800d883a 	mov	r6,r16
   443d4:	880f883a 	mov	r7,r17
   443d8:	0009883a 	mov	r4,zero
   443dc:	014ffc34 	movhi	r5,16368
   443e0:	004d8fc0 	call	4d8fc <__subdf3>
   443e4:	d9401217 	ldw	r5,72(sp)
   443e8:	100d883a 	mov	r6,r2
   443ec:	180f883a 	mov	r7,r3
   443f0:	a809883a 	mov	r4,r21
   443f4:	004cec00 	call	4cec0 <__gedf2>
   443f8:	db001617 	ldw	r12,88(sp)
   443fc:	00840e16 	blt	zero,r2,45438 <_dtoa_r+0x15e8>
   44400:	00800044 	movi	r2,1
   44404:	13006b0e 	bge	r2,r12,445b4 <_dtoa_r+0x764>
   44408:	d9000717 	ldw	r4,28(sp)
   4440c:	dd800f15 	stw	r22,60(sp)
   44410:	dcc01015 	stw	r19,64(sp)
   44414:	2319883a 	add	r12,r4,r12
   44418:	dcc01217 	ldw	r19,72(sp)
   4441c:	602d883a 	mov	r22,r12
   44420:	dc801215 	stw	r18,72(sp)
   44424:	b825883a 	mov	r18,r23
   44428:	00000906 	br	44450 <_dtoa_r+0x600>
   4442c:	004d8fc0 	call	4d8fc <__subdf3>
   44430:	a80d883a 	mov	r6,r21
   44434:	980f883a 	mov	r7,r19
   44438:	1009883a 	mov	r4,r2
   4443c:	180b883a 	mov	r5,r3
   44440:	004cf9c0 	call	4cf9c <__ledf2>
   44444:	1003e816 	blt	r2,zero,453e8 <_dtoa_r+0x1598>
   44448:	b825883a 	mov	r18,r23
   4444c:	bd83e926 	beq	r23,r22,453f4 <_dtoa_r+0x15a4>
   44450:	a809883a 	mov	r4,r21
   44454:	980b883a 	mov	r5,r19
   44458:	000d883a 	mov	r6,zero
   4445c:	01d00934 	movhi	r7,16420
   44460:	004d0900 	call	4d090 <__muldf3>
   44464:	000d883a 	mov	r6,zero
   44468:	01d00934 	movhi	r7,16420
   4446c:	8009883a 	mov	r4,r16
   44470:	880b883a 	mov	r5,r17
   44474:	102b883a 	mov	r21,r2
   44478:	1827883a 	mov	r19,r3
   4447c:	004d0900 	call	4d090 <__muldf3>
   44480:	180b883a 	mov	r5,r3
   44484:	1009883a 	mov	r4,r2
   44488:	1821883a 	mov	r16,r3
   4448c:	1023883a 	mov	r17,r2
   44490:	004e1f80 	call	4e1f8 <__fixdfsi>
   44494:	1009883a 	mov	r4,r2
   44498:	1029883a 	mov	r20,r2
   4449c:	004e2780 	call	4e278 <__floatsidf>
   444a0:	8809883a 	mov	r4,r17
   444a4:	800b883a 	mov	r5,r16
   444a8:	100d883a 	mov	r6,r2
   444ac:	180f883a 	mov	r7,r3
   444b0:	004d8fc0 	call	4d8fc <__subdf3>
   444b4:	a5000c04 	addi	r20,r20,48
   444b8:	a80d883a 	mov	r6,r21
   444bc:	980f883a 	mov	r7,r19
   444c0:	1009883a 	mov	r4,r2
   444c4:	180b883a 	mov	r5,r3
   444c8:	95000005 	stb	r20,0(r18)
   444cc:	1021883a 	mov	r16,r2
   444d0:	1823883a 	mov	r17,r3
   444d4:	004cf9c0 	call	4cf9c <__ledf2>
   444d8:	bdc00044 	addi	r23,r23,1
   444dc:	800d883a 	mov	r6,r16
   444e0:	880f883a 	mov	r7,r17
   444e4:	0009883a 	mov	r4,zero
   444e8:	014ffc34 	movhi	r5,16368
   444ec:	103fcf0e 	bge	r2,zero,4442c <__alt_data_end+0xfffdec2c>
   444f0:	d8c01317 	ldw	r3,76(sp)
   444f4:	d8c00515 	stw	r3,20(sp)
   444f8:	d9400917 	ldw	r5,36(sp)
   444fc:	e009883a 	mov	r4,fp
   44500:	00475b00 	call	475b0 <_Bfree>
   44504:	d9000517 	ldw	r4,20(sp)
   44508:	d9802317 	ldw	r6,140(sp)
   4450c:	d9c02517 	ldw	r7,148(sp)
   44510:	b8000005 	stb	zero,0(r23)
   44514:	20800044 	addi	r2,r4,1
   44518:	30800015 	stw	r2,0(r6)
   4451c:	3802aa26 	beq	r7,zero,44fc8 <_dtoa_r+0x1178>
   44520:	3dc00015 	stw	r23,0(r7)
   44524:	d8800717 	ldw	r2,28(sp)
   44528:	003e7906 	br	43f10 <__alt_data_end+0xfffde710>
   4452c:	00800434 	movhi	r2,16
   44530:	10bfffc4 	addi	r2,r2,-1
   44534:	88a2703a 	and	r17,r17,r2
   44538:	883e851e 	bne	r17,zero,43f50 <__alt_data_end+0xfffde750>
   4453c:	00800174 	movhi	r2,5
   44540:	10848904 	addi	r2,r2,4644
   44544:	003e8406 	br	43f58 <__alt_data_end+0xfffde758>
   44548:	10c00204 	addi	r3,r2,8
   4454c:	003e8706 	br	43f6c <__alt_data_end+0xfffde76c>
   44550:	01400434 	movhi	r5,16
   44554:	297fffc4 	addi	r5,r5,-1
   44558:	994a703a 	and	r5,r19,r5
   4455c:	9009883a 	mov	r4,r18
   44560:	843f0044 	addi	r16,r16,-1023
   44564:	294ffc34 	orhi	r5,r5,16368
   44568:	dd800217 	ldw	r22,8(sp)
   4456c:	d8001115 	stw	zero,68(sp)
   44570:	003ea506 	br	44008 <__alt_data_end+0xfffde808>
   44574:	00800174 	movhi	r2,5
   44578:	10848004 	addi	r2,r2,4608
   4457c:	003e6406 	br	43f10 <__alt_data_end+0xfffde710>
   44580:	e0001115 	stw	zero,68(fp)
   44584:	000b883a 	mov	r5,zero
   44588:	e009883a 	mov	r4,fp
   4458c:	00475080 	call	47508 <_Balloc>
   44590:	01bfffc4 	movi	r6,-1
   44594:	01c00044 	movi	r7,1
   44598:	d8800715 	stw	r2,28(sp)
   4459c:	d9800c15 	stw	r6,48(sp)
   445a0:	e0801015 	stw	r2,64(fp)
   445a4:	d8000315 	stw	zero,12(sp)
   445a8:	d9c00b15 	stw	r7,44(sp)
   445ac:	d9800615 	stw	r6,24(sp)
   445b0:	d8002215 	stw	zero,136(sp)
   445b4:	d8800117 	ldw	r2,4(sp)
   445b8:	10008916 	blt	r2,zero,447e0 <_dtoa_r+0x990>
   445bc:	d9000517 	ldw	r4,20(sp)
   445c0:	00c00384 	movi	r3,14
   445c4:	19008616 	blt	r3,r4,447e0 <_dtoa_r+0x990>
   445c8:	200490fa 	slli	r2,r4,3
   445cc:	00c00174 	movhi	r3,5
   445d0:	d9802217 	ldw	r6,136(sp)
   445d4:	18c4a804 	addi	r3,r3,4768
   445d8:	1885883a 	add	r2,r3,r2
   445dc:	14000017 	ldw	r16,0(r2)
   445e0:	14400117 	ldw	r17,4(r2)
   445e4:	30016316 	blt	r6,zero,44b74 <_dtoa_r+0xd24>
   445e8:	800d883a 	mov	r6,r16
   445ec:	880f883a 	mov	r7,r17
   445f0:	9009883a 	mov	r4,r18
   445f4:	980b883a 	mov	r5,r19
   445f8:	004c4680 	call	4c468 <__divdf3>
   445fc:	180b883a 	mov	r5,r3
   44600:	1009883a 	mov	r4,r2
   44604:	004e1f80 	call	4e1f8 <__fixdfsi>
   44608:	1009883a 	mov	r4,r2
   4460c:	102b883a 	mov	r21,r2
   44610:	004e2780 	call	4e278 <__floatsidf>
   44614:	800d883a 	mov	r6,r16
   44618:	880f883a 	mov	r7,r17
   4461c:	1009883a 	mov	r4,r2
   44620:	180b883a 	mov	r5,r3
   44624:	004d0900 	call	4d090 <__muldf3>
   44628:	100d883a 	mov	r6,r2
   4462c:	180f883a 	mov	r7,r3
   44630:	9009883a 	mov	r4,r18
   44634:	980b883a 	mov	r5,r19
   44638:	004d8fc0 	call	4d8fc <__subdf3>
   4463c:	d9c00717 	ldw	r7,28(sp)
   44640:	1009883a 	mov	r4,r2
   44644:	a8800c04 	addi	r2,r21,48
   44648:	38800005 	stb	r2,0(r7)
   4464c:	3dc00044 	addi	r23,r7,1
   44650:	d9c00617 	ldw	r7,24(sp)
   44654:	01800044 	movi	r6,1
   44658:	180b883a 	mov	r5,r3
   4465c:	2005883a 	mov	r2,r4
   44660:	39803826 	beq	r7,r6,44744 <_dtoa_r+0x8f4>
   44664:	000d883a 	mov	r6,zero
   44668:	01d00934 	movhi	r7,16420
   4466c:	004d0900 	call	4d090 <__muldf3>
   44670:	000d883a 	mov	r6,zero
   44674:	000f883a 	mov	r7,zero
   44678:	1009883a 	mov	r4,r2
   4467c:	180b883a 	mov	r5,r3
   44680:	1025883a 	mov	r18,r2
   44684:	1827883a 	mov	r19,r3
   44688:	004ce380 	call	4ce38 <__eqdf2>
   4468c:	103f9a26 	beq	r2,zero,444f8 <__alt_data_end+0xfffdecf8>
   44690:	d9c00617 	ldw	r7,24(sp)
   44694:	d8c00717 	ldw	r3,28(sp)
   44698:	b829883a 	mov	r20,r23
   4469c:	38bfffc4 	addi	r2,r7,-1
   446a0:	18ad883a 	add	r22,r3,r2
   446a4:	00000a06 	br	446d0 <_dtoa_r+0x880>
   446a8:	004d0900 	call	4d090 <__muldf3>
   446ac:	000d883a 	mov	r6,zero
   446b0:	000f883a 	mov	r7,zero
   446b4:	1009883a 	mov	r4,r2
   446b8:	180b883a 	mov	r5,r3
   446bc:	1025883a 	mov	r18,r2
   446c0:	1827883a 	mov	r19,r3
   446c4:	b829883a 	mov	r20,r23
   446c8:	004ce380 	call	4ce38 <__eqdf2>
   446cc:	103f8a26 	beq	r2,zero,444f8 <__alt_data_end+0xfffdecf8>
   446d0:	800d883a 	mov	r6,r16
   446d4:	880f883a 	mov	r7,r17
   446d8:	9009883a 	mov	r4,r18
   446dc:	980b883a 	mov	r5,r19
   446e0:	004c4680 	call	4c468 <__divdf3>
   446e4:	180b883a 	mov	r5,r3
   446e8:	1009883a 	mov	r4,r2
   446ec:	004e1f80 	call	4e1f8 <__fixdfsi>
   446f0:	1009883a 	mov	r4,r2
   446f4:	102b883a 	mov	r21,r2
   446f8:	004e2780 	call	4e278 <__floatsidf>
   446fc:	800d883a 	mov	r6,r16
   44700:	880f883a 	mov	r7,r17
   44704:	1009883a 	mov	r4,r2
   44708:	180b883a 	mov	r5,r3
   4470c:	004d0900 	call	4d090 <__muldf3>
   44710:	100d883a 	mov	r6,r2
   44714:	180f883a 	mov	r7,r3
   44718:	9009883a 	mov	r4,r18
   4471c:	980b883a 	mov	r5,r19
   44720:	004d8fc0 	call	4d8fc <__subdf3>
   44724:	aa000c04 	addi	r8,r21,48
   44728:	a2000005 	stb	r8,0(r20)
   4472c:	000d883a 	mov	r6,zero
   44730:	01d00934 	movhi	r7,16420
   44734:	1009883a 	mov	r4,r2
   44738:	180b883a 	mov	r5,r3
   4473c:	a5c00044 	addi	r23,r20,1
   44740:	b53fd91e 	bne	r22,r20,446a8 <__alt_data_end+0xfffdeea8>
   44744:	100d883a 	mov	r6,r2
   44748:	180f883a 	mov	r7,r3
   4474c:	1009883a 	mov	r4,r2
   44750:	180b883a 	mov	r5,r3
   44754:	004bbbc0 	call	4bbbc <__adddf3>
   44758:	100d883a 	mov	r6,r2
   4475c:	180f883a 	mov	r7,r3
   44760:	8009883a 	mov	r4,r16
   44764:	880b883a 	mov	r5,r17
   44768:	1027883a 	mov	r19,r2
   4476c:	1825883a 	mov	r18,r3
   44770:	004cf9c0 	call	4cf9c <__ledf2>
   44774:	10000816 	blt	r2,zero,44798 <_dtoa_r+0x948>
   44778:	980d883a 	mov	r6,r19
   4477c:	900f883a 	mov	r7,r18
   44780:	8009883a 	mov	r4,r16
   44784:	880b883a 	mov	r5,r17
   44788:	004ce380 	call	4ce38 <__eqdf2>
   4478c:	103f5a1e 	bne	r2,zero,444f8 <__alt_data_end+0xfffdecf8>
   44790:	ad40004c 	andi	r21,r21,1
   44794:	a83f5826 	beq	r21,zero,444f8 <__alt_data_end+0xfffdecf8>
   44798:	bd3fffc3 	ldbu	r20,-1(r23)
   4479c:	b8bfffc4 	addi	r2,r23,-1
   447a0:	1007883a 	mov	r3,r2
   447a4:	01400e44 	movi	r5,57
   447a8:	d9800717 	ldw	r6,28(sp)
   447ac:	00000506 	br	447c4 <_dtoa_r+0x974>
   447b0:	18ffffc4 	addi	r3,r3,-1
   447b4:	11824726 	beq	r2,r6,450d4 <_dtoa_r+0x1284>
   447b8:	1d000003 	ldbu	r20,0(r3)
   447bc:	102f883a 	mov	r23,r2
   447c0:	10bfffc4 	addi	r2,r2,-1
   447c4:	a1003fcc 	andi	r4,r20,255
   447c8:	2100201c 	xori	r4,r4,128
   447cc:	213fe004 	addi	r4,r4,-128
   447d0:	217ff726 	beq	r4,r5,447b0 <__alt_data_end+0xfffdefb0>
   447d4:	a2000044 	addi	r8,r20,1
   447d8:	12000005 	stb	r8,0(r2)
   447dc:	003f4606 	br	444f8 <__alt_data_end+0xfffdecf8>
   447e0:	d9000b17 	ldw	r4,44(sp)
   447e4:	2000c826 	beq	r4,zero,44b08 <_dtoa_r+0xcb8>
   447e8:	d9800317 	ldw	r6,12(sp)
   447ec:	00c00044 	movi	r3,1
   447f0:	1980f90e 	bge	r3,r6,44bd8 <_dtoa_r+0xd88>
   447f4:	d8800617 	ldw	r2,24(sp)
   447f8:	d8c00a17 	ldw	r3,40(sp)
   447fc:	157fffc4 	addi	r21,r2,-1
   44800:	1d41f316 	blt	r3,r21,44fd0 <_dtoa_r+0x1180>
   44804:	1d6bc83a 	sub	r21,r3,r21
   44808:	d9c00617 	ldw	r7,24(sp)
   4480c:	3802aa16 	blt	r7,zero,452b8 <_dtoa_r+0x1468>
   44810:	dd000817 	ldw	r20,32(sp)
   44814:	d8800617 	ldw	r2,24(sp)
   44818:	d8c00817 	ldw	r3,32(sp)
   4481c:	01400044 	movi	r5,1
   44820:	e009883a 	mov	r4,fp
   44824:	1887883a 	add	r3,r3,r2
   44828:	d8c00815 	stw	r3,32(sp)
   4482c:	b0ad883a 	add	r22,r22,r2
   44830:	004793c0 	call	4793c <__i2b>
   44834:	1023883a 	mov	r17,r2
   44838:	a0000826 	beq	r20,zero,4485c <_dtoa_r+0xa0c>
   4483c:	0580070e 	bge	zero,r22,4485c <_dtoa_r+0xa0c>
   44840:	a005883a 	mov	r2,r20
   44844:	b500b916 	blt	r22,r20,44b2c <_dtoa_r+0xcdc>
   44848:	d9000817 	ldw	r4,32(sp)
   4484c:	a0a9c83a 	sub	r20,r20,r2
   44850:	b0adc83a 	sub	r22,r22,r2
   44854:	2089c83a 	sub	r4,r4,r2
   44858:	d9000815 	stw	r4,32(sp)
   4485c:	d9800a17 	ldw	r6,40(sp)
   44860:	0181810e 	bge	zero,r6,44e68 <_dtoa_r+0x1018>
   44864:	d9c00b17 	ldw	r7,44(sp)
   44868:	3800b326 	beq	r7,zero,44b38 <_dtoa_r+0xce8>
   4486c:	a800b226 	beq	r21,zero,44b38 <_dtoa_r+0xce8>
   44870:	880b883a 	mov	r5,r17
   44874:	a80d883a 	mov	r6,r21
   44878:	e009883a 	mov	r4,fp
   4487c:	0047c040 	call	47c04 <__pow5mult>
   44880:	d9800917 	ldw	r6,36(sp)
   44884:	100b883a 	mov	r5,r2
   44888:	e009883a 	mov	r4,fp
   4488c:	1023883a 	mov	r17,r2
   44890:	00479780 	call	47978 <__multiply>
   44894:	1021883a 	mov	r16,r2
   44898:	d8800a17 	ldw	r2,40(sp)
   4489c:	d9400917 	ldw	r5,36(sp)
   448a0:	e009883a 	mov	r4,fp
   448a4:	1545c83a 	sub	r2,r2,r21
   448a8:	d8800a15 	stw	r2,40(sp)
   448ac:	00475b00 	call	475b0 <_Bfree>
   448b0:	d8c00a17 	ldw	r3,40(sp)
   448b4:	18009f1e 	bne	r3,zero,44b34 <_dtoa_r+0xce4>
   448b8:	05c00044 	movi	r23,1
   448bc:	e009883a 	mov	r4,fp
   448c0:	b80b883a 	mov	r5,r23
   448c4:	004793c0 	call	4793c <__i2b>
   448c8:	d9000d17 	ldw	r4,52(sp)
   448cc:	102b883a 	mov	r21,r2
   448d0:	2000ce26 	beq	r4,zero,44c0c <_dtoa_r+0xdbc>
   448d4:	200d883a 	mov	r6,r4
   448d8:	100b883a 	mov	r5,r2
   448dc:	e009883a 	mov	r4,fp
   448e0:	0047c040 	call	47c04 <__pow5mult>
   448e4:	d9800317 	ldw	r6,12(sp)
   448e8:	102b883a 	mov	r21,r2
   448ec:	b981810e 	bge	r23,r6,44ef4 <_dtoa_r+0x10a4>
   448f0:	0027883a 	mov	r19,zero
   448f4:	a8800417 	ldw	r2,16(r21)
   448f8:	05c00804 	movi	r23,32
   448fc:	10800104 	addi	r2,r2,4
   44900:	1085883a 	add	r2,r2,r2
   44904:	1085883a 	add	r2,r2,r2
   44908:	a885883a 	add	r2,r21,r2
   4490c:	11000017 	ldw	r4,0(r2)
   44910:	00478240 	call	47824 <__hi0bits>
   44914:	b885c83a 	sub	r2,r23,r2
   44918:	1585883a 	add	r2,r2,r22
   4491c:	108007cc 	andi	r2,r2,31
   44920:	1000b326 	beq	r2,zero,44bf0 <_dtoa_r+0xda0>
   44924:	00c00804 	movi	r3,32
   44928:	1887c83a 	sub	r3,r3,r2
   4492c:	01000104 	movi	r4,4
   44930:	20c2cd0e 	bge	r4,r3,45468 <_dtoa_r+0x1618>
   44934:	00c00704 	movi	r3,28
   44938:	1885c83a 	sub	r2,r3,r2
   4493c:	d8c00817 	ldw	r3,32(sp)
   44940:	a0a9883a 	add	r20,r20,r2
   44944:	b0ad883a 	add	r22,r22,r2
   44948:	1887883a 	add	r3,r3,r2
   4494c:	d8c00815 	stw	r3,32(sp)
   44950:	d9800817 	ldw	r6,32(sp)
   44954:	0180040e 	bge	zero,r6,44968 <_dtoa_r+0xb18>
   44958:	800b883a 	mov	r5,r16
   4495c:	e009883a 	mov	r4,fp
   44960:	0047d440 	call	47d44 <__lshift>
   44964:	1021883a 	mov	r16,r2
   44968:	0580050e 	bge	zero,r22,44980 <_dtoa_r+0xb30>
   4496c:	a80b883a 	mov	r5,r21
   44970:	b00d883a 	mov	r6,r22
   44974:	e009883a 	mov	r4,fp
   44978:	0047d440 	call	47d44 <__lshift>
   4497c:	102b883a 	mov	r21,r2
   44980:	d9c00e17 	ldw	r7,56(sp)
   44984:	3801211e 	bne	r7,zero,44e0c <_dtoa_r+0xfbc>
   44988:	d9800617 	ldw	r6,24(sp)
   4498c:	0181380e 	bge	zero,r6,44e70 <_dtoa_r+0x1020>
   44990:	d8c00b17 	ldw	r3,44(sp)
   44994:	1800ab1e 	bne	r3,zero,44c44 <_dtoa_r+0xdf4>
   44998:	dc800717 	ldw	r18,28(sp)
   4499c:	dcc00617 	ldw	r19,24(sp)
   449a0:	9029883a 	mov	r20,r18
   449a4:	00000206 	br	449b0 <_dtoa_r+0xb60>
   449a8:	00475d80 	call	475d8 <__multadd>
   449ac:	1021883a 	mov	r16,r2
   449b0:	a80b883a 	mov	r5,r21
   449b4:	8009883a 	mov	r4,r16
   449b8:	0043c280 	call	43c28 <quorem>
   449bc:	10800c04 	addi	r2,r2,48
   449c0:	90800005 	stb	r2,0(r18)
   449c4:	94800044 	addi	r18,r18,1
   449c8:	9507c83a 	sub	r3,r18,r20
   449cc:	000f883a 	mov	r7,zero
   449d0:	01800284 	movi	r6,10
   449d4:	800b883a 	mov	r5,r16
   449d8:	e009883a 	mov	r4,fp
   449dc:	1cfff216 	blt	r3,r19,449a8 <__alt_data_end+0xfffdf1a8>
   449e0:	1011883a 	mov	r8,r2
   449e4:	d8800617 	ldw	r2,24(sp)
   449e8:	0082370e 	bge	zero,r2,452c8 <_dtoa_r+0x1478>
   449ec:	d9000717 	ldw	r4,28(sp)
   449f0:	0025883a 	mov	r18,zero
   449f4:	20af883a 	add	r23,r4,r2
   449f8:	01800044 	movi	r6,1
   449fc:	800b883a 	mov	r5,r16
   44a00:	e009883a 	mov	r4,fp
   44a04:	da001715 	stw	r8,92(sp)
   44a08:	0047d440 	call	47d44 <__lshift>
   44a0c:	a80b883a 	mov	r5,r21
   44a10:	1009883a 	mov	r4,r2
   44a14:	d8800915 	stw	r2,36(sp)
   44a18:	0047e8c0 	call	47e8c <__mcmp>
   44a1c:	da001717 	ldw	r8,92(sp)
   44a20:	0081800e 	bge	zero,r2,45024 <_dtoa_r+0x11d4>
   44a24:	b93fffc3 	ldbu	r4,-1(r23)
   44a28:	b8bfffc4 	addi	r2,r23,-1
   44a2c:	1007883a 	mov	r3,r2
   44a30:	01800e44 	movi	r6,57
   44a34:	d9c00717 	ldw	r7,28(sp)
   44a38:	00000506 	br	44a50 <_dtoa_r+0xc00>
   44a3c:	18ffffc4 	addi	r3,r3,-1
   44a40:	11c12326 	beq	r2,r7,44ed0 <_dtoa_r+0x1080>
   44a44:	19000003 	ldbu	r4,0(r3)
   44a48:	102f883a 	mov	r23,r2
   44a4c:	10bfffc4 	addi	r2,r2,-1
   44a50:	21403fcc 	andi	r5,r4,255
   44a54:	2940201c 	xori	r5,r5,128
   44a58:	297fe004 	addi	r5,r5,-128
   44a5c:	29bff726 	beq	r5,r6,44a3c <__alt_data_end+0xfffdf23c>
   44a60:	21000044 	addi	r4,r4,1
   44a64:	11000005 	stb	r4,0(r2)
   44a68:	a80b883a 	mov	r5,r21
   44a6c:	e009883a 	mov	r4,fp
   44a70:	00475b00 	call	475b0 <_Bfree>
   44a74:	883ea026 	beq	r17,zero,444f8 <__alt_data_end+0xfffdecf8>
   44a78:	90000426 	beq	r18,zero,44a8c <_dtoa_r+0xc3c>
   44a7c:	94400326 	beq	r18,r17,44a8c <_dtoa_r+0xc3c>
   44a80:	900b883a 	mov	r5,r18
   44a84:	e009883a 	mov	r4,fp
   44a88:	00475b00 	call	475b0 <_Bfree>
   44a8c:	880b883a 	mov	r5,r17
   44a90:	e009883a 	mov	r4,fp
   44a94:	00475b00 	call	475b0 <_Bfree>
   44a98:	003e9706 	br	444f8 <__alt_data_end+0xfffdecf8>
   44a9c:	01800044 	movi	r6,1
   44aa0:	d9800e15 	stw	r6,56(sp)
   44aa4:	003d9606 	br	44100 <__alt_data_end+0xfffde900>
   44aa8:	d8800817 	ldw	r2,32(sp)
   44aac:	d8c00517 	ldw	r3,20(sp)
   44ab0:	d8000d15 	stw	zero,52(sp)
   44ab4:	10c5c83a 	sub	r2,r2,r3
   44ab8:	00c9c83a 	sub	r4,zero,r3
   44abc:	d8800815 	stw	r2,32(sp)
   44ac0:	d9000a15 	stw	r4,40(sp)
   44ac4:	003d9706 	br	44124 <__alt_data_end+0xfffde924>
   44ac8:	05adc83a 	sub	r22,zero,r22
   44acc:	dd800815 	stw	r22,32(sp)
   44ad0:	002d883a 	mov	r22,zero
   44ad4:	003d8e06 	br	44110 <__alt_data_end+0xfffde910>
   44ad8:	d9000517 	ldw	r4,20(sp)
   44adc:	004e2780 	call	4e278 <__floatsidf>
   44ae0:	100d883a 	mov	r6,r2
   44ae4:	180f883a 	mov	r7,r3
   44ae8:	a009883a 	mov	r4,r20
   44aec:	880b883a 	mov	r5,r17
   44af0:	004ce380 	call	4ce38 <__eqdf2>
   44af4:	103d7126 	beq	r2,zero,440bc <__alt_data_end+0xfffde8bc>
   44af8:	d9c00517 	ldw	r7,20(sp)
   44afc:	39ffffc4 	addi	r7,r7,-1
   44b00:	d9c00515 	stw	r7,20(sp)
   44b04:	003d6d06 	br	440bc <__alt_data_end+0xfffde8bc>
   44b08:	dd400a17 	ldw	r21,40(sp)
   44b0c:	dd000817 	ldw	r20,32(sp)
   44b10:	0023883a 	mov	r17,zero
   44b14:	003f4806 	br	44838 <__alt_data_end+0xfffdf038>
   44b18:	10e3c83a 	sub	r17,r2,r3
   44b1c:	9448983a 	sll	r4,r18,r17
   44b20:	003d3206 	br	43fec <__alt_data_end+0xfffde7ec>
   44b24:	d8000e15 	stw	zero,56(sp)
   44b28:	003d7506 	br	44100 <__alt_data_end+0xfffde900>
   44b2c:	b005883a 	mov	r2,r22
   44b30:	003f4506 	br	44848 <__alt_data_end+0xfffdf048>
   44b34:	dc000915 	stw	r16,36(sp)
   44b38:	d9800a17 	ldw	r6,40(sp)
   44b3c:	d9400917 	ldw	r5,36(sp)
   44b40:	e009883a 	mov	r4,fp
   44b44:	0047c040 	call	47c04 <__pow5mult>
   44b48:	1021883a 	mov	r16,r2
   44b4c:	003f5a06 	br	448b8 <__alt_data_end+0xfffdf0b8>
   44b50:	01c00044 	movi	r7,1
   44b54:	d9c00b15 	stw	r7,44(sp)
   44b58:	d8802217 	ldw	r2,136(sp)
   44b5c:	0081280e 	bge	zero,r2,45000 <_dtoa_r+0x11b0>
   44b60:	100d883a 	mov	r6,r2
   44b64:	1021883a 	mov	r16,r2
   44b68:	d8800c15 	stw	r2,48(sp)
   44b6c:	d8800615 	stw	r2,24(sp)
   44b70:	003d8806 	br	44194 <__alt_data_end+0xfffde994>
   44b74:	d8800617 	ldw	r2,24(sp)
   44b78:	00be9b16 	blt	zero,r2,445e8 <__alt_data_end+0xfffdede8>
   44b7c:	10010f1e 	bne	r2,zero,44fbc <_dtoa_r+0x116c>
   44b80:	880b883a 	mov	r5,r17
   44b84:	000d883a 	mov	r6,zero
   44b88:	01d00534 	movhi	r7,16404
   44b8c:	8009883a 	mov	r4,r16
   44b90:	004d0900 	call	4d090 <__muldf3>
   44b94:	900d883a 	mov	r6,r18
   44b98:	980f883a 	mov	r7,r19
   44b9c:	1009883a 	mov	r4,r2
   44ba0:	180b883a 	mov	r5,r3
   44ba4:	004cec00 	call	4cec0 <__gedf2>
   44ba8:	002b883a 	mov	r21,zero
   44bac:	0023883a 	mov	r17,zero
   44bb0:	1000bf16 	blt	r2,zero,44eb0 <_dtoa_r+0x1060>
   44bb4:	d9802217 	ldw	r6,136(sp)
   44bb8:	ddc00717 	ldw	r23,28(sp)
   44bbc:	018c303a 	nor	r6,zero,r6
   44bc0:	d9800515 	stw	r6,20(sp)
   44bc4:	a80b883a 	mov	r5,r21
   44bc8:	e009883a 	mov	r4,fp
   44bcc:	00475b00 	call	475b0 <_Bfree>
   44bd0:	883e4926 	beq	r17,zero,444f8 <__alt_data_end+0xfffdecf8>
   44bd4:	003fad06 	br	44a8c <__alt_data_end+0xfffdf28c>
   44bd8:	d9c01117 	ldw	r7,68(sp)
   44bdc:	3801bc26 	beq	r7,zero,452d0 <_dtoa_r+0x1480>
   44be0:	10810cc4 	addi	r2,r2,1075
   44be4:	dd400a17 	ldw	r21,40(sp)
   44be8:	dd000817 	ldw	r20,32(sp)
   44bec:	003f0a06 	br	44818 <__alt_data_end+0xfffdf018>
   44bf0:	00800704 	movi	r2,28
   44bf4:	d9000817 	ldw	r4,32(sp)
   44bf8:	a0a9883a 	add	r20,r20,r2
   44bfc:	b0ad883a 	add	r22,r22,r2
   44c00:	2089883a 	add	r4,r4,r2
   44c04:	d9000815 	stw	r4,32(sp)
   44c08:	003f5106 	br	44950 <__alt_data_end+0xfffdf150>
   44c0c:	d8c00317 	ldw	r3,12(sp)
   44c10:	b8c1fc0e 	bge	r23,r3,45404 <_dtoa_r+0x15b4>
   44c14:	0027883a 	mov	r19,zero
   44c18:	b805883a 	mov	r2,r23
   44c1c:	003f3e06 	br	44918 <__alt_data_end+0xfffdf118>
   44c20:	880b883a 	mov	r5,r17
   44c24:	e009883a 	mov	r4,fp
   44c28:	000f883a 	mov	r7,zero
   44c2c:	01800284 	movi	r6,10
   44c30:	00475d80 	call	475d8 <__multadd>
   44c34:	d9000c17 	ldw	r4,48(sp)
   44c38:	1023883a 	mov	r17,r2
   44c3c:	0102040e 	bge	zero,r4,45450 <_dtoa_r+0x1600>
   44c40:	d9000615 	stw	r4,24(sp)
   44c44:	0500050e 	bge	zero,r20,44c5c <_dtoa_r+0xe0c>
   44c48:	880b883a 	mov	r5,r17
   44c4c:	a00d883a 	mov	r6,r20
   44c50:	e009883a 	mov	r4,fp
   44c54:	0047d440 	call	47d44 <__lshift>
   44c58:	1023883a 	mov	r17,r2
   44c5c:	9801241e 	bne	r19,zero,450f0 <_dtoa_r+0x12a0>
   44c60:	8829883a 	mov	r20,r17
   44c64:	d9000617 	ldw	r4,24(sp)
   44c68:	dcc00717 	ldw	r19,28(sp)
   44c6c:	9480004c 	andi	r18,r18,1
   44c70:	20bfffc4 	addi	r2,r4,-1
   44c74:	9885883a 	add	r2,r19,r2
   44c78:	d8800415 	stw	r2,16(sp)
   44c7c:	dc800615 	stw	r18,24(sp)
   44c80:	a80b883a 	mov	r5,r21
   44c84:	8009883a 	mov	r4,r16
   44c88:	0043c280 	call	43c28 <quorem>
   44c8c:	880b883a 	mov	r5,r17
   44c90:	8009883a 	mov	r4,r16
   44c94:	102f883a 	mov	r23,r2
   44c98:	0047e8c0 	call	47e8c <__mcmp>
   44c9c:	a80b883a 	mov	r5,r21
   44ca0:	a00d883a 	mov	r6,r20
   44ca4:	e009883a 	mov	r4,fp
   44ca8:	102d883a 	mov	r22,r2
   44cac:	0047eec0 	call	47eec <__mdiff>
   44cb0:	1007883a 	mov	r3,r2
   44cb4:	10800317 	ldw	r2,12(r2)
   44cb8:	bc800c04 	addi	r18,r23,48
   44cbc:	180b883a 	mov	r5,r3
   44cc0:	10004e1e 	bne	r2,zero,44dfc <_dtoa_r+0xfac>
   44cc4:	8009883a 	mov	r4,r16
   44cc8:	d8c01615 	stw	r3,88(sp)
   44ccc:	0047e8c0 	call	47e8c <__mcmp>
   44cd0:	d8c01617 	ldw	r3,88(sp)
   44cd4:	e009883a 	mov	r4,fp
   44cd8:	d8801615 	stw	r2,88(sp)
   44cdc:	180b883a 	mov	r5,r3
   44ce0:	00475b00 	call	475b0 <_Bfree>
   44ce4:	d8801617 	ldw	r2,88(sp)
   44ce8:	1000041e 	bne	r2,zero,44cfc <_dtoa_r+0xeac>
   44cec:	d9800317 	ldw	r6,12(sp)
   44cf0:	3000021e 	bne	r6,zero,44cfc <_dtoa_r+0xeac>
   44cf4:	d8c00617 	ldw	r3,24(sp)
   44cf8:	18003726 	beq	r3,zero,44dd8 <_dtoa_r+0xf88>
   44cfc:	b0002016 	blt	r22,zero,44d80 <_dtoa_r+0xf30>
   44d00:	b000041e 	bne	r22,zero,44d14 <_dtoa_r+0xec4>
   44d04:	d9000317 	ldw	r4,12(sp)
   44d08:	2000021e 	bne	r4,zero,44d14 <_dtoa_r+0xec4>
   44d0c:	d8c00617 	ldw	r3,24(sp)
   44d10:	18001b26 	beq	r3,zero,44d80 <_dtoa_r+0xf30>
   44d14:	00810716 	blt	zero,r2,45134 <_dtoa_r+0x12e4>
   44d18:	d8c00417 	ldw	r3,16(sp)
   44d1c:	9d800044 	addi	r22,r19,1
   44d20:	9c800005 	stb	r18,0(r19)
   44d24:	b02f883a 	mov	r23,r22
   44d28:	98c10626 	beq	r19,r3,45144 <_dtoa_r+0x12f4>
   44d2c:	800b883a 	mov	r5,r16
   44d30:	000f883a 	mov	r7,zero
   44d34:	01800284 	movi	r6,10
   44d38:	e009883a 	mov	r4,fp
   44d3c:	00475d80 	call	475d8 <__multadd>
   44d40:	1021883a 	mov	r16,r2
   44d44:	000f883a 	mov	r7,zero
   44d48:	01800284 	movi	r6,10
   44d4c:	880b883a 	mov	r5,r17
   44d50:	e009883a 	mov	r4,fp
   44d54:	8d002526 	beq	r17,r20,44dec <_dtoa_r+0xf9c>
   44d58:	00475d80 	call	475d8 <__multadd>
   44d5c:	a00b883a 	mov	r5,r20
   44d60:	000f883a 	mov	r7,zero
   44d64:	01800284 	movi	r6,10
   44d68:	e009883a 	mov	r4,fp
   44d6c:	1023883a 	mov	r17,r2
   44d70:	00475d80 	call	475d8 <__multadd>
   44d74:	1029883a 	mov	r20,r2
   44d78:	b027883a 	mov	r19,r22
   44d7c:	003fc006 	br	44c80 <__alt_data_end+0xfffdf480>
   44d80:	9011883a 	mov	r8,r18
   44d84:	00800e0e 	bge	zero,r2,44dc0 <_dtoa_r+0xf70>
   44d88:	800b883a 	mov	r5,r16
   44d8c:	01800044 	movi	r6,1
   44d90:	e009883a 	mov	r4,fp
   44d94:	da001715 	stw	r8,92(sp)
   44d98:	0047d440 	call	47d44 <__lshift>
   44d9c:	a80b883a 	mov	r5,r21
   44da0:	1009883a 	mov	r4,r2
   44da4:	1021883a 	mov	r16,r2
   44da8:	0047e8c0 	call	47e8c <__mcmp>
   44dac:	da001717 	ldw	r8,92(sp)
   44db0:	0081960e 	bge	zero,r2,4540c <_dtoa_r+0x15bc>
   44db4:	00800e44 	movi	r2,57
   44db8:	40817026 	beq	r8,r2,4537c <_dtoa_r+0x152c>
   44dbc:	ba000c44 	addi	r8,r23,49
   44dc0:	8825883a 	mov	r18,r17
   44dc4:	9dc00044 	addi	r23,r19,1
   44dc8:	9a000005 	stb	r8,0(r19)
   44dcc:	a023883a 	mov	r17,r20
   44dd0:	dc000915 	stw	r16,36(sp)
   44dd4:	003f2406 	br	44a68 <__alt_data_end+0xfffdf268>
   44dd8:	00800e44 	movi	r2,57
   44ddc:	9011883a 	mov	r8,r18
   44de0:	90816626 	beq	r18,r2,4537c <_dtoa_r+0x152c>
   44de4:	05bff516 	blt	zero,r22,44dbc <__alt_data_end+0xfffdf5bc>
   44de8:	003ff506 	br	44dc0 <__alt_data_end+0xfffdf5c0>
   44dec:	00475d80 	call	475d8 <__multadd>
   44df0:	1023883a 	mov	r17,r2
   44df4:	1029883a 	mov	r20,r2
   44df8:	003fdf06 	br	44d78 <__alt_data_end+0xfffdf578>
   44dfc:	e009883a 	mov	r4,fp
   44e00:	00475b00 	call	475b0 <_Bfree>
   44e04:	00800044 	movi	r2,1
   44e08:	003fbc06 	br	44cfc <__alt_data_end+0xfffdf4fc>
   44e0c:	a80b883a 	mov	r5,r21
   44e10:	8009883a 	mov	r4,r16
   44e14:	0047e8c0 	call	47e8c <__mcmp>
   44e18:	103edb0e 	bge	r2,zero,44988 <__alt_data_end+0xfffdf188>
   44e1c:	800b883a 	mov	r5,r16
   44e20:	000f883a 	mov	r7,zero
   44e24:	01800284 	movi	r6,10
   44e28:	e009883a 	mov	r4,fp
   44e2c:	00475d80 	call	475d8 <__multadd>
   44e30:	1021883a 	mov	r16,r2
   44e34:	d8800517 	ldw	r2,20(sp)
   44e38:	d8c00b17 	ldw	r3,44(sp)
   44e3c:	10bfffc4 	addi	r2,r2,-1
   44e40:	d8800515 	stw	r2,20(sp)
   44e44:	183f761e 	bne	r3,zero,44c20 <__alt_data_end+0xfffdf420>
   44e48:	d9000c17 	ldw	r4,48(sp)
   44e4c:	0101730e 	bge	zero,r4,4541c <_dtoa_r+0x15cc>
   44e50:	d9000615 	stw	r4,24(sp)
   44e54:	003ed006 	br	44998 <__alt_data_end+0xfffdf198>
   44e58:	00800084 	movi	r2,2
   44e5c:	3081861e 	bne	r6,r2,45478 <_dtoa_r+0x1628>
   44e60:	d8000b15 	stw	zero,44(sp)
   44e64:	003f3c06 	br	44b58 <__alt_data_end+0xfffdf358>
   44e68:	dc000917 	ldw	r16,36(sp)
   44e6c:	003e9206 	br	448b8 <__alt_data_end+0xfffdf0b8>
   44e70:	d9c00317 	ldw	r7,12(sp)
   44e74:	00800084 	movi	r2,2
   44e78:	11fec50e 	bge	r2,r7,44990 <__alt_data_end+0xfffdf190>
   44e7c:	d9000617 	ldw	r4,24(sp)
   44e80:	20013c1e 	bne	r4,zero,45374 <_dtoa_r+0x1524>
   44e84:	a80b883a 	mov	r5,r21
   44e88:	000f883a 	mov	r7,zero
   44e8c:	01800144 	movi	r6,5
   44e90:	e009883a 	mov	r4,fp
   44e94:	00475d80 	call	475d8 <__multadd>
   44e98:	100b883a 	mov	r5,r2
   44e9c:	8009883a 	mov	r4,r16
   44ea0:	102b883a 	mov	r21,r2
   44ea4:	0047e8c0 	call	47e8c <__mcmp>
   44ea8:	dc000915 	stw	r16,36(sp)
   44eac:	00bf410e 	bge	zero,r2,44bb4 <__alt_data_end+0xfffdf3b4>
   44eb0:	d9c00717 	ldw	r7,28(sp)
   44eb4:	00800c44 	movi	r2,49
   44eb8:	38800005 	stb	r2,0(r7)
   44ebc:	d8800517 	ldw	r2,20(sp)
   44ec0:	3dc00044 	addi	r23,r7,1
   44ec4:	10800044 	addi	r2,r2,1
   44ec8:	d8800515 	stw	r2,20(sp)
   44ecc:	003f3d06 	br	44bc4 <__alt_data_end+0xfffdf3c4>
   44ed0:	d9800517 	ldw	r6,20(sp)
   44ed4:	d9c00717 	ldw	r7,28(sp)
   44ed8:	00800c44 	movi	r2,49
   44edc:	31800044 	addi	r6,r6,1
   44ee0:	d9800515 	stw	r6,20(sp)
   44ee4:	38800005 	stb	r2,0(r7)
   44ee8:	003edf06 	br	44a68 <__alt_data_end+0xfffdf268>
   44eec:	d8000b15 	stw	zero,44(sp)
   44ef0:	003c9f06 	br	44170 <__alt_data_end+0xfffde970>
   44ef4:	903e7e1e 	bne	r18,zero,448f0 <__alt_data_end+0xfffdf0f0>
   44ef8:	00800434 	movhi	r2,16
   44efc:	10bfffc4 	addi	r2,r2,-1
   44f00:	9884703a 	and	r2,r19,r2
   44f04:	1000ea1e 	bne	r2,zero,452b0 <_dtoa_r+0x1460>
   44f08:	9cdffc2c 	andhi	r19,r19,32752
   44f0c:	9800e826 	beq	r19,zero,452b0 <_dtoa_r+0x1460>
   44f10:	d9c00817 	ldw	r7,32(sp)
   44f14:	b5800044 	addi	r22,r22,1
   44f18:	04c00044 	movi	r19,1
   44f1c:	39c00044 	addi	r7,r7,1
   44f20:	d9c00815 	stw	r7,32(sp)
   44f24:	d8800d17 	ldw	r2,52(sp)
   44f28:	103e721e 	bne	r2,zero,448f4 <__alt_data_end+0xfffdf0f4>
   44f2c:	00800044 	movi	r2,1
   44f30:	003e7906 	br	44918 <__alt_data_end+0xfffdf118>
   44f34:	8009883a 	mov	r4,r16
   44f38:	004e2780 	call	4e278 <__floatsidf>
   44f3c:	d9800f17 	ldw	r6,60(sp)
   44f40:	d9c01017 	ldw	r7,64(sp)
   44f44:	1009883a 	mov	r4,r2
   44f48:	180b883a 	mov	r5,r3
   44f4c:	004d0900 	call	4d090 <__muldf3>
   44f50:	000d883a 	mov	r6,zero
   44f54:	01d00734 	movhi	r7,16412
   44f58:	1009883a 	mov	r4,r2
   44f5c:	180b883a 	mov	r5,r3
   44f60:	004bbbc0 	call	4bbbc <__adddf3>
   44f64:	047f3034 	movhi	r17,64704
   44f68:	1021883a 	mov	r16,r2
   44f6c:	1c63883a 	add	r17,r3,r17
   44f70:	d9000f17 	ldw	r4,60(sp)
   44f74:	d9401017 	ldw	r5,64(sp)
   44f78:	000d883a 	mov	r6,zero
   44f7c:	01d00534 	movhi	r7,16404
   44f80:	004d8fc0 	call	4d8fc <__subdf3>
   44f84:	800d883a 	mov	r6,r16
   44f88:	880f883a 	mov	r7,r17
   44f8c:	1009883a 	mov	r4,r2
   44f90:	180b883a 	mov	r5,r3
   44f94:	102b883a 	mov	r21,r2
   44f98:	1829883a 	mov	r20,r3
   44f9c:	004cec00 	call	4cec0 <__gedf2>
   44fa0:	00806c16 	blt	zero,r2,45154 <_dtoa_r+0x1304>
   44fa4:	89e0003c 	xorhi	r7,r17,32768
   44fa8:	800d883a 	mov	r6,r16
   44fac:	a809883a 	mov	r4,r21
   44fb0:	a00b883a 	mov	r5,r20
   44fb4:	004cf9c0 	call	4cf9c <__ledf2>
   44fb8:	103d7e0e 	bge	r2,zero,445b4 <__alt_data_end+0xfffdedb4>
   44fbc:	002b883a 	mov	r21,zero
   44fc0:	0023883a 	mov	r17,zero
   44fc4:	003efb06 	br	44bb4 <__alt_data_end+0xfffdf3b4>
   44fc8:	d8800717 	ldw	r2,28(sp)
   44fcc:	003bd006 	br	43f10 <__alt_data_end+0xfffde710>
   44fd0:	d9000a17 	ldw	r4,40(sp)
   44fd4:	d9800d17 	ldw	r6,52(sp)
   44fd8:	dd400a15 	stw	r21,40(sp)
   44fdc:	a905c83a 	sub	r2,r21,r4
   44fe0:	308d883a 	add	r6,r6,r2
   44fe4:	d9800d15 	stw	r6,52(sp)
   44fe8:	002b883a 	mov	r21,zero
   44fec:	003e0606 	br	44808 <__alt_data_end+0xfffdf008>
   44ff0:	9023883a 	mov	r17,r18
   44ff4:	9829883a 	mov	r20,r19
   44ff8:	04000084 	movi	r16,2
   44ffc:	003c9206 	br	44248 <__alt_data_end+0xfffdea48>
   45000:	04000044 	movi	r16,1
   45004:	dc000c15 	stw	r16,48(sp)
   45008:	dc000615 	stw	r16,24(sp)
   4500c:	dc002215 	stw	r16,136(sp)
   45010:	e0001115 	stw	zero,68(fp)
   45014:	000b883a 	mov	r5,zero
   45018:	003c6906 	br	441c0 <__alt_data_end+0xfffde9c0>
   4501c:	3021883a 	mov	r16,r6
   45020:	003ffb06 	br	45010 <__alt_data_end+0xfffdf810>
   45024:	1000021e 	bne	r2,zero,45030 <_dtoa_r+0x11e0>
   45028:	4200004c 	andi	r8,r8,1
   4502c:	403e7d1e 	bne	r8,zero,44a24 <__alt_data_end+0xfffdf224>
   45030:	01000c04 	movi	r4,48
   45034:	00000106 	br	4503c <_dtoa_r+0x11ec>
   45038:	102f883a 	mov	r23,r2
   4503c:	b8bfffc4 	addi	r2,r23,-1
   45040:	10c00007 	ldb	r3,0(r2)
   45044:	193ffc26 	beq	r3,r4,45038 <__alt_data_end+0xfffdf838>
   45048:	003e8706 	br	44a68 <__alt_data_end+0xfffdf268>
   4504c:	d8800517 	ldw	r2,20(sp)
   45050:	00a3c83a 	sub	r17,zero,r2
   45054:	8800a426 	beq	r17,zero,452e8 <_dtoa_r+0x1498>
   45058:	888003cc 	andi	r2,r17,15
   4505c:	100490fa 	slli	r2,r2,3
   45060:	00c00174 	movhi	r3,5
   45064:	18c4a804 	addi	r3,r3,4768
   45068:	1885883a 	add	r2,r3,r2
   4506c:	11800017 	ldw	r6,0(r2)
   45070:	11c00117 	ldw	r7,4(r2)
   45074:	9009883a 	mov	r4,r18
   45078:	980b883a 	mov	r5,r19
   4507c:	8823d13a 	srai	r17,r17,4
   45080:	004d0900 	call	4d090 <__muldf3>
   45084:	d8800f15 	stw	r2,60(sp)
   45088:	d8c01015 	stw	r3,64(sp)
   4508c:	8800e826 	beq	r17,zero,45430 <_dtoa_r+0x15e0>
   45090:	05000174 	movhi	r20,5
   45094:	a5049e04 	addi	r20,r20,4728
   45098:	04000084 	movi	r16,2
   4509c:	8980004c 	andi	r6,r17,1
   450a0:	1009883a 	mov	r4,r2
   450a4:	8823d07a 	srai	r17,r17,1
   450a8:	180b883a 	mov	r5,r3
   450ac:	30000426 	beq	r6,zero,450c0 <_dtoa_r+0x1270>
   450b0:	a1800017 	ldw	r6,0(r20)
   450b4:	a1c00117 	ldw	r7,4(r20)
   450b8:	84000044 	addi	r16,r16,1
   450bc:	004d0900 	call	4d090 <__muldf3>
   450c0:	a5000204 	addi	r20,r20,8
   450c4:	883ff51e 	bne	r17,zero,4509c <__alt_data_end+0xfffdf89c>
   450c8:	d8800f15 	stw	r2,60(sp)
   450cc:	d8c01015 	stw	r3,64(sp)
   450d0:	003c7606 	br	442ac <__alt_data_end+0xfffdeaac>
   450d4:	00c00c04 	movi	r3,48
   450d8:	10c00005 	stb	r3,0(r2)
   450dc:	d8c00517 	ldw	r3,20(sp)
   450e0:	bd3fffc3 	ldbu	r20,-1(r23)
   450e4:	18c00044 	addi	r3,r3,1
   450e8:	d8c00515 	stw	r3,20(sp)
   450ec:	003db906 	br	447d4 <__alt_data_end+0xfffdefd4>
   450f0:	89400117 	ldw	r5,4(r17)
   450f4:	e009883a 	mov	r4,fp
   450f8:	00475080 	call	47508 <_Balloc>
   450fc:	89800417 	ldw	r6,16(r17)
   45100:	89400304 	addi	r5,r17,12
   45104:	11000304 	addi	r4,r2,12
   45108:	31800084 	addi	r6,r6,2
   4510c:	318d883a 	add	r6,r6,r6
   45110:	318d883a 	add	r6,r6,r6
   45114:	1027883a 	mov	r19,r2
   45118:	004713c0 	call	4713c <memcpy>
   4511c:	01800044 	movi	r6,1
   45120:	980b883a 	mov	r5,r19
   45124:	e009883a 	mov	r4,fp
   45128:	0047d440 	call	47d44 <__lshift>
   4512c:	1029883a 	mov	r20,r2
   45130:	003ecc06 	br	44c64 <__alt_data_end+0xfffdf464>
   45134:	00800e44 	movi	r2,57
   45138:	90809026 	beq	r18,r2,4537c <_dtoa_r+0x152c>
   4513c:	92000044 	addi	r8,r18,1
   45140:	003f1f06 	br	44dc0 <__alt_data_end+0xfffdf5c0>
   45144:	9011883a 	mov	r8,r18
   45148:	8825883a 	mov	r18,r17
   4514c:	a023883a 	mov	r17,r20
   45150:	003e2906 	br	449f8 <__alt_data_end+0xfffdf1f8>
   45154:	002b883a 	mov	r21,zero
   45158:	0023883a 	mov	r17,zero
   4515c:	003f5406 	br	44eb0 <__alt_data_end+0xfffdf6b0>
   45160:	61bfffc4 	addi	r6,r12,-1
   45164:	300490fa 	slli	r2,r6,3
   45168:	00c00174 	movhi	r3,5
   4516c:	18c4a804 	addi	r3,r3,4768
   45170:	1885883a 	add	r2,r3,r2
   45174:	11000017 	ldw	r4,0(r2)
   45178:	11400117 	ldw	r5,4(r2)
   4517c:	d8800717 	ldw	r2,28(sp)
   45180:	880f883a 	mov	r7,r17
   45184:	d9801215 	stw	r6,72(sp)
   45188:	800d883a 	mov	r6,r16
   4518c:	db001615 	stw	r12,88(sp)
   45190:	15c00044 	addi	r23,r2,1
   45194:	004d0900 	call	4d090 <__muldf3>
   45198:	d9401017 	ldw	r5,64(sp)
   4519c:	d9000f17 	ldw	r4,60(sp)
   451a0:	d8c01515 	stw	r3,84(sp)
   451a4:	d8801415 	stw	r2,80(sp)
   451a8:	004e1f80 	call	4e1f8 <__fixdfsi>
   451ac:	1009883a 	mov	r4,r2
   451b0:	1021883a 	mov	r16,r2
   451b4:	004e2780 	call	4e278 <__floatsidf>
   451b8:	d9000f17 	ldw	r4,60(sp)
   451bc:	d9401017 	ldw	r5,64(sp)
   451c0:	100d883a 	mov	r6,r2
   451c4:	180f883a 	mov	r7,r3
   451c8:	004d8fc0 	call	4d8fc <__subdf3>
   451cc:	1829883a 	mov	r20,r3
   451d0:	d8c00717 	ldw	r3,28(sp)
   451d4:	84000c04 	addi	r16,r16,48
   451d8:	1023883a 	mov	r17,r2
   451dc:	1c000005 	stb	r16,0(r3)
   451e0:	db001617 	ldw	r12,88(sp)
   451e4:	00800044 	movi	r2,1
   451e8:	60802226 	beq	r12,r2,45274 <_dtoa_r+0x1424>
   451ec:	d9c00717 	ldw	r7,28(sp)
   451f0:	8805883a 	mov	r2,r17
   451f4:	b82b883a 	mov	r21,r23
   451f8:	3b19883a 	add	r12,r7,r12
   451fc:	6023883a 	mov	r17,r12
   45200:	a007883a 	mov	r3,r20
   45204:	dc800f15 	stw	r18,60(sp)
   45208:	000d883a 	mov	r6,zero
   4520c:	01d00934 	movhi	r7,16420
   45210:	1009883a 	mov	r4,r2
   45214:	180b883a 	mov	r5,r3
   45218:	004d0900 	call	4d090 <__muldf3>
   4521c:	180b883a 	mov	r5,r3
   45220:	1009883a 	mov	r4,r2
   45224:	1829883a 	mov	r20,r3
   45228:	1025883a 	mov	r18,r2
   4522c:	004e1f80 	call	4e1f8 <__fixdfsi>
   45230:	1009883a 	mov	r4,r2
   45234:	1021883a 	mov	r16,r2
   45238:	004e2780 	call	4e278 <__floatsidf>
   4523c:	100d883a 	mov	r6,r2
   45240:	180f883a 	mov	r7,r3
   45244:	9009883a 	mov	r4,r18
   45248:	a00b883a 	mov	r5,r20
   4524c:	84000c04 	addi	r16,r16,48
   45250:	004d8fc0 	call	4d8fc <__subdf3>
   45254:	ad400044 	addi	r21,r21,1
   45258:	ac3fffc5 	stb	r16,-1(r21)
   4525c:	ac7fea1e 	bne	r21,r17,45208 <__alt_data_end+0xfffdfa08>
   45260:	1023883a 	mov	r17,r2
   45264:	d8801217 	ldw	r2,72(sp)
   45268:	dc800f17 	ldw	r18,60(sp)
   4526c:	1829883a 	mov	r20,r3
   45270:	b8af883a 	add	r23,r23,r2
   45274:	d9001417 	ldw	r4,80(sp)
   45278:	d9401517 	ldw	r5,84(sp)
   4527c:	000d883a 	mov	r6,zero
   45280:	01cff834 	movhi	r7,16352
   45284:	004bbbc0 	call	4bbbc <__adddf3>
   45288:	880d883a 	mov	r6,r17
   4528c:	a00f883a 	mov	r7,r20
   45290:	1009883a 	mov	r4,r2
   45294:	180b883a 	mov	r5,r3
   45298:	004cf9c0 	call	4cf9c <__ledf2>
   4529c:	10003e0e 	bge	r2,zero,45398 <_dtoa_r+0x1548>
   452a0:	d9001317 	ldw	r4,76(sp)
   452a4:	bd3fffc3 	ldbu	r20,-1(r23)
   452a8:	d9000515 	stw	r4,20(sp)
   452ac:	003d3b06 	br	4479c <__alt_data_end+0xfffdef9c>
   452b0:	0027883a 	mov	r19,zero
   452b4:	003f1b06 	br	44f24 <__alt_data_end+0xfffdf724>
   452b8:	d8800817 	ldw	r2,32(sp)
   452bc:	11e9c83a 	sub	r20,r2,r7
   452c0:	0005883a 	mov	r2,zero
   452c4:	003d5406 	br	44818 <__alt_data_end+0xfffdf018>
   452c8:	00800044 	movi	r2,1
   452cc:	003dc706 	br	449ec <__alt_data_end+0xfffdf1ec>
   452d0:	d8c00217 	ldw	r3,8(sp)
   452d4:	00800d84 	movi	r2,54
   452d8:	dd400a17 	ldw	r21,40(sp)
   452dc:	10c5c83a 	sub	r2,r2,r3
   452e0:	dd000817 	ldw	r20,32(sp)
   452e4:	003d4c06 	br	44818 <__alt_data_end+0xfffdf018>
   452e8:	dc800f15 	stw	r18,60(sp)
   452ec:	dcc01015 	stw	r19,64(sp)
   452f0:	04000084 	movi	r16,2
   452f4:	003bed06 	br	442ac <__alt_data_end+0xfffdeaac>
   452f8:	d9000617 	ldw	r4,24(sp)
   452fc:	203f0d26 	beq	r4,zero,44f34 <__alt_data_end+0xfffdf734>
   45300:	d9800c17 	ldw	r6,48(sp)
   45304:	01bcab0e 	bge	zero,r6,445b4 <__alt_data_end+0xfffdedb4>
   45308:	d9401017 	ldw	r5,64(sp)
   4530c:	d9000f17 	ldw	r4,60(sp)
   45310:	000d883a 	mov	r6,zero
   45314:	01d00934 	movhi	r7,16420
   45318:	004d0900 	call	4d090 <__muldf3>
   4531c:	81000044 	addi	r4,r16,1
   45320:	d8800f15 	stw	r2,60(sp)
   45324:	d8c01015 	stw	r3,64(sp)
   45328:	004e2780 	call	4e278 <__floatsidf>
   4532c:	d9800f17 	ldw	r6,60(sp)
   45330:	d9c01017 	ldw	r7,64(sp)
   45334:	1009883a 	mov	r4,r2
   45338:	180b883a 	mov	r5,r3
   4533c:	004d0900 	call	4d090 <__muldf3>
   45340:	01d00734 	movhi	r7,16412
   45344:	000d883a 	mov	r6,zero
   45348:	1009883a 	mov	r4,r2
   4534c:	180b883a 	mov	r5,r3
   45350:	004bbbc0 	call	4bbbc <__adddf3>
   45354:	d9c00517 	ldw	r7,20(sp)
   45358:	047f3034 	movhi	r17,64704
   4535c:	1021883a 	mov	r16,r2
   45360:	39ffffc4 	addi	r7,r7,-1
   45364:	d9c01315 	stw	r7,76(sp)
   45368:	1c63883a 	add	r17,r3,r17
   4536c:	db000c17 	ldw	r12,48(sp)
   45370:	003bea06 	br	4431c <__alt_data_end+0xfffdeb1c>
   45374:	dc000915 	stw	r16,36(sp)
   45378:	003e0e06 	br	44bb4 <__alt_data_end+0xfffdf3b4>
   4537c:	01000e44 	movi	r4,57
   45380:	8825883a 	mov	r18,r17
   45384:	9dc00044 	addi	r23,r19,1
   45388:	99000005 	stb	r4,0(r19)
   4538c:	a023883a 	mov	r17,r20
   45390:	dc000915 	stw	r16,36(sp)
   45394:	003da406 	br	44a28 <__alt_data_end+0xfffdf228>
   45398:	d9801417 	ldw	r6,80(sp)
   4539c:	d9c01517 	ldw	r7,84(sp)
   453a0:	0009883a 	mov	r4,zero
   453a4:	014ff834 	movhi	r5,16352
   453a8:	004d8fc0 	call	4d8fc <__subdf3>
   453ac:	880d883a 	mov	r6,r17
   453b0:	a00f883a 	mov	r7,r20
   453b4:	1009883a 	mov	r4,r2
   453b8:	180b883a 	mov	r5,r3
   453bc:	004cec00 	call	4cec0 <__gedf2>
   453c0:	00bc7c0e 	bge	zero,r2,445b4 <__alt_data_end+0xfffdedb4>
   453c4:	01000c04 	movi	r4,48
   453c8:	00000106 	br	453d0 <_dtoa_r+0x1580>
   453cc:	102f883a 	mov	r23,r2
   453d0:	b8bfffc4 	addi	r2,r23,-1
   453d4:	10c00007 	ldb	r3,0(r2)
   453d8:	193ffc26 	beq	r3,r4,453cc <__alt_data_end+0xfffdfbcc>
   453dc:	d9801317 	ldw	r6,76(sp)
   453e0:	d9800515 	stw	r6,20(sp)
   453e4:	003c4406 	br	444f8 <__alt_data_end+0xfffdecf8>
   453e8:	d9801317 	ldw	r6,76(sp)
   453ec:	d9800515 	stw	r6,20(sp)
   453f0:	003cea06 	br	4479c <__alt_data_end+0xfffdef9c>
   453f4:	dd800f17 	ldw	r22,60(sp)
   453f8:	dcc01017 	ldw	r19,64(sp)
   453fc:	dc801217 	ldw	r18,72(sp)
   45400:	003c6c06 	br	445b4 <__alt_data_end+0xfffdedb4>
   45404:	903e031e 	bne	r18,zero,44c14 <__alt_data_end+0xfffdf414>
   45408:	003ebb06 	br	44ef8 <__alt_data_end+0xfffdf6f8>
   4540c:	103e6c1e 	bne	r2,zero,44dc0 <__alt_data_end+0xfffdf5c0>
   45410:	4080004c 	andi	r2,r8,1
   45414:	103e6a26 	beq	r2,zero,44dc0 <__alt_data_end+0xfffdf5c0>
   45418:	003e6606 	br	44db4 <__alt_data_end+0xfffdf5b4>
   4541c:	d8c00317 	ldw	r3,12(sp)
   45420:	00800084 	movi	r2,2
   45424:	10c02916 	blt	r2,r3,454cc <_dtoa_r+0x167c>
   45428:	d9000c17 	ldw	r4,48(sp)
   4542c:	003e8806 	br	44e50 <__alt_data_end+0xfffdf650>
   45430:	04000084 	movi	r16,2
   45434:	003b9d06 	br	442ac <__alt_data_end+0xfffdeaac>
   45438:	d9001317 	ldw	r4,76(sp)
   4543c:	d9000515 	stw	r4,20(sp)
   45440:	003cd606 	br	4479c <__alt_data_end+0xfffdef9c>
   45444:	d8801317 	ldw	r2,76(sp)
   45448:	d8800515 	stw	r2,20(sp)
   4544c:	003c2a06 	br	444f8 <__alt_data_end+0xfffdecf8>
   45450:	d9800317 	ldw	r6,12(sp)
   45454:	00800084 	movi	r2,2
   45458:	11801516 	blt	r2,r6,454b0 <_dtoa_r+0x1660>
   4545c:	d9c00c17 	ldw	r7,48(sp)
   45460:	d9c00615 	stw	r7,24(sp)
   45464:	003df706 	br	44c44 <__alt_data_end+0xfffdf444>
   45468:	193d3926 	beq	r3,r4,44950 <__alt_data_end+0xfffdf150>
   4546c:	00c00f04 	movi	r3,60
   45470:	1885c83a 	sub	r2,r3,r2
   45474:	003ddf06 	br	44bf4 <__alt_data_end+0xfffdf3f4>
   45478:	e009883a 	mov	r4,fp
   4547c:	e0001115 	stw	zero,68(fp)
   45480:	000b883a 	mov	r5,zero
   45484:	00475080 	call	47508 <_Balloc>
   45488:	d8800715 	stw	r2,28(sp)
   4548c:	d8c00717 	ldw	r3,28(sp)
   45490:	00bfffc4 	movi	r2,-1
   45494:	01000044 	movi	r4,1
   45498:	d8800c15 	stw	r2,48(sp)
   4549c:	e0c01015 	stw	r3,64(fp)
   454a0:	d9000b15 	stw	r4,44(sp)
   454a4:	d8800615 	stw	r2,24(sp)
   454a8:	d8002215 	stw	zero,136(sp)
   454ac:	003c4106 	br	445b4 <__alt_data_end+0xfffdedb4>
   454b0:	d8c00c17 	ldw	r3,48(sp)
   454b4:	d8c00615 	stw	r3,24(sp)
   454b8:	003e7006 	br	44e7c <__alt_data_end+0xfffdf67c>
   454bc:	04400044 	movi	r17,1
   454c0:	003b2006 	br	44144 <__alt_data_end+0xfffde944>
   454c4:	000b883a 	mov	r5,zero
   454c8:	003b3d06 	br	441c0 <__alt_data_end+0xfffde9c0>
   454cc:	d8800c17 	ldw	r2,48(sp)
   454d0:	d8800615 	stw	r2,24(sp)
   454d4:	003e6906 	br	44e7c <__alt_data_end+0xfffdf67c>

000454d8 <__sflush_r>:
   454d8:	2880030b 	ldhu	r2,12(r5)
   454dc:	defffb04 	addi	sp,sp,-20
   454e0:	dcc00315 	stw	r19,12(sp)
   454e4:	dc400115 	stw	r17,4(sp)
   454e8:	dfc00415 	stw	ra,16(sp)
   454ec:	dc800215 	stw	r18,8(sp)
   454f0:	dc000015 	stw	r16,0(sp)
   454f4:	10c0020c 	andi	r3,r2,8
   454f8:	2823883a 	mov	r17,r5
   454fc:	2027883a 	mov	r19,r4
   45500:	1800311e 	bne	r3,zero,455c8 <__sflush_r+0xf0>
   45504:	28c00117 	ldw	r3,4(r5)
   45508:	10820014 	ori	r2,r2,2048
   4550c:	2880030d 	sth	r2,12(r5)
   45510:	00c04b0e 	bge	zero,r3,45640 <__sflush_r+0x168>
   45514:	8a000a17 	ldw	r8,40(r17)
   45518:	40002326 	beq	r8,zero,455a8 <__sflush_r+0xd0>
   4551c:	9c000017 	ldw	r16,0(r19)
   45520:	10c4000c 	andi	r3,r2,4096
   45524:	98000015 	stw	zero,0(r19)
   45528:	18004826 	beq	r3,zero,4564c <__sflush_r+0x174>
   4552c:	89801417 	ldw	r6,80(r17)
   45530:	10c0010c 	andi	r3,r2,4
   45534:	18000626 	beq	r3,zero,45550 <__sflush_r+0x78>
   45538:	88c00117 	ldw	r3,4(r17)
   4553c:	88800c17 	ldw	r2,48(r17)
   45540:	30cdc83a 	sub	r6,r6,r3
   45544:	10000226 	beq	r2,zero,45550 <__sflush_r+0x78>
   45548:	88800f17 	ldw	r2,60(r17)
   4554c:	308dc83a 	sub	r6,r6,r2
   45550:	89400717 	ldw	r5,28(r17)
   45554:	000f883a 	mov	r7,zero
   45558:	9809883a 	mov	r4,r19
   4555c:	403ee83a 	callr	r8
   45560:	00ffffc4 	movi	r3,-1
   45564:	10c04426 	beq	r2,r3,45678 <__sflush_r+0x1a0>
   45568:	88c0030b 	ldhu	r3,12(r17)
   4556c:	89000417 	ldw	r4,16(r17)
   45570:	88000115 	stw	zero,4(r17)
   45574:	197dffcc 	andi	r5,r3,63487
   45578:	8940030d 	sth	r5,12(r17)
   4557c:	89000015 	stw	r4,0(r17)
   45580:	18c4000c 	andi	r3,r3,4096
   45584:	18002c1e 	bne	r3,zero,45638 <__sflush_r+0x160>
   45588:	89400c17 	ldw	r5,48(r17)
   4558c:	9c000015 	stw	r16,0(r19)
   45590:	28000526 	beq	r5,zero,455a8 <__sflush_r+0xd0>
   45594:	88801004 	addi	r2,r17,64
   45598:	28800226 	beq	r5,r2,455a4 <__sflush_r+0xcc>
   4559c:	9809883a 	mov	r4,r19
   455a0:	0045c540 	call	45c54 <_free_r>
   455a4:	88000c15 	stw	zero,48(r17)
   455a8:	0005883a 	mov	r2,zero
   455ac:	dfc00417 	ldw	ra,16(sp)
   455b0:	dcc00317 	ldw	r19,12(sp)
   455b4:	dc800217 	ldw	r18,8(sp)
   455b8:	dc400117 	ldw	r17,4(sp)
   455bc:	dc000017 	ldw	r16,0(sp)
   455c0:	dec00504 	addi	sp,sp,20
   455c4:	f800283a 	ret
   455c8:	2c800417 	ldw	r18,16(r5)
   455cc:	903ff626 	beq	r18,zero,455a8 <__alt_data_end+0xfffdfda8>
   455d0:	2c000017 	ldw	r16,0(r5)
   455d4:	108000cc 	andi	r2,r2,3
   455d8:	2c800015 	stw	r18,0(r5)
   455dc:	84a1c83a 	sub	r16,r16,r18
   455e0:	1000131e 	bne	r2,zero,45630 <__sflush_r+0x158>
   455e4:	28800517 	ldw	r2,20(r5)
   455e8:	88800215 	stw	r2,8(r17)
   455ec:	04000316 	blt	zero,r16,455fc <__sflush_r+0x124>
   455f0:	003fed06 	br	455a8 <__alt_data_end+0xfffdfda8>
   455f4:	90a5883a 	add	r18,r18,r2
   455f8:	043feb0e 	bge	zero,r16,455a8 <__alt_data_end+0xfffdfda8>
   455fc:	88800917 	ldw	r2,36(r17)
   45600:	89400717 	ldw	r5,28(r17)
   45604:	800f883a 	mov	r7,r16
   45608:	900d883a 	mov	r6,r18
   4560c:	9809883a 	mov	r4,r19
   45610:	103ee83a 	callr	r2
   45614:	80a1c83a 	sub	r16,r16,r2
   45618:	00bff616 	blt	zero,r2,455f4 <__alt_data_end+0xfffdfdf4>
   4561c:	88c0030b 	ldhu	r3,12(r17)
   45620:	00bfffc4 	movi	r2,-1
   45624:	18c01014 	ori	r3,r3,64
   45628:	88c0030d 	sth	r3,12(r17)
   4562c:	003fdf06 	br	455ac <__alt_data_end+0xfffdfdac>
   45630:	0005883a 	mov	r2,zero
   45634:	003fec06 	br	455e8 <__alt_data_end+0xfffdfde8>
   45638:	88801415 	stw	r2,80(r17)
   4563c:	003fd206 	br	45588 <__alt_data_end+0xfffdfd88>
   45640:	28c00f17 	ldw	r3,60(r5)
   45644:	00ffb316 	blt	zero,r3,45514 <__alt_data_end+0xfffdfd14>
   45648:	003fd706 	br	455a8 <__alt_data_end+0xfffdfda8>
   4564c:	89400717 	ldw	r5,28(r17)
   45650:	000d883a 	mov	r6,zero
   45654:	01c00044 	movi	r7,1
   45658:	9809883a 	mov	r4,r19
   4565c:	403ee83a 	callr	r8
   45660:	100d883a 	mov	r6,r2
   45664:	00bfffc4 	movi	r2,-1
   45668:	30801426 	beq	r6,r2,456bc <__sflush_r+0x1e4>
   4566c:	8880030b 	ldhu	r2,12(r17)
   45670:	8a000a17 	ldw	r8,40(r17)
   45674:	003fae06 	br	45530 <__alt_data_end+0xfffdfd30>
   45678:	98c00017 	ldw	r3,0(r19)
   4567c:	183fba26 	beq	r3,zero,45568 <__alt_data_end+0xfffdfd68>
   45680:	01000744 	movi	r4,29
   45684:	19000626 	beq	r3,r4,456a0 <__sflush_r+0x1c8>
   45688:	01000584 	movi	r4,22
   4568c:	19000426 	beq	r3,r4,456a0 <__sflush_r+0x1c8>
   45690:	88c0030b 	ldhu	r3,12(r17)
   45694:	18c01014 	ori	r3,r3,64
   45698:	88c0030d 	sth	r3,12(r17)
   4569c:	003fc306 	br	455ac <__alt_data_end+0xfffdfdac>
   456a0:	8880030b 	ldhu	r2,12(r17)
   456a4:	88c00417 	ldw	r3,16(r17)
   456a8:	88000115 	stw	zero,4(r17)
   456ac:	10bdffcc 	andi	r2,r2,63487
   456b0:	8880030d 	sth	r2,12(r17)
   456b4:	88c00015 	stw	r3,0(r17)
   456b8:	003fb306 	br	45588 <__alt_data_end+0xfffdfd88>
   456bc:	98800017 	ldw	r2,0(r19)
   456c0:	103fea26 	beq	r2,zero,4566c <__alt_data_end+0xfffdfe6c>
   456c4:	00c00744 	movi	r3,29
   456c8:	10c00226 	beq	r2,r3,456d4 <__sflush_r+0x1fc>
   456cc:	00c00584 	movi	r3,22
   456d0:	10c0031e 	bne	r2,r3,456e0 <__sflush_r+0x208>
   456d4:	9c000015 	stw	r16,0(r19)
   456d8:	0005883a 	mov	r2,zero
   456dc:	003fb306 	br	455ac <__alt_data_end+0xfffdfdac>
   456e0:	88c0030b 	ldhu	r3,12(r17)
   456e4:	3005883a 	mov	r2,r6
   456e8:	18c01014 	ori	r3,r3,64
   456ec:	88c0030d 	sth	r3,12(r17)
   456f0:	003fae06 	br	455ac <__alt_data_end+0xfffdfdac>

000456f4 <_fflush_r>:
   456f4:	defffd04 	addi	sp,sp,-12
   456f8:	dc000115 	stw	r16,4(sp)
   456fc:	dfc00215 	stw	ra,8(sp)
   45700:	2021883a 	mov	r16,r4
   45704:	20000226 	beq	r4,zero,45710 <_fflush_r+0x1c>
   45708:	20800e17 	ldw	r2,56(r4)
   4570c:	10000c26 	beq	r2,zero,45740 <_fflush_r+0x4c>
   45710:	2880030f 	ldh	r2,12(r5)
   45714:	1000051e 	bne	r2,zero,4572c <_fflush_r+0x38>
   45718:	0005883a 	mov	r2,zero
   4571c:	dfc00217 	ldw	ra,8(sp)
   45720:	dc000117 	ldw	r16,4(sp)
   45724:	dec00304 	addi	sp,sp,12
   45728:	f800283a 	ret
   4572c:	8009883a 	mov	r4,r16
   45730:	dfc00217 	ldw	ra,8(sp)
   45734:	dc000117 	ldw	r16,4(sp)
   45738:	dec00304 	addi	sp,sp,12
   4573c:	00454d81 	jmpi	454d8 <__sflush_r>
   45740:	d9400015 	stw	r5,0(sp)
   45744:	0045ae00 	call	45ae0 <__sinit>
   45748:	d9400017 	ldw	r5,0(sp)
   4574c:	003ff006 	br	45710 <__alt_data_end+0xfffdff10>

00045750 <fflush>:
   45750:	20000526 	beq	r4,zero,45768 <fflush+0x18>
   45754:	00800174 	movhi	r2,5
   45758:	108b9904 	addi	r2,r2,11876
   4575c:	200b883a 	mov	r5,r4
   45760:	11000017 	ldw	r4,0(r2)
   45764:	00456f41 	jmpi	456f4 <_fflush_r>
   45768:	00800174 	movhi	r2,5
   4576c:	108b9804 	addi	r2,r2,11872
   45770:	11000017 	ldw	r4,0(r2)
   45774:	01400134 	movhi	r5,4
   45778:	2955bd04 	addi	r5,r5,22260
   4577c:	00464f01 	jmpi	464f0 <_fwalk_reent>

00045780 <__fp_unlock>:
   45780:	0005883a 	mov	r2,zero
   45784:	f800283a 	ret

00045788 <_cleanup_r>:
   45788:	01400174 	movhi	r5,5
   4578c:	2969a304 	addi	r5,r5,-22900
   45790:	00464f01 	jmpi	464f0 <_fwalk_reent>

00045794 <__sinit.part.1>:
   45794:	defff704 	addi	sp,sp,-36
   45798:	00c00134 	movhi	r3,4
   4579c:	dfc00815 	stw	ra,32(sp)
   457a0:	ddc00715 	stw	r23,28(sp)
   457a4:	dd800615 	stw	r22,24(sp)
   457a8:	dd400515 	stw	r21,20(sp)
   457ac:	dd000415 	stw	r20,16(sp)
   457b0:	dcc00315 	stw	r19,12(sp)
   457b4:	dc800215 	stw	r18,8(sp)
   457b8:	dc400115 	stw	r17,4(sp)
   457bc:	dc000015 	stw	r16,0(sp)
   457c0:	18d5e204 	addi	r3,r3,22408
   457c4:	24000117 	ldw	r16,4(r4)
   457c8:	20c00f15 	stw	r3,60(r4)
   457cc:	2080bb04 	addi	r2,r4,748
   457d0:	00c000c4 	movi	r3,3
   457d4:	20c0b915 	stw	r3,740(r4)
   457d8:	2080ba15 	stw	r2,744(r4)
   457dc:	2000b815 	stw	zero,736(r4)
   457e0:	05c00204 	movi	r23,8
   457e4:	00800104 	movi	r2,4
   457e8:	2025883a 	mov	r18,r4
   457ec:	b80d883a 	mov	r6,r23
   457f0:	81001704 	addi	r4,r16,92
   457f4:	000b883a 	mov	r5,zero
   457f8:	80000015 	stw	zero,0(r16)
   457fc:	80000115 	stw	zero,4(r16)
   45800:	80000215 	stw	zero,8(r16)
   45804:	8080030d 	sth	r2,12(r16)
   45808:	80001915 	stw	zero,100(r16)
   4580c:	8000038d 	sth	zero,14(r16)
   45810:	80000415 	stw	zero,16(r16)
   45814:	80000515 	stw	zero,20(r16)
   45818:	80000615 	stw	zero,24(r16)
   4581c:	00473e00 	call	473e0 <memset>
   45820:	05800174 	movhi	r22,5
   45824:	94400217 	ldw	r17,8(r18)
   45828:	05400174 	movhi	r21,5
   4582c:	05000174 	movhi	r20,5
   45830:	04c00174 	movhi	r19,5
   45834:	b5a2fb04 	addi	r22,r22,-29716
   45838:	ad631204 	addi	r21,r21,-29624
   4583c:	a5233104 	addi	r20,r20,-29500
   45840:	9ce34804 	addi	r19,r19,-29408
   45844:	85800815 	stw	r22,32(r16)
   45848:	85400915 	stw	r21,36(r16)
   4584c:	85000a15 	stw	r20,40(r16)
   45850:	84c00b15 	stw	r19,44(r16)
   45854:	84000715 	stw	r16,28(r16)
   45858:	00800284 	movi	r2,10
   4585c:	8880030d 	sth	r2,12(r17)
   45860:	00800044 	movi	r2,1
   45864:	b80d883a 	mov	r6,r23
   45868:	89001704 	addi	r4,r17,92
   4586c:	000b883a 	mov	r5,zero
   45870:	88000015 	stw	zero,0(r17)
   45874:	88000115 	stw	zero,4(r17)
   45878:	88000215 	stw	zero,8(r17)
   4587c:	88001915 	stw	zero,100(r17)
   45880:	8880038d 	sth	r2,14(r17)
   45884:	88000415 	stw	zero,16(r17)
   45888:	88000515 	stw	zero,20(r17)
   4588c:	88000615 	stw	zero,24(r17)
   45890:	00473e00 	call	473e0 <memset>
   45894:	94000317 	ldw	r16,12(r18)
   45898:	00800484 	movi	r2,18
   4589c:	8c400715 	stw	r17,28(r17)
   458a0:	8d800815 	stw	r22,32(r17)
   458a4:	8d400915 	stw	r21,36(r17)
   458a8:	8d000a15 	stw	r20,40(r17)
   458ac:	8cc00b15 	stw	r19,44(r17)
   458b0:	8080030d 	sth	r2,12(r16)
   458b4:	00800084 	movi	r2,2
   458b8:	80000015 	stw	zero,0(r16)
   458bc:	80000115 	stw	zero,4(r16)
   458c0:	80000215 	stw	zero,8(r16)
   458c4:	80001915 	stw	zero,100(r16)
   458c8:	8080038d 	sth	r2,14(r16)
   458cc:	80000415 	stw	zero,16(r16)
   458d0:	80000515 	stw	zero,20(r16)
   458d4:	80000615 	stw	zero,24(r16)
   458d8:	b80d883a 	mov	r6,r23
   458dc:	000b883a 	mov	r5,zero
   458e0:	81001704 	addi	r4,r16,92
   458e4:	00473e00 	call	473e0 <memset>
   458e8:	00800044 	movi	r2,1
   458ec:	84000715 	stw	r16,28(r16)
   458f0:	85800815 	stw	r22,32(r16)
   458f4:	85400915 	stw	r21,36(r16)
   458f8:	85000a15 	stw	r20,40(r16)
   458fc:	84c00b15 	stw	r19,44(r16)
   45900:	90800e15 	stw	r2,56(r18)
   45904:	dfc00817 	ldw	ra,32(sp)
   45908:	ddc00717 	ldw	r23,28(sp)
   4590c:	dd800617 	ldw	r22,24(sp)
   45910:	dd400517 	ldw	r21,20(sp)
   45914:	dd000417 	ldw	r20,16(sp)
   45918:	dcc00317 	ldw	r19,12(sp)
   4591c:	dc800217 	ldw	r18,8(sp)
   45920:	dc400117 	ldw	r17,4(sp)
   45924:	dc000017 	ldw	r16,0(sp)
   45928:	dec00904 	addi	sp,sp,36
   4592c:	f800283a 	ret

00045930 <__fp_lock>:
   45930:	0005883a 	mov	r2,zero
   45934:	f800283a 	ret

00045938 <__sfmoreglue>:
   45938:	defffc04 	addi	sp,sp,-16
   4593c:	dc800215 	stw	r18,8(sp)
   45940:	2825883a 	mov	r18,r5
   45944:	dc000015 	stw	r16,0(sp)
   45948:	01401a04 	movi	r5,104
   4594c:	2021883a 	mov	r16,r4
   45950:	913fffc4 	addi	r4,r18,-1
   45954:	dfc00315 	stw	ra,12(sp)
   45958:	dc400115 	stw	r17,4(sp)
   4595c:	00415200 	call	41520 <__mulsi3>
   45960:	8009883a 	mov	r4,r16
   45964:	11401d04 	addi	r5,r2,116
   45968:	1023883a 	mov	r17,r2
   4596c:	004684c0 	call	4684c <_malloc_r>
   45970:	1021883a 	mov	r16,r2
   45974:	10000726 	beq	r2,zero,45994 <__sfmoreglue+0x5c>
   45978:	11000304 	addi	r4,r2,12
   4597c:	10000015 	stw	zero,0(r2)
   45980:	14800115 	stw	r18,4(r2)
   45984:	11000215 	stw	r4,8(r2)
   45988:	89801a04 	addi	r6,r17,104
   4598c:	000b883a 	mov	r5,zero
   45990:	00473e00 	call	473e0 <memset>
   45994:	8005883a 	mov	r2,r16
   45998:	dfc00317 	ldw	ra,12(sp)
   4599c:	dc800217 	ldw	r18,8(sp)
   459a0:	dc400117 	ldw	r17,4(sp)
   459a4:	dc000017 	ldw	r16,0(sp)
   459a8:	dec00404 	addi	sp,sp,16
   459ac:	f800283a 	ret

000459b0 <__sfp>:
   459b0:	defffb04 	addi	sp,sp,-20
   459b4:	dc000015 	stw	r16,0(sp)
   459b8:	04000174 	movhi	r16,5
   459bc:	840b9804 	addi	r16,r16,11872
   459c0:	dcc00315 	stw	r19,12(sp)
   459c4:	2027883a 	mov	r19,r4
   459c8:	81000017 	ldw	r4,0(r16)
   459cc:	dfc00415 	stw	ra,16(sp)
   459d0:	dc800215 	stw	r18,8(sp)
   459d4:	20800e17 	ldw	r2,56(r4)
   459d8:	dc400115 	stw	r17,4(sp)
   459dc:	1000021e 	bne	r2,zero,459e8 <__sfp+0x38>
   459e0:	00457940 	call	45794 <__sinit.part.1>
   459e4:	81000017 	ldw	r4,0(r16)
   459e8:	2480b804 	addi	r18,r4,736
   459ec:	047fffc4 	movi	r17,-1
   459f0:	91000117 	ldw	r4,4(r18)
   459f4:	94000217 	ldw	r16,8(r18)
   459f8:	213fffc4 	addi	r4,r4,-1
   459fc:	20000a16 	blt	r4,zero,45a28 <__sfp+0x78>
   45a00:	8080030f 	ldh	r2,12(r16)
   45a04:	10000c26 	beq	r2,zero,45a38 <__sfp+0x88>
   45a08:	80c01d04 	addi	r3,r16,116
   45a0c:	00000206 	br	45a18 <__sfp+0x68>
   45a10:	18bfe60f 	ldh	r2,-104(r3)
   45a14:	10000826 	beq	r2,zero,45a38 <__sfp+0x88>
   45a18:	213fffc4 	addi	r4,r4,-1
   45a1c:	1c3ffd04 	addi	r16,r3,-12
   45a20:	18c01a04 	addi	r3,r3,104
   45a24:	247ffa1e 	bne	r4,r17,45a10 <__alt_data_end+0xfffe0210>
   45a28:	90800017 	ldw	r2,0(r18)
   45a2c:	10001d26 	beq	r2,zero,45aa4 <__sfp+0xf4>
   45a30:	1025883a 	mov	r18,r2
   45a34:	003fee06 	br	459f0 <__alt_data_end+0xfffe01f0>
   45a38:	00bfffc4 	movi	r2,-1
   45a3c:	8080038d 	sth	r2,14(r16)
   45a40:	00800044 	movi	r2,1
   45a44:	8080030d 	sth	r2,12(r16)
   45a48:	80001915 	stw	zero,100(r16)
   45a4c:	80000015 	stw	zero,0(r16)
   45a50:	80000215 	stw	zero,8(r16)
   45a54:	80000115 	stw	zero,4(r16)
   45a58:	80000415 	stw	zero,16(r16)
   45a5c:	80000515 	stw	zero,20(r16)
   45a60:	80000615 	stw	zero,24(r16)
   45a64:	01800204 	movi	r6,8
   45a68:	000b883a 	mov	r5,zero
   45a6c:	81001704 	addi	r4,r16,92
   45a70:	00473e00 	call	473e0 <memset>
   45a74:	8005883a 	mov	r2,r16
   45a78:	80000c15 	stw	zero,48(r16)
   45a7c:	80000d15 	stw	zero,52(r16)
   45a80:	80001115 	stw	zero,68(r16)
   45a84:	80001215 	stw	zero,72(r16)
   45a88:	dfc00417 	ldw	ra,16(sp)
   45a8c:	dcc00317 	ldw	r19,12(sp)
   45a90:	dc800217 	ldw	r18,8(sp)
   45a94:	dc400117 	ldw	r17,4(sp)
   45a98:	dc000017 	ldw	r16,0(sp)
   45a9c:	dec00504 	addi	sp,sp,20
   45aa0:	f800283a 	ret
   45aa4:	01400104 	movi	r5,4
   45aa8:	9809883a 	mov	r4,r19
   45aac:	00459380 	call	45938 <__sfmoreglue>
   45ab0:	90800015 	stw	r2,0(r18)
   45ab4:	103fde1e 	bne	r2,zero,45a30 <__alt_data_end+0xfffe0230>
   45ab8:	00800304 	movi	r2,12
   45abc:	98800015 	stw	r2,0(r19)
   45ac0:	0005883a 	mov	r2,zero
   45ac4:	003ff006 	br	45a88 <__alt_data_end+0xfffe0288>

00045ac8 <_cleanup>:
   45ac8:	00800174 	movhi	r2,5
   45acc:	108b9804 	addi	r2,r2,11872
   45ad0:	11000017 	ldw	r4,0(r2)
   45ad4:	01400174 	movhi	r5,5
   45ad8:	2969a304 	addi	r5,r5,-22900
   45adc:	00464f01 	jmpi	464f0 <_fwalk_reent>

00045ae0 <__sinit>:
   45ae0:	20800e17 	ldw	r2,56(r4)
   45ae4:	10000126 	beq	r2,zero,45aec <__sinit+0xc>
   45ae8:	f800283a 	ret
   45aec:	00457941 	jmpi	45794 <__sinit.part.1>

00045af0 <__sfp_lock_acquire>:
   45af0:	f800283a 	ret

00045af4 <__sfp_lock_release>:
   45af4:	f800283a 	ret

00045af8 <__sinit_lock_acquire>:
   45af8:	f800283a 	ret

00045afc <__sinit_lock_release>:
   45afc:	f800283a 	ret

00045b00 <__fp_lock_all>:
   45b00:	00800174 	movhi	r2,5
   45b04:	108b9904 	addi	r2,r2,11876
   45b08:	11000017 	ldw	r4,0(r2)
   45b0c:	01400134 	movhi	r5,4
   45b10:	29564c04 	addi	r5,r5,22832
   45b14:	004642c1 	jmpi	4642c <_fwalk>

00045b18 <__fp_unlock_all>:
   45b18:	00800174 	movhi	r2,5
   45b1c:	108b9904 	addi	r2,r2,11876
   45b20:	11000017 	ldw	r4,0(r2)
   45b24:	01400134 	movhi	r5,4
   45b28:	2955e004 	addi	r5,r5,22400
   45b2c:	004642c1 	jmpi	4642c <_fwalk>

00045b30 <_malloc_trim_r>:
   45b30:	defffb04 	addi	sp,sp,-20
   45b34:	dcc00315 	stw	r19,12(sp)
   45b38:	04c00174 	movhi	r19,5
   45b3c:	dc800215 	stw	r18,8(sp)
   45b40:	dc400115 	stw	r17,4(sp)
   45b44:	dc000015 	stw	r16,0(sp)
   45b48:	dfc00415 	stw	ra,16(sp)
   45b4c:	2821883a 	mov	r16,r5
   45b50:	9cc61404 	addi	r19,r19,6224
   45b54:	2025883a 	mov	r18,r4
   45b58:	004ec380 	call	4ec38 <__malloc_lock>
   45b5c:	98800217 	ldw	r2,8(r19)
   45b60:	14400117 	ldw	r17,4(r2)
   45b64:	00bfff04 	movi	r2,-4
   45b68:	88a2703a 	and	r17,r17,r2
   45b6c:	8c21c83a 	sub	r16,r17,r16
   45b70:	8403fbc4 	addi	r16,r16,4079
   45b74:	8020d33a 	srli	r16,r16,12
   45b78:	0083ffc4 	movi	r2,4095
   45b7c:	843fffc4 	addi	r16,r16,-1
   45b80:	8020933a 	slli	r16,r16,12
   45b84:	1400060e 	bge	r2,r16,45ba0 <_malloc_trim_r+0x70>
   45b88:	000b883a 	mov	r5,zero
   45b8c:	9009883a 	mov	r4,r18
   45b90:	0048b980 	call	48b98 <_sbrk_r>
   45b94:	98c00217 	ldw	r3,8(r19)
   45b98:	1c47883a 	add	r3,r3,r17
   45b9c:	10c00a26 	beq	r2,r3,45bc8 <_malloc_trim_r+0x98>
   45ba0:	9009883a 	mov	r4,r18
   45ba4:	004ec5c0 	call	4ec5c <__malloc_unlock>
   45ba8:	0005883a 	mov	r2,zero
   45bac:	dfc00417 	ldw	ra,16(sp)
   45bb0:	dcc00317 	ldw	r19,12(sp)
   45bb4:	dc800217 	ldw	r18,8(sp)
   45bb8:	dc400117 	ldw	r17,4(sp)
   45bbc:	dc000017 	ldw	r16,0(sp)
   45bc0:	dec00504 	addi	sp,sp,20
   45bc4:	f800283a 	ret
   45bc8:	040bc83a 	sub	r5,zero,r16
   45bcc:	9009883a 	mov	r4,r18
   45bd0:	0048b980 	call	48b98 <_sbrk_r>
   45bd4:	00ffffc4 	movi	r3,-1
   45bd8:	10c00d26 	beq	r2,r3,45c10 <_malloc_trim_r+0xe0>
   45bdc:	00c00174 	movhi	r3,5
   45be0:	18d27404 	addi	r3,r3,18896
   45be4:	18800017 	ldw	r2,0(r3)
   45be8:	99000217 	ldw	r4,8(r19)
   45bec:	8c23c83a 	sub	r17,r17,r16
   45bf0:	8c400054 	ori	r17,r17,1
   45bf4:	1421c83a 	sub	r16,r2,r16
   45bf8:	24400115 	stw	r17,4(r4)
   45bfc:	9009883a 	mov	r4,r18
   45c00:	1c000015 	stw	r16,0(r3)
   45c04:	004ec5c0 	call	4ec5c <__malloc_unlock>
   45c08:	00800044 	movi	r2,1
   45c0c:	003fe706 	br	45bac <__alt_data_end+0xfffe03ac>
   45c10:	000b883a 	mov	r5,zero
   45c14:	9009883a 	mov	r4,r18
   45c18:	0048b980 	call	48b98 <_sbrk_r>
   45c1c:	99000217 	ldw	r4,8(r19)
   45c20:	014003c4 	movi	r5,15
   45c24:	1107c83a 	sub	r3,r2,r4
   45c28:	28ffdd0e 	bge	r5,r3,45ba0 <__alt_data_end+0xfffe03a0>
   45c2c:	01400174 	movhi	r5,5
   45c30:	294b9b04 	addi	r5,r5,11884
   45c34:	29400017 	ldw	r5,0(r5)
   45c38:	18c00054 	ori	r3,r3,1
   45c3c:	20c00115 	stw	r3,4(r4)
   45c40:	00c00174 	movhi	r3,5
   45c44:	1145c83a 	sub	r2,r2,r5
   45c48:	18d27404 	addi	r3,r3,18896
   45c4c:	18800015 	stw	r2,0(r3)
   45c50:	003fd306 	br	45ba0 <__alt_data_end+0xfffe03a0>

00045c54 <_free_r>:
   45c54:	28004126 	beq	r5,zero,45d5c <_free_r+0x108>
   45c58:	defffd04 	addi	sp,sp,-12
   45c5c:	dc400115 	stw	r17,4(sp)
   45c60:	dc000015 	stw	r16,0(sp)
   45c64:	2023883a 	mov	r17,r4
   45c68:	2821883a 	mov	r16,r5
   45c6c:	dfc00215 	stw	ra,8(sp)
   45c70:	004ec380 	call	4ec38 <__malloc_lock>
   45c74:	81ffff17 	ldw	r7,-4(r16)
   45c78:	00bfff84 	movi	r2,-2
   45c7c:	01000174 	movhi	r4,5
   45c80:	81bffe04 	addi	r6,r16,-8
   45c84:	3884703a 	and	r2,r7,r2
   45c88:	21061404 	addi	r4,r4,6224
   45c8c:	308b883a 	add	r5,r6,r2
   45c90:	2a400117 	ldw	r9,4(r5)
   45c94:	22000217 	ldw	r8,8(r4)
   45c98:	00ffff04 	movi	r3,-4
   45c9c:	48c6703a 	and	r3,r9,r3
   45ca0:	2a005726 	beq	r5,r8,45e00 <_free_r+0x1ac>
   45ca4:	28c00115 	stw	r3,4(r5)
   45ca8:	39c0004c 	andi	r7,r7,1
   45cac:	3800091e 	bne	r7,zero,45cd4 <_free_r+0x80>
   45cb0:	823ffe17 	ldw	r8,-8(r16)
   45cb4:	22400204 	addi	r9,r4,8
   45cb8:	320dc83a 	sub	r6,r6,r8
   45cbc:	31c00217 	ldw	r7,8(r6)
   45cc0:	1205883a 	add	r2,r2,r8
   45cc4:	3a406526 	beq	r7,r9,45e5c <_free_r+0x208>
   45cc8:	32000317 	ldw	r8,12(r6)
   45ccc:	3a000315 	stw	r8,12(r7)
   45cd0:	41c00215 	stw	r7,8(r8)
   45cd4:	28cf883a 	add	r7,r5,r3
   45cd8:	39c00117 	ldw	r7,4(r7)
   45cdc:	39c0004c 	andi	r7,r7,1
   45ce0:	38003a26 	beq	r7,zero,45dcc <_free_r+0x178>
   45ce4:	10c00054 	ori	r3,r2,1
   45ce8:	30c00115 	stw	r3,4(r6)
   45cec:	3087883a 	add	r3,r6,r2
   45cf0:	18800015 	stw	r2,0(r3)
   45cf4:	00c07fc4 	movi	r3,511
   45cf8:	18801936 	bltu	r3,r2,45d60 <_free_r+0x10c>
   45cfc:	1004d0fa 	srli	r2,r2,3
   45d00:	01c00044 	movi	r7,1
   45d04:	21400117 	ldw	r5,4(r4)
   45d08:	10c00044 	addi	r3,r2,1
   45d0c:	18c7883a 	add	r3,r3,r3
   45d10:	1005d0ba 	srai	r2,r2,2
   45d14:	18c7883a 	add	r3,r3,r3
   45d18:	18c7883a 	add	r3,r3,r3
   45d1c:	1907883a 	add	r3,r3,r4
   45d20:	3884983a 	sll	r2,r7,r2
   45d24:	19c00017 	ldw	r7,0(r3)
   45d28:	1a3ffe04 	addi	r8,r3,-8
   45d2c:	1144b03a 	or	r2,r2,r5
   45d30:	32000315 	stw	r8,12(r6)
   45d34:	31c00215 	stw	r7,8(r6)
   45d38:	20800115 	stw	r2,4(r4)
   45d3c:	19800015 	stw	r6,0(r3)
   45d40:	39800315 	stw	r6,12(r7)
   45d44:	8809883a 	mov	r4,r17
   45d48:	dfc00217 	ldw	ra,8(sp)
   45d4c:	dc400117 	ldw	r17,4(sp)
   45d50:	dc000017 	ldw	r16,0(sp)
   45d54:	dec00304 	addi	sp,sp,12
   45d58:	004ec5c1 	jmpi	4ec5c <__malloc_unlock>
   45d5c:	f800283a 	ret
   45d60:	100ad27a 	srli	r5,r2,9
   45d64:	00c00104 	movi	r3,4
   45d68:	19404a36 	bltu	r3,r5,45e94 <_free_r+0x240>
   45d6c:	100ad1ba 	srli	r5,r2,6
   45d70:	28c00e44 	addi	r3,r5,57
   45d74:	18c7883a 	add	r3,r3,r3
   45d78:	29400e04 	addi	r5,r5,56
   45d7c:	18c7883a 	add	r3,r3,r3
   45d80:	18c7883a 	add	r3,r3,r3
   45d84:	1909883a 	add	r4,r3,r4
   45d88:	20c00017 	ldw	r3,0(r4)
   45d8c:	01c00174 	movhi	r7,5
   45d90:	213ffe04 	addi	r4,r4,-8
   45d94:	39c61404 	addi	r7,r7,6224
   45d98:	20c04426 	beq	r4,r3,45eac <_free_r+0x258>
   45d9c:	01ffff04 	movi	r7,-4
   45da0:	19400117 	ldw	r5,4(r3)
   45da4:	29ca703a 	and	r5,r5,r7
   45da8:	1140022e 	bgeu	r2,r5,45db4 <_free_r+0x160>
   45dac:	18c00217 	ldw	r3,8(r3)
   45db0:	20fffb1e 	bne	r4,r3,45da0 <__alt_data_end+0xfffe05a0>
   45db4:	19000317 	ldw	r4,12(r3)
   45db8:	31000315 	stw	r4,12(r6)
   45dbc:	30c00215 	stw	r3,8(r6)
   45dc0:	21800215 	stw	r6,8(r4)
   45dc4:	19800315 	stw	r6,12(r3)
   45dc8:	003fde06 	br	45d44 <__alt_data_end+0xfffe0544>
   45dcc:	29c00217 	ldw	r7,8(r5)
   45dd0:	10c5883a 	add	r2,r2,r3
   45dd4:	00c00174 	movhi	r3,5
   45dd8:	18c61604 	addi	r3,r3,6232
   45ddc:	38c03b26 	beq	r7,r3,45ecc <_free_r+0x278>
   45de0:	2a000317 	ldw	r8,12(r5)
   45de4:	11400054 	ori	r5,r2,1
   45de8:	3087883a 	add	r3,r6,r2
   45dec:	3a000315 	stw	r8,12(r7)
   45df0:	41c00215 	stw	r7,8(r8)
   45df4:	31400115 	stw	r5,4(r6)
   45df8:	18800015 	stw	r2,0(r3)
   45dfc:	003fbd06 	br	45cf4 <__alt_data_end+0xfffe04f4>
   45e00:	39c0004c 	andi	r7,r7,1
   45e04:	10c5883a 	add	r2,r2,r3
   45e08:	3800071e 	bne	r7,zero,45e28 <_free_r+0x1d4>
   45e0c:	81fffe17 	ldw	r7,-8(r16)
   45e10:	31cdc83a 	sub	r6,r6,r7
   45e14:	30c00317 	ldw	r3,12(r6)
   45e18:	31400217 	ldw	r5,8(r6)
   45e1c:	11c5883a 	add	r2,r2,r7
   45e20:	28c00315 	stw	r3,12(r5)
   45e24:	19400215 	stw	r5,8(r3)
   45e28:	10c00054 	ori	r3,r2,1
   45e2c:	30c00115 	stw	r3,4(r6)
   45e30:	00c00174 	movhi	r3,5
   45e34:	18cb9c04 	addi	r3,r3,11888
   45e38:	18c00017 	ldw	r3,0(r3)
   45e3c:	21800215 	stw	r6,8(r4)
   45e40:	10ffc036 	bltu	r2,r3,45d44 <__alt_data_end+0xfffe0544>
   45e44:	00800174 	movhi	r2,5
   45e48:	10926b04 	addi	r2,r2,18860
   45e4c:	11400017 	ldw	r5,0(r2)
   45e50:	8809883a 	mov	r4,r17
   45e54:	0045b300 	call	45b30 <_malloc_trim_r>
   45e58:	003fba06 	br	45d44 <__alt_data_end+0xfffe0544>
   45e5c:	28c9883a 	add	r4,r5,r3
   45e60:	21000117 	ldw	r4,4(r4)
   45e64:	2100004c 	andi	r4,r4,1
   45e68:	2000391e 	bne	r4,zero,45f50 <_free_r+0x2fc>
   45e6c:	29c00217 	ldw	r7,8(r5)
   45e70:	29000317 	ldw	r4,12(r5)
   45e74:	1885883a 	add	r2,r3,r2
   45e78:	10c00054 	ori	r3,r2,1
   45e7c:	39000315 	stw	r4,12(r7)
   45e80:	21c00215 	stw	r7,8(r4)
   45e84:	30c00115 	stw	r3,4(r6)
   45e88:	308d883a 	add	r6,r6,r2
   45e8c:	30800015 	stw	r2,0(r6)
   45e90:	003fac06 	br	45d44 <__alt_data_end+0xfffe0544>
   45e94:	00c00504 	movi	r3,20
   45e98:	19401536 	bltu	r3,r5,45ef0 <_free_r+0x29c>
   45e9c:	28c01704 	addi	r3,r5,92
   45ea0:	18c7883a 	add	r3,r3,r3
   45ea4:	294016c4 	addi	r5,r5,91
   45ea8:	003fb406 	br	45d7c <__alt_data_end+0xfffe057c>
   45eac:	280bd0ba 	srai	r5,r5,2
   45eb0:	00c00044 	movi	r3,1
   45eb4:	38800117 	ldw	r2,4(r7)
   45eb8:	194a983a 	sll	r5,r3,r5
   45ebc:	2007883a 	mov	r3,r4
   45ec0:	2884b03a 	or	r2,r5,r2
   45ec4:	38800115 	stw	r2,4(r7)
   45ec8:	003fbb06 	br	45db8 <__alt_data_end+0xfffe05b8>
   45ecc:	21800515 	stw	r6,20(r4)
   45ed0:	21800415 	stw	r6,16(r4)
   45ed4:	10c00054 	ori	r3,r2,1
   45ed8:	31c00315 	stw	r7,12(r6)
   45edc:	31c00215 	stw	r7,8(r6)
   45ee0:	30c00115 	stw	r3,4(r6)
   45ee4:	308d883a 	add	r6,r6,r2
   45ee8:	30800015 	stw	r2,0(r6)
   45eec:	003f9506 	br	45d44 <__alt_data_end+0xfffe0544>
   45ef0:	00c01504 	movi	r3,84
   45ef4:	19400536 	bltu	r3,r5,45f0c <_free_r+0x2b8>
   45ef8:	100ad33a 	srli	r5,r2,12
   45efc:	28c01bc4 	addi	r3,r5,111
   45f00:	18c7883a 	add	r3,r3,r3
   45f04:	29401b84 	addi	r5,r5,110
   45f08:	003f9c06 	br	45d7c <__alt_data_end+0xfffe057c>
   45f0c:	00c05504 	movi	r3,340
   45f10:	19400536 	bltu	r3,r5,45f28 <_free_r+0x2d4>
   45f14:	100ad3fa 	srli	r5,r2,15
   45f18:	28c01e04 	addi	r3,r5,120
   45f1c:	18c7883a 	add	r3,r3,r3
   45f20:	29401dc4 	addi	r5,r5,119
   45f24:	003f9506 	br	45d7c <__alt_data_end+0xfffe057c>
   45f28:	00c15504 	movi	r3,1364
   45f2c:	19400536 	bltu	r3,r5,45f44 <_free_r+0x2f0>
   45f30:	100ad4ba 	srli	r5,r2,18
   45f34:	28c01f44 	addi	r3,r5,125
   45f38:	18c7883a 	add	r3,r3,r3
   45f3c:	29401f04 	addi	r5,r5,124
   45f40:	003f8e06 	br	45d7c <__alt_data_end+0xfffe057c>
   45f44:	00c03f84 	movi	r3,254
   45f48:	01401f84 	movi	r5,126
   45f4c:	003f8b06 	br	45d7c <__alt_data_end+0xfffe057c>
   45f50:	10c00054 	ori	r3,r2,1
   45f54:	30c00115 	stw	r3,4(r6)
   45f58:	308d883a 	add	r6,r6,r2
   45f5c:	30800015 	stw	r2,0(r6)
   45f60:	003f7806 	br	45d44 <__alt_data_end+0xfffe0544>

00045f64 <__sfvwrite_r>:
   45f64:	30800217 	ldw	r2,8(r6)
   45f68:	10006726 	beq	r2,zero,46108 <__sfvwrite_r+0x1a4>
   45f6c:	28c0030b 	ldhu	r3,12(r5)
   45f70:	defff404 	addi	sp,sp,-48
   45f74:	dd400715 	stw	r21,28(sp)
   45f78:	dd000615 	stw	r20,24(sp)
   45f7c:	dc000215 	stw	r16,8(sp)
   45f80:	dfc00b15 	stw	ra,44(sp)
   45f84:	df000a15 	stw	fp,40(sp)
   45f88:	ddc00915 	stw	r23,36(sp)
   45f8c:	dd800815 	stw	r22,32(sp)
   45f90:	dcc00515 	stw	r19,20(sp)
   45f94:	dc800415 	stw	r18,16(sp)
   45f98:	dc400315 	stw	r17,12(sp)
   45f9c:	1880020c 	andi	r2,r3,8
   45fa0:	2821883a 	mov	r16,r5
   45fa4:	202b883a 	mov	r21,r4
   45fa8:	3029883a 	mov	r20,r6
   45fac:	10002726 	beq	r2,zero,4604c <__sfvwrite_r+0xe8>
   45fb0:	28800417 	ldw	r2,16(r5)
   45fb4:	10002526 	beq	r2,zero,4604c <__sfvwrite_r+0xe8>
   45fb8:	1880008c 	andi	r2,r3,2
   45fbc:	a4400017 	ldw	r17,0(r20)
   45fc0:	10002a26 	beq	r2,zero,4606c <__sfvwrite_r+0x108>
   45fc4:	05a00034 	movhi	r22,32768
   45fc8:	0027883a 	mov	r19,zero
   45fcc:	0025883a 	mov	r18,zero
   45fd0:	b5bf0004 	addi	r22,r22,-1024
   45fd4:	980d883a 	mov	r6,r19
   45fd8:	a809883a 	mov	r4,r21
   45fdc:	90004626 	beq	r18,zero,460f8 <__sfvwrite_r+0x194>
   45fe0:	900f883a 	mov	r7,r18
   45fe4:	b480022e 	bgeu	r22,r18,45ff0 <__sfvwrite_r+0x8c>
   45fe8:	01e00034 	movhi	r7,32768
   45fec:	39ff0004 	addi	r7,r7,-1024
   45ff0:	80800917 	ldw	r2,36(r16)
   45ff4:	81400717 	ldw	r5,28(r16)
   45ff8:	103ee83a 	callr	r2
   45ffc:	00805a0e 	bge	zero,r2,46168 <__sfvwrite_r+0x204>
   46000:	a0c00217 	ldw	r3,8(r20)
   46004:	98a7883a 	add	r19,r19,r2
   46008:	90a5c83a 	sub	r18,r18,r2
   4600c:	1885c83a 	sub	r2,r3,r2
   46010:	a0800215 	stw	r2,8(r20)
   46014:	103fef1e 	bne	r2,zero,45fd4 <__alt_data_end+0xfffe07d4>
   46018:	0005883a 	mov	r2,zero
   4601c:	dfc00b17 	ldw	ra,44(sp)
   46020:	df000a17 	ldw	fp,40(sp)
   46024:	ddc00917 	ldw	r23,36(sp)
   46028:	dd800817 	ldw	r22,32(sp)
   4602c:	dd400717 	ldw	r21,28(sp)
   46030:	dd000617 	ldw	r20,24(sp)
   46034:	dcc00517 	ldw	r19,20(sp)
   46038:	dc800417 	ldw	r18,16(sp)
   4603c:	dc400317 	ldw	r17,12(sp)
   46040:	dc000217 	ldw	r16,8(sp)
   46044:	dec00c04 	addi	sp,sp,48
   46048:	f800283a 	ret
   4604c:	800b883a 	mov	r5,r16
   46050:	a809883a 	mov	r4,r21
   46054:	0043ad40 	call	43ad4 <__swsetup_r>
   46058:	1000ee1e 	bne	r2,zero,46414 <__sfvwrite_r+0x4b0>
   4605c:	80c0030b 	ldhu	r3,12(r16)
   46060:	a4400017 	ldw	r17,0(r20)
   46064:	1880008c 	andi	r2,r3,2
   46068:	103fd61e 	bne	r2,zero,45fc4 <__alt_data_end+0xfffe07c4>
   4606c:	1880004c 	andi	r2,r3,1
   46070:	1000421e 	bne	r2,zero,4617c <__sfvwrite_r+0x218>
   46074:	0039883a 	mov	fp,zero
   46078:	0025883a 	mov	r18,zero
   4607c:	90001a26 	beq	r18,zero,460e8 <__sfvwrite_r+0x184>
   46080:	1880800c 	andi	r2,r3,512
   46084:	84c00217 	ldw	r19,8(r16)
   46088:	10002126 	beq	r2,zero,46110 <__sfvwrite_r+0x1ac>
   4608c:	982f883a 	mov	r23,r19
   46090:	94c09636 	bltu	r18,r19,462ec <__sfvwrite_r+0x388>
   46094:	1881200c 	andi	r2,r3,1152
   46098:	1000a11e 	bne	r2,zero,46320 <__sfvwrite_r+0x3bc>
   4609c:	81000017 	ldw	r4,0(r16)
   460a0:	b80d883a 	mov	r6,r23
   460a4:	e00b883a 	mov	r5,fp
   460a8:	00472840 	call	47284 <memmove>
   460ac:	80c00217 	ldw	r3,8(r16)
   460b0:	81000017 	ldw	r4,0(r16)
   460b4:	9005883a 	mov	r2,r18
   460b8:	1ce7c83a 	sub	r19,r3,r19
   460bc:	25cf883a 	add	r7,r4,r23
   460c0:	84c00215 	stw	r19,8(r16)
   460c4:	81c00015 	stw	r7,0(r16)
   460c8:	a0c00217 	ldw	r3,8(r20)
   460cc:	e0b9883a 	add	fp,fp,r2
   460d0:	90a5c83a 	sub	r18,r18,r2
   460d4:	18a7c83a 	sub	r19,r3,r2
   460d8:	a4c00215 	stw	r19,8(r20)
   460dc:	983fce26 	beq	r19,zero,46018 <__alt_data_end+0xfffe0818>
   460e0:	80c0030b 	ldhu	r3,12(r16)
   460e4:	903fe61e 	bne	r18,zero,46080 <__alt_data_end+0xfffe0880>
   460e8:	8f000017 	ldw	fp,0(r17)
   460ec:	8c800117 	ldw	r18,4(r17)
   460f0:	8c400204 	addi	r17,r17,8
   460f4:	003fe106 	br	4607c <__alt_data_end+0xfffe087c>
   460f8:	8cc00017 	ldw	r19,0(r17)
   460fc:	8c800117 	ldw	r18,4(r17)
   46100:	8c400204 	addi	r17,r17,8
   46104:	003fb306 	br	45fd4 <__alt_data_end+0xfffe07d4>
   46108:	0005883a 	mov	r2,zero
   4610c:	f800283a 	ret
   46110:	81000017 	ldw	r4,0(r16)
   46114:	80800417 	ldw	r2,16(r16)
   46118:	11005a36 	bltu	r2,r4,46284 <__sfvwrite_r+0x320>
   4611c:	85c00517 	ldw	r23,20(r16)
   46120:	95c05836 	bltu	r18,r23,46284 <__sfvwrite_r+0x320>
   46124:	00a00034 	movhi	r2,32768
   46128:	10bfffc4 	addi	r2,r2,-1
   4612c:	9009883a 	mov	r4,r18
   46130:	1480012e 	bgeu	r2,r18,46138 <__sfvwrite_r+0x1d4>
   46134:	1009883a 	mov	r4,r2
   46138:	b80b883a 	mov	r5,r23
   4613c:	004ba080 	call	4ba08 <__divsi3>
   46140:	b80b883a 	mov	r5,r23
   46144:	1009883a 	mov	r4,r2
   46148:	00415200 	call	41520 <__mulsi3>
   4614c:	81400717 	ldw	r5,28(r16)
   46150:	80c00917 	ldw	r3,36(r16)
   46154:	100f883a 	mov	r7,r2
   46158:	e00d883a 	mov	r6,fp
   4615c:	a809883a 	mov	r4,r21
   46160:	183ee83a 	callr	r3
   46164:	00bfd816 	blt	zero,r2,460c8 <__alt_data_end+0xfffe08c8>
   46168:	8080030b 	ldhu	r2,12(r16)
   4616c:	10801014 	ori	r2,r2,64
   46170:	8080030d 	sth	r2,12(r16)
   46174:	00bfffc4 	movi	r2,-1
   46178:	003fa806 	br	4601c <__alt_data_end+0xfffe081c>
   4617c:	0027883a 	mov	r19,zero
   46180:	0011883a 	mov	r8,zero
   46184:	0039883a 	mov	fp,zero
   46188:	0025883a 	mov	r18,zero
   4618c:	90001f26 	beq	r18,zero,4620c <__sfvwrite_r+0x2a8>
   46190:	40005a26 	beq	r8,zero,462fc <__sfvwrite_r+0x398>
   46194:	982d883a 	mov	r22,r19
   46198:	94c0012e 	bgeu	r18,r19,461a0 <__sfvwrite_r+0x23c>
   4619c:	902d883a 	mov	r22,r18
   461a0:	81000017 	ldw	r4,0(r16)
   461a4:	80800417 	ldw	r2,16(r16)
   461a8:	b02f883a 	mov	r23,r22
   461ac:	81c00517 	ldw	r7,20(r16)
   461b0:	1100032e 	bgeu	r2,r4,461c0 <__sfvwrite_r+0x25c>
   461b4:	80c00217 	ldw	r3,8(r16)
   461b8:	38c7883a 	add	r3,r7,r3
   461bc:	1d801816 	blt	r3,r22,46220 <__sfvwrite_r+0x2bc>
   461c0:	b1c03e16 	blt	r22,r7,462bc <__sfvwrite_r+0x358>
   461c4:	80800917 	ldw	r2,36(r16)
   461c8:	81400717 	ldw	r5,28(r16)
   461cc:	e00d883a 	mov	r6,fp
   461d0:	da000115 	stw	r8,4(sp)
   461d4:	a809883a 	mov	r4,r21
   461d8:	103ee83a 	callr	r2
   461dc:	102f883a 	mov	r23,r2
   461e0:	da000117 	ldw	r8,4(sp)
   461e4:	00bfe00e 	bge	zero,r2,46168 <__alt_data_end+0xfffe0968>
   461e8:	9de7c83a 	sub	r19,r19,r23
   461ec:	98001f26 	beq	r19,zero,4626c <__sfvwrite_r+0x308>
   461f0:	a0800217 	ldw	r2,8(r20)
   461f4:	e5f9883a 	add	fp,fp,r23
   461f8:	95e5c83a 	sub	r18,r18,r23
   461fc:	15efc83a 	sub	r23,r2,r23
   46200:	a5c00215 	stw	r23,8(r20)
   46204:	b83f8426 	beq	r23,zero,46018 <__alt_data_end+0xfffe0818>
   46208:	903fe11e 	bne	r18,zero,46190 <__alt_data_end+0xfffe0990>
   4620c:	8f000017 	ldw	fp,0(r17)
   46210:	8c800117 	ldw	r18,4(r17)
   46214:	0011883a 	mov	r8,zero
   46218:	8c400204 	addi	r17,r17,8
   4621c:	003fdb06 	br	4618c <__alt_data_end+0xfffe098c>
   46220:	180d883a 	mov	r6,r3
   46224:	e00b883a 	mov	r5,fp
   46228:	da000115 	stw	r8,4(sp)
   4622c:	d8c00015 	stw	r3,0(sp)
   46230:	00472840 	call	47284 <memmove>
   46234:	d8c00017 	ldw	r3,0(sp)
   46238:	80800017 	ldw	r2,0(r16)
   4623c:	800b883a 	mov	r5,r16
   46240:	a809883a 	mov	r4,r21
   46244:	10c5883a 	add	r2,r2,r3
   46248:	80800015 	stw	r2,0(r16)
   4624c:	d8c00015 	stw	r3,0(sp)
   46250:	00456f40 	call	456f4 <_fflush_r>
   46254:	d8c00017 	ldw	r3,0(sp)
   46258:	da000117 	ldw	r8,4(sp)
   4625c:	103fc21e 	bne	r2,zero,46168 <__alt_data_end+0xfffe0968>
   46260:	182f883a 	mov	r23,r3
   46264:	9de7c83a 	sub	r19,r19,r23
   46268:	983fe11e 	bne	r19,zero,461f0 <__alt_data_end+0xfffe09f0>
   4626c:	800b883a 	mov	r5,r16
   46270:	a809883a 	mov	r4,r21
   46274:	00456f40 	call	456f4 <_fflush_r>
   46278:	103fbb1e 	bne	r2,zero,46168 <__alt_data_end+0xfffe0968>
   4627c:	0011883a 	mov	r8,zero
   46280:	003fdb06 	br	461f0 <__alt_data_end+0xfffe09f0>
   46284:	94c0012e 	bgeu	r18,r19,4628c <__sfvwrite_r+0x328>
   46288:	9027883a 	mov	r19,r18
   4628c:	980d883a 	mov	r6,r19
   46290:	e00b883a 	mov	r5,fp
   46294:	00472840 	call	47284 <memmove>
   46298:	80800217 	ldw	r2,8(r16)
   4629c:	80c00017 	ldw	r3,0(r16)
   462a0:	14c5c83a 	sub	r2,r2,r19
   462a4:	1cc7883a 	add	r3,r3,r19
   462a8:	80800215 	stw	r2,8(r16)
   462ac:	80c00015 	stw	r3,0(r16)
   462b0:	10004326 	beq	r2,zero,463c0 <__sfvwrite_r+0x45c>
   462b4:	9805883a 	mov	r2,r19
   462b8:	003f8306 	br	460c8 <__alt_data_end+0xfffe08c8>
   462bc:	b00d883a 	mov	r6,r22
   462c0:	e00b883a 	mov	r5,fp
   462c4:	da000115 	stw	r8,4(sp)
   462c8:	00472840 	call	47284 <memmove>
   462cc:	80800217 	ldw	r2,8(r16)
   462d0:	80c00017 	ldw	r3,0(r16)
   462d4:	da000117 	ldw	r8,4(sp)
   462d8:	1585c83a 	sub	r2,r2,r22
   462dc:	1dad883a 	add	r22,r3,r22
   462e0:	80800215 	stw	r2,8(r16)
   462e4:	85800015 	stw	r22,0(r16)
   462e8:	003fbf06 	br	461e8 <__alt_data_end+0xfffe09e8>
   462ec:	81000017 	ldw	r4,0(r16)
   462f0:	9027883a 	mov	r19,r18
   462f4:	902f883a 	mov	r23,r18
   462f8:	003f6906 	br	460a0 <__alt_data_end+0xfffe08a0>
   462fc:	900d883a 	mov	r6,r18
   46300:	01400284 	movi	r5,10
   46304:	e009883a 	mov	r4,fp
   46308:	00470580 	call	47058 <memchr>
   4630c:	10003e26 	beq	r2,zero,46408 <__sfvwrite_r+0x4a4>
   46310:	10800044 	addi	r2,r2,1
   46314:	1727c83a 	sub	r19,r2,fp
   46318:	02000044 	movi	r8,1
   4631c:	003f9d06 	br	46194 <__alt_data_end+0xfffe0994>
   46320:	80800517 	ldw	r2,20(r16)
   46324:	81400417 	ldw	r5,16(r16)
   46328:	81c00017 	ldw	r7,0(r16)
   4632c:	10a7883a 	add	r19,r2,r2
   46330:	9885883a 	add	r2,r19,r2
   46334:	1026d7fa 	srli	r19,r2,31
   46338:	396dc83a 	sub	r22,r7,r5
   4633c:	b1000044 	addi	r4,r22,1
   46340:	9885883a 	add	r2,r19,r2
   46344:	1027d07a 	srai	r19,r2,1
   46348:	2485883a 	add	r2,r4,r18
   4634c:	980d883a 	mov	r6,r19
   46350:	9880022e 	bgeu	r19,r2,4635c <__sfvwrite_r+0x3f8>
   46354:	1027883a 	mov	r19,r2
   46358:	100d883a 	mov	r6,r2
   4635c:	18c1000c 	andi	r3,r3,1024
   46360:	18001c26 	beq	r3,zero,463d4 <__sfvwrite_r+0x470>
   46364:	300b883a 	mov	r5,r6
   46368:	a809883a 	mov	r4,r21
   4636c:	004684c0 	call	4684c <_malloc_r>
   46370:	102f883a 	mov	r23,r2
   46374:	10002926 	beq	r2,zero,4641c <__sfvwrite_r+0x4b8>
   46378:	81400417 	ldw	r5,16(r16)
   4637c:	b00d883a 	mov	r6,r22
   46380:	1009883a 	mov	r4,r2
   46384:	004713c0 	call	4713c <memcpy>
   46388:	8080030b 	ldhu	r2,12(r16)
   4638c:	00fedfc4 	movi	r3,-1153
   46390:	10c4703a 	and	r2,r2,r3
   46394:	10802014 	ori	r2,r2,128
   46398:	8080030d 	sth	r2,12(r16)
   4639c:	bd89883a 	add	r4,r23,r22
   463a0:	9d8fc83a 	sub	r7,r19,r22
   463a4:	85c00415 	stw	r23,16(r16)
   463a8:	84c00515 	stw	r19,20(r16)
   463ac:	81000015 	stw	r4,0(r16)
   463b0:	9027883a 	mov	r19,r18
   463b4:	81c00215 	stw	r7,8(r16)
   463b8:	902f883a 	mov	r23,r18
   463bc:	003f3806 	br	460a0 <__alt_data_end+0xfffe08a0>
   463c0:	800b883a 	mov	r5,r16
   463c4:	a809883a 	mov	r4,r21
   463c8:	00456f40 	call	456f4 <_fflush_r>
   463cc:	103fb926 	beq	r2,zero,462b4 <__alt_data_end+0xfffe0ab4>
   463d0:	003f6506 	br	46168 <__alt_data_end+0xfffe0968>
   463d4:	a809883a 	mov	r4,r21
   463d8:	00485c00 	call	485c0 <_realloc_r>
   463dc:	102f883a 	mov	r23,r2
   463e0:	103fee1e 	bne	r2,zero,4639c <__alt_data_end+0xfffe0b9c>
   463e4:	81400417 	ldw	r5,16(r16)
   463e8:	a809883a 	mov	r4,r21
   463ec:	0045c540 	call	45c54 <_free_r>
   463f0:	8080030b 	ldhu	r2,12(r16)
   463f4:	00ffdfc4 	movi	r3,-129
   463f8:	1884703a 	and	r2,r3,r2
   463fc:	00c00304 	movi	r3,12
   46400:	a8c00015 	stw	r3,0(r21)
   46404:	003f5906 	br	4616c <__alt_data_end+0xfffe096c>
   46408:	94c00044 	addi	r19,r18,1
   4640c:	02000044 	movi	r8,1
   46410:	003f6006 	br	46194 <__alt_data_end+0xfffe0994>
   46414:	00bfffc4 	movi	r2,-1
   46418:	003f0006 	br	4601c <__alt_data_end+0xfffe081c>
   4641c:	00800304 	movi	r2,12
   46420:	a8800015 	stw	r2,0(r21)
   46424:	8080030b 	ldhu	r2,12(r16)
   46428:	003f5006 	br	4616c <__alt_data_end+0xfffe096c>

0004642c <_fwalk>:
   4642c:	defff704 	addi	sp,sp,-36
   46430:	dd000415 	stw	r20,16(sp)
   46434:	dfc00815 	stw	ra,32(sp)
   46438:	ddc00715 	stw	r23,28(sp)
   4643c:	dd800615 	stw	r22,24(sp)
   46440:	dd400515 	stw	r21,20(sp)
   46444:	dcc00315 	stw	r19,12(sp)
   46448:	dc800215 	stw	r18,8(sp)
   4644c:	dc400115 	stw	r17,4(sp)
   46450:	dc000015 	stw	r16,0(sp)
   46454:	2500b804 	addi	r20,r4,736
   46458:	a0002326 	beq	r20,zero,464e8 <_fwalk+0xbc>
   4645c:	282b883a 	mov	r21,r5
   46460:	002f883a 	mov	r23,zero
   46464:	05800044 	movi	r22,1
   46468:	04ffffc4 	movi	r19,-1
   4646c:	a4400117 	ldw	r17,4(r20)
   46470:	a4800217 	ldw	r18,8(r20)
   46474:	8c7fffc4 	addi	r17,r17,-1
   46478:	88000d16 	blt	r17,zero,464b0 <_fwalk+0x84>
   4647c:	94000304 	addi	r16,r18,12
   46480:	94800384 	addi	r18,r18,14
   46484:	8080000b 	ldhu	r2,0(r16)
   46488:	8c7fffc4 	addi	r17,r17,-1
   4648c:	813ffd04 	addi	r4,r16,-12
   46490:	b080042e 	bgeu	r22,r2,464a4 <_fwalk+0x78>
   46494:	9080000f 	ldh	r2,0(r18)
   46498:	14c00226 	beq	r2,r19,464a4 <_fwalk+0x78>
   4649c:	a83ee83a 	callr	r21
   464a0:	b8aeb03a 	or	r23,r23,r2
   464a4:	84001a04 	addi	r16,r16,104
   464a8:	94801a04 	addi	r18,r18,104
   464ac:	8cfff51e 	bne	r17,r19,46484 <__alt_data_end+0xfffe0c84>
   464b0:	a5000017 	ldw	r20,0(r20)
   464b4:	a03fed1e 	bne	r20,zero,4646c <__alt_data_end+0xfffe0c6c>
   464b8:	b805883a 	mov	r2,r23
   464bc:	dfc00817 	ldw	ra,32(sp)
   464c0:	ddc00717 	ldw	r23,28(sp)
   464c4:	dd800617 	ldw	r22,24(sp)
   464c8:	dd400517 	ldw	r21,20(sp)
   464cc:	dd000417 	ldw	r20,16(sp)
   464d0:	dcc00317 	ldw	r19,12(sp)
   464d4:	dc800217 	ldw	r18,8(sp)
   464d8:	dc400117 	ldw	r17,4(sp)
   464dc:	dc000017 	ldw	r16,0(sp)
   464e0:	dec00904 	addi	sp,sp,36
   464e4:	f800283a 	ret
   464e8:	002f883a 	mov	r23,zero
   464ec:	003ff206 	br	464b8 <__alt_data_end+0xfffe0cb8>

000464f0 <_fwalk_reent>:
   464f0:	defff704 	addi	sp,sp,-36
   464f4:	dd000415 	stw	r20,16(sp)
   464f8:	dfc00815 	stw	ra,32(sp)
   464fc:	ddc00715 	stw	r23,28(sp)
   46500:	dd800615 	stw	r22,24(sp)
   46504:	dd400515 	stw	r21,20(sp)
   46508:	dcc00315 	stw	r19,12(sp)
   4650c:	dc800215 	stw	r18,8(sp)
   46510:	dc400115 	stw	r17,4(sp)
   46514:	dc000015 	stw	r16,0(sp)
   46518:	2500b804 	addi	r20,r4,736
   4651c:	a0002326 	beq	r20,zero,465ac <_fwalk_reent+0xbc>
   46520:	282b883a 	mov	r21,r5
   46524:	2027883a 	mov	r19,r4
   46528:	002f883a 	mov	r23,zero
   4652c:	05800044 	movi	r22,1
   46530:	04bfffc4 	movi	r18,-1
   46534:	a4400117 	ldw	r17,4(r20)
   46538:	a4000217 	ldw	r16,8(r20)
   4653c:	8c7fffc4 	addi	r17,r17,-1
   46540:	88000c16 	blt	r17,zero,46574 <_fwalk_reent+0x84>
   46544:	84000304 	addi	r16,r16,12
   46548:	8080000b 	ldhu	r2,0(r16)
   4654c:	8c7fffc4 	addi	r17,r17,-1
   46550:	817ffd04 	addi	r5,r16,-12
   46554:	b080052e 	bgeu	r22,r2,4656c <_fwalk_reent+0x7c>
   46558:	8080008f 	ldh	r2,2(r16)
   4655c:	9809883a 	mov	r4,r19
   46560:	14800226 	beq	r2,r18,4656c <_fwalk_reent+0x7c>
   46564:	a83ee83a 	callr	r21
   46568:	b8aeb03a 	or	r23,r23,r2
   4656c:	84001a04 	addi	r16,r16,104
   46570:	8cbff51e 	bne	r17,r18,46548 <__alt_data_end+0xfffe0d48>
   46574:	a5000017 	ldw	r20,0(r20)
   46578:	a03fee1e 	bne	r20,zero,46534 <__alt_data_end+0xfffe0d34>
   4657c:	b805883a 	mov	r2,r23
   46580:	dfc00817 	ldw	ra,32(sp)
   46584:	ddc00717 	ldw	r23,28(sp)
   46588:	dd800617 	ldw	r22,24(sp)
   4658c:	dd400517 	ldw	r21,20(sp)
   46590:	dd000417 	ldw	r20,16(sp)
   46594:	dcc00317 	ldw	r19,12(sp)
   46598:	dc800217 	ldw	r18,8(sp)
   4659c:	dc400117 	ldw	r17,4(sp)
   465a0:	dc000017 	ldw	r16,0(sp)
   465a4:	dec00904 	addi	sp,sp,36
   465a8:	f800283a 	ret
   465ac:	002f883a 	mov	r23,zero
   465b0:	003ff206 	br	4657c <__alt_data_end+0xfffe0d7c>

000465b4 <_setlocale_r>:
   465b4:	30001b26 	beq	r6,zero,46624 <_setlocale_r+0x70>
   465b8:	01400174 	movhi	r5,5
   465bc:	defffe04 	addi	sp,sp,-8
   465c0:	29448e04 	addi	r5,r5,4664
   465c4:	3009883a 	mov	r4,r6
   465c8:	dc000015 	stw	r16,0(sp)
   465cc:	dfc00115 	stw	ra,4(sp)
   465d0:	3021883a 	mov	r16,r6
   465d4:	0048d280 	call	48d28 <strcmp>
   465d8:	1000061e 	bne	r2,zero,465f4 <_setlocale_r+0x40>
   465dc:	00800174 	movhi	r2,5
   465e0:	10848d04 	addi	r2,r2,4660
   465e4:	dfc00117 	ldw	ra,4(sp)
   465e8:	dc000017 	ldw	r16,0(sp)
   465ec:	dec00204 	addi	sp,sp,8
   465f0:	f800283a 	ret
   465f4:	01400174 	movhi	r5,5
   465f8:	29448d04 	addi	r5,r5,4660
   465fc:	8009883a 	mov	r4,r16
   46600:	0048d280 	call	48d28 <strcmp>
   46604:	103ff526 	beq	r2,zero,465dc <__alt_data_end+0xfffe0ddc>
   46608:	01400174 	movhi	r5,5
   4660c:	29447804 	addi	r5,r5,4576
   46610:	8009883a 	mov	r4,r16
   46614:	0048d280 	call	48d28 <strcmp>
   46618:	103ff026 	beq	r2,zero,465dc <__alt_data_end+0xfffe0ddc>
   4661c:	0005883a 	mov	r2,zero
   46620:	003ff006 	br	465e4 <__alt_data_end+0xfffe0de4>
   46624:	00800174 	movhi	r2,5
   46628:	10848d04 	addi	r2,r2,4660
   4662c:	f800283a 	ret

00046630 <__locale_charset>:
   46630:	00800174 	movhi	r2,5
   46634:	1085fe04 	addi	r2,r2,6136
   46638:	f800283a 	ret

0004663c <__locale_mb_cur_max>:
   4663c:	00800174 	movhi	r2,5
   46640:	108b9a04 	addi	r2,r2,11880
   46644:	10800017 	ldw	r2,0(r2)
   46648:	f800283a 	ret

0004664c <__locale_msgcharset>:
   4664c:	00800174 	movhi	r2,5
   46650:	1085f604 	addi	r2,r2,6104
   46654:	f800283a 	ret

00046658 <__locale_cjk_lang>:
   46658:	0005883a 	mov	r2,zero
   4665c:	f800283a 	ret

00046660 <_localeconv_r>:
   46660:	00800174 	movhi	r2,5
   46664:	10860604 	addi	r2,r2,6168
   46668:	f800283a 	ret

0004666c <setlocale>:
   4666c:	00800174 	movhi	r2,5
   46670:	108b9904 	addi	r2,r2,11876
   46674:	280d883a 	mov	r6,r5
   46678:	200b883a 	mov	r5,r4
   4667c:	11000017 	ldw	r4,0(r2)
   46680:	00465b41 	jmpi	465b4 <_setlocale_r>

00046684 <localeconv>:
   46684:	00800174 	movhi	r2,5
   46688:	10860604 	addi	r2,r2,6168
   4668c:	f800283a 	ret

00046690 <__smakebuf_r>:
   46690:	2880030b 	ldhu	r2,12(r5)
   46694:	10c0008c 	andi	r3,r2,2
   46698:	1800411e 	bne	r3,zero,467a0 <__smakebuf_r+0x110>
   4669c:	deffec04 	addi	sp,sp,-80
   466a0:	dc000f15 	stw	r16,60(sp)
   466a4:	2821883a 	mov	r16,r5
   466a8:	2940038f 	ldh	r5,14(r5)
   466ac:	dc401015 	stw	r17,64(sp)
   466b0:	dfc01315 	stw	ra,76(sp)
   466b4:	dcc01215 	stw	r19,72(sp)
   466b8:	dc801115 	stw	r18,68(sp)
   466bc:	2023883a 	mov	r17,r4
   466c0:	28001c16 	blt	r5,zero,46734 <__smakebuf_r+0xa4>
   466c4:	d80d883a 	mov	r6,sp
   466c8:	004a9980 	call	4a998 <_fstat_r>
   466cc:	10001816 	blt	r2,zero,46730 <__smakebuf_r+0xa0>
   466d0:	d8800117 	ldw	r2,4(sp)
   466d4:	00e00014 	movui	r3,32768
   466d8:	10bc000c 	andi	r2,r2,61440
   466dc:	14c80020 	cmpeqi	r19,r2,8192
   466e0:	10c03726 	beq	r2,r3,467c0 <__smakebuf_r+0x130>
   466e4:	80c0030b 	ldhu	r3,12(r16)
   466e8:	18c20014 	ori	r3,r3,2048
   466ec:	80c0030d 	sth	r3,12(r16)
   466f0:	00c80004 	movi	r3,8192
   466f4:	10c0521e 	bne	r2,r3,46840 <__smakebuf_r+0x1b0>
   466f8:	8140038f 	ldh	r5,14(r16)
   466fc:	8809883a 	mov	r4,r17
   46700:	004a9f40 	call	4a9f4 <_isatty_r>
   46704:	10004c26 	beq	r2,zero,46838 <__smakebuf_r+0x1a8>
   46708:	8080030b 	ldhu	r2,12(r16)
   4670c:	80c010c4 	addi	r3,r16,67
   46710:	80c00015 	stw	r3,0(r16)
   46714:	10800054 	ori	r2,r2,1
   46718:	8080030d 	sth	r2,12(r16)
   4671c:	00800044 	movi	r2,1
   46720:	80c00415 	stw	r3,16(r16)
   46724:	80800515 	stw	r2,20(r16)
   46728:	04810004 	movi	r18,1024
   4672c:	00000706 	br	4674c <__smakebuf_r+0xbc>
   46730:	8080030b 	ldhu	r2,12(r16)
   46734:	10c0200c 	andi	r3,r2,128
   46738:	18001f1e 	bne	r3,zero,467b8 <__smakebuf_r+0x128>
   4673c:	04810004 	movi	r18,1024
   46740:	10820014 	ori	r2,r2,2048
   46744:	8080030d 	sth	r2,12(r16)
   46748:	0027883a 	mov	r19,zero
   4674c:	900b883a 	mov	r5,r18
   46750:	8809883a 	mov	r4,r17
   46754:	004684c0 	call	4684c <_malloc_r>
   46758:	10002c26 	beq	r2,zero,4680c <__smakebuf_r+0x17c>
   4675c:	80c0030b 	ldhu	r3,12(r16)
   46760:	01000134 	movhi	r4,4
   46764:	2115e204 	addi	r4,r4,22408
   46768:	89000f15 	stw	r4,60(r17)
   4676c:	18c02014 	ori	r3,r3,128
   46770:	80c0030d 	sth	r3,12(r16)
   46774:	80800015 	stw	r2,0(r16)
   46778:	80800415 	stw	r2,16(r16)
   4677c:	84800515 	stw	r18,20(r16)
   46780:	98001a1e 	bne	r19,zero,467ec <__smakebuf_r+0x15c>
   46784:	dfc01317 	ldw	ra,76(sp)
   46788:	dcc01217 	ldw	r19,72(sp)
   4678c:	dc801117 	ldw	r18,68(sp)
   46790:	dc401017 	ldw	r17,64(sp)
   46794:	dc000f17 	ldw	r16,60(sp)
   46798:	dec01404 	addi	sp,sp,80
   4679c:	f800283a 	ret
   467a0:	288010c4 	addi	r2,r5,67
   467a4:	28800015 	stw	r2,0(r5)
   467a8:	28800415 	stw	r2,16(r5)
   467ac:	00800044 	movi	r2,1
   467b0:	28800515 	stw	r2,20(r5)
   467b4:	f800283a 	ret
   467b8:	04801004 	movi	r18,64
   467bc:	003fe006 	br	46740 <__alt_data_end+0xfffe0f40>
   467c0:	81000a17 	ldw	r4,40(r16)
   467c4:	00c00174 	movhi	r3,5
   467c8:	18e33104 	addi	r3,r3,-29500
   467cc:	20ffc51e 	bne	r4,r3,466e4 <__alt_data_end+0xfffe0ee4>
   467d0:	8080030b 	ldhu	r2,12(r16)
   467d4:	04810004 	movi	r18,1024
   467d8:	84801315 	stw	r18,76(r16)
   467dc:	1484b03a 	or	r2,r2,r18
   467e0:	8080030d 	sth	r2,12(r16)
   467e4:	0027883a 	mov	r19,zero
   467e8:	003fd806 	br	4674c <__alt_data_end+0xfffe0f4c>
   467ec:	8140038f 	ldh	r5,14(r16)
   467f0:	8809883a 	mov	r4,r17
   467f4:	004a9f40 	call	4a9f4 <_isatty_r>
   467f8:	103fe226 	beq	r2,zero,46784 <__alt_data_end+0xfffe0f84>
   467fc:	8080030b 	ldhu	r2,12(r16)
   46800:	10800054 	ori	r2,r2,1
   46804:	8080030d 	sth	r2,12(r16)
   46808:	003fde06 	br	46784 <__alt_data_end+0xfffe0f84>
   4680c:	8080030b 	ldhu	r2,12(r16)
   46810:	10c0800c 	andi	r3,r2,512
   46814:	183fdb1e 	bne	r3,zero,46784 <__alt_data_end+0xfffe0f84>
   46818:	10800094 	ori	r2,r2,2
   4681c:	80c010c4 	addi	r3,r16,67
   46820:	8080030d 	sth	r2,12(r16)
   46824:	00800044 	movi	r2,1
   46828:	80c00015 	stw	r3,0(r16)
   4682c:	80c00415 	stw	r3,16(r16)
   46830:	80800515 	stw	r2,20(r16)
   46834:	003fd306 	br	46784 <__alt_data_end+0xfffe0f84>
   46838:	04810004 	movi	r18,1024
   4683c:	003fc306 	br	4674c <__alt_data_end+0xfffe0f4c>
   46840:	0027883a 	mov	r19,zero
   46844:	04810004 	movi	r18,1024
   46848:	003fc006 	br	4674c <__alt_data_end+0xfffe0f4c>

0004684c <_malloc_r>:
   4684c:	defff504 	addi	sp,sp,-44
   46850:	dc800315 	stw	r18,12(sp)
   46854:	dfc00a15 	stw	ra,40(sp)
   46858:	df000915 	stw	fp,36(sp)
   4685c:	ddc00815 	stw	r23,32(sp)
   46860:	dd800715 	stw	r22,28(sp)
   46864:	dd400615 	stw	r21,24(sp)
   46868:	dd000515 	stw	r20,20(sp)
   4686c:	dcc00415 	stw	r19,16(sp)
   46870:	dc400215 	stw	r17,8(sp)
   46874:	dc000115 	stw	r16,4(sp)
   46878:	288002c4 	addi	r2,r5,11
   4687c:	00c00584 	movi	r3,22
   46880:	2025883a 	mov	r18,r4
   46884:	18807f2e 	bgeu	r3,r2,46a84 <_malloc_r+0x238>
   46888:	047ffe04 	movi	r17,-8
   4688c:	1462703a 	and	r17,r2,r17
   46890:	8800a316 	blt	r17,zero,46b20 <_malloc_r+0x2d4>
   46894:	8940a236 	bltu	r17,r5,46b20 <_malloc_r+0x2d4>
   46898:	004ec380 	call	4ec38 <__malloc_lock>
   4689c:	00807dc4 	movi	r2,503
   468a0:	1441e92e 	bgeu	r2,r17,47048 <_malloc_r+0x7fc>
   468a4:	8804d27a 	srli	r2,r17,9
   468a8:	1000a126 	beq	r2,zero,46b30 <_malloc_r+0x2e4>
   468ac:	00c00104 	movi	r3,4
   468b0:	18811e36 	bltu	r3,r2,46d2c <_malloc_r+0x4e0>
   468b4:	8804d1ba 	srli	r2,r17,6
   468b8:	12000e44 	addi	r8,r2,57
   468bc:	11c00e04 	addi	r7,r2,56
   468c0:	4209883a 	add	r4,r8,r8
   468c4:	04c00174 	movhi	r19,5
   468c8:	2109883a 	add	r4,r4,r4
   468cc:	9cc61404 	addi	r19,r19,6224
   468d0:	2109883a 	add	r4,r4,r4
   468d4:	9909883a 	add	r4,r19,r4
   468d8:	24000117 	ldw	r16,4(r4)
   468dc:	213ffe04 	addi	r4,r4,-8
   468e0:	24009726 	beq	r4,r16,46b40 <_malloc_r+0x2f4>
   468e4:	80800117 	ldw	r2,4(r16)
   468e8:	01bfff04 	movi	r6,-4
   468ec:	014003c4 	movi	r5,15
   468f0:	1184703a 	and	r2,r2,r6
   468f4:	1447c83a 	sub	r3,r2,r17
   468f8:	28c00716 	blt	r5,r3,46918 <_malloc_r+0xcc>
   468fc:	1800920e 	bge	r3,zero,46b48 <_malloc_r+0x2fc>
   46900:	84000317 	ldw	r16,12(r16)
   46904:	24008e26 	beq	r4,r16,46b40 <_malloc_r+0x2f4>
   46908:	80800117 	ldw	r2,4(r16)
   4690c:	1184703a 	and	r2,r2,r6
   46910:	1447c83a 	sub	r3,r2,r17
   46914:	28fff90e 	bge	r5,r3,468fc <__alt_data_end+0xfffe10fc>
   46918:	3809883a 	mov	r4,r7
   4691c:	01800174 	movhi	r6,5
   46920:	9c000417 	ldw	r16,16(r19)
   46924:	31861404 	addi	r6,r6,6224
   46928:	32000204 	addi	r8,r6,8
   4692c:	82013426 	beq	r16,r8,46e00 <_malloc_r+0x5b4>
   46930:	80c00117 	ldw	r3,4(r16)
   46934:	00bfff04 	movi	r2,-4
   46938:	188e703a 	and	r7,r3,r2
   4693c:	3c45c83a 	sub	r2,r7,r17
   46940:	00c003c4 	movi	r3,15
   46944:	18811f16 	blt	r3,r2,46dc4 <_malloc_r+0x578>
   46948:	32000515 	stw	r8,20(r6)
   4694c:	32000415 	stw	r8,16(r6)
   46950:	10007f0e 	bge	r2,zero,46b50 <_malloc_r+0x304>
   46954:	00807fc4 	movi	r2,511
   46958:	11c0fd36 	bltu	r2,r7,46d50 <_malloc_r+0x504>
   4695c:	3806d0fa 	srli	r3,r7,3
   46960:	01c00044 	movi	r7,1
   46964:	30800117 	ldw	r2,4(r6)
   46968:	19400044 	addi	r5,r3,1
   4696c:	294b883a 	add	r5,r5,r5
   46970:	1807d0ba 	srai	r3,r3,2
   46974:	294b883a 	add	r5,r5,r5
   46978:	294b883a 	add	r5,r5,r5
   4697c:	298b883a 	add	r5,r5,r6
   46980:	38c6983a 	sll	r3,r7,r3
   46984:	29c00017 	ldw	r7,0(r5)
   46988:	2a7ffe04 	addi	r9,r5,-8
   4698c:	1886b03a 	or	r3,r3,r2
   46990:	82400315 	stw	r9,12(r16)
   46994:	81c00215 	stw	r7,8(r16)
   46998:	30c00115 	stw	r3,4(r6)
   4699c:	2c000015 	stw	r16,0(r5)
   469a0:	3c000315 	stw	r16,12(r7)
   469a4:	2005d0ba 	srai	r2,r4,2
   469a8:	01400044 	movi	r5,1
   469ac:	288a983a 	sll	r5,r5,r2
   469b0:	19406f36 	bltu	r3,r5,46b70 <_malloc_r+0x324>
   469b4:	28c4703a 	and	r2,r5,r3
   469b8:	10000a1e 	bne	r2,zero,469e4 <_malloc_r+0x198>
   469bc:	00bfff04 	movi	r2,-4
   469c0:	294b883a 	add	r5,r5,r5
   469c4:	2088703a 	and	r4,r4,r2
   469c8:	28c4703a 	and	r2,r5,r3
   469cc:	21000104 	addi	r4,r4,4
   469d0:	1000041e 	bne	r2,zero,469e4 <_malloc_r+0x198>
   469d4:	294b883a 	add	r5,r5,r5
   469d8:	28c4703a 	and	r2,r5,r3
   469dc:	21000104 	addi	r4,r4,4
   469e0:	103ffc26 	beq	r2,zero,469d4 <__alt_data_end+0xfffe11d4>
   469e4:	02bfff04 	movi	r10,-4
   469e8:	024003c4 	movi	r9,15
   469ec:	21800044 	addi	r6,r4,1
   469f0:	318d883a 	add	r6,r6,r6
   469f4:	318d883a 	add	r6,r6,r6
   469f8:	318d883a 	add	r6,r6,r6
   469fc:	998d883a 	add	r6,r19,r6
   46a00:	333ffe04 	addi	r12,r6,-8
   46a04:	2017883a 	mov	r11,r4
   46a08:	31800104 	addi	r6,r6,4
   46a0c:	34000017 	ldw	r16,0(r6)
   46a10:	31fffd04 	addi	r7,r6,-12
   46a14:	81c0041e 	bne	r16,r7,46a28 <_malloc_r+0x1dc>
   46a18:	0000fb06 	br	46e08 <_malloc_r+0x5bc>
   46a1c:	1801030e 	bge	r3,zero,46e2c <_malloc_r+0x5e0>
   46a20:	84000317 	ldw	r16,12(r16)
   46a24:	81c0f826 	beq	r16,r7,46e08 <_malloc_r+0x5bc>
   46a28:	80800117 	ldw	r2,4(r16)
   46a2c:	1284703a 	and	r2,r2,r10
   46a30:	1447c83a 	sub	r3,r2,r17
   46a34:	48fff90e 	bge	r9,r3,46a1c <__alt_data_end+0xfffe121c>
   46a38:	80800317 	ldw	r2,12(r16)
   46a3c:	81000217 	ldw	r4,8(r16)
   46a40:	89400054 	ori	r5,r17,1
   46a44:	81400115 	stw	r5,4(r16)
   46a48:	20800315 	stw	r2,12(r4)
   46a4c:	11000215 	stw	r4,8(r2)
   46a50:	8463883a 	add	r17,r16,r17
   46a54:	9c400515 	stw	r17,20(r19)
   46a58:	9c400415 	stw	r17,16(r19)
   46a5c:	18800054 	ori	r2,r3,1
   46a60:	88800115 	stw	r2,4(r17)
   46a64:	8a000315 	stw	r8,12(r17)
   46a68:	8a000215 	stw	r8,8(r17)
   46a6c:	88e3883a 	add	r17,r17,r3
   46a70:	88c00015 	stw	r3,0(r17)
   46a74:	9009883a 	mov	r4,r18
   46a78:	004ec5c0 	call	4ec5c <__malloc_unlock>
   46a7c:	80800204 	addi	r2,r16,8
   46a80:	00001b06 	br	46af0 <_malloc_r+0x2a4>
   46a84:	04400404 	movi	r17,16
   46a88:	89402536 	bltu	r17,r5,46b20 <_malloc_r+0x2d4>
   46a8c:	004ec380 	call	4ec38 <__malloc_lock>
   46a90:	00800184 	movi	r2,6
   46a94:	01000084 	movi	r4,2
   46a98:	04c00174 	movhi	r19,5
   46a9c:	1085883a 	add	r2,r2,r2
   46aa0:	9cc61404 	addi	r19,r19,6224
   46aa4:	1085883a 	add	r2,r2,r2
   46aa8:	9885883a 	add	r2,r19,r2
   46aac:	14000117 	ldw	r16,4(r2)
   46ab0:	10fffe04 	addi	r3,r2,-8
   46ab4:	80c0d926 	beq	r16,r3,46e1c <_malloc_r+0x5d0>
   46ab8:	80c00117 	ldw	r3,4(r16)
   46abc:	81000317 	ldw	r4,12(r16)
   46ac0:	00bfff04 	movi	r2,-4
   46ac4:	1884703a 	and	r2,r3,r2
   46ac8:	81400217 	ldw	r5,8(r16)
   46acc:	8085883a 	add	r2,r16,r2
   46ad0:	10c00117 	ldw	r3,4(r2)
   46ad4:	29000315 	stw	r4,12(r5)
   46ad8:	21400215 	stw	r5,8(r4)
   46adc:	18c00054 	ori	r3,r3,1
   46ae0:	10c00115 	stw	r3,4(r2)
   46ae4:	9009883a 	mov	r4,r18
   46ae8:	004ec5c0 	call	4ec5c <__malloc_unlock>
   46aec:	80800204 	addi	r2,r16,8
   46af0:	dfc00a17 	ldw	ra,40(sp)
   46af4:	df000917 	ldw	fp,36(sp)
   46af8:	ddc00817 	ldw	r23,32(sp)
   46afc:	dd800717 	ldw	r22,28(sp)
   46b00:	dd400617 	ldw	r21,24(sp)
   46b04:	dd000517 	ldw	r20,20(sp)
   46b08:	dcc00417 	ldw	r19,16(sp)
   46b0c:	dc800317 	ldw	r18,12(sp)
   46b10:	dc400217 	ldw	r17,8(sp)
   46b14:	dc000117 	ldw	r16,4(sp)
   46b18:	dec00b04 	addi	sp,sp,44
   46b1c:	f800283a 	ret
   46b20:	00800304 	movi	r2,12
   46b24:	90800015 	stw	r2,0(r18)
   46b28:	0005883a 	mov	r2,zero
   46b2c:	003ff006 	br	46af0 <__alt_data_end+0xfffe12f0>
   46b30:	01002004 	movi	r4,128
   46b34:	02001004 	movi	r8,64
   46b38:	01c00fc4 	movi	r7,63
   46b3c:	003f6106 	br	468c4 <__alt_data_end+0xfffe10c4>
   46b40:	4009883a 	mov	r4,r8
   46b44:	003f7506 	br	4691c <__alt_data_end+0xfffe111c>
   46b48:	81000317 	ldw	r4,12(r16)
   46b4c:	003fde06 	br	46ac8 <__alt_data_end+0xfffe12c8>
   46b50:	81c5883a 	add	r2,r16,r7
   46b54:	11400117 	ldw	r5,4(r2)
   46b58:	9009883a 	mov	r4,r18
   46b5c:	29400054 	ori	r5,r5,1
   46b60:	11400115 	stw	r5,4(r2)
   46b64:	004ec5c0 	call	4ec5c <__malloc_unlock>
   46b68:	80800204 	addi	r2,r16,8
   46b6c:	003fe006 	br	46af0 <__alt_data_end+0xfffe12f0>
   46b70:	9c000217 	ldw	r16,8(r19)
   46b74:	00bfff04 	movi	r2,-4
   46b78:	85800117 	ldw	r22,4(r16)
   46b7c:	b0ac703a 	and	r22,r22,r2
   46b80:	b4400336 	bltu	r22,r17,46b90 <_malloc_r+0x344>
   46b84:	b445c83a 	sub	r2,r22,r17
   46b88:	00c003c4 	movi	r3,15
   46b8c:	18805d16 	blt	r3,r2,46d04 <_malloc_r+0x4b8>
   46b90:	05c00174 	movhi	r23,5
   46b94:	00800174 	movhi	r2,5
   46b98:	10926b04 	addi	r2,r2,18860
   46b9c:	bdcb9b04 	addi	r23,r23,11884
   46ba0:	15400017 	ldw	r21,0(r2)
   46ba4:	b8c00017 	ldw	r3,0(r23)
   46ba8:	00bfffc4 	movi	r2,-1
   46bac:	858d883a 	add	r6,r16,r22
   46bb0:	8d6b883a 	add	r21,r17,r21
   46bb4:	1880ea26 	beq	r3,r2,46f60 <_malloc_r+0x714>
   46bb8:	ad4403c4 	addi	r21,r21,4111
   46bbc:	00bc0004 	movi	r2,-4096
   46bc0:	a8aa703a 	and	r21,r21,r2
   46bc4:	a80b883a 	mov	r5,r21
   46bc8:	9009883a 	mov	r4,r18
   46bcc:	d9800015 	stw	r6,0(sp)
   46bd0:	0048b980 	call	48b98 <_sbrk_r>
   46bd4:	1029883a 	mov	r20,r2
   46bd8:	00bfffc4 	movi	r2,-1
   46bdc:	d9800017 	ldw	r6,0(sp)
   46be0:	a080e826 	beq	r20,r2,46f84 <_malloc_r+0x738>
   46be4:	a180a636 	bltu	r20,r6,46e80 <_malloc_r+0x634>
   46be8:	07000174 	movhi	fp,5
   46bec:	e7127404 	addi	fp,fp,18896
   46bf0:	e0800017 	ldw	r2,0(fp)
   46bf4:	a887883a 	add	r3,r21,r2
   46bf8:	e0c00015 	stw	r3,0(fp)
   46bfc:	3500e626 	beq	r6,r20,46f98 <_malloc_r+0x74c>
   46c00:	b9000017 	ldw	r4,0(r23)
   46c04:	00bfffc4 	movi	r2,-1
   46c08:	2080ee26 	beq	r4,r2,46fc4 <_malloc_r+0x778>
   46c0c:	a185c83a 	sub	r2,r20,r6
   46c10:	10c5883a 	add	r2,r2,r3
   46c14:	e0800015 	stw	r2,0(fp)
   46c18:	a0c001cc 	andi	r3,r20,7
   46c1c:	1800bc26 	beq	r3,zero,46f10 <_malloc_r+0x6c4>
   46c20:	a0e9c83a 	sub	r20,r20,r3
   46c24:	00840204 	movi	r2,4104
   46c28:	a5000204 	addi	r20,r20,8
   46c2c:	10c7c83a 	sub	r3,r2,r3
   46c30:	a545883a 	add	r2,r20,r21
   46c34:	1083ffcc 	andi	r2,r2,4095
   46c38:	18abc83a 	sub	r21,r3,r2
   46c3c:	a80b883a 	mov	r5,r21
   46c40:	9009883a 	mov	r4,r18
   46c44:	0048b980 	call	48b98 <_sbrk_r>
   46c48:	00ffffc4 	movi	r3,-1
   46c4c:	10c0e126 	beq	r2,r3,46fd4 <_malloc_r+0x788>
   46c50:	1505c83a 	sub	r2,r2,r20
   46c54:	1545883a 	add	r2,r2,r21
   46c58:	10800054 	ori	r2,r2,1
   46c5c:	e0c00017 	ldw	r3,0(fp)
   46c60:	9d000215 	stw	r20,8(r19)
   46c64:	a0800115 	stw	r2,4(r20)
   46c68:	a8c7883a 	add	r3,r21,r3
   46c6c:	e0c00015 	stw	r3,0(fp)
   46c70:	84c00e26 	beq	r16,r19,46cac <_malloc_r+0x460>
   46c74:	018003c4 	movi	r6,15
   46c78:	3580a72e 	bgeu	r6,r22,46f18 <_malloc_r+0x6cc>
   46c7c:	81400117 	ldw	r5,4(r16)
   46c80:	013ffe04 	movi	r4,-8
   46c84:	b0bffd04 	addi	r2,r22,-12
   46c88:	1104703a 	and	r2,r2,r4
   46c8c:	2900004c 	andi	r4,r5,1
   46c90:	2088b03a 	or	r4,r4,r2
   46c94:	81000115 	stw	r4,4(r16)
   46c98:	01400144 	movi	r5,5
   46c9c:	8089883a 	add	r4,r16,r2
   46ca0:	21400115 	stw	r5,4(r4)
   46ca4:	21400215 	stw	r5,8(r4)
   46ca8:	3080cd36 	bltu	r6,r2,46fe0 <_malloc_r+0x794>
   46cac:	00800174 	movhi	r2,5
   46cb0:	10926a04 	addi	r2,r2,18856
   46cb4:	11000017 	ldw	r4,0(r2)
   46cb8:	20c0012e 	bgeu	r4,r3,46cc0 <_malloc_r+0x474>
   46cbc:	10c00015 	stw	r3,0(r2)
   46cc0:	00800174 	movhi	r2,5
   46cc4:	10926904 	addi	r2,r2,18852
   46cc8:	11000017 	ldw	r4,0(r2)
   46ccc:	9c000217 	ldw	r16,8(r19)
   46cd0:	20c0012e 	bgeu	r4,r3,46cd8 <_malloc_r+0x48c>
   46cd4:	10c00015 	stw	r3,0(r2)
   46cd8:	80c00117 	ldw	r3,4(r16)
   46cdc:	00bfff04 	movi	r2,-4
   46ce0:	1886703a 	and	r3,r3,r2
   46ce4:	1c45c83a 	sub	r2,r3,r17
   46ce8:	1c400236 	bltu	r3,r17,46cf4 <_malloc_r+0x4a8>
   46cec:	00c003c4 	movi	r3,15
   46cf0:	18800416 	blt	r3,r2,46d04 <_malloc_r+0x4b8>
   46cf4:	9009883a 	mov	r4,r18
   46cf8:	004ec5c0 	call	4ec5c <__malloc_unlock>
   46cfc:	0005883a 	mov	r2,zero
   46d00:	003f7b06 	br	46af0 <__alt_data_end+0xfffe12f0>
   46d04:	88c00054 	ori	r3,r17,1
   46d08:	80c00115 	stw	r3,4(r16)
   46d0c:	8463883a 	add	r17,r16,r17
   46d10:	10800054 	ori	r2,r2,1
   46d14:	9c400215 	stw	r17,8(r19)
   46d18:	88800115 	stw	r2,4(r17)
   46d1c:	9009883a 	mov	r4,r18
   46d20:	004ec5c0 	call	4ec5c <__malloc_unlock>
   46d24:	80800204 	addi	r2,r16,8
   46d28:	003f7106 	br	46af0 <__alt_data_end+0xfffe12f0>
   46d2c:	00c00504 	movi	r3,20
   46d30:	18804a2e 	bgeu	r3,r2,46e5c <_malloc_r+0x610>
   46d34:	00c01504 	movi	r3,84
   46d38:	18806e36 	bltu	r3,r2,46ef4 <_malloc_r+0x6a8>
   46d3c:	8804d33a 	srli	r2,r17,12
   46d40:	12001bc4 	addi	r8,r2,111
   46d44:	11c01b84 	addi	r7,r2,110
   46d48:	4209883a 	add	r4,r8,r8
   46d4c:	003edd06 	br	468c4 <__alt_data_end+0xfffe10c4>
   46d50:	3804d27a 	srli	r2,r7,9
   46d54:	00c00104 	movi	r3,4
   46d58:	1880442e 	bgeu	r3,r2,46e6c <_malloc_r+0x620>
   46d5c:	00c00504 	movi	r3,20
   46d60:	18808136 	bltu	r3,r2,46f68 <_malloc_r+0x71c>
   46d64:	11401704 	addi	r5,r2,92
   46d68:	10c016c4 	addi	r3,r2,91
   46d6c:	294b883a 	add	r5,r5,r5
   46d70:	294b883a 	add	r5,r5,r5
   46d74:	294b883a 	add	r5,r5,r5
   46d78:	994b883a 	add	r5,r19,r5
   46d7c:	28800017 	ldw	r2,0(r5)
   46d80:	01800174 	movhi	r6,5
   46d84:	297ffe04 	addi	r5,r5,-8
   46d88:	31861404 	addi	r6,r6,6224
   46d8c:	28806526 	beq	r5,r2,46f24 <_malloc_r+0x6d8>
   46d90:	01bfff04 	movi	r6,-4
   46d94:	10c00117 	ldw	r3,4(r2)
   46d98:	1986703a 	and	r3,r3,r6
   46d9c:	38c0022e 	bgeu	r7,r3,46da8 <_malloc_r+0x55c>
   46da0:	10800217 	ldw	r2,8(r2)
   46da4:	28bffb1e 	bne	r5,r2,46d94 <__alt_data_end+0xfffe1594>
   46da8:	11400317 	ldw	r5,12(r2)
   46dac:	98c00117 	ldw	r3,4(r19)
   46db0:	81400315 	stw	r5,12(r16)
   46db4:	80800215 	stw	r2,8(r16)
   46db8:	2c000215 	stw	r16,8(r5)
   46dbc:	14000315 	stw	r16,12(r2)
   46dc0:	003ef806 	br	469a4 <__alt_data_end+0xfffe11a4>
   46dc4:	88c00054 	ori	r3,r17,1
   46dc8:	80c00115 	stw	r3,4(r16)
   46dcc:	8463883a 	add	r17,r16,r17
   46dd0:	34400515 	stw	r17,20(r6)
   46dd4:	34400415 	stw	r17,16(r6)
   46dd8:	10c00054 	ori	r3,r2,1
   46ddc:	8a000315 	stw	r8,12(r17)
   46de0:	8a000215 	stw	r8,8(r17)
   46de4:	88c00115 	stw	r3,4(r17)
   46de8:	88a3883a 	add	r17,r17,r2
   46dec:	88800015 	stw	r2,0(r17)
   46df0:	9009883a 	mov	r4,r18
   46df4:	004ec5c0 	call	4ec5c <__malloc_unlock>
   46df8:	80800204 	addi	r2,r16,8
   46dfc:	003f3c06 	br	46af0 <__alt_data_end+0xfffe12f0>
   46e00:	30c00117 	ldw	r3,4(r6)
   46e04:	003ee706 	br	469a4 <__alt_data_end+0xfffe11a4>
   46e08:	5ac00044 	addi	r11,r11,1
   46e0c:	588000cc 	andi	r2,r11,3
   46e10:	31800204 	addi	r6,r6,8
   46e14:	103efd1e 	bne	r2,zero,46a0c <__alt_data_end+0xfffe120c>
   46e18:	00002406 	br	46eac <_malloc_r+0x660>
   46e1c:	14000317 	ldw	r16,12(r2)
   46e20:	143f251e 	bne	r2,r16,46ab8 <__alt_data_end+0xfffe12b8>
   46e24:	21000084 	addi	r4,r4,2
   46e28:	003ebc06 	br	4691c <__alt_data_end+0xfffe111c>
   46e2c:	8085883a 	add	r2,r16,r2
   46e30:	10c00117 	ldw	r3,4(r2)
   46e34:	81000317 	ldw	r4,12(r16)
   46e38:	81400217 	ldw	r5,8(r16)
   46e3c:	18c00054 	ori	r3,r3,1
   46e40:	10c00115 	stw	r3,4(r2)
   46e44:	29000315 	stw	r4,12(r5)
   46e48:	21400215 	stw	r5,8(r4)
   46e4c:	9009883a 	mov	r4,r18
   46e50:	004ec5c0 	call	4ec5c <__malloc_unlock>
   46e54:	80800204 	addi	r2,r16,8
   46e58:	003f2506 	br	46af0 <__alt_data_end+0xfffe12f0>
   46e5c:	12001704 	addi	r8,r2,92
   46e60:	11c016c4 	addi	r7,r2,91
   46e64:	4209883a 	add	r4,r8,r8
   46e68:	003e9606 	br	468c4 <__alt_data_end+0xfffe10c4>
   46e6c:	3804d1ba 	srli	r2,r7,6
   46e70:	11400e44 	addi	r5,r2,57
   46e74:	10c00e04 	addi	r3,r2,56
   46e78:	294b883a 	add	r5,r5,r5
   46e7c:	003fbc06 	br	46d70 <__alt_data_end+0xfffe1570>
   46e80:	84ff5926 	beq	r16,r19,46be8 <__alt_data_end+0xfffe13e8>
   46e84:	00800174 	movhi	r2,5
   46e88:	10861404 	addi	r2,r2,6224
   46e8c:	14000217 	ldw	r16,8(r2)
   46e90:	00bfff04 	movi	r2,-4
   46e94:	80c00117 	ldw	r3,4(r16)
   46e98:	1886703a 	and	r3,r3,r2
   46e9c:	003f9106 	br	46ce4 <__alt_data_end+0xfffe14e4>
   46ea0:	60800217 	ldw	r2,8(r12)
   46ea4:	213fffc4 	addi	r4,r4,-1
   46ea8:	1300651e 	bne	r2,r12,47040 <_malloc_r+0x7f4>
   46eac:	208000cc 	andi	r2,r4,3
   46eb0:	633ffe04 	addi	r12,r12,-8
   46eb4:	103ffa1e 	bne	r2,zero,46ea0 <__alt_data_end+0xfffe16a0>
   46eb8:	98800117 	ldw	r2,4(r19)
   46ebc:	0146303a 	nor	r3,zero,r5
   46ec0:	1884703a 	and	r2,r3,r2
   46ec4:	98800115 	stw	r2,4(r19)
   46ec8:	294b883a 	add	r5,r5,r5
   46ecc:	117f2836 	bltu	r2,r5,46b70 <__alt_data_end+0xfffe1370>
   46ed0:	283f2726 	beq	r5,zero,46b70 <__alt_data_end+0xfffe1370>
   46ed4:	2886703a 	and	r3,r5,r2
   46ed8:	5809883a 	mov	r4,r11
   46edc:	183ec31e 	bne	r3,zero,469ec <__alt_data_end+0xfffe11ec>
   46ee0:	294b883a 	add	r5,r5,r5
   46ee4:	2886703a 	and	r3,r5,r2
   46ee8:	21000104 	addi	r4,r4,4
   46eec:	183ffc26 	beq	r3,zero,46ee0 <__alt_data_end+0xfffe16e0>
   46ef0:	003ebe06 	br	469ec <__alt_data_end+0xfffe11ec>
   46ef4:	00c05504 	movi	r3,340
   46ef8:	18801236 	bltu	r3,r2,46f44 <_malloc_r+0x6f8>
   46efc:	8804d3fa 	srli	r2,r17,15
   46f00:	12001e04 	addi	r8,r2,120
   46f04:	11c01dc4 	addi	r7,r2,119
   46f08:	4209883a 	add	r4,r8,r8
   46f0c:	003e6d06 	br	468c4 <__alt_data_end+0xfffe10c4>
   46f10:	00c40004 	movi	r3,4096
   46f14:	003f4606 	br	46c30 <__alt_data_end+0xfffe1430>
   46f18:	00800044 	movi	r2,1
   46f1c:	a0800115 	stw	r2,4(r20)
   46f20:	003f7406 	br	46cf4 <__alt_data_end+0xfffe14f4>
   46f24:	1805d0ba 	srai	r2,r3,2
   46f28:	01c00044 	movi	r7,1
   46f2c:	30c00117 	ldw	r3,4(r6)
   46f30:	388e983a 	sll	r7,r7,r2
   46f34:	2805883a 	mov	r2,r5
   46f38:	38c6b03a 	or	r3,r7,r3
   46f3c:	30c00115 	stw	r3,4(r6)
   46f40:	003f9b06 	br	46db0 <__alt_data_end+0xfffe15b0>
   46f44:	00c15504 	movi	r3,1364
   46f48:	18801a36 	bltu	r3,r2,46fb4 <_malloc_r+0x768>
   46f4c:	8804d4ba 	srli	r2,r17,18
   46f50:	12001f44 	addi	r8,r2,125
   46f54:	11c01f04 	addi	r7,r2,124
   46f58:	4209883a 	add	r4,r8,r8
   46f5c:	003e5906 	br	468c4 <__alt_data_end+0xfffe10c4>
   46f60:	ad400404 	addi	r21,r21,16
   46f64:	003f1706 	br	46bc4 <__alt_data_end+0xfffe13c4>
   46f68:	00c01504 	movi	r3,84
   46f6c:	18802336 	bltu	r3,r2,46ffc <_malloc_r+0x7b0>
   46f70:	3804d33a 	srli	r2,r7,12
   46f74:	11401bc4 	addi	r5,r2,111
   46f78:	10c01b84 	addi	r3,r2,110
   46f7c:	294b883a 	add	r5,r5,r5
   46f80:	003f7b06 	br	46d70 <__alt_data_end+0xfffe1570>
   46f84:	9c000217 	ldw	r16,8(r19)
   46f88:	00bfff04 	movi	r2,-4
   46f8c:	80c00117 	ldw	r3,4(r16)
   46f90:	1886703a 	and	r3,r3,r2
   46f94:	003f5306 	br	46ce4 <__alt_data_end+0xfffe14e4>
   46f98:	3083ffcc 	andi	r2,r6,4095
   46f9c:	103f181e 	bne	r2,zero,46c00 <__alt_data_end+0xfffe1400>
   46fa0:	99000217 	ldw	r4,8(r19)
   46fa4:	b545883a 	add	r2,r22,r21
   46fa8:	10800054 	ori	r2,r2,1
   46fac:	20800115 	stw	r2,4(r4)
   46fb0:	003f3e06 	br	46cac <__alt_data_end+0xfffe14ac>
   46fb4:	01003f84 	movi	r4,254
   46fb8:	02001fc4 	movi	r8,127
   46fbc:	01c01f84 	movi	r7,126
   46fc0:	003e4006 	br	468c4 <__alt_data_end+0xfffe10c4>
   46fc4:	00800174 	movhi	r2,5
   46fc8:	108b9b04 	addi	r2,r2,11884
   46fcc:	15000015 	stw	r20,0(r2)
   46fd0:	003f1106 	br	46c18 <__alt_data_end+0xfffe1418>
   46fd4:	00800044 	movi	r2,1
   46fd8:	002b883a 	mov	r21,zero
   46fdc:	003f1f06 	br	46c5c <__alt_data_end+0xfffe145c>
   46fe0:	81400204 	addi	r5,r16,8
   46fe4:	9009883a 	mov	r4,r18
   46fe8:	0045c540 	call	45c54 <_free_r>
   46fec:	00800174 	movhi	r2,5
   46ff0:	10927404 	addi	r2,r2,18896
   46ff4:	10c00017 	ldw	r3,0(r2)
   46ff8:	003f2c06 	br	46cac <__alt_data_end+0xfffe14ac>
   46ffc:	00c05504 	movi	r3,340
   47000:	18800536 	bltu	r3,r2,47018 <_malloc_r+0x7cc>
   47004:	3804d3fa 	srli	r2,r7,15
   47008:	11401e04 	addi	r5,r2,120
   4700c:	10c01dc4 	addi	r3,r2,119
   47010:	294b883a 	add	r5,r5,r5
   47014:	003f5606 	br	46d70 <__alt_data_end+0xfffe1570>
   47018:	00c15504 	movi	r3,1364
   4701c:	18800536 	bltu	r3,r2,47034 <_malloc_r+0x7e8>
   47020:	3804d4ba 	srli	r2,r7,18
   47024:	11401f44 	addi	r5,r2,125
   47028:	10c01f04 	addi	r3,r2,124
   4702c:	294b883a 	add	r5,r5,r5
   47030:	003f4f06 	br	46d70 <__alt_data_end+0xfffe1570>
   47034:	01403f84 	movi	r5,254
   47038:	00c01f84 	movi	r3,126
   4703c:	003f4c06 	br	46d70 <__alt_data_end+0xfffe1570>
   47040:	98800117 	ldw	r2,4(r19)
   47044:	003fa006 	br	46ec8 <__alt_data_end+0xfffe16c8>
   47048:	8808d0fa 	srli	r4,r17,3
   4704c:	20800044 	addi	r2,r4,1
   47050:	1085883a 	add	r2,r2,r2
   47054:	003e9006 	br	46a98 <__alt_data_end+0xfffe1298>

00047058 <memchr>:
   47058:	208000cc 	andi	r2,r4,3
   4705c:	280f883a 	mov	r7,r5
   47060:	10003426 	beq	r2,zero,47134 <memchr+0xdc>
   47064:	30bfffc4 	addi	r2,r6,-1
   47068:	30001a26 	beq	r6,zero,470d4 <memchr+0x7c>
   4706c:	20c00003 	ldbu	r3,0(r4)
   47070:	29803fcc 	andi	r6,r5,255
   47074:	30c0051e 	bne	r6,r3,4708c <memchr+0x34>
   47078:	00001806 	br	470dc <memchr+0x84>
   4707c:	10001526 	beq	r2,zero,470d4 <memchr+0x7c>
   47080:	20c00003 	ldbu	r3,0(r4)
   47084:	10bfffc4 	addi	r2,r2,-1
   47088:	30c01426 	beq	r6,r3,470dc <memchr+0x84>
   4708c:	21000044 	addi	r4,r4,1
   47090:	20c000cc 	andi	r3,r4,3
   47094:	183ff91e 	bne	r3,zero,4707c <__alt_data_end+0xfffe187c>
   47098:	020000c4 	movi	r8,3
   4709c:	40801136 	bltu	r8,r2,470e4 <memchr+0x8c>
   470a0:	10000c26 	beq	r2,zero,470d4 <memchr+0x7c>
   470a4:	20c00003 	ldbu	r3,0(r4)
   470a8:	29403fcc 	andi	r5,r5,255
   470ac:	28c00b26 	beq	r5,r3,470dc <memchr+0x84>
   470b0:	20c00044 	addi	r3,r4,1
   470b4:	39803fcc 	andi	r6,r7,255
   470b8:	2089883a 	add	r4,r4,r2
   470bc:	00000306 	br	470cc <memchr+0x74>
   470c0:	18c00044 	addi	r3,r3,1
   470c4:	197fffc3 	ldbu	r5,-1(r3)
   470c8:	31400526 	beq	r6,r5,470e0 <memchr+0x88>
   470cc:	1805883a 	mov	r2,r3
   470d0:	20fffb1e 	bne	r4,r3,470c0 <__alt_data_end+0xfffe18c0>
   470d4:	0005883a 	mov	r2,zero
   470d8:	f800283a 	ret
   470dc:	2005883a 	mov	r2,r4
   470e0:	f800283a 	ret
   470e4:	28c03fcc 	andi	r3,r5,255
   470e8:	1812923a 	slli	r9,r3,8
   470ec:	02ffbff4 	movhi	r11,65279
   470f0:	02a02074 	movhi	r10,32897
   470f4:	48d2b03a 	or	r9,r9,r3
   470f8:	4806943a 	slli	r3,r9,16
   470fc:	5affbfc4 	addi	r11,r11,-257
   47100:	52a02004 	addi	r10,r10,-32640
   47104:	48d2b03a 	or	r9,r9,r3
   47108:	20c00017 	ldw	r3,0(r4)
   4710c:	48c6f03a 	xor	r3,r9,r3
   47110:	1acd883a 	add	r6,r3,r11
   47114:	00c6303a 	nor	r3,zero,r3
   47118:	30c6703a 	and	r3,r6,r3
   4711c:	1a86703a 	and	r3,r3,r10
   47120:	183fe01e 	bne	r3,zero,470a4 <__alt_data_end+0xfffe18a4>
   47124:	10bfff04 	addi	r2,r2,-4
   47128:	21000104 	addi	r4,r4,4
   4712c:	40bff636 	bltu	r8,r2,47108 <__alt_data_end+0xfffe1908>
   47130:	003fdb06 	br	470a0 <__alt_data_end+0xfffe18a0>
   47134:	3005883a 	mov	r2,r6
   47138:	003fd706 	br	47098 <__alt_data_end+0xfffe1898>

0004713c <memcpy>:
   4713c:	defffd04 	addi	sp,sp,-12
   47140:	dfc00215 	stw	ra,8(sp)
   47144:	dc400115 	stw	r17,4(sp)
   47148:	dc000015 	stw	r16,0(sp)
   4714c:	00c003c4 	movi	r3,15
   47150:	2005883a 	mov	r2,r4
   47154:	1980452e 	bgeu	r3,r6,4726c <memcpy+0x130>
   47158:	2906b03a 	or	r3,r5,r4
   4715c:	18c000cc 	andi	r3,r3,3
   47160:	1800441e 	bne	r3,zero,47274 <memcpy+0x138>
   47164:	347ffc04 	addi	r17,r6,-16
   47168:	8822d13a 	srli	r17,r17,4
   4716c:	28c00104 	addi	r3,r5,4
   47170:	23400104 	addi	r13,r4,4
   47174:	8820913a 	slli	r16,r17,4
   47178:	2b000204 	addi	r12,r5,8
   4717c:	22c00204 	addi	r11,r4,8
   47180:	84000504 	addi	r16,r16,20
   47184:	2a800304 	addi	r10,r5,12
   47188:	22400304 	addi	r9,r4,12
   4718c:	2c21883a 	add	r16,r5,r16
   47190:	2811883a 	mov	r8,r5
   47194:	200f883a 	mov	r7,r4
   47198:	41000017 	ldw	r4,0(r8)
   4719c:	1fc00017 	ldw	ra,0(r3)
   471a0:	63c00017 	ldw	r15,0(r12)
   471a4:	39000015 	stw	r4,0(r7)
   471a8:	53800017 	ldw	r14,0(r10)
   471ac:	6fc00015 	stw	ra,0(r13)
   471b0:	5bc00015 	stw	r15,0(r11)
   471b4:	4b800015 	stw	r14,0(r9)
   471b8:	18c00404 	addi	r3,r3,16
   471bc:	39c00404 	addi	r7,r7,16
   471c0:	42000404 	addi	r8,r8,16
   471c4:	6b400404 	addi	r13,r13,16
   471c8:	63000404 	addi	r12,r12,16
   471cc:	5ac00404 	addi	r11,r11,16
   471d0:	52800404 	addi	r10,r10,16
   471d4:	4a400404 	addi	r9,r9,16
   471d8:	1c3fef1e 	bne	r3,r16,47198 <__alt_data_end+0xfffe1998>
   471dc:	89c00044 	addi	r7,r17,1
   471e0:	380e913a 	slli	r7,r7,4
   471e4:	310003cc 	andi	r4,r6,15
   471e8:	02c000c4 	movi	r11,3
   471ec:	11c7883a 	add	r3,r2,r7
   471f0:	29cb883a 	add	r5,r5,r7
   471f4:	5900212e 	bgeu	r11,r4,4727c <memcpy+0x140>
   471f8:	1813883a 	mov	r9,r3
   471fc:	2811883a 	mov	r8,r5
   47200:	200f883a 	mov	r7,r4
   47204:	42800017 	ldw	r10,0(r8)
   47208:	4a400104 	addi	r9,r9,4
   4720c:	39ffff04 	addi	r7,r7,-4
   47210:	4abfff15 	stw	r10,-4(r9)
   47214:	42000104 	addi	r8,r8,4
   47218:	59fffa36 	bltu	r11,r7,47204 <__alt_data_end+0xfffe1a04>
   4721c:	213fff04 	addi	r4,r4,-4
   47220:	2008d0ba 	srli	r4,r4,2
   47224:	318000cc 	andi	r6,r6,3
   47228:	21000044 	addi	r4,r4,1
   4722c:	2109883a 	add	r4,r4,r4
   47230:	2109883a 	add	r4,r4,r4
   47234:	1907883a 	add	r3,r3,r4
   47238:	290b883a 	add	r5,r5,r4
   4723c:	30000626 	beq	r6,zero,47258 <memcpy+0x11c>
   47240:	198d883a 	add	r6,r3,r6
   47244:	29c00003 	ldbu	r7,0(r5)
   47248:	18c00044 	addi	r3,r3,1
   4724c:	29400044 	addi	r5,r5,1
   47250:	19ffffc5 	stb	r7,-1(r3)
   47254:	19bffb1e 	bne	r3,r6,47244 <__alt_data_end+0xfffe1a44>
   47258:	dfc00217 	ldw	ra,8(sp)
   4725c:	dc400117 	ldw	r17,4(sp)
   47260:	dc000017 	ldw	r16,0(sp)
   47264:	dec00304 	addi	sp,sp,12
   47268:	f800283a 	ret
   4726c:	2007883a 	mov	r3,r4
   47270:	003ff206 	br	4723c <__alt_data_end+0xfffe1a3c>
   47274:	2007883a 	mov	r3,r4
   47278:	003ff106 	br	47240 <__alt_data_end+0xfffe1a40>
   4727c:	200d883a 	mov	r6,r4
   47280:	003fee06 	br	4723c <__alt_data_end+0xfffe1a3c>

00047284 <memmove>:
   47284:	2005883a 	mov	r2,r4
   47288:	29000b2e 	bgeu	r5,r4,472b8 <memmove+0x34>
   4728c:	298f883a 	add	r7,r5,r6
   47290:	21c0092e 	bgeu	r4,r7,472b8 <memmove+0x34>
   47294:	2187883a 	add	r3,r4,r6
   47298:	198bc83a 	sub	r5,r3,r6
   4729c:	30004826 	beq	r6,zero,473c0 <memmove+0x13c>
   472a0:	39ffffc4 	addi	r7,r7,-1
   472a4:	39000003 	ldbu	r4,0(r7)
   472a8:	18ffffc4 	addi	r3,r3,-1
   472ac:	19000005 	stb	r4,0(r3)
   472b0:	28fffb1e 	bne	r5,r3,472a0 <__alt_data_end+0xfffe1aa0>
   472b4:	f800283a 	ret
   472b8:	00c003c4 	movi	r3,15
   472bc:	1980412e 	bgeu	r3,r6,473c4 <memmove+0x140>
   472c0:	2886b03a 	or	r3,r5,r2
   472c4:	18c000cc 	andi	r3,r3,3
   472c8:	1800401e 	bne	r3,zero,473cc <memmove+0x148>
   472cc:	33fffc04 	addi	r15,r6,-16
   472d0:	781ed13a 	srli	r15,r15,4
   472d4:	28c00104 	addi	r3,r5,4
   472d8:	13400104 	addi	r13,r2,4
   472dc:	781c913a 	slli	r14,r15,4
   472e0:	2b000204 	addi	r12,r5,8
   472e4:	12c00204 	addi	r11,r2,8
   472e8:	73800504 	addi	r14,r14,20
   472ec:	2a800304 	addi	r10,r5,12
   472f0:	12400304 	addi	r9,r2,12
   472f4:	2b9d883a 	add	r14,r5,r14
   472f8:	2811883a 	mov	r8,r5
   472fc:	100f883a 	mov	r7,r2
   47300:	41000017 	ldw	r4,0(r8)
   47304:	39c00404 	addi	r7,r7,16
   47308:	18c00404 	addi	r3,r3,16
   4730c:	393ffc15 	stw	r4,-16(r7)
   47310:	193ffc17 	ldw	r4,-16(r3)
   47314:	6b400404 	addi	r13,r13,16
   47318:	5ac00404 	addi	r11,r11,16
   4731c:	693ffc15 	stw	r4,-16(r13)
   47320:	61000017 	ldw	r4,0(r12)
   47324:	4a400404 	addi	r9,r9,16
   47328:	42000404 	addi	r8,r8,16
   4732c:	593ffc15 	stw	r4,-16(r11)
   47330:	51000017 	ldw	r4,0(r10)
   47334:	63000404 	addi	r12,r12,16
   47338:	52800404 	addi	r10,r10,16
   4733c:	493ffc15 	stw	r4,-16(r9)
   47340:	1bbfef1e 	bne	r3,r14,47300 <__alt_data_end+0xfffe1b00>
   47344:	79000044 	addi	r4,r15,1
   47348:	2008913a 	slli	r4,r4,4
   4734c:	328003cc 	andi	r10,r6,15
   47350:	02c000c4 	movi	r11,3
   47354:	1107883a 	add	r3,r2,r4
   47358:	290b883a 	add	r5,r5,r4
   4735c:	5a801e2e 	bgeu	r11,r10,473d8 <memmove+0x154>
   47360:	1813883a 	mov	r9,r3
   47364:	2811883a 	mov	r8,r5
   47368:	500f883a 	mov	r7,r10
   4736c:	41000017 	ldw	r4,0(r8)
   47370:	4a400104 	addi	r9,r9,4
   47374:	39ffff04 	addi	r7,r7,-4
   47378:	493fff15 	stw	r4,-4(r9)
   4737c:	42000104 	addi	r8,r8,4
   47380:	59fffa36 	bltu	r11,r7,4736c <__alt_data_end+0xfffe1b6c>
   47384:	513fff04 	addi	r4,r10,-4
   47388:	2008d0ba 	srli	r4,r4,2
   4738c:	318000cc 	andi	r6,r6,3
   47390:	21000044 	addi	r4,r4,1
   47394:	2109883a 	add	r4,r4,r4
   47398:	2109883a 	add	r4,r4,r4
   4739c:	1907883a 	add	r3,r3,r4
   473a0:	290b883a 	add	r5,r5,r4
   473a4:	30000b26 	beq	r6,zero,473d4 <memmove+0x150>
   473a8:	198d883a 	add	r6,r3,r6
   473ac:	29c00003 	ldbu	r7,0(r5)
   473b0:	18c00044 	addi	r3,r3,1
   473b4:	29400044 	addi	r5,r5,1
   473b8:	19ffffc5 	stb	r7,-1(r3)
   473bc:	19bffb1e 	bne	r3,r6,473ac <__alt_data_end+0xfffe1bac>
   473c0:	f800283a 	ret
   473c4:	1007883a 	mov	r3,r2
   473c8:	003ff606 	br	473a4 <__alt_data_end+0xfffe1ba4>
   473cc:	1007883a 	mov	r3,r2
   473d0:	003ff506 	br	473a8 <__alt_data_end+0xfffe1ba8>
   473d4:	f800283a 	ret
   473d8:	500d883a 	mov	r6,r10
   473dc:	003ff106 	br	473a4 <__alt_data_end+0xfffe1ba4>

000473e0 <memset>:
   473e0:	20c000cc 	andi	r3,r4,3
   473e4:	2005883a 	mov	r2,r4
   473e8:	18004426 	beq	r3,zero,474fc <memset+0x11c>
   473ec:	31ffffc4 	addi	r7,r6,-1
   473f0:	30004026 	beq	r6,zero,474f4 <memset+0x114>
   473f4:	2813883a 	mov	r9,r5
   473f8:	200d883a 	mov	r6,r4
   473fc:	2007883a 	mov	r3,r4
   47400:	00000406 	br	47414 <memset+0x34>
   47404:	3a3fffc4 	addi	r8,r7,-1
   47408:	31800044 	addi	r6,r6,1
   4740c:	38003926 	beq	r7,zero,474f4 <memset+0x114>
   47410:	400f883a 	mov	r7,r8
   47414:	18c00044 	addi	r3,r3,1
   47418:	32400005 	stb	r9,0(r6)
   4741c:	1a0000cc 	andi	r8,r3,3
   47420:	403ff81e 	bne	r8,zero,47404 <__alt_data_end+0xfffe1c04>
   47424:	010000c4 	movi	r4,3
   47428:	21c02d2e 	bgeu	r4,r7,474e0 <memset+0x100>
   4742c:	29003fcc 	andi	r4,r5,255
   47430:	200c923a 	slli	r6,r4,8
   47434:	3108b03a 	or	r4,r6,r4
   47438:	200c943a 	slli	r6,r4,16
   4743c:	218cb03a 	or	r6,r4,r6
   47440:	010003c4 	movi	r4,15
   47444:	21c0182e 	bgeu	r4,r7,474a8 <memset+0xc8>
   47448:	3b3ffc04 	addi	r12,r7,-16
   4744c:	6018d13a 	srli	r12,r12,4
   47450:	1a000104 	addi	r8,r3,4
   47454:	1ac00204 	addi	r11,r3,8
   47458:	6008913a 	slli	r4,r12,4
   4745c:	1a800304 	addi	r10,r3,12
   47460:	1813883a 	mov	r9,r3
   47464:	21000504 	addi	r4,r4,20
   47468:	1909883a 	add	r4,r3,r4
   4746c:	49800015 	stw	r6,0(r9)
   47470:	41800015 	stw	r6,0(r8)
   47474:	59800015 	stw	r6,0(r11)
   47478:	51800015 	stw	r6,0(r10)
   4747c:	42000404 	addi	r8,r8,16
   47480:	4a400404 	addi	r9,r9,16
   47484:	5ac00404 	addi	r11,r11,16
   47488:	52800404 	addi	r10,r10,16
   4748c:	413ff71e 	bne	r8,r4,4746c <__alt_data_end+0xfffe1c6c>
   47490:	63000044 	addi	r12,r12,1
   47494:	6018913a 	slli	r12,r12,4
   47498:	39c003cc 	andi	r7,r7,15
   4749c:	010000c4 	movi	r4,3
   474a0:	1b07883a 	add	r3,r3,r12
   474a4:	21c00e2e 	bgeu	r4,r7,474e0 <memset+0x100>
   474a8:	1813883a 	mov	r9,r3
   474ac:	3811883a 	mov	r8,r7
   474b0:	010000c4 	movi	r4,3
   474b4:	49800015 	stw	r6,0(r9)
   474b8:	423fff04 	addi	r8,r8,-4
   474bc:	4a400104 	addi	r9,r9,4
   474c0:	223ffc36 	bltu	r4,r8,474b4 <__alt_data_end+0xfffe1cb4>
   474c4:	393fff04 	addi	r4,r7,-4
   474c8:	2008d0ba 	srli	r4,r4,2
   474cc:	39c000cc 	andi	r7,r7,3
   474d0:	21000044 	addi	r4,r4,1
   474d4:	2109883a 	add	r4,r4,r4
   474d8:	2109883a 	add	r4,r4,r4
   474dc:	1907883a 	add	r3,r3,r4
   474e0:	38000526 	beq	r7,zero,474f8 <memset+0x118>
   474e4:	19cf883a 	add	r7,r3,r7
   474e8:	19400005 	stb	r5,0(r3)
   474ec:	18c00044 	addi	r3,r3,1
   474f0:	38fffd1e 	bne	r7,r3,474e8 <__alt_data_end+0xfffe1ce8>
   474f4:	f800283a 	ret
   474f8:	f800283a 	ret
   474fc:	2007883a 	mov	r3,r4
   47500:	300f883a 	mov	r7,r6
   47504:	003fc706 	br	47424 <__alt_data_end+0xfffe1c24>

00047508 <_Balloc>:
   47508:	20801317 	ldw	r2,76(r4)
   4750c:	defffc04 	addi	sp,sp,-16
   47510:	dc400115 	stw	r17,4(sp)
   47514:	dc000015 	stw	r16,0(sp)
   47518:	dfc00315 	stw	ra,12(sp)
   4751c:	dc800215 	stw	r18,8(sp)
   47520:	2023883a 	mov	r17,r4
   47524:	2821883a 	mov	r16,r5
   47528:	10000f26 	beq	r2,zero,47568 <_Balloc+0x60>
   4752c:	8407883a 	add	r3,r16,r16
   47530:	18c7883a 	add	r3,r3,r3
   47534:	10c7883a 	add	r3,r2,r3
   47538:	18800017 	ldw	r2,0(r3)
   4753c:	10001126 	beq	r2,zero,47584 <_Balloc+0x7c>
   47540:	11000017 	ldw	r4,0(r2)
   47544:	19000015 	stw	r4,0(r3)
   47548:	10000415 	stw	zero,16(r2)
   4754c:	10000315 	stw	zero,12(r2)
   47550:	dfc00317 	ldw	ra,12(sp)
   47554:	dc800217 	ldw	r18,8(sp)
   47558:	dc400117 	ldw	r17,4(sp)
   4755c:	dc000017 	ldw	r16,0(sp)
   47560:	dec00404 	addi	sp,sp,16
   47564:	f800283a 	ret
   47568:	01800844 	movi	r6,33
   4756c:	01400104 	movi	r5,4
   47570:	004a5b00 	call	4a5b0 <_calloc_r>
   47574:	88801315 	stw	r2,76(r17)
   47578:	103fec1e 	bne	r2,zero,4752c <__alt_data_end+0xfffe1d2c>
   4757c:	0005883a 	mov	r2,zero
   47580:	003ff306 	br	47550 <__alt_data_end+0xfffe1d50>
   47584:	01400044 	movi	r5,1
   47588:	2c24983a 	sll	r18,r5,r16
   4758c:	8809883a 	mov	r4,r17
   47590:	91800144 	addi	r6,r18,5
   47594:	318d883a 	add	r6,r6,r6
   47598:	318d883a 	add	r6,r6,r6
   4759c:	004a5b00 	call	4a5b0 <_calloc_r>
   475a0:	103ff626 	beq	r2,zero,4757c <__alt_data_end+0xfffe1d7c>
   475a4:	14000115 	stw	r16,4(r2)
   475a8:	14800215 	stw	r18,8(r2)
   475ac:	003fe606 	br	47548 <__alt_data_end+0xfffe1d48>

000475b0 <_Bfree>:
   475b0:	28000826 	beq	r5,zero,475d4 <_Bfree+0x24>
   475b4:	28c00117 	ldw	r3,4(r5)
   475b8:	20801317 	ldw	r2,76(r4)
   475bc:	18c7883a 	add	r3,r3,r3
   475c0:	18c7883a 	add	r3,r3,r3
   475c4:	10c5883a 	add	r2,r2,r3
   475c8:	10c00017 	ldw	r3,0(r2)
   475cc:	28c00015 	stw	r3,0(r5)
   475d0:	11400015 	stw	r5,0(r2)
   475d4:	f800283a 	ret

000475d8 <__multadd>:
   475d8:	defff704 	addi	sp,sp,-36
   475dc:	dc800215 	stw	r18,8(sp)
   475e0:	2c800417 	ldw	r18,16(r5)
   475e4:	dd800615 	stw	r22,24(sp)
   475e8:	dd400515 	stw	r21,20(sp)
   475ec:	dd000415 	stw	r20,16(sp)
   475f0:	dcc00315 	stw	r19,12(sp)
   475f4:	dc400115 	stw	r17,4(sp)
   475f8:	dc000015 	stw	r16,0(sp)
   475fc:	dfc00815 	stw	ra,32(sp)
   47600:	ddc00715 	stw	r23,28(sp)
   47604:	2827883a 	mov	r19,r5
   47608:	2029883a 	mov	r20,r4
   4760c:	3023883a 	mov	r17,r6
   47610:	3821883a 	mov	r16,r7
   47614:	2d400504 	addi	r21,r5,20
   47618:	002d883a 	mov	r22,zero
   4761c:	adc00017 	ldw	r23,0(r21)
   47620:	880b883a 	mov	r5,r17
   47624:	ad400104 	addi	r21,r21,4
   47628:	b93fffcc 	andi	r4,r23,65535
   4762c:	00415200 	call	41520 <__mulsi3>
   47630:	b808d43a 	srli	r4,r23,16
   47634:	880b883a 	mov	r5,r17
   47638:	1421883a 	add	r16,r2,r16
   4763c:	00415200 	call	41520 <__mulsi3>
   47640:	800ed43a 	srli	r7,r16,16
   47644:	80ffffcc 	andi	r3,r16,65535
   47648:	b5800044 	addi	r22,r22,1
   4764c:	11c5883a 	add	r2,r2,r7
   47650:	100e943a 	slli	r7,r2,16
   47654:	1020d43a 	srli	r16,r2,16
   47658:	38c7883a 	add	r3,r7,r3
   4765c:	a8ffff15 	stw	r3,-4(r21)
   47660:	b4bfee16 	blt	r22,r18,4761c <__alt_data_end+0xfffe1e1c>
   47664:	80000926 	beq	r16,zero,4768c <__multadd+0xb4>
   47668:	98800217 	ldw	r2,8(r19)
   4766c:	9080130e 	bge	r18,r2,476bc <__multadd+0xe4>
   47670:	90800144 	addi	r2,r18,5
   47674:	1085883a 	add	r2,r2,r2
   47678:	1085883a 	add	r2,r2,r2
   4767c:	9885883a 	add	r2,r19,r2
   47680:	14000015 	stw	r16,0(r2)
   47684:	94800044 	addi	r18,r18,1
   47688:	9c800415 	stw	r18,16(r19)
   4768c:	9805883a 	mov	r2,r19
   47690:	dfc00817 	ldw	ra,32(sp)
   47694:	ddc00717 	ldw	r23,28(sp)
   47698:	dd800617 	ldw	r22,24(sp)
   4769c:	dd400517 	ldw	r21,20(sp)
   476a0:	dd000417 	ldw	r20,16(sp)
   476a4:	dcc00317 	ldw	r19,12(sp)
   476a8:	dc800217 	ldw	r18,8(sp)
   476ac:	dc400117 	ldw	r17,4(sp)
   476b0:	dc000017 	ldw	r16,0(sp)
   476b4:	dec00904 	addi	sp,sp,36
   476b8:	f800283a 	ret
   476bc:	99400117 	ldw	r5,4(r19)
   476c0:	a009883a 	mov	r4,r20
   476c4:	29400044 	addi	r5,r5,1
   476c8:	00475080 	call	47508 <_Balloc>
   476cc:	99800417 	ldw	r6,16(r19)
   476d0:	99400304 	addi	r5,r19,12
   476d4:	11000304 	addi	r4,r2,12
   476d8:	31800084 	addi	r6,r6,2
   476dc:	318d883a 	add	r6,r6,r6
   476e0:	318d883a 	add	r6,r6,r6
   476e4:	1023883a 	mov	r17,r2
   476e8:	004713c0 	call	4713c <memcpy>
   476ec:	98000a26 	beq	r19,zero,47718 <__multadd+0x140>
   476f0:	98c00117 	ldw	r3,4(r19)
   476f4:	a0801317 	ldw	r2,76(r20)
   476f8:	18c7883a 	add	r3,r3,r3
   476fc:	18c7883a 	add	r3,r3,r3
   47700:	10c5883a 	add	r2,r2,r3
   47704:	10c00017 	ldw	r3,0(r2)
   47708:	98c00015 	stw	r3,0(r19)
   4770c:	14c00015 	stw	r19,0(r2)
   47710:	8827883a 	mov	r19,r17
   47714:	003fd606 	br	47670 <__alt_data_end+0xfffe1e70>
   47718:	8827883a 	mov	r19,r17
   4771c:	003fd406 	br	47670 <__alt_data_end+0xfffe1e70>

00047720 <__s2b>:
   47720:	defff904 	addi	sp,sp,-28
   47724:	dc400115 	stw	r17,4(sp)
   47728:	dc000015 	stw	r16,0(sp)
   4772c:	2023883a 	mov	r17,r4
   47730:	2821883a 	mov	r16,r5
   47734:	39000204 	addi	r4,r7,8
   47738:	01400244 	movi	r5,9
   4773c:	dcc00315 	stw	r19,12(sp)
   47740:	dc800215 	stw	r18,8(sp)
   47744:	dfc00615 	stw	ra,24(sp)
   47748:	dd400515 	stw	r21,20(sp)
   4774c:	dd000415 	stw	r20,16(sp)
   47750:	3825883a 	mov	r18,r7
   47754:	3027883a 	mov	r19,r6
   47758:	004ba080 	call	4ba08 <__divsi3>
   4775c:	00c00044 	movi	r3,1
   47760:	000b883a 	mov	r5,zero
   47764:	1880030e 	bge	r3,r2,47774 <__s2b+0x54>
   47768:	18c7883a 	add	r3,r3,r3
   4776c:	29400044 	addi	r5,r5,1
   47770:	18bffd16 	blt	r3,r2,47768 <__alt_data_end+0xfffe1f68>
   47774:	8809883a 	mov	r4,r17
   47778:	00475080 	call	47508 <_Balloc>
   4777c:	d8c00717 	ldw	r3,28(sp)
   47780:	10c00515 	stw	r3,20(r2)
   47784:	00c00044 	movi	r3,1
   47788:	10c00415 	stw	r3,16(r2)
   4778c:	00c00244 	movi	r3,9
   47790:	1cc0210e 	bge	r3,r19,47818 <__s2b+0xf8>
   47794:	80eb883a 	add	r21,r16,r3
   47798:	a829883a 	mov	r20,r21
   4779c:	84e1883a 	add	r16,r16,r19
   477a0:	a1c00007 	ldb	r7,0(r20)
   477a4:	01800284 	movi	r6,10
   477a8:	a5000044 	addi	r20,r20,1
   477ac:	100b883a 	mov	r5,r2
   477b0:	39fff404 	addi	r7,r7,-48
   477b4:	8809883a 	mov	r4,r17
   477b8:	00475d80 	call	475d8 <__multadd>
   477bc:	a43ff81e 	bne	r20,r16,477a0 <__alt_data_end+0xfffe1fa0>
   477c0:	ace1883a 	add	r16,r21,r19
   477c4:	843ffe04 	addi	r16,r16,-8
   477c8:	9c800a0e 	bge	r19,r18,477f4 <__s2b+0xd4>
   477cc:	94e5c83a 	sub	r18,r18,r19
   477d0:	84a5883a 	add	r18,r16,r18
   477d4:	81c00007 	ldb	r7,0(r16)
   477d8:	01800284 	movi	r6,10
   477dc:	84000044 	addi	r16,r16,1
   477e0:	100b883a 	mov	r5,r2
   477e4:	39fff404 	addi	r7,r7,-48
   477e8:	8809883a 	mov	r4,r17
   477ec:	00475d80 	call	475d8 <__multadd>
   477f0:	84bff81e 	bne	r16,r18,477d4 <__alt_data_end+0xfffe1fd4>
   477f4:	dfc00617 	ldw	ra,24(sp)
   477f8:	dd400517 	ldw	r21,20(sp)
   477fc:	dd000417 	ldw	r20,16(sp)
   47800:	dcc00317 	ldw	r19,12(sp)
   47804:	dc800217 	ldw	r18,8(sp)
   47808:	dc400117 	ldw	r17,4(sp)
   4780c:	dc000017 	ldw	r16,0(sp)
   47810:	dec00704 	addi	sp,sp,28
   47814:	f800283a 	ret
   47818:	84000284 	addi	r16,r16,10
   4781c:	1827883a 	mov	r19,r3
   47820:	003fe906 	br	477c8 <__alt_data_end+0xfffe1fc8>

00047824 <__hi0bits>:
   47824:	20bfffec 	andhi	r2,r4,65535
   47828:	1000141e 	bne	r2,zero,4787c <__hi0bits+0x58>
   4782c:	2008943a 	slli	r4,r4,16
   47830:	00800404 	movi	r2,16
   47834:	20ffc02c 	andhi	r3,r4,65280
   47838:	1800021e 	bne	r3,zero,47844 <__hi0bits+0x20>
   4783c:	2008923a 	slli	r4,r4,8
   47840:	10800204 	addi	r2,r2,8
   47844:	20fc002c 	andhi	r3,r4,61440
   47848:	1800021e 	bne	r3,zero,47854 <__hi0bits+0x30>
   4784c:	2008913a 	slli	r4,r4,4
   47850:	10800104 	addi	r2,r2,4
   47854:	20f0002c 	andhi	r3,r4,49152
   47858:	1800031e 	bne	r3,zero,47868 <__hi0bits+0x44>
   4785c:	2109883a 	add	r4,r4,r4
   47860:	10800084 	addi	r2,r2,2
   47864:	2109883a 	add	r4,r4,r4
   47868:	20000316 	blt	r4,zero,47878 <__hi0bits+0x54>
   4786c:	2110002c 	andhi	r4,r4,16384
   47870:	2000041e 	bne	r4,zero,47884 <__hi0bits+0x60>
   47874:	00800804 	movi	r2,32
   47878:	f800283a 	ret
   4787c:	0005883a 	mov	r2,zero
   47880:	003fec06 	br	47834 <__alt_data_end+0xfffe2034>
   47884:	10800044 	addi	r2,r2,1
   47888:	f800283a 	ret

0004788c <__lo0bits>:
   4788c:	20c00017 	ldw	r3,0(r4)
   47890:	188001cc 	andi	r2,r3,7
   47894:	10000826 	beq	r2,zero,478b8 <__lo0bits+0x2c>
   47898:	1880004c 	andi	r2,r3,1
   4789c:	1000211e 	bne	r2,zero,47924 <__lo0bits+0x98>
   478a0:	1880008c 	andi	r2,r3,2
   478a4:	1000211e 	bne	r2,zero,4792c <__lo0bits+0xa0>
   478a8:	1806d0ba 	srli	r3,r3,2
   478ac:	00800084 	movi	r2,2
   478b0:	20c00015 	stw	r3,0(r4)
   478b4:	f800283a 	ret
   478b8:	18bfffcc 	andi	r2,r3,65535
   478bc:	10001326 	beq	r2,zero,4790c <__lo0bits+0x80>
   478c0:	0005883a 	mov	r2,zero
   478c4:	19403fcc 	andi	r5,r3,255
   478c8:	2800021e 	bne	r5,zero,478d4 <__lo0bits+0x48>
   478cc:	1806d23a 	srli	r3,r3,8
   478d0:	10800204 	addi	r2,r2,8
   478d4:	194003cc 	andi	r5,r3,15
   478d8:	2800021e 	bne	r5,zero,478e4 <__lo0bits+0x58>
   478dc:	1806d13a 	srli	r3,r3,4
   478e0:	10800104 	addi	r2,r2,4
   478e4:	194000cc 	andi	r5,r3,3
   478e8:	2800021e 	bne	r5,zero,478f4 <__lo0bits+0x68>
   478ec:	1806d0ba 	srli	r3,r3,2
   478f0:	10800084 	addi	r2,r2,2
   478f4:	1940004c 	andi	r5,r3,1
   478f8:	2800081e 	bne	r5,zero,4791c <__lo0bits+0x90>
   478fc:	1806d07a 	srli	r3,r3,1
   47900:	1800051e 	bne	r3,zero,47918 <__lo0bits+0x8c>
   47904:	00800804 	movi	r2,32
   47908:	f800283a 	ret
   4790c:	1806d43a 	srli	r3,r3,16
   47910:	00800404 	movi	r2,16
   47914:	003feb06 	br	478c4 <__alt_data_end+0xfffe20c4>
   47918:	10800044 	addi	r2,r2,1
   4791c:	20c00015 	stw	r3,0(r4)
   47920:	f800283a 	ret
   47924:	0005883a 	mov	r2,zero
   47928:	f800283a 	ret
   4792c:	1806d07a 	srli	r3,r3,1
   47930:	00800044 	movi	r2,1
   47934:	20c00015 	stw	r3,0(r4)
   47938:	f800283a 	ret

0004793c <__i2b>:
   4793c:	defffd04 	addi	sp,sp,-12
   47940:	dc000015 	stw	r16,0(sp)
   47944:	04000044 	movi	r16,1
   47948:	dc400115 	stw	r17,4(sp)
   4794c:	2823883a 	mov	r17,r5
   47950:	800b883a 	mov	r5,r16
   47954:	dfc00215 	stw	ra,8(sp)
   47958:	00475080 	call	47508 <_Balloc>
   4795c:	14400515 	stw	r17,20(r2)
   47960:	14000415 	stw	r16,16(r2)
   47964:	dfc00217 	ldw	ra,8(sp)
   47968:	dc400117 	ldw	r17,4(sp)
   4796c:	dc000017 	ldw	r16,0(sp)
   47970:	dec00304 	addi	sp,sp,12
   47974:	f800283a 	ret

00047978 <__multiply>:
   47978:	deffef04 	addi	sp,sp,-68
   4797c:	dc400815 	stw	r17,32(sp)
   47980:	dc000715 	stw	r16,28(sp)
   47984:	34400417 	ldw	r17,16(r6)
   47988:	2c000417 	ldw	r16,16(r5)
   4798c:	dd800d15 	stw	r22,52(sp)
   47990:	dc800915 	stw	r18,36(sp)
   47994:	dfc01015 	stw	ra,64(sp)
   47998:	df000f15 	stw	fp,60(sp)
   4799c:	ddc00e15 	stw	r23,56(sp)
   479a0:	dd400c15 	stw	r21,48(sp)
   479a4:	dd000b15 	stw	r20,44(sp)
   479a8:	dcc00a15 	stw	r19,40(sp)
   479ac:	2825883a 	mov	r18,r5
   479b0:	302d883a 	mov	r22,r6
   479b4:	8440050e 	bge	r16,r17,479cc <__multiply+0x54>
   479b8:	8007883a 	mov	r3,r16
   479bc:	3025883a 	mov	r18,r6
   479c0:	8821883a 	mov	r16,r17
   479c4:	282d883a 	mov	r22,r5
   479c8:	1823883a 	mov	r17,r3
   479cc:	90800217 	ldw	r2,8(r18)
   479d0:	8447883a 	add	r3,r16,r17
   479d4:	d8c00215 	stw	r3,8(sp)
   479d8:	91400117 	ldw	r5,4(r18)
   479dc:	10c0010e 	bge	r2,r3,479e4 <__multiply+0x6c>
   479e0:	29400044 	addi	r5,r5,1
   479e4:	00475080 	call	47508 <_Balloc>
   479e8:	d8c00217 	ldw	r3,8(sp)
   479ec:	d8800615 	stw	r2,24(sp)
   479f0:	18eb883a 	add	r21,r3,r3
   479f4:	ad6b883a 	add	r21,r21,r21
   479f8:	10c00504 	addi	r3,r2,20
   479fc:	1d6b883a 	add	r21,r3,r21
   47a00:	d8c00115 	stw	r3,4(sp)
   47a04:	dd400315 	stw	r21,12(sp)
   47a08:	1805883a 	mov	r2,r3
   47a0c:	1d40042e 	bgeu	r3,r21,47a20 <__multiply+0xa8>
   47a10:	d8c00317 	ldw	r3,12(sp)
   47a14:	10000015 	stw	zero,0(r2)
   47a18:	10800104 	addi	r2,r2,4
   47a1c:	10fffc36 	bltu	r2,r3,47a10 <__alt_data_end+0xfffe2210>
   47a20:	8c63883a 	add	r17,r17,r17
   47a24:	b5800504 	addi	r22,r22,20
   47a28:	8c63883a 	add	r17,r17,r17
   47a2c:	94800504 	addi	r18,r18,20
   47a30:	8421883a 	add	r16,r16,r16
   47a34:	b463883a 	add	r17,r22,r17
   47a38:	8421883a 	add	r16,r16,r16
   47a3c:	dd800015 	stw	r22,0(sp)
   47a40:	dc800415 	stw	r18,16(sp)
   47a44:	dc400515 	stw	r17,20(sp)
   47a48:	9429883a 	add	r20,r18,r16
   47a4c:	b4404f2e 	bgeu	r22,r17,47b8c <__multiply+0x214>
   47a50:	d8c00017 	ldw	r3,0(sp)
   47a54:	1c800017 	ldw	r18,0(r3)
   47a58:	947fffcc 	andi	r17,r18,65535
   47a5c:	88001e26 	beq	r17,zero,47ad8 <__multiply+0x160>
   47a60:	dd800117 	ldw	r22,4(sp)
   47a64:	dd400417 	ldw	r21,16(sp)
   47a68:	0027883a 	mov	r19,zero
   47a6c:	ac800017 	ldw	r18,0(r21)
   47a70:	b4000017 	ldw	r16,0(r22)
   47a74:	880b883a 	mov	r5,r17
   47a78:	913fffcc 	andi	r4,r18,65535
   47a7c:	00415200 	call	41520 <__mulsi3>
   47a80:	9008d43a 	srli	r4,r18,16
   47a84:	84bfffcc 	andi	r18,r16,65535
   47a88:	1485883a 	add	r2,r2,r18
   47a8c:	14e5883a 	add	r18,r2,r19
   47a90:	8020d43a 	srli	r16,r16,16
   47a94:	9026d43a 	srli	r19,r18,16
   47a98:	880b883a 	mov	r5,r17
   47a9c:	00415200 	call	41520 <__mulsi3>
   47aa0:	1405883a 	add	r2,r2,r16
   47aa4:	14e1883a 	add	r16,r2,r19
   47aa8:	90ffffcc 	andi	r3,r18,65535
   47aac:	8024943a 	slli	r18,r16,16
   47ab0:	ad400104 	addi	r21,r21,4
   47ab4:	b005883a 	mov	r2,r22
   47ab8:	90c6b03a 	or	r3,r18,r3
   47abc:	b0c00015 	stw	r3,0(r22)
   47ac0:	8026d43a 	srli	r19,r16,16
   47ac4:	b5800104 	addi	r22,r22,4
   47ac8:	ad3fe836 	bltu	r21,r20,47a6c <__alt_data_end+0xfffe226c>
   47acc:	d8c00017 	ldw	r3,0(sp)
   47ad0:	14c00115 	stw	r19,4(r2)
   47ad4:	1c800017 	ldw	r18,0(r3)
   47ad8:	9024d43a 	srli	r18,r18,16
   47adc:	90002226 	beq	r18,zero,47b68 <__multiply+0x1f0>
   47ae0:	d8c00117 	ldw	r3,4(sp)
   47ae4:	dd800417 	ldw	r22,16(sp)
   47ae8:	002f883a 	mov	r23,zero
   47aec:	1f000017 	ldw	fp,0(r3)
   47af0:	1823883a 	mov	r17,r3
   47af4:	182b883a 	mov	r21,r3
   47af8:	e021883a 	mov	r16,fp
   47afc:	00000106 	br	47b04 <__multiply+0x18c>
   47b00:	982b883a 	mov	r21,r19
   47b04:	b100000b 	ldhu	r4,0(r22)
   47b08:	8020d43a 	srli	r16,r16,16
   47b0c:	900b883a 	mov	r5,r18
   47b10:	00415200 	call	41520 <__mulsi3>
   47b14:	1405883a 	add	r2,r2,r16
   47b18:	15ef883a 	add	r23,r2,r23
   47b1c:	b804943a 	slli	r2,r23,16
   47b20:	e0ffffcc 	andi	r3,fp,65535
   47b24:	8c400104 	addi	r17,r17,4
   47b28:	10c6b03a 	or	r3,r2,r3
   47b2c:	88ffff15 	stw	r3,-4(r17)
   47b30:	b5800104 	addi	r22,r22,4
   47b34:	b13fff17 	ldw	r4,-4(r22)
   47b38:	acc00104 	addi	r19,r21,4
   47b3c:	900b883a 	mov	r5,r18
   47b40:	2008d43a 	srli	r4,r4,16
   47b44:	9c000017 	ldw	r16,0(r19)
   47b48:	00415200 	call	41520 <__mulsi3>
   47b4c:	b806d43a 	srli	r3,r23,16
   47b50:	813fffcc 	andi	r4,r16,65535
   47b54:	1105883a 	add	r2,r2,r4
   47b58:	10f9883a 	add	fp,r2,r3
   47b5c:	e02ed43a 	srli	r23,fp,16
   47b60:	b53fe736 	bltu	r22,r20,47b00 <__alt_data_end+0xfffe2300>
   47b64:	af000115 	stw	fp,4(r21)
   47b68:	d8c00017 	ldw	r3,0(sp)
   47b6c:	d9000517 	ldw	r4,20(sp)
   47b70:	18c00104 	addi	r3,r3,4
   47b74:	d8c00015 	stw	r3,0(sp)
   47b78:	d8c00117 	ldw	r3,4(sp)
   47b7c:	18c00104 	addi	r3,r3,4
   47b80:	d8c00115 	stw	r3,4(sp)
   47b84:	d8c00017 	ldw	r3,0(sp)
   47b88:	193fb136 	bltu	r3,r4,47a50 <__alt_data_end+0xfffe2250>
   47b8c:	d8c00217 	ldw	r3,8(sp)
   47b90:	00c00c0e 	bge	zero,r3,47bc4 <__multiply+0x24c>
   47b94:	d8c00317 	ldw	r3,12(sp)
   47b98:	18bfff17 	ldw	r2,-4(r3)
   47b9c:	1d7fff04 	addi	r21,r3,-4
   47ba0:	10000326 	beq	r2,zero,47bb0 <__multiply+0x238>
   47ba4:	00000706 	br	47bc4 <__multiply+0x24c>
   47ba8:	a8800017 	ldw	r2,0(r21)
   47bac:	1000051e 	bne	r2,zero,47bc4 <__multiply+0x24c>
   47bb0:	d8c00217 	ldw	r3,8(sp)
   47bb4:	ad7fff04 	addi	r21,r21,-4
   47bb8:	18ffffc4 	addi	r3,r3,-1
   47bbc:	d8c00215 	stw	r3,8(sp)
   47bc0:	183ff91e 	bne	r3,zero,47ba8 <__alt_data_end+0xfffe23a8>
   47bc4:	d8c00617 	ldw	r3,24(sp)
   47bc8:	d9000217 	ldw	r4,8(sp)
   47bcc:	1805883a 	mov	r2,r3
   47bd0:	19000415 	stw	r4,16(r3)
   47bd4:	dfc01017 	ldw	ra,64(sp)
   47bd8:	df000f17 	ldw	fp,60(sp)
   47bdc:	ddc00e17 	ldw	r23,56(sp)
   47be0:	dd800d17 	ldw	r22,52(sp)
   47be4:	dd400c17 	ldw	r21,48(sp)
   47be8:	dd000b17 	ldw	r20,44(sp)
   47bec:	dcc00a17 	ldw	r19,40(sp)
   47bf0:	dc800917 	ldw	r18,36(sp)
   47bf4:	dc400817 	ldw	r17,32(sp)
   47bf8:	dc000717 	ldw	r16,28(sp)
   47bfc:	dec01104 	addi	sp,sp,68
   47c00:	f800283a 	ret

00047c04 <__pow5mult>:
   47c04:	defffa04 	addi	sp,sp,-24
   47c08:	dcc00315 	stw	r19,12(sp)
   47c0c:	dc000015 	stw	r16,0(sp)
   47c10:	dfc00515 	stw	ra,20(sp)
   47c14:	dd000415 	stw	r20,16(sp)
   47c18:	dc800215 	stw	r18,8(sp)
   47c1c:	dc400115 	stw	r17,4(sp)
   47c20:	308000cc 	andi	r2,r6,3
   47c24:	3021883a 	mov	r16,r6
   47c28:	2027883a 	mov	r19,r4
   47c2c:	10002f1e 	bne	r2,zero,47cec <__pow5mult+0xe8>
   47c30:	2825883a 	mov	r18,r5
   47c34:	8021d0ba 	srai	r16,r16,2
   47c38:	80001a26 	beq	r16,zero,47ca4 <__pow5mult+0xa0>
   47c3c:	9c401217 	ldw	r17,72(r19)
   47c40:	8800061e 	bne	r17,zero,47c5c <__pow5mult+0x58>
   47c44:	00003406 	br	47d18 <__pow5mult+0x114>
   47c48:	8021d07a 	srai	r16,r16,1
   47c4c:	80001526 	beq	r16,zero,47ca4 <__pow5mult+0xa0>
   47c50:	88800017 	ldw	r2,0(r17)
   47c54:	10001c26 	beq	r2,zero,47cc8 <__pow5mult+0xc4>
   47c58:	1023883a 	mov	r17,r2
   47c5c:	8080004c 	andi	r2,r16,1
   47c60:	103ff926 	beq	r2,zero,47c48 <__alt_data_end+0xfffe2448>
   47c64:	880d883a 	mov	r6,r17
   47c68:	900b883a 	mov	r5,r18
   47c6c:	9809883a 	mov	r4,r19
   47c70:	00479780 	call	47978 <__multiply>
   47c74:	90001b26 	beq	r18,zero,47ce4 <__pow5mult+0xe0>
   47c78:	91000117 	ldw	r4,4(r18)
   47c7c:	98c01317 	ldw	r3,76(r19)
   47c80:	8021d07a 	srai	r16,r16,1
   47c84:	2109883a 	add	r4,r4,r4
   47c88:	2109883a 	add	r4,r4,r4
   47c8c:	1907883a 	add	r3,r3,r4
   47c90:	19000017 	ldw	r4,0(r3)
   47c94:	91000015 	stw	r4,0(r18)
   47c98:	1c800015 	stw	r18,0(r3)
   47c9c:	1025883a 	mov	r18,r2
   47ca0:	803feb1e 	bne	r16,zero,47c50 <__alt_data_end+0xfffe2450>
   47ca4:	9005883a 	mov	r2,r18
   47ca8:	dfc00517 	ldw	ra,20(sp)
   47cac:	dd000417 	ldw	r20,16(sp)
   47cb0:	dcc00317 	ldw	r19,12(sp)
   47cb4:	dc800217 	ldw	r18,8(sp)
   47cb8:	dc400117 	ldw	r17,4(sp)
   47cbc:	dc000017 	ldw	r16,0(sp)
   47cc0:	dec00604 	addi	sp,sp,24
   47cc4:	f800283a 	ret
   47cc8:	880d883a 	mov	r6,r17
   47ccc:	880b883a 	mov	r5,r17
   47cd0:	9809883a 	mov	r4,r19
   47cd4:	00479780 	call	47978 <__multiply>
   47cd8:	88800015 	stw	r2,0(r17)
   47cdc:	10000015 	stw	zero,0(r2)
   47ce0:	003fdd06 	br	47c58 <__alt_data_end+0xfffe2458>
   47ce4:	1025883a 	mov	r18,r2
   47ce8:	003fd706 	br	47c48 <__alt_data_end+0xfffe2448>
   47cec:	10bfffc4 	addi	r2,r2,-1
   47cf0:	1085883a 	add	r2,r2,r2
   47cf4:	00c00174 	movhi	r3,5
   47cf8:	18c49104 	addi	r3,r3,4676
   47cfc:	1085883a 	add	r2,r2,r2
   47d00:	1885883a 	add	r2,r3,r2
   47d04:	11800017 	ldw	r6,0(r2)
   47d08:	000f883a 	mov	r7,zero
   47d0c:	00475d80 	call	475d8 <__multadd>
   47d10:	1025883a 	mov	r18,r2
   47d14:	003fc706 	br	47c34 <__alt_data_end+0xfffe2434>
   47d18:	05000044 	movi	r20,1
   47d1c:	a00b883a 	mov	r5,r20
   47d20:	9809883a 	mov	r4,r19
   47d24:	00475080 	call	47508 <_Balloc>
   47d28:	1023883a 	mov	r17,r2
   47d2c:	00809c44 	movi	r2,625
   47d30:	88800515 	stw	r2,20(r17)
   47d34:	8d000415 	stw	r20,16(r17)
   47d38:	9c401215 	stw	r17,72(r19)
   47d3c:	88000015 	stw	zero,0(r17)
   47d40:	003fc606 	br	47c5c <__alt_data_end+0xfffe245c>

00047d44 <__lshift>:
   47d44:	defff904 	addi	sp,sp,-28
   47d48:	dd400515 	stw	r21,20(sp)
   47d4c:	dcc00315 	stw	r19,12(sp)
   47d50:	302bd17a 	srai	r21,r6,5
   47d54:	2cc00417 	ldw	r19,16(r5)
   47d58:	28800217 	ldw	r2,8(r5)
   47d5c:	dd000415 	stw	r20,16(sp)
   47d60:	ace7883a 	add	r19,r21,r19
   47d64:	dc800215 	stw	r18,8(sp)
   47d68:	dc400115 	stw	r17,4(sp)
   47d6c:	dc000015 	stw	r16,0(sp)
   47d70:	dfc00615 	stw	ra,24(sp)
   47d74:	9c000044 	addi	r16,r19,1
   47d78:	2823883a 	mov	r17,r5
   47d7c:	3029883a 	mov	r20,r6
   47d80:	2025883a 	mov	r18,r4
   47d84:	29400117 	ldw	r5,4(r5)
   47d88:	1400030e 	bge	r2,r16,47d98 <__lshift+0x54>
   47d8c:	1085883a 	add	r2,r2,r2
   47d90:	29400044 	addi	r5,r5,1
   47d94:	143ffd16 	blt	r2,r16,47d8c <__alt_data_end+0xfffe258c>
   47d98:	9009883a 	mov	r4,r18
   47d9c:	00475080 	call	47508 <_Balloc>
   47da0:	10c00504 	addi	r3,r2,20
   47da4:	0540070e 	bge	zero,r21,47dc4 <__lshift+0x80>
   47da8:	ad6b883a 	add	r21,r21,r21
   47dac:	ad6b883a 	add	r21,r21,r21
   47db0:	1809883a 	mov	r4,r3
   47db4:	1d47883a 	add	r3,r3,r21
   47db8:	20000015 	stw	zero,0(r4)
   47dbc:	21000104 	addi	r4,r4,4
   47dc0:	193ffd1e 	bne	r3,r4,47db8 <__alt_data_end+0xfffe25b8>
   47dc4:	8a000417 	ldw	r8,16(r17)
   47dc8:	89000504 	addi	r4,r17,20
   47dcc:	a18007cc 	andi	r6,r20,31
   47dd0:	4211883a 	add	r8,r8,r8
   47dd4:	4211883a 	add	r8,r8,r8
   47dd8:	2211883a 	add	r8,r4,r8
   47ddc:	30002326 	beq	r6,zero,47e6c <__lshift+0x128>
   47de0:	02400804 	movi	r9,32
   47de4:	4993c83a 	sub	r9,r9,r6
   47de8:	000b883a 	mov	r5,zero
   47dec:	21c00017 	ldw	r7,0(r4)
   47df0:	1815883a 	mov	r10,r3
   47df4:	18c00104 	addi	r3,r3,4
   47df8:	398e983a 	sll	r7,r7,r6
   47dfc:	21000104 	addi	r4,r4,4
   47e00:	394ab03a 	or	r5,r7,r5
   47e04:	197fff15 	stw	r5,-4(r3)
   47e08:	217fff17 	ldw	r5,-4(r4)
   47e0c:	2a4ad83a 	srl	r5,r5,r9
   47e10:	223ff636 	bltu	r4,r8,47dec <__alt_data_end+0xfffe25ec>
   47e14:	51400115 	stw	r5,4(r10)
   47e18:	28001a1e 	bne	r5,zero,47e84 <__lshift+0x140>
   47e1c:	843fffc4 	addi	r16,r16,-1
   47e20:	14000415 	stw	r16,16(r2)
   47e24:	88000826 	beq	r17,zero,47e48 <__lshift+0x104>
   47e28:	89000117 	ldw	r4,4(r17)
   47e2c:	90c01317 	ldw	r3,76(r18)
   47e30:	2109883a 	add	r4,r4,r4
   47e34:	2109883a 	add	r4,r4,r4
   47e38:	1907883a 	add	r3,r3,r4
   47e3c:	19000017 	ldw	r4,0(r3)
   47e40:	89000015 	stw	r4,0(r17)
   47e44:	1c400015 	stw	r17,0(r3)
   47e48:	dfc00617 	ldw	ra,24(sp)
   47e4c:	dd400517 	ldw	r21,20(sp)
   47e50:	dd000417 	ldw	r20,16(sp)
   47e54:	dcc00317 	ldw	r19,12(sp)
   47e58:	dc800217 	ldw	r18,8(sp)
   47e5c:	dc400117 	ldw	r17,4(sp)
   47e60:	dc000017 	ldw	r16,0(sp)
   47e64:	dec00704 	addi	sp,sp,28
   47e68:	f800283a 	ret
   47e6c:	21400017 	ldw	r5,0(r4)
   47e70:	18c00104 	addi	r3,r3,4
   47e74:	21000104 	addi	r4,r4,4
   47e78:	197fff15 	stw	r5,-4(r3)
   47e7c:	223ffb36 	bltu	r4,r8,47e6c <__alt_data_end+0xfffe266c>
   47e80:	003fe606 	br	47e1c <__alt_data_end+0xfffe261c>
   47e84:	9c000084 	addi	r16,r19,2
   47e88:	003fe406 	br	47e1c <__alt_data_end+0xfffe261c>

00047e8c <__mcmp>:
   47e8c:	20800417 	ldw	r2,16(r4)
   47e90:	28c00417 	ldw	r3,16(r5)
   47e94:	10c5c83a 	sub	r2,r2,r3
   47e98:	1000111e 	bne	r2,zero,47ee0 <__mcmp+0x54>
   47e9c:	18c7883a 	add	r3,r3,r3
   47ea0:	18c7883a 	add	r3,r3,r3
   47ea4:	21000504 	addi	r4,r4,20
   47ea8:	29400504 	addi	r5,r5,20
   47eac:	20c5883a 	add	r2,r4,r3
   47eb0:	28cb883a 	add	r5,r5,r3
   47eb4:	00000106 	br	47ebc <__mcmp+0x30>
   47eb8:	20800a2e 	bgeu	r4,r2,47ee4 <__mcmp+0x58>
   47ebc:	10bfff04 	addi	r2,r2,-4
   47ec0:	297fff04 	addi	r5,r5,-4
   47ec4:	11800017 	ldw	r6,0(r2)
   47ec8:	28c00017 	ldw	r3,0(r5)
   47ecc:	30fffa26 	beq	r6,r3,47eb8 <__alt_data_end+0xfffe26b8>
   47ed0:	30c00236 	bltu	r6,r3,47edc <__mcmp+0x50>
   47ed4:	00800044 	movi	r2,1
   47ed8:	f800283a 	ret
   47edc:	00bfffc4 	movi	r2,-1
   47ee0:	f800283a 	ret
   47ee4:	0005883a 	mov	r2,zero
   47ee8:	f800283a 	ret

00047eec <__mdiff>:
   47eec:	28c00417 	ldw	r3,16(r5)
   47ef0:	30800417 	ldw	r2,16(r6)
   47ef4:	defffa04 	addi	sp,sp,-24
   47ef8:	dcc00315 	stw	r19,12(sp)
   47efc:	dc800215 	stw	r18,8(sp)
   47f00:	dfc00515 	stw	ra,20(sp)
   47f04:	dd000415 	stw	r20,16(sp)
   47f08:	dc400115 	stw	r17,4(sp)
   47f0c:	dc000015 	stw	r16,0(sp)
   47f10:	1887c83a 	sub	r3,r3,r2
   47f14:	2825883a 	mov	r18,r5
   47f18:	3027883a 	mov	r19,r6
   47f1c:	1800141e 	bne	r3,zero,47f70 <__mdiff+0x84>
   47f20:	1085883a 	add	r2,r2,r2
   47f24:	1085883a 	add	r2,r2,r2
   47f28:	2a000504 	addi	r8,r5,20
   47f2c:	34000504 	addi	r16,r6,20
   47f30:	4087883a 	add	r3,r8,r2
   47f34:	8085883a 	add	r2,r16,r2
   47f38:	00000106 	br	47f40 <__mdiff+0x54>
   47f3c:	40c0592e 	bgeu	r8,r3,480a4 <__mdiff+0x1b8>
   47f40:	18ffff04 	addi	r3,r3,-4
   47f44:	10bfff04 	addi	r2,r2,-4
   47f48:	19c00017 	ldw	r7,0(r3)
   47f4c:	11400017 	ldw	r5,0(r2)
   47f50:	397ffa26 	beq	r7,r5,47f3c <__alt_data_end+0xfffe273c>
   47f54:	3940592e 	bgeu	r7,r5,480bc <__mdiff+0x1d0>
   47f58:	9005883a 	mov	r2,r18
   47f5c:	4023883a 	mov	r17,r8
   47f60:	9825883a 	mov	r18,r19
   47f64:	05000044 	movi	r20,1
   47f68:	1027883a 	mov	r19,r2
   47f6c:	00000406 	br	47f80 <__mdiff+0x94>
   47f70:	18005616 	blt	r3,zero,480cc <__mdiff+0x1e0>
   47f74:	34400504 	addi	r17,r6,20
   47f78:	2c000504 	addi	r16,r5,20
   47f7c:	0029883a 	mov	r20,zero
   47f80:	91400117 	ldw	r5,4(r18)
   47f84:	00475080 	call	47508 <_Balloc>
   47f88:	92400417 	ldw	r9,16(r18)
   47f8c:	9b000417 	ldw	r12,16(r19)
   47f90:	12c00504 	addi	r11,r2,20
   47f94:	4a51883a 	add	r8,r9,r9
   47f98:	6319883a 	add	r12,r12,r12
   47f9c:	4211883a 	add	r8,r8,r8
   47fa0:	6319883a 	add	r12,r12,r12
   47fa4:	15000315 	stw	r20,12(r2)
   47fa8:	8211883a 	add	r8,r16,r8
   47fac:	8b19883a 	add	r12,r17,r12
   47fb0:	0007883a 	mov	r3,zero
   47fb4:	81400017 	ldw	r5,0(r16)
   47fb8:	89c00017 	ldw	r7,0(r17)
   47fbc:	59800104 	addi	r6,r11,4
   47fc0:	293fffcc 	andi	r4,r5,65535
   47fc4:	20c7883a 	add	r3,r4,r3
   47fc8:	393fffcc 	andi	r4,r7,65535
   47fcc:	1909c83a 	sub	r4,r3,r4
   47fd0:	280ad43a 	srli	r5,r5,16
   47fd4:	380ed43a 	srli	r7,r7,16
   47fd8:	2007d43a 	srai	r3,r4,16
   47fdc:	213fffcc 	andi	r4,r4,65535
   47fe0:	29cbc83a 	sub	r5,r5,r7
   47fe4:	28c7883a 	add	r3,r5,r3
   47fe8:	180a943a 	slli	r5,r3,16
   47fec:	8c400104 	addi	r17,r17,4
   47ff0:	84000104 	addi	r16,r16,4
   47ff4:	2908b03a 	or	r4,r5,r4
   47ff8:	59000015 	stw	r4,0(r11)
   47ffc:	1807d43a 	srai	r3,r3,16
   48000:	3015883a 	mov	r10,r6
   48004:	3017883a 	mov	r11,r6
   48008:	8b3fea36 	bltu	r17,r12,47fb4 <__alt_data_end+0xfffe27b4>
   4800c:	8200162e 	bgeu	r16,r8,48068 <__mdiff+0x17c>
   48010:	8017883a 	mov	r11,r16
   48014:	59400017 	ldw	r5,0(r11)
   48018:	31800104 	addi	r6,r6,4
   4801c:	5ac00104 	addi	r11,r11,4
   48020:	293fffcc 	andi	r4,r5,65535
   48024:	20c7883a 	add	r3,r4,r3
   48028:	280ed43a 	srli	r7,r5,16
   4802c:	180bd43a 	srai	r5,r3,16
   48030:	193fffcc 	andi	r4,r3,65535
   48034:	3947883a 	add	r3,r7,r5
   48038:	180a943a 	slli	r5,r3,16
   4803c:	1807d43a 	srai	r3,r3,16
   48040:	2908b03a 	or	r4,r5,r4
   48044:	313fff15 	stw	r4,-4(r6)
   48048:	5a3ff236 	bltu	r11,r8,48014 <__alt_data_end+0xfffe2814>
   4804c:	0406303a 	nor	r3,zero,r16
   48050:	1a07883a 	add	r3,r3,r8
   48054:	1806d0ba 	srli	r3,r3,2
   48058:	18c00044 	addi	r3,r3,1
   4805c:	18c7883a 	add	r3,r3,r3
   48060:	18c7883a 	add	r3,r3,r3
   48064:	50d5883a 	add	r10,r10,r3
   48068:	50ffff04 	addi	r3,r10,-4
   4806c:	2000041e 	bne	r4,zero,48080 <__mdiff+0x194>
   48070:	18ffff04 	addi	r3,r3,-4
   48074:	19000017 	ldw	r4,0(r3)
   48078:	4a7fffc4 	addi	r9,r9,-1
   4807c:	203ffc26 	beq	r4,zero,48070 <__alt_data_end+0xfffe2870>
   48080:	12400415 	stw	r9,16(r2)
   48084:	dfc00517 	ldw	ra,20(sp)
   48088:	dd000417 	ldw	r20,16(sp)
   4808c:	dcc00317 	ldw	r19,12(sp)
   48090:	dc800217 	ldw	r18,8(sp)
   48094:	dc400117 	ldw	r17,4(sp)
   48098:	dc000017 	ldw	r16,0(sp)
   4809c:	dec00604 	addi	sp,sp,24
   480a0:	f800283a 	ret
   480a4:	000b883a 	mov	r5,zero
   480a8:	00475080 	call	47508 <_Balloc>
   480ac:	00c00044 	movi	r3,1
   480b0:	10c00415 	stw	r3,16(r2)
   480b4:	10000515 	stw	zero,20(r2)
   480b8:	003ff206 	br	48084 <__alt_data_end+0xfffe2884>
   480bc:	8023883a 	mov	r17,r16
   480c0:	0029883a 	mov	r20,zero
   480c4:	4021883a 	mov	r16,r8
   480c8:	003fad06 	br	47f80 <__alt_data_end+0xfffe2780>
   480cc:	9005883a 	mov	r2,r18
   480d0:	94400504 	addi	r17,r18,20
   480d4:	9c000504 	addi	r16,r19,20
   480d8:	9825883a 	mov	r18,r19
   480dc:	05000044 	movi	r20,1
   480e0:	1027883a 	mov	r19,r2
   480e4:	003fa606 	br	47f80 <__alt_data_end+0xfffe2780>

000480e8 <__ulp>:
   480e8:	295ffc2c 	andhi	r5,r5,32752
   480ec:	00bf3034 	movhi	r2,64704
   480f0:	2887883a 	add	r3,r5,r2
   480f4:	00c0020e 	bge	zero,r3,48100 <__ulp+0x18>
   480f8:	0005883a 	mov	r2,zero
   480fc:	f800283a 	ret
   48100:	00c7c83a 	sub	r3,zero,r3
   48104:	1807d53a 	srai	r3,r3,20
   48108:	008004c4 	movi	r2,19
   4810c:	10c00b0e 	bge	r2,r3,4813c <__ulp+0x54>
   48110:	18bffb04 	addi	r2,r3,-20
   48114:	01000784 	movi	r4,30
   48118:	0007883a 	mov	r3,zero
   4811c:	20800516 	blt	r4,r2,48134 <__ulp+0x4c>
   48120:	010007c4 	movi	r4,31
   48124:	2089c83a 	sub	r4,r4,r2
   48128:	00800044 	movi	r2,1
   4812c:	1104983a 	sll	r2,r2,r4
   48130:	f800283a 	ret
   48134:	00800044 	movi	r2,1
   48138:	f800283a 	ret
   4813c:	01400234 	movhi	r5,8
   48140:	28c7d83a 	sra	r3,r5,r3
   48144:	0005883a 	mov	r2,zero
   48148:	f800283a 	ret

0004814c <__b2d>:
   4814c:	defffa04 	addi	sp,sp,-24
   48150:	dc000015 	stw	r16,0(sp)
   48154:	24000417 	ldw	r16,16(r4)
   48158:	dc400115 	stw	r17,4(sp)
   4815c:	24400504 	addi	r17,r4,20
   48160:	8421883a 	add	r16,r16,r16
   48164:	8421883a 	add	r16,r16,r16
   48168:	8c21883a 	add	r16,r17,r16
   4816c:	dc800215 	stw	r18,8(sp)
   48170:	84bfff17 	ldw	r18,-4(r16)
   48174:	dd000415 	stw	r20,16(sp)
   48178:	dcc00315 	stw	r19,12(sp)
   4817c:	9009883a 	mov	r4,r18
   48180:	2829883a 	mov	r20,r5
   48184:	dfc00515 	stw	ra,20(sp)
   48188:	00478240 	call	47824 <__hi0bits>
   4818c:	00c00804 	movi	r3,32
   48190:	1889c83a 	sub	r4,r3,r2
   48194:	a1000015 	stw	r4,0(r20)
   48198:	01000284 	movi	r4,10
   4819c:	84ffff04 	addi	r19,r16,-4
   481a0:	20801216 	blt	r4,r2,481ec <__b2d+0xa0>
   481a4:	018002c4 	movi	r6,11
   481a8:	308dc83a 	sub	r6,r6,r2
   481ac:	9186d83a 	srl	r3,r18,r6
   481b0:	18cffc34 	orhi	r3,r3,16368
   481b4:	8cc0212e 	bgeu	r17,r19,4823c <__b2d+0xf0>
   481b8:	813ffe17 	ldw	r4,-8(r16)
   481bc:	218cd83a 	srl	r6,r4,r6
   481c0:	10800544 	addi	r2,r2,21
   481c4:	9084983a 	sll	r2,r18,r2
   481c8:	1184b03a 	or	r2,r2,r6
   481cc:	dfc00517 	ldw	ra,20(sp)
   481d0:	dd000417 	ldw	r20,16(sp)
   481d4:	dcc00317 	ldw	r19,12(sp)
   481d8:	dc800217 	ldw	r18,8(sp)
   481dc:	dc400117 	ldw	r17,4(sp)
   481e0:	dc000017 	ldw	r16,0(sp)
   481e4:	dec00604 	addi	sp,sp,24
   481e8:	f800283a 	ret
   481ec:	8cc00f2e 	bgeu	r17,r19,4822c <__b2d+0xe0>
   481f0:	117ffd44 	addi	r5,r2,-11
   481f4:	80bffe17 	ldw	r2,-8(r16)
   481f8:	28000e26 	beq	r5,zero,48234 <__b2d+0xe8>
   481fc:	1949c83a 	sub	r4,r3,r5
   48200:	9164983a 	sll	r18,r18,r5
   48204:	1106d83a 	srl	r3,r2,r4
   48208:	81bffe04 	addi	r6,r16,-8
   4820c:	948ffc34 	orhi	r18,r18,16368
   48210:	90c6b03a 	or	r3,r18,r3
   48214:	89800e2e 	bgeu	r17,r6,48250 <__b2d+0x104>
   48218:	81bffd17 	ldw	r6,-12(r16)
   4821c:	1144983a 	sll	r2,r2,r5
   48220:	310ad83a 	srl	r5,r6,r4
   48224:	2884b03a 	or	r2,r5,r2
   48228:	003fe806 	br	481cc <__alt_data_end+0xfffe29cc>
   4822c:	10bffd44 	addi	r2,r2,-11
   48230:	1000041e 	bne	r2,zero,48244 <__b2d+0xf8>
   48234:	90cffc34 	orhi	r3,r18,16368
   48238:	003fe406 	br	481cc <__alt_data_end+0xfffe29cc>
   4823c:	000d883a 	mov	r6,zero
   48240:	003fdf06 	br	481c0 <__alt_data_end+0xfffe29c0>
   48244:	90a4983a 	sll	r18,r18,r2
   48248:	0005883a 	mov	r2,zero
   4824c:	003ff906 	br	48234 <__alt_data_end+0xfffe2a34>
   48250:	1144983a 	sll	r2,r2,r5
   48254:	003fdd06 	br	481cc <__alt_data_end+0xfffe29cc>

00048258 <__d2b>:
   48258:	defff804 	addi	sp,sp,-32
   4825c:	dc000215 	stw	r16,8(sp)
   48260:	3021883a 	mov	r16,r6
   48264:	dc400315 	stw	r17,12(sp)
   48268:	8022907a 	slli	r17,r16,1
   4826c:	dd000615 	stw	r20,24(sp)
   48270:	2829883a 	mov	r20,r5
   48274:	01400044 	movi	r5,1
   48278:	dcc00515 	stw	r19,20(sp)
   4827c:	dc800415 	stw	r18,16(sp)
   48280:	dfc00715 	stw	ra,28(sp)
   48284:	3825883a 	mov	r18,r7
   48288:	8822d57a 	srli	r17,r17,21
   4828c:	00475080 	call	47508 <_Balloc>
   48290:	1027883a 	mov	r19,r2
   48294:	00800434 	movhi	r2,16
   48298:	10bfffc4 	addi	r2,r2,-1
   4829c:	808c703a 	and	r6,r16,r2
   482a0:	88000126 	beq	r17,zero,482a8 <__d2b+0x50>
   482a4:	31800434 	orhi	r6,r6,16
   482a8:	d9800015 	stw	r6,0(sp)
   482ac:	a0002426 	beq	r20,zero,48340 <__d2b+0xe8>
   482b0:	d9000104 	addi	r4,sp,4
   482b4:	dd000115 	stw	r20,4(sp)
   482b8:	004788c0 	call	4788c <__lo0bits>
   482bc:	d8c00017 	ldw	r3,0(sp)
   482c0:	10002f1e 	bne	r2,zero,48380 <__d2b+0x128>
   482c4:	d9000117 	ldw	r4,4(sp)
   482c8:	99000515 	stw	r4,20(r19)
   482cc:	1821003a 	cmpeq	r16,r3,zero
   482d0:	01000084 	movi	r4,2
   482d4:	2421c83a 	sub	r16,r4,r16
   482d8:	98c00615 	stw	r3,24(r19)
   482dc:	9c000415 	stw	r16,16(r19)
   482e0:	88001f1e 	bne	r17,zero,48360 <__d2b+0x108>
   482e4:	10bef384 	addi	r2,r2,-1074
   482e8:	90800015 	stw	r2,0(r18)
   482ec:	00900034 	movhi	r2,16384
   482f0:	10bfffc4 	addi	r2,r2,-1
   482f4:	8085883a 	add	r2,r16,r2
   482f8:	1085883a 	add	r2,r2,r2
   482fc:	1085883a 	add	r2,r2,r2
   48300:	9885883a 	add	r2,r19,r2
   48304:	11000517 	ldw	r4,20(r2)
   48308:	8020917a 	slli	r16,r16,5
   4830c:	00478240 	call	47824 <__hi0bits>
   48310:	d8c00817 	ldw	r3,32(sp)
   48314:	8085c83a 	sub	r2,r16,r2
   48318:	18800015 	stw	r2,0(r3)
   4831c:	9805883a 	mov	r2,r19
   48320:	dfc00717 	ldw	ra,28(sp)
   48324:	dd000617 	ldw	r20,24(sp)
   48328:	dcc00517 	ldw	r19,20(sp)
   4832c:	dc800417 	ldw	r18,16(sp)
   48330:	dc400317 	ldw	r17,12(sp)
   48334:	dc000217 	ldw	r16,8(sp)
   48338:	dec00804 	addi	sp,sp,32
   4833c:	f800283a 	ret
   48340:	d809883a 	mov	r4,sp
   48344:	004788c0 	call	4788c <__lo0bits>
   48348:	d8c00017 	ldw	r3,0(sp)
   4834c:	04000044 	movi	r16,1
   48350:	9c000415 	stw	r16,16(r19)
   48354:	98c00515 	stw	r3,20(r19)
   48358:	10800804 	addi	r2,r2,32
   4835c:	883fe126 	beq	r17,zero,482e4 <__alt_data_end+0xfffe2ae4>
   48360:	00c00d44 	movi	r3,53
   48364:	8c7ef344 	addi	r17,r17,-1075
   48368:	88a3883a 	add	r17,r17,r2
   4836c:	1885c83a 	sub	r2,r3,r2
   48370:	d8c00817 	ldw	r3,32(sp)
   48374:	94400015 	stw	r17,0(r18)
   48378:	18800015 	stw	r2,0(r3)
   4837c:	003fe706 	br	4831c <__alt_data_end+0xfffe2b1c>
   48380:	01000804 	movi	r4,32
   48384:	2089c83a 	sub	r4,r4,r2
   48388:	1908983a 	sll	r4,r3,r4
   4838c:	d9400117 	ldw	r5,4(sp)
   48390:	1886d83a 	srl	r3,r3,r2
   48394:	2148b03a 	or	r4,r4,r5
   48398:	99000515 	stw	r4,20(r19)
   4839c:	d8c00015 	stw	r3,0(sp)
   483a0:	003fca06 	br	482cc <__alt_data_end+0xfffe2acc>

000483a4 <__ratio>:
   483a4:	defff904 	addi	sp,sp,-28
   483a8:	dc400315 	stw	r17,12(sp)
   483ac:	2823883a 	mov	r17,r5
   483b0:	d9400104 	addi	r5,sp,4
   483b4:	dfc00615 	stw	ra,24(sp)
   483b8:	dcc00515 	stw	r19,20(sp)
   483bc:	dc800415 	stw	r18,16(sp)
   483c0:	2027883a 	mov	r19,r4
   483c4:	dc000215 	stw	r16,8(sp)
   483c8:	004814c0 	call	4814c <__b2d>
   483cc:	d80b883a 	mov	r5,sp
   483d0:	8809883a 	mov	r4,r17
   483d4:	1025883a 	mov	r18,r2
   483d8:	1821883a 	mov	r16,r3
   483dc:	004814c0 	call	4814c <__b2d>
   483e0:	8a000417 	ldw	r8,16(r17)
   483e4:	99000417 	ldw	r4,16(r19)
   483e8:	d9400117 	ldw	r5,4(sp)
   483ec:	2209c83a 	sub	r4,r4,r8
   483f0:	2010917a 	slli	r8,r4,5
   483f4:	d9000017 	ldw	r4,0(sp)
   483f8:	2909c83a 	sub	r4,r5,r4
   483fc:	4109883a 	add	r4,r8,r4
   48400:	01000e0e 	bge	zero,r4,4843c <__ratio+0x98>
   48404:	2008953a 	slli	r4,r4,20
   48408:	2421883a 	add	r16,r4,r16
   4840c:	100d883a 	mov	r6,r2
   48410:	180f883a 	mov	r7,r3
   48414:	9009883a 	mov	r4,r18
   48418:	800b883a 	mov	r5,r16
   4841c:	004c4680 	call	4c468 <__divdf3>
   48420:	dfc00617 	ldw	ra,24(sp)
   48424:	dcc00517 	ldw	r19,20(sp)
   48428:	dc800417 	ldw	r18,16(sp)
   4842c:	dc400317 	ldw	r17,12(sp)
   48430:	dc000217 	ldw	r16,8(sp)
   48434:	dec00704 	addi	sp,sp,28
   48438:	f800283a 	ret
   4843c:	2008953a 	slli	r4,r4,20
   48440:	1907c83a 	sub	r3,r3,r4
   48444:	003ff106 	br	4840c <__alt_data_end+0xfffe2c0c>

00048448 <_mprec_log10>:
   48448:	defffe04 	addi	sp,sp,-8
   4844c:	dc000015 	stw	r16,0(sp)
   48450:	dfc00115 	stw	ra,4(sp)
   48454:	008005c4 	movi	r2,23
   48458:	2021883a 	mov	r16,r4
   4845c:	11000d0e 	bge	r2,r4,48494 <_mprec_log10+0x4c>
   48460:	0005883a 	mov	r2,zero
   48464:	00cffc34 	movhi	r3,16368
   48468:	843fffc4 	addi	r16,r16,-1
   4846c:	000d883a 	mov	r6,zero
   48470:	01d00934 	movhi	r7,16420
   48474:	1009883a 	mov	r4,r2
   48478:	180b883a 	mov	r5,r3
   4847c:	004d0900 	call	4d090 <__muldf3>
   48480:	803ff91e 	bne	r16,zero,48468 <__alt_data_end+0xfffe2c68>
   48484:	dfc00117 	ldw	ra,4(sp)
   48488:	dc000017 	ldw	r16,0(sp)
   4848c:	dec00204 	addi	sp,sp,8
   48490:	f800283a 	ret
   48494:	202090fa 	slli	r16,r4,3
   48498:	00800174 	movhi	r2,5
   4849c:	1084a804 	addi	r2,r2,4768
   484a0:	1421883a 	add	r16,r2,r16
   484a4:	80800017 	ldw	r2,0(r16)
   484a8:	80c00117 	ldw	r3,4(r16)
   484ac:	dfc00117 	ldw	ra,4(sp)
   484b0:	dc000017 	ldw	r16,0(sp)
   484b4:	dec00204 	addi	sp,sp,8
   484b8:	f800283a 	ret

000484bc <__copybits>:
   484bc:	297fffc4 	addi	r5,r5,-1
   484c0:	280fd17a 	srai	r7,r5,5
   484c4:	30c00417 	ldw	r3,16(r6)
   484c8:	30800504 	addi	r2,r6,20
   484cc:	39c00044 	addi	r7,r7,1
   484d0:	18c7883a 	add	r3,r3,r3
   484d4:	39cf883a 	add	r7,r7,r7
   484d8:	18c7883a 	add	r3,r3,r3
   484dc:	39cf883a 	add	r7,r7,r7
   484e0:	10c7883a 	add	r3,r2,r3
   484e4:	21cf883a 	add	r7,r4,r7
   484e8:	10c00d2e 	bgeu	r2,r3,48520 <__copybits+0x64>
   484ec:	200b883a 	mov	r5,r4
   484f0:	12000017 	ldw	r8,0(r2)
   484f4:	29400104 	addi	r5,r5,4
   484f8:	10800104 	addi	r2,r2,4
   484fc:	2a3fff15 	stw	r8,-4(r5)
   48500:	10fffb36 	bltu	r2,r3,484f0 <__alt_data_end+0xfffe2cf0>
   48504:	1985c83a 	sub	r2,r3,r6
   48508:	10bffac4 	addi	r2,r2,-21
   4850c:	1004d0ba 	srli	r2,r2,2
   48510:	10800044 	addi	r2,r2,1
   48514:	1085883a 	add	r2,r2,r2
   48518:	1085883a 	add	r2,r2,r2
   4851c:	2089883a 	add	r4,r4,r2
   48520:	21c0032e 	bgeu	r4,r7,48530 <__copybits+0x74>
   48524:	20000015 	stw	zero,0(r4)
   48528:	21000104 	addi	r4,r4,4
   4852c:	21fffd36 	bltu	r4,r7,48524 <__alt_data_end+0xfffe2d24>
   48530:	f800283a 	ret

00048534 <__any_on>:
   48534:	20c00417 	ldw	r3,16(r4)
   48538:	2805d17a 	srai	r2,r5,5
   4853c:	21000504 	addi	r4,r4,20
   48540:	18800d0e 	bge	r3,r2,48578 <__any_on+0x44>
   48544:	18c7883a 	add	r3,r3,r3
   48548:	18c7883a 	add	r3,r3,r3
   4854c:	20c7883a 	add	r3,r4,r3
   48550:	20c0192e 	bgeu	r4,r3,485b8 <__any_on+0x84>
   48554:	18bfff17 	ldw	r2,-4(r3)
   48558:	18ffff04 	addi	r3,r3,-4
   4855c:	1000041e 	bne	r2,zero,48570 <__any_on+0x3c>
   48560:	20c0142e 	bgeu	r4,r3,485b4 <__any_on+0x80>
   48564:	18ffff04 	addi	r3,r3,-4
   48568:	19400017 	ldw	r5,0(r3)
   4856c:	283ffc26 	beq	r5,zero,48560 <__alt_data_end+0xfffe2d60>
   48570:	00800044 	movi	r2,1
   48574:	f800283a 	ret
   48578:	10c00a0e 	bge	r2,r3,485a4 <__any_on+0x70>
   4857c:	1085883a 	add	r2,r2,r2
   48580:	1085883a 	add	r2,r2,r2
   48584:	294007cc 	andi	r5,r5,31
   48588:	2087883a 	add	r3,r4,r2
   4858c:	283ff026 	beq	r5,zero,48550 <__alt_data_end+0xfffe2d50>
   48590:	19800017 	ldw	r6,0(r3)
   48594:	3144d83a 	srl	r2,r6,r5
   48598:	114a983a 	sll	r5,r2,r5
   4859c:	317ff41e 	bne	r6,r5,48570 <__alt_data_end+0xfffe2d70>
   485a0:	003feb06 	br	48550 <__alt_data_end+0xfffe2d50>
   485a4:	1085883a 	add	r2,r2,r2
   485a8:	1085883a 	add	r2,r2,r2
   485ac:	2087883a 	add	r3,r4,r2
   485b0:	003fe706 	br	48550 <__alt_data_end+0xfffe2d50>
   485b4:	f800283a 	ret
   485b8:	0005883a 	mov	r2,zero
   485bc:	f800283a 	ret

000485c0 <_realloc_r>:
   485c0:	defff604 	addi	sp,sp,-40
   485c4:	dc800215 	stw	r18,8(sp)
   485c8:	dfc00915 	stw	ra,36(sp)
   485cc:	df000815 	stw	fp,32(sp)
   485d0:	ddc00715 	stw	r23,28(sp)
   485d4:	dd800615 	stw	r22,24(sp)
   485d8:	dd400515 	stw	r21,20(sp)
   485dc:	dd000415 	stw	r20,16(sp)
   485e0:	dcc00315 	stw	r19,12(sp)
   485e4:	dc400115 	stw	r17,4(sp)
   485e8:	dc000015 	stw	r16,0(sp)
   485ec:	3025883a 	mov	r18,r6
   485f0:	2800b726 	beq	r5,zero,488d0 <_realloc_r+0x310>
   485f4:	282b883a 	mov	r21,r5
   485f8:	2029883a 	mov	r20,r4
   485fc:	004ec380 	call	4ec38 <__malloc_lock>
   48600:	a8bfff17 	ldw	r2,-4(r21)
   48604:	043fff04 	movi	r16,-4
   48608:	90c002c4 	addi	r3,r18,11
   4860c:	01000584 	movi	r4,22
   48610:	acfffe04 	addi	r19,r21,-8
   48614:	1420703a 	and	r16,r2,r16
   48618:	20c0332e 	bgeu	r4,r3,486e8 <_realloc_r+0x128>
   4861c:	047ffe04 	movi	r17,-8
   48620:	1c62703a 	and	r17,r3,r17
   48624:	8807883a 	mov	r3,r17
   48628:	88005816 	blt	r17,zero,4878c <_realloc_r+0x1cc>
   4862c:	8c805736 	bltu	r17,r18,4878c <_realloc_r+0x1cc>
   48630:	80c0300e 	bge	r16,r3,486f4 <_realloc_r+0x134>
   48634:	07000174 	movhi	fp,5
   48638:	e7061404 	addi	fp,fp,6224
   4863c:	e1c00217 	ldw	r7,8(fp)
   48640:	9c09883a 	add	r4,r19,r16
   48644:	22000117 	ldw	r8,4(r4)
   48648:	21c06326 	beq	r4,r7,487d8 <_realloc_r+0x218>
   4864c:	017fff84 	movi	r5,-2
   48650:	414a703a 	and	r5,r8,r5
   48654:	214b883a 	add	r5,r4,r5
   48658:	29800117 	ldw	r6,4(r5)
   4865c:	3180004c 	andi	r6,r6,1
   48660:	30003f26 	beq	r6,zero,48760 <_realloc_r+0x1a0>
   48664:	1080004c 	andi	r2,r2,1
   48668:	10008326 	beq	r2,zero,48878 <_realloc_r+0x2b8>
   4866c:	900b883a 	mov	r5,r18
   48670:	a009883a 	mov	r4,r20
   48674:	004684c0 	call	4684c <_malloc_r>
   48678:	1025883a 	mov	r18,r2
   4867c:	10011e26 	beq	r2,zero,48af8 <_realloc_r+0x538>
   48680:	a93fff17 	ldw	r4,-4(r21)
   48684:	10fffe04 	addi	r3,r2,-8
   48688:	00bfff84 	movi	r2,-2
   4868c:	2084703a 	and	r2,r4,r2
   48690:	9885883a 	add	r2,r19,r2
   48694:	1880ee26 	beq	r3,r2,48a50 <_realloc_r+0x490>
   48698:	81bfff04 	addi	r6,r16,-4
   4869c:	00800904 	movi	r2,36
   486a0:	1180b836 	bltu	r2,r6,48984 <_realloc_r+0x3c4>
   486a4:	00c004c4 	movi	r3,19
   486a8:	19809636 	bltu	r3,r6,48904 <_realloc_r+0x344>
   486ac:	9005883a 	mov	r2,r18
   486b0:	a807883a 	mov	r3,r21
   486b4:	19000017 	ldw	r4,0(r3)
   486b8:	11000015 	stw	r4,0(r2)
   486bc:	19000117 	ldw	r4,4(r3)
   486c0:	11000115 	stw	r4,4(r2)
   486c4:	18c00217 	ldw	r3,8(r3)
   486c8:	10c00215 	stw	r3,8(r2)
   486cc:	a80b883a 	mov	r5,r21
   486d0:	a009883a 	mov	r4,r20
   486d4:	0045c540 	call	45c54 <_free_r>
   486d8:	a009883a 	mov	r4,r20
   486dc:	004ec5c0 	call	4ec5c <__malloc_unlock>
   486e0:	9005883a 	mov	r2,r18
   486e4:	00001206 	br	48730 <_realloc_r+0x170>
   486e8:	00c00404 	movi	r3,16
   486ec:	1823883a 	mov	r17,r3
   486f0:	003fce06 	br	4862c <__alt_data_end+0xfffe2e2c>
   486f4:	a825883a 	mov	r18,r21
   486f8:	8445c83a 	sub	r2,r16,r17
   486fc:	00c003c4 	movi	r3,15
   48700:	18802636 	bltu	r3,r2,4879c <_realloc_r+0x1dc>
   48704:	99800117 	ldw	r6,4(r19)
   48708:	9c07883a 	add	r3,r19,r16
   4870c:	3180004c 	andi	r6,r6,1
   48710:	3420b03a 	or	r16,r6,r16
   48714:	9c000115 	stw	r16,4(r19)
   48718:	18800117 	ldw	r2,4(r3)
   4871c:	10800054 	ori	r2,r2,1
   48720:	18800115 	stw	r2,4(r3)
   48724:	a009883a 	mov	r4,r20
   48728:	004ec5c0 	call	4ec5c <__malloc_unlock>
   4872c:	9005883a 	mov	r2,r18
   48730:	dfc00917 	ldw	ra,36(sp)
   48734:	df000817 	ldw	fp,32(sp)
   48738:	ddc00717 	ldw	r23,28(sp)
   4873c:	dd800617 	ldw	r22,24(sp)
   48740:	dd400517 	ldw	r21,20(sp)
   48744:	dd000417 	ldw	r20,16(sp)
   48748:	dcc00317 	ldw	r19,12(sp)
   4874c:	dc800217 	ldw	r18,8(sp)
   48750:	dc400117 	ldw	r17,4(sp)
   48754:	dc000017 	ldw	r16,0(sp)
   48758:	dec00a04 	addi	sp,sp,40
   4875c:	f800283a 	ret
   48760:	017fff04 	movi	r5,-4
   48764:	414a703a 	and	r5,r8,r5
   48768:	814d883a 	add	r6,r16,r5
   4876c:	30c01f16 	blt	r6,r3,487ec <_realloc_r+0x22c>
   48770:	20800317 	ldw	r2,12(r4)
   48774:	20c00217 	ldw	r3,8(r4)
   48778:	a825883a 	mov	r18,r21
   4877c:	3021883a 	mov	r16,r6
   48780:	18800315 	stw	r2,12(r3)
   48784:	10c00215 	stw	r3,8(r2)
   48788:	003fdb06 	br	486f8 <__alt_data_end+0xfffe2ef8>
   4878c:	00800304 	movi	r2,12
   48790:	a0800015 	stw	r2,0(r20)
   48794:	0005883a 	mov	r2,zero
   48798:	003fe506 	br	48730 <__alt_data_end+0xfffe2f30>
   4879c:	98c00117 	ldw	r3,4(r19)
   487a0:	9c4b883a 	add	r5,r19,r17
   487a4:	11000054 	ori	r4,r2,1
   487a8:	18c0004c 	andi	r3,r3,1
   487ac:	1c62b03a 	or	r17,r3,r17
   487b0:	9c400115 	stw	r17,4(r19)
   487b4:	29000115 	stw	r4,4(r5)
   487b8:	2885883a 	add	r2,r5,r2
   487bc:	10c00117 	ldw	r3,4(r2)
   487c0:	29400204 	addi	r5,r5,8
   487c4:	a009883a 	mov	r4,r20
   487c8:	18c00054 	ori	r3,r3,1
   487cc:	10c00115 	stw	r3,4(r2)
   487d0:	0045c540 	call	45c54 <_free_r>
   487d4:	003fd306 	br	48724 <__alt_data_end+0xfffe2f24>
   487d8:	017fff04 	movi	r5,-4
   487dc:	414a703a 	and	r5,r8,r5
   487e0:	89800404 	addi	r6,r17,16
   487e4:	8151883a 	add	r8,r16,r5
   487e8:	4180590e 	bge	r8,r6,48950 <_realloc_r+0x390>
   487ec:	1080004c 	andi	r2,r2,1
   487f0:	103f9e1e 	bne	r2,zero,4866c <__alt_data_end+0xfffe2e6c>
   487f4:	adbffe17 	ldw	r22,-8(r21)
   487f8:	00bfff04 	movi	r2,-4
   487fc:	9dadc83a 	sub	r22,r19,r22
   48800:	b1800117 	ldw	r6,4(r22)
   48804:	3084703a 	and	r2,r6,r2
   48808:	20002026 	beq	r4,zero,4888c <_realloc_r+0x2cc>
   4880c:	80af883a 	add	r23,r16,r2
   48810:	b96f883a 	add	r23,r23,r5
   48814:	21c05f26 	beq	r4,r7,48994 <_realloc_r+0x3d4>
   48818:	b8c01c16 	blt	r23,r3,4888c <_realloc_r+0x2cc>
   4881c:	20800317 	ldw	r2,12(r4)
   48820:	20c00217 	ldw	r3,8(r4)
   48824:	81bfff04 	addi	r6,r16,-4
   48828:	01000904 	movi	r4,36
   4882c:	18800315 	stw	r2,12(r3)
   48830:	10c00215 	stw	r3,8(r2)
   48834:	b0c00217 	ldw	r3,8(r22)
   48838:	b0800317 	ldw	r2,12(r22)
   4883c:	b4800204 	addi	r18,r22,8
   48840:	18800315 	stw	r2,12(r3)
   48844:	10c00215 	stw	r3,8(r2)
   48848:	21801b36 	bltu	r4,r6,488b8 <_realloc_r+0x2f8>
   4884c:	008004c4 	movi	r2,19
   48850:	1180352e 	bgeu	r2,r6,48928 <_realloc_r+0x368>
   48854:	a8800017 	ldw	r2,0(r21)
   48858:	b0800215 	stw	r2,8(r22)
   4885c:	a8800117 	ldw	r2,4(r21)
   48860:	b0800315 	stw	r2,12(r22)
   48864:	008006c4 	movi	r2,27
   48868:	11807f36 	bltu	r2,r6,48a68 <_realloc_r+0x4a8>
   4886c:	b0800404 	addi	r2,r22,16
   48870:	ad400204 	addi	r21,r21,8
   48874:	00002d06 	br	4892c <_realloc_r+0x36c>
   48878:	adbffe17 	ldw	r22,-8(r21)
   4887c:	00bfff04 	movi	r2,-4
   48880:	9dadc83a 	sub	r22,r19,r22
   48884:	b1000117 	ldw	r4,4(r22)
   48888:	2084703a 	and	r2,r4,r2
   4888c:	b03f7726 	beq	r22,zero,4866c <__alt_data_end+0xfffe2e6c>
   48890:	80af883a 	add	r23,r16,r2
   48894:	b8ff7516 	blt	r23,r3,4866c <__alt_data_end+0xfffe2e6c>
   48898:	b0800317 	ldw	r2,12(r22)
   4889c:	b0c00217 	ldw	r3,8(r22)
   488a0:	81bfff04 	addi	r6,r16,-4
   488a4:	01000904 	movi	r4,36
   488a8:	18800315 	stw	r2,12(r3)
   488ac:	10c00215 	stw	r3,8(r2)
   488b0:	b4800204 	addi	r18,r22,8
   488b4:	21bfe52e 	bgeu	r4,r6,4884c <__alt_data_end+0xfffe304c>
   488b8:	a80b883a 	mov	r5,r21
   488bc:	9009883a 	mov	r4,r18
   488c0:	00472840 	call	47284 <memmove>
   488c4:	b821883a 	mov	r16,r23
   488c8:	b027883a 	mov	r19,r22
   488cc:	003f8a06 	br	486f8 <__alt_data_end+0xfffe2ef8>
   488d0:	300b883a 	mov	r5,r6
   488d4:	dfc00917 	ldw	ra,36(sp)
   488d8:	df000817 	ldw	fp,32(sp)
   488dc:	ddc00717 	ldw	r23,28(sp)
   488e0:	dd800617 	ldw	r22,24(sp)
   488e4:	dd400517 	ldw	r21,20(sp)
   488e8:	dd000417 	ldw	r20,16(sp)
   488ec:	dcc00317 	ldw	r19,12(sp)
   488f0:	dc800217 	ldw	r18,8(sp)
   488f4:	dc400117 	ldw	r17,4(sp)
   488f8:	dc000017 	ldw	r16,0(sp)
   488fc:	dec00a04 	addi	sp,sp,40
   48900:	004684c1 	jmpi	4684c <_malloc_r>
   48904:	a8c00017 	ldw	r3,0(r21)
   48908:	90c00015 	stw	r3,0(r18)
   4890c:	a8c00117 	ldw	r3,4(r21)
   48910:	90c00115 	stw	r3,4(r18)
   48914:	00c006c4 	movi	r3,27
   48918:	19804536 	bltu	r3,r6,48a30 <_realloc_r+0x470>
   4891c:	90800204 	addi	r2,r18,8
   48920:	a8c00204 	addi	r3,r21,8
   48924:	003f6306 	br	486b4 <__alt_data_end+0xfffe2eb4>
   48928:	9005883a 	mov	r2,r18
   4892c:	a8c00017 	ldw	r3,0(r21)
   48930:	b821883a 	mov	r16,r23
   48934:	b027883a 	mov	r19,r22
   48938:	10c00015 	stw	r3,0(r2)
   4893c:	a8c00117 	ldw	r3,4(r21)
   48940:	10c00115 	stw	r3,4(r2)
   48944:	a8c00217 	ldw	r3,8(r21)
   48948:	10c00215 	stw	r3,8(r2)
   4894c:	003f6a06 	br	486f8 <__alt_data_end+0xfffe2ef8>
   48950:	9c67883a 	add	r19,r19,r17
   48954:	4445c83a 	sub	r2,r8,r17
   48958:	e4c00215 	stw	r19,8(fp)
   4895c:	10800054 	ori	r2,r2,1
   48960:	98800115 	stw	r2,4(r19)
   48964:	a8bfff17 	ldw	r2,-4(r21)
   48968:	a009883a 	mov	r4,r20
   4896c:	1080004c 	andi	r2,r2,1
   48970:	1462b03a 	or	r17,r2,r17
   48974:	ac7fff15 	stw	r17,-4(r21)
   48978:	004ec5c0 	call	4ec5c <__malloc_unlock>
   4897c:	a805883a 	mov	r2,r21
   48980:	003f6b06 	br	48730 <__alt_data_end+0xfffe2f30>
   48984:	a80b883a 	mov	r5,r21
   48988:	9009883a 	mov	r4,r18
   4898c:	00472840 	call	47284 <memmove>
   48990:	003f4e06 	br	486cc <__alt_data_end+0xfffe2ecc>
   48994:	89000404 	addi	r4,r17,16
   48998:	b93fbc16 	blt	r23,r4,4888c <__alt_data_end+0xfffe308c>
   4899c:	b0800317 	ldw	r2,12(r22)
   489a0:	b0c00217 	ldw	r3,8(r22)
   489a4:	81bfff04 	addi	r6,r16,-4
   489a8:	01000904 	movi	r4,36
   489ac:	18800315 	stw	r2,12(r3)
   489b0:	10c00215 	stw	r3,8(r2)
   489b4:	b4800204 	addi	r18,r22,8
   489b8:	21804336 	bltu	r4,r6,48ac8 <_realloc_r+0x508>
   489bc:	008004c4 	movi	r2,19
   489c0:	11803f2e 	bgeu	r2,r6,48ac0 <_realloc_r+0x500>
   489c4:	a8800017 	ldw	r2,0(r21)
   489c8:	b0800215 	stw	r2,8(r22)
   489cc:	a8800117 	ldw	r2,4(r21)
   489d0:	b0800315 	stw	r2,12(r22)
   489d4:	008006c4 	movi	r2,27
   489d8:	11803f36 	bltu	r2,r6,48ad8 <_realloc_r+0x518>
   489dc:	b0800404 	addi	r2,r22,16
   489e0:	ad400204 	addi	r21,r21,8
   489e4:	a8c00017 	ldw	r3,0(r21)
   489e8:	10c00015 	stw	r3,0(r2)
   489ec:	a8c00117 	ldw	r3,4(r21)
   489f0:	10c00115 	stw	r3,4(r2)
   489f4:	a8c00217 	ldw	r3,8(r21)
   489f8:	10c00215 	stw	r3,8(r2)
   489fc:	b447883a 	add	r3,r22,r17
   48a00:	bc45c83a 	sub	r2,r23,r17
   48a04:	e0c00215 	stw	r3,8(fp)
   48a08:	10800054 	ori	r2,r2,1
   48a0c:	18800115 	stw	r2,4(r3)
   48a10:	b0800117 	ldw	r2,4(r22)
   48a14:	a009883a 	mov	r4,r20
   48a18:	1080004c 	andi	r2,r2,1
   48a1c:	1462b03a 	or	r17,r2,r17
   48a20:	b4400115 	stw	r17,4(r22)
   48a24:	004ec5c0 	call	4ec5c <__malloc_unlock>
   48a28:	9005883a 	mov	r2,r18
   48a2c:	003f4006 	br	48730 <__alt_data_end+0xfffe2f30>
   48a30:	a8c00217 	ldw	r3,8(r21)
   48a34:	90c00215 	stw	r3,8(r18)
   48a38:	a8c00317 	ldw	r3,12(r21)
   48a3c:	90c00315 	stw	r3,12(r18)
   48a40:	30801126 	beq	r6,r2,48a88 <_realloc_r+0x4c8>
   48a44:	90800404 	addi	r2,r18,16
   48a48:	a8c00404 	addi	r3,r21,16
   48a4c:	003f1906 	br	486b4 <__alt_data_end+0xfffe2eb4>
   48a50:	90ffff17 	ldw	r3,-4(r18)
   48a54:	00bfff04 	movi	r2,-4
   48a58:	a825883a 	mov	r18,r21
   48a5c:	1884703a 	and	r2,r3,r2
   48a60:	80a1883a 	add	r16,r16,r2
   48a64:	003f2406 	br	486f8 <__alt_data_end+0xfffe2ef8>
   48a68:	a8800217 	ldw	r2,8(r21)
   48a6c:	b0800415 	stw	r2,16(r22)
   48a70:	a8800317 	ldw	r2,12(r21)
   48a74:	b0800515 	stw	r2,20(r22)
   48a78:	31000a26 	beq	r6,r4,48aa4 <_realloc_r+0x4e4>
   48a7c:	b0800604 	addi	r2,r22,24
   48a80:	ad400404 	addi	r21,r21,16
   48a84:	003fa906 	br	4892c <__alt_data_end+0xfffe312c>
   48a88:	a9000417 	ldw	r4,16(r21)
   48a8c:	90800604 	addi	r2,r18,24
   48a90:	a8c00604 	addi	r3,r21,24
   48a94:	91000415 	stw	r4,16(r18)
   48a98:	a9000517 	ldw	r4,20(r21)
   48a9c:	91000515 	stw	r4,20(r18)
   48aa0:	003f0406 	br	486b4 <__alt_data_end+0xfffe2eb4>
   48aa4:	a8c00417 	ldw	r3,16(r21)
   48aa8:	ad400604 	addi	r21,r21,24
   48aac:	b0800804 	addi	r2,r22,32
   48ab0:	b0c00615 	stw	r3,24(r22)
   48ab4:	a8ffff17 	ldw	r3,-4(r21)
   48ab8:	b0c00715 	stw	r3,28(r22)
   48abc:	003f9b06 	br	4892c <__alt_data_end+0xfffe312c>
   48ac0:	9005883a 	mov	r2,r18
   48ac4:	003fc706 	br	489e4 <__alt_data_end+0xfffe31e4>
   48ac8:	a80b883a 	mov	r5,r21
   48acc:	9009883a 	mov	r4,r18
   48ad0:	00472840 	call	47284 <memmove>
   48ad4:	003fc906 	br	489fc <__alt_data_end+0xfffe31fc>
   48ad8:	a8800217 	ldw	r2,8(r21)
   48adc:	b0800415 	stw	r2,16(r22)
   48ae0:	a8800317 	ldw	r2,12(r21)
   48ae4:	b0800515 	stw	r2,20(r22)
   48ae8:	31000726 	beq	r6,r4,48b08 <_realloc_r+0x548>
   48aec:	b0800604 	addi	r2,r22,24
   48af0:	ad400404 	addi	r21,r21,16
   48af4:	003fbb06 	br	489e4 <__alt_data_end+0xfffe31e4>
   48af8:	a009883a 	mov	r4,r20
   48afc:	004ec5c0 	call	4ec5c <__malloc_unlock>
   48b00:	0005883a 	mov	r2,zero
   48b04:	003f0a06 	br	48730 <__alt_data_end+0xfffe2f30>
   48b08:	a8c00417 	ldw	r3,16(r21)
   48b0c:	ad400604 	addi	r21,r21,24
   48b10:	b0800804 	addi	r2,r22,32
   48b14:	b0c00615 	stw	r3,24(r22)
   48b18:	a8ffff17 	ldw	r3,-4(r21)
   48b1c:	b0c00715 	stw	r3,28(r22)
   48b20:	003fb006 	br	489e4 <__alt_data_end+0xfffe31e4>

00048b24 <__fpclassifyd>:
   48b24:	00a00034 	movhi	r2,32768
   48b28:	10bfffc4 	addi	r2,r2,-1
   48b2c:	2884703a 	and	r2,r5,r2
   48b30:	10000726 	beq	r2,zero,48b50 <__fpclassifyd+0x2c>
   48b34:	00fffc34 	movhi	r3,65520
   48b38:	019ff834 	movhi	r6,32736
   48b3c:	28c7883a 	add	r3,r5,r3
   48b40:	31bfffc4 	addi	r6,r6,-1
   48b44:	30c00536 	bltu	r6,r3,48b5c <__fpclassifyd+0x38>
   48b48:	00800104 	movi	r2,4
   48b4c:	f800283a 	ret
   48b50:	2000021e 	bne	r4,zero,48b5c <__fpclassifyd+0x38>
   48b54:	00800084 	movi	r2,2
   48b58:	f800283a 	ret
   48b5c:	00dffc34 	movhi	r3,32752
   48b60:	019ff834 	movhi	r6,32736
   48b64:	28cb883a 	add	r5,r5,r3
   48b68:	31bfffc4 	addi	r6,r6,-1
   48b6c:	317ff62e 	bgeu	r6,r5,48b48 <__alt_data_end+0xfffe3348>
   48b70:	01400434 	movhi	r5,16
   48b74:	297fffc4 	addi	r5,r5,-1
   48b78:	28800236 	bltu	r5,r2,48b84 <__fpclassifyd+0x60>
   48b7c:	008000c4 	movi	r2,3
   48b80:	f800283a 	ret
   48b84:	10c00226 	beq	r2,r3,48b90 <__fpclassifyd+0x6c>
   48b88:	0005883a 	mov	r2,zero
   48b8c:	f800283a 	ret
   48b90:	2005003a 	cmpeq	r2,r4,zero
   48b94:	f800283a 	ret

00048b98 <_sbrk_r>:
   48b98:	defffd04 	addi	sp,sp,-12
   48b9c:	dc000015 	stw	r16,0(sp)
   48ba0:	04000174 	movhi	r16,5
   48ba4:	dc400115 	stw	r17,4(sp)
   48ba8:	84126c04 	addi	r16,r16,18864
   48bac:	2023883a 	mov	r17,r4
   48bb0:	2809883a 	mov	r4,r5
   48bb4:	dfc00215 	stw	ra,8(sp)
   48bb8:	80000015 	stw	zero,0(r16)
   48bbc:	004ee440 	call	4ee44 <sbrk>
   48bc0:	00ffffc4 	movi	r3,-1
   48bc4:	10c00526 	beq	r2,r3,48bdc <_sbrk_r+0x44>
   48bc8:	dfc00217 	ldw	ra,8(sp)
   48bcc:	dc400117 	ldw	r17,4(sp)
   48bd0:	dc000017 	ldw	r16,0(sp)
   48bd4:	dec00304 	addi	sp,sp,12
   48bd8:	f800283a 	ret
   48bdc:	80c00017 	ldw	r3,0(r16)
   48be0:	183ff926 	beq	r3,zero,48bc8 <__alt_data_end+0xfffe33c8>
   48be4:	88c00015 	stw	r3,0(r17)
   48be8:	003ff706 	br	48bc8 <__alt_data_end+0xfffe33c8>

00048bec <__sread>:
   48bec:	defffe04 	addi	sp,sp,-8
   48bf0:	dc000015 	stw	r16,0(sp)
   48bf4:	2821883a 	mov	r16,r5
   48bf8:	2940038f 	ldh	r5,14(r5)
   48bfc:	dfc00115 	stw	ra,4(sp)
   48c00:	004aaa80 	call	4aaa8 <_read_r>
   48c04:	10000716 	blt	r2,zero,48c24 <__sread+0x38>
   48c08:	80c01417 	ldw	r3,80(r16)
   48c0c:	1887883a 	add	r3,r3,r2
   48c10:	80c01415 	stw	r3,80(r16)
   48c14:	dfc00117 	ldw	ra,4(sp)
   48c18:	dc000017 	ldw	r16,0(sp)
   48c1c:	dec00204 	addi	sp,sp,8
   48c20:	f800283a 	ret
   48c24:	80c0030b 	ldhu	r3,12(r16)
   48c28:	18fbffcc 	andi	r3,r3,61439
   48c2c:	80c0030d 	sth	r3,12(r16)
   48c30:	dfc00117 	ldw	ra,4(sp)
   48c34:	dc000017 	ldw	r16,0(sp)
   48c38:	dec00204 	addi	sp,sp,8
   48c3c:	f800283a 	ret

00048c40 <__seofread>:
   48c40:	0005883a 	mov	r2,zero
   48c44:	f800283a 	ret

00048c48 <__swrite>:
   48c48:	2880030b 	ldhu	r2,12(r5)
   48c4c:	defffb04 	addi	sp,sp,-20
   48c50:	dcc00315 	stw	r19,12(sp)
   48c54:	dc800215 	stw	r18,8(sp)
   48c58:	dc400115 	stw	r17,4(sp)
   48c5c:	dc000015 	stw	r16,0(sp)
   48c60:	dfc00415 	stw	ra,16(sp)
   48c64:	10c0400c 	andi	r3,r2,256
   48c68:	2821883a 	mov	r16,r5
   48c6c:	2023883a 	mov	r17,r4
   48c70:	3025883a 	mov	r18,r6
   48c74:	3827883a 	mov	r19,r7
   48c78:	18000526 	beq	r3,zero,48c90 <__swrite+0x48>
   48c7c:	2940038f 	ldh	r5,14(r5)
   48c80:	01c00084 	movi	r7,2
   48c84:	000d883a 	mov	r6,zero
   48c88:	004aa480 	call	4aa48 <_lseek_r>
   48c8c:	8080030b 	ldhu	r2,12(r16)
   48c90:	8140038f 	ldh	r5,14(r16)
   48c94:	10bbffcc 	andi	r2,r2,61439
   48c98:	980f883a 	mov	r7,r19
   48c9c:	900d883a 	mov	r6,r18
   48ca0:	8809883a 	mov	r4,r17
   48ca4:	8080030d 	sth	r2,12(r16)
   48ca8:	dfc00417 	ldw	ra,16(sp)
   48cac:	dcc00317 	ldw	r19,12(sp)
   48cb0:	dc800217 	ldw	r18,8(sp)
   48cb4:	dc400117 	ldw	r17,4(sp)
   48cb8:	dc000017 	ldw	r16,0(sp)
   48cbc:	dec00504 	addi	sp,sp,20
   48cc0:	004a4fc1 	jmpi	4a4fc <_write_r>

00048cc4 <__sseek>:
   48cc4:	defffe04 	addi	sp,sp,-8
   48cc8:	dc000015 	stw	r16,0(sp)
   48ccc:	2821883a 	mov	r16,r5
   48cd0:	2940038f 	ldh	r5,14(r5)
   48cd4:	dfc00115 	stw	ra,4(sp)
   48cd8:	004aa480 	call	4aa48 <_lseek_r>
   48cdc:	00ffffc4 	movi	r3,-1
   48ce0:	10c00826 	beq	r2,r3,48d04 <__sseek+0x40>
   48ce4:	80c0030b 	ldhu	r3,12(r16)
   48ce8:	80801415 	stw	r2,80(r16)
   48cec:	18c40014 	ori	r3,r3,4096
   48cf0:	80c0030d 	sth	r3,12(r16)
   48cf4:	dfc00117 	ldw	ra,4(sp)
   48cf8:	dc000017 	ldw	r16,0(sp)
   48cfc:	dec00204 	addi	sp,sp,8
   48d00:	f800283a 	ret
   48d04:	80c0030b 	ldhu	r3,12(r16)
   48d08:	18fbffcc 	andi	r3,r3,61439
   48d0c:	80c0030d 	sth	r3,12(r16)
   48d10:	dfc00117 	ldw	ra,4(sp)
   48d14:	dc000017 	ldw	r16,0(sp)
   48d18:	dec00204 	addi	sp,sp,8
   48d1c:	f800283a 	ret

00048d20 <__sclose>:
   48d20:	2940038f 	ldh	r5,14(r5)
   48d24:	004a55c1 	jmpi	4a55c <_close_r>

00048d28 <strcmp>:
   48d28:	2144b03a 	or	r2,r4,r5
   48d2c:	108000cc 	andi	r2,r2,3
   48d30:	1000171e 	bne	r2,zero,48d90 <strcmp+0x68>
   48d34:	20800017 	ldw	r2,0(r4)
   48d38:	28c00017 	ldw	r3,0(r5)
   48d3c:	10c0141e 	bne	r2,r3,48d90 <strcmp+0x68>
   48d40:	027fbff4 	movhi	r9,65279
   48d44:	4a7fbfc4 	addi	r9,r9,-257
   48d48:	0086303a 	nor	r3,zero,r2
   48d4c:	02202074 	movhi	r8,32897
   48d50:	1245883a 	add	r2,r2,r9
   48d54:	42202004 	addi	r8,r8,-32640
   48d58:	10c4703a 	and	r2,r2,r3
   48d5c:	1204703a 	and	r2,r2,r8
   48d60:	10000226 	beq	r2,zero,48d6c <strcmp+0x44>
   48d64:	00002306 	br	48df4 <strcmp+0xcc>
   48d68:	1000221e 	bne	r2,zero,48df4 <strcmp+0xcc>
   48d6c:	21000104 	addi	r4,r4,4
   48d70:	20c00017 	ldw	r3,0(r4)
   48d74:	29400104 	addi	r5,r5,4
   48d78:	29800017 	ldw	r6,0(r5)
   48d7c:	1a4f883a 	add	r7,r3,r9
   48d80:	00c4303a 	nor	r2,zero,r3
   48d84:	3884703a 	and	r2,r7,r2
   48d88:	1204703a 	and	r2,r2,r8
   48d8c:	19bff626 	beq	r3,r6,48d68 <__alt_data_end+0xfffe3568>
   48d90:	20800003 	ldbu	r2,0(r4)
   48d94:	10c03fcc 	andi	r3,r2,255
   48d98:	18c0201c 	xori	r3,r3,128
   48d9c:	18ffe004 	addi	r3,r3,-128
   48da0:	18000c26 	beq	r3,zero,48dd4 <strcmp+0xac>
   48da4:	29800007 	ldb	r6,0(r5)
   48da8:	19800326 	beq	r3,r6,48db8 <strcmp+0x90>
   48dac:	00001306 	br	48dfc <strcmp+0xd4>
   48db0:	29800007 	ldb	r6,0(r5)
   48db4:	11800b1e 	bne	r2,r6,48de4 <strcmp+0xbc>
   48db8:	21000044 	addi	r4,r4,1
   48dbc:	20c00003 	ldbu	r3,0(r4)
   48dc0:	29400044 	addi	r5,r5,1
   48dc4:	18803fcc 	andi	r2,r3,255
   48dc8:	1080201c 	xori	r2,r2,128
   48dcc:	10bfe004 	addi	r2,r2,-128
   48dd0:	103ff71e 	bne	r2,zero,48db0 <__alt_data_end+0xfffe35b0>
   48dd4:	0007883a 	mov	r3,zero
   48dd8:	28800003 	ldbu	r2,0(r5)
   48ddc:	1885c83a 	sub	r2,r3,r2
   48de0:	f800283a 	ret
   48de4:	28800003 	ldbu	r2,0(r5)
   48de8:	18c03fcc 	andi	r3,r3,255
   48dec:	1885c83a 	sub	r2,r3,r2
   48df0:	f800283a 	ret
   48df4:	0005883a 	mov	r2,zero
   48df8:	f800283a 	ret
   48dfc:	10c03fcc 	andi	r3,r2,255
   48e00:	003ff506 	br	48dd8 <__alt_data_end+0xfffe35d8>

00048e04 <__sprint_r.part.0>:
   48e04:	28801917 	ldw	r2,100(r5)
   48e08:	defff604 	addi	sp,sp,-40
   48e0c:	dd400515 	stw	r21,20(sp)
   48e10:	dfc00915 	stw	ra,36(sp)
   48e14:	df000815 	stw	fp,32(sp)
   48e18:	ddc00715 	stw	r23,28(sp)
   48e1c:	dd800615 	stw	r22,24(sp)
   48e20:	dd000415 	stw	r20,16(sp)
   48e24:	dcc00315 	stw	r19,12(sp)
   48e28:	dc800215 	stw	r18,8(sp)
   48e2c:	dc400115 	stw	r17,4(sp)
   48e30:	dc000015 	stw	r16,0(sp)
   48e34:	1088000c 	andi	r2,r2,8192
   48e38:	302b883a 	mov	r21,r6
   48e3c:	10002e26 	beq	r2,zero,48ef8 <__sprint_r.part.0+0xf4>
   48e40:	30800217 	ldw	r2,8(r6)
   48e44:	35800017 	ldw	r22,0(r6)
   48e48:	10002926 	beq	r2,zero,48ef0 <__sprint_r.part.0+0xec>
   48e4c:	2827883a 	mov	r19,r5
   48e50:	2029883a 	mov	r20,r4
   48e54:	b5c00104 	addi	r23,r22,4
   48e58:	04bfffc4 	movi	r18,-1
   48e5c:	bc400017 	ldw	r17,0(r23)
   48e60:	b4000017 	ldw	r16,0(r22)
   48e64:	0039883a 	mov	fp,zero
   48e68:	8822d0ba 	srli	r17,r17,2
   48e6c:	8800031e 	bne	r17,zero,48e7c <__sprint_r.part.0+0x78>
   48e70:	00001806 	br	48ed4 <__sprint_r.part.0+0xd0>
   48e74:	84000104 	addi	r16,r16,4
   48e78:	8f001526 	beq	r17,fp,48ed0 <__sprint_r.part.0+0xcc>
   48e7c:	81400017 	ldw	r5,0(r16)
   48e80:	980d883a 	mov	r6,r19
   48e84:	a009883a 	mov	r4,r20
   48e88:	004a8f40 	call	4a8f4 <_fputwc_r>
   48e8c:	e7000044 	addi	fp,fp,1
   48e90:	14bff81e 	bne	r2,r18,48e74 <__alt_data_end+0xfffe3674>
   48e94:	9005883a 	mov	r2,r18
   48e98:	a8000215 	stw	zero,8(r21)
   48e9c:	a8000115 	stw	zero,4(r21)
   48ea0:	dfc00917 	ldw	ra,36(sp)
   48ea4:	df000817 	ldw	fp,32(sp)
   48ea8:	ddc00717 	ldw	r23,28(sp)
   48eac:	dd800617 	ldw	r22,24(sp)
   48eb0:	dd400517 	ldw	r21,20(sp)
   48eb4:	dd000417 	ldw	r20,16(sp)
   48eb8:	dcc00317 	ldw	r19,12(sp)
   48ebc:	dc800217 	ldw	r18,8(sp)
   48ec0:	dc400117 	ldw	r17,4(sp)
   48ec4:	dc000017 	ldw	r16,0(sp)
   48ec8:	dec00a04 	addi	sp,sp,40
   48ecc:	f800283a 	ret
   48ed0:	a8800217 	ldw	r2,8(r21)
   48ed4:	8c63883a 	add	r17,r17,r17
   48ed8:	8c63883a 	add	r17,r17,r17
   48edc:	1445c83a 	sub	r2,r2,r17
   48ee0:	a8800215 	stw	r2,8(r21)
   48ee4:	b5800204 	addi	r22,r22,8
   48ee8:	bdc00204 	addi	r23,r23,8
   48eec:	103fdb1e 	bne	r2,zero,48e5c <__alt_data_end+0xfffe365c>
   48ef0:	0005883a 	mov	r2,zero
   48ef4:	003fe806 	br	48e98 <__alt_data_end+0xfffe3698>
   48ef8:	0045f640 	call	45f64 <__sfvwrite_r>
   48efc:	003fe606 	br	48e98 <__alt_data_end+0xfffe3698>

00048f00 <__sprint_r>:
   48f00:	30c00217 	ldw	r3,8(r6)
   48f04:	18000126 	beq	r3,zero,48f0c <__sprint_r+0xc>
   48f08:	0048e041 	jmpi	48e04 <__sprint_r.part.0>
   48f0c:	30000115 	stw	zero,4(r6)
   48f10:	0005883a 	mov	r2,zero
   48f14:	f800283a 	ret

00048f18 <___vfiprintf_internal_r>:
   48f18:	deffca04 	addi	sp,sp,-216
   48f1c:	dd403115 	stw	r21,196(sp)
   48f20:	dfc03515 	stw	ra,212(sp)
   48f24:	df003415 	stw	fp,208(sp)
   48f28:	ddc03315 	stw	r23,204(sp)
   48f2c:	dd803215 	stw	r22,200(sp)
   48f30:	dd003015 	stw	r20,192(sp)
   48f34:	dcc02f15 	stw	r19,188(sp)
   48f38:	dc802e15 	stw	r18,184(sp)
   48f3c:	dc402d15 	stw	r17,180(sp)
   48f40:	dc002c15 	stw	r16,176(sp)
   48f44:	d9002115 	stw	r4,132(sp)
   48f48:	d9402015 	stw	r5,128(sp)
   48f4c:	d9c02215 	stw	r7,136(sp)
   48f50:	302b883a 	mov	r21,r6
   48f54:	20000226 	beq	r4,zero,48f60 <___vfiprintf_internal_r+0x48>
   48f58:	20800e17 	ldw	r2,56(r4)
   48f5c:	1000cf26 	beq	r2,zero,4929c <___vfiprintf_internal_r+0x384>
   48f60:	d8c02017 	ldw	r3,128(sp)
   48f64:	1880030b 	ldhu	r2,12(r3)
   48f68:	10c8000c 	andi	r3,r2,8192
   48f6c:	1800071e 	bne	r3,zero,48f8c <___vfiprintf_internal_r+0x74>
   48f70:	d9402017 	ldw	r5,128(sp)
   48f74:	00f7ffc4 	movi	r3,-8193
   48f78:	10880014 	ori	r2,r2,8192
   48f7c:	29001917 	ldw	r4,100(r5)
   48f80:	2880030d 	sth	r2,12(r5)
   48f84:	20c6703a 	and	r3,r4,r3
   48f88:	28c01915 	stw	r3,100(r5)
   48f8c:	10c0020c 	andi	r3,r2,8
   48f90:	1800a526 	beq	r3,zero,49228 <___vfiprintf_internal_r+0x310>
   48f94:	d9002017 	ldw	r4,128(sp)
   48f98:	20c00417 	ldw	r3,16(r4)
   48f9c:	1800a226 	beq	r3,zero,49228 <___vfiprintf_internal_r+0x310>
   48fa0:	1080068c 	andi	r2,r2,26
   48fa4:	00c00284 	movi	r3,10
   48fa8:	10c0a826 	beq	r2,r3,4924c <___vfiprintf_internal_r+0x334>
   48fac:	d9001a04 	addi	r4,sp,104
   48fb0:	d94019c4 	addi	r5,sp,103
   48fb4:	04800174 	movhi	r18,5
   48fb8:	2145c83a 	sub	r2,r4,r5
   48fbc:	9484da04 	addi	r18,r18,4968
   48fc0:	d9001e15 	stw	r4,120(sp)
   48fc4:	d9401f15 	stw	r5,124(sp)
   48fc8:	dec01a15 	stw	sp,104(sp)
   48fcc:	d8001c15 	stw	zero,112(sp)
   48fd0:	d8001b15 	stw	zero,108(sp)
   48fd4:	d811883a 	mov	r8,sp
   48fd8:	d8002615 	stw	zero,152(sp)
   48fdc:	d8002415 	stw	zero,144(sp)
   48fe0:	d8802815 	stw	r2,160(sp)
   48fe4:	a82d883a 	mov	r22,r21
   48fe8:	b0800007 	ldb	r2,0(r22)
   48fec:	10040d26 	beq	r2,zero,4a024 <___vfiprintf_internal_r+0x110c>
   48ff0:	00c00944 	movi	r3,37
   48ff4:	b029883a 	mov	r20,r22
   48ff8:	10c0021e 	bne	r2,r3,49004 <___vfiprintf_internal_r+0xec>
   48ffc:	00001606 	br	49058 <___vfiprintf_internal_r+0x140>
   49000:	10c00326 	beq	r2,r3,49010 <___vfiprintf_internal_r+0xf8>
   49004:	a5000044 	addi	r20,r20,1
   49008:	a0800007 	ldb	r2,0(r20)
   4900c:	103ffc1e 	bne	r2,zero,49000 <__alt_data_end+0xfffe3800>
   49010:	a5a1c83a 	sub	r16,r20,r22
   49014:	80001026 	beq	r16,zero,49058 <___vfiprintf_internal_r+0x140>
   49018:	d8c01c17 	ldw	r3,112(sp)
   4901c:	d8801b17 	ldw	r2,108(sp)
   49020:	45800015 	stw	r22,0(r8)
   49024:	80c7883a 	add	r3,r16,r3
   49028:	10800044 	addi	r2,r2,1
   4902c:	44000115 	stw	r16,4(r8)
   49030:	d8c01c15 	stw	r3,112(sp)
   49034:	d8801b15 	stw	r2,108(sp)
   49038:	010001c4 	movi	r4,7
   4903c:	2080750e 	bge	r4,r2,49214 <___vfiprintf_internal_r+0x2fc>
   49040:	1803951e 	bne	r3,zero,49e98 <___vfiprintf_internal_r+0xf80>
   49044:	d8c02417 	ldw	r3,144(sp)
   49048:	d8001b15 	stw	zero,108(sp)
   4904c:	d811883a 	mov	r8,sp
   49050:	1c07883a 	add	r3,r3,r16
   49054:	d8c02415 	stw	r3,144(sp)
   49058:	a0800007 	ldb	r2,0(r20)
   4905c:	1002e026 	beq	r2,zero,49be0 <___vfiprintf_internal_r+0xcc8>
   49060:	a5800044 	addi	r22,r20,1
   49064:	a0c00047 	ldb	r3,1(r20)
   49068:	d8001d85 	stb	zero,118(sp)
   4906c:	0027883a 	mov	r19,zero
   49070:	d8002305 	stb	zero,140(sp)
   49074:	043fffc4 	movi	r16,-1
   49078:	d8002515 	stw	zero,148(sp)
   4907c:	0023883a 	mov	r17,zero
   49080:	05001604 	movi	r20,88
   49084:	05400244 	movi	r21,9
   49088:	402f883a 	mov	r23,r8
   4908c:	b5800044 	addi	r22,r22,1
   49090:	18bff804 	addi	r2,r3,-32
   49094:	a0827736 	bltu	r20,r2,49a74 <___vfiprintf_internal_r+0xb5c>
   49098:	100490ba 	slli	r2,r2,2
   4909c:	01000174 	movhi	r4,5
   490a0:	21242c04 	addi	r4,r4,-28496
   490a4:	1105883a 	add	r2,r2,r4
   490a8:	10800017 	ldw	r2,0(r2)
   490ac:	1000683a 	jmp	r2
   490b0:	00049774 	movhi	zero,4701
   490b4:	00049a74 	movhi	zero,4713
   490b8:	00049a74 	movhi	zero,4713
   490bc:	00049790 	cmplti	zero,zero,4702
   490c0:	00049a74 	movhi	zero,4713
   490c4:	00049a74 	movhi	zero,4713
   490c8:	00049a74 	movhi	zero,4713
   490cc:	00049a74 	movhi	zero,4713
   490d0:	00049a74 	movhi	zero,4713
   490d4:	00049a74 	movhi	zero,4713
   490d8:	00049998 	cmpnei	zero,zero,4710
   490dc:	000499bc 	xorhi	zero,zero,4710
   490e0:	00049a74 	movhi	zero,4713
   490e4:	000492b4 	movhi	zero,4682
   490e8:	000499d0 	cmplti	zero,zero,4711
   490ec:	00049a74 	movhi	zero,4713
   490f0:	0004979c 	xori	zero,zero,4702
   490f4:	000497a8 	cmpgeui	zero,zero,4702
   490f8:	000497a8 	cmpgeui	zero,zero,4702
   490fc:	000497a8 	cmpgeui	zero,zero,4702
   49100:	000497a8 	cmpgeui	zero,zero,4702
   49104:	000497a8 	cmpgeui	zero,zero,4702
   49108:	000497a8 	cmpgeui	zero,zero,4702
   4910c:	000497a8 	cmpgeui	zero,zero,4702
   49110:	000497a8 	cmpgeui	zero,zero,4702
   49114:	000497a8 	cmpgeui	zero,zero,4702
   49118:	00049a74 	movhi	zero,4713
   4911c:	00049a74 	movhi	zero,4713
   49120:	00049a74 	movhi	zero,4713
   49124:	00049a74 	movhi	zero,4713
   49128:	00049a74 	movhi	zero,4713
   4912c:	00049a74 	movhi	zero,4713
   49130:	00049a74 	movhi	zero,4713
   49134:	00049a74 	movhi	zero,4713
   49138:	00049a74 	movhi	zero,4713
   4913c:	00049a74 	movhi	zero,4713
   49140:	000497e8 	cmpgeui	zero,zero,4703
   49144:	00049a74 	movhi	zero,4713
   49148:	00049a74 	movhi	zero,4713
   4914c:	00049a74 	movhi	zero,4713
   49150:	00049a74 	movhi	zero,4713
   49154:	00049a74 	movhi	zero,4713
   49158:	00049a74 	movhi	zero,4713
   4915c:	00049a74 	movhi	zero,4713
   49160:	00049a74 	movhi	zero,4713
   49164:	00049a74 	movhi	zero,4713
   49168:	00049a74 	movhi	zero,4713
   4916c:	00049824 	muli	zero,zero,4704
   49170:	00049a74 	movhi	zero,4713
   49174:	00049a74 	movhi	zero,4713
   49178:	00049a74 	movhi	zero,4713
   4917c:	00049a74 	movhi	zero,4713
   49180:	00049a74 	movhi	zero,4713
   49184:	00049880 	call	4988 <__alt_mem_onchip_mem-0x3b678>
   49188:	00049a74 	movhi	zero,4713
   4918c:	00049a74 	movhi	zero,4713
   49190:	000498f4 	movhi	zero,4707
   49194:	00049a74 	movhi	zero,4713
   49198:	00049a74 	movhi	zero,4713
   4919c:	00049a74 	movhi	zero,4713
   491a0:	00049a74 	movhi	zero,4713
   491a4:	00049a74 	movhi	zero,4713
   491a8:	00049a74 	movhi	zero,4713
   491ac:	00049a74 	movhi	zero,4713
   491b0:	00049a74 	movhi	zero,4713
   491b4:	00049a74 	movhi	zero,4713
   491b8:	00049a74 	movhi	zero,4713
   491bc:	0004969c 	xori	zero,zero,4698
   491c0:	000496cc 	andi	zero,zero,4699
   491c4:	00049a74 	movhi	zero,4713
   491c8:	00049a74 	movhi	zero,4713
   491cc:	00049a74 	movhi	zero,4713
   491d0:	00049a1c 	xori	zero,zero,4712
   491d4:	000496cc 	andi	zero,zero,4699
   491d8:	00049a74 	movhi	zero,4713
   491dc:	00049a74 	movhi	zero,4713
   491e0:	00049574 	movhi	zero,4693
   491e4:	00049a74 	movhi	zero,4713
   491e8:	00049588 	cmpgei	zero,zero,4694
   491ec:	000495c0 	call	495c <__alt_mem_onchip_mem-0x3b6a4>
   491f0:	000492c0 	call	492c <__alt_mem_onchip_mem-0x3b6d4>
   491f4:	00049568 	cmpgeui	zero,zero,4693
   491f8:	00049a74 	movhi	zero,4713
   491fc:	00049934 	movhi	zero,4708
   49200:	00049a74 	movhi	zero,4713
   49204:	00049980 	call	4998 <__alt_mem_onchip_mem-0x3b668>
   49208:	00049a74 	movhi	zero,4713
   4920c:	00049a74 	movhi	zero,4713
   49210:	00049644 	movi	zero,4697
   49214:	42000204 	addi	r8,r8,8
   49218:	d8c02417 	ldw	r3,144(sp)
   4921c:	1c07883a 	add	r3,r3,r16
   49220:	d8c02415 	stw	r3,144(sp)
   49224:	003f8c06 	br	49058 <__alt_data_end+0xfffe3858>
   49228:	d9402017 	ldw	r5,128(sp)
   4922c:	d9002117 	ldw	r4,132(sp)
   49230:	0043ad40 	call	43ad4 <__swsetup_r>
   49234:	1003c11e 	bne	r2,zero,4a13c <___vfiprintf_internal_r+0x1224>
   49238:	d9402017 	ldw	r5,128(sp)
   4923c:	00c00284 	movi	r3,10
   49240:	2880030b 	ldhu	r2,12(r5)
   49244:	1080068c 	andi	r2,r2,26
   49248:	10ff581e 	bne	r2,r3,48fac <__alt_data_end+0xfffe37ac>
   4924c:	d8c02017 	ldw	r3,128(sp)
   49250:	1880038f 	ldh	r2,14(r3)
   49254:	103f5516 	blt	r2,zero,48fac <__alt_data_end+0xfffe37ac>
   49258:	d9c02217 	ldw	r7,136(sp)
   4925c:	d9002117 	ldw	r4,132(sp)
   49260:	a80d883a 	mov	r6,r21
   49264:	180b883a 	mov	r5,r3
   49268:	004a4400 	call	4a440 <__sbprintf>
   4926c:	dfc03517 	ldw	ra,212(sp)
   49270:	df003417 	ldw	fp,208(sp)
   49274:	ddc03317 	ldw	r23,204(sp)
   49278:	dd803217 	ldw	r22,200(sp)
   4927c:	dd403117 	ldw	r21,196(sp)
   49280:	dd003017 	ldw	r20,192(sp)
   49284:	dcc02f17 	ldw	r19,188(sp)
   49288:	dc802e17 	ldw	r18,184(sp)
   4928c:	dc402d17 	ldw	r17,180(sp)
   49290:	dc002c17 	ldw	r16,176(sp)
   49294:	dec03604 	addi	sp,sp,216
   49298:	f800283a 	ret
   4929c:	0045ae00 	call	45ae0 <__sinit>
   492a0:	003f2f06 	br	48f60 <__alt_data_end+0xfffe3760>
   492a4:	d8c02517 	ldw	r3,148(sp)
   492a8:	d8802215 	stw	r2,136(sp)
   492ac:	00c7c83a 	sub	r3,zero,r3
   492b0:	d8c02515 	stw	r3,148(sp)
   492b4:	8c400114 	ori	r17,r17,4
   492b8:	b0c00007 	ldb	r3,0(r22)
   492bc:	003f7306 	br	4908c <__alt_data_end+0xfffe388c>
   492c0:	00800c04 	movi	r2,48
   492c4:	d9402217 	ldw	r5,136(sp)
   492c8:	d8801d05 	stb	r2,116(sp)
   492cc:	00801e04 	movi	r2,120
   492d0:	d8801d45 	stb	r2,117(sp)
   492d4:	d8001d85 	stb	zero,118(sp)
   492d8:	b811883a 	mov	r8,r23
   492dc:	28c00104 	addi	r3,r5,4
   492e0:	2cc00017 	ldw	r19,0(r5)
   492e4:	0029883a 	mov	r20,zero
   492e8:	88800094 	ori	r2,r17,2
   492ec:	80032516 	blt	r16,zero,49f84 <___vfiprintf_internal_r+0x106c>
   492f0:	00bfdfc4 	movi	r2,-129
   492f4:	88a2703a 	and	r17,r17,r2
   492f8:	d8c02215 	stw	r3,136(sp)
   492fc:	8c400094 	ori	r17,r17,2
   49300:	98032a1e 	bne	r19,zero,49fac <___vfiprintf_internal_r+0x1094>
   49304:	00800174 	movhi	r2,5
   49308:	10847904 	addi	r2,r2,4580
   4930c:	d8802615 	stw	r2,152(sp)
   49310:	002b883a 	mov	r21,zero
   49314:	8001741e 	bne	r16,zero,498e8 <___vfiprintf_internal_r+0x9d0>
   49318:	0021883a 	mov	r16,zero
   4931c:	0029883a 	mov	r20,zero
   49320:	ddc01a04 	addi	r23,sp,104
   49324:	8027883a 	mov	r19,r16
   49328:	8500010e 	bge	r16,r20,49330 <___vfiprintf_internal_r+0x418>
   4932c:	a027883a 	mov	r19,r20
   49330:	ad403fcc 	andi	r21,r21,255
   49334:	ad40201c 	xori	r21,r21,128
   49338:	ad7fe004 	addi	r21,r21,-128
   4933c:	a8000126 	beq	r21,zero,49344 <___vfiprintf_internal_r+0x42c>
   49340:	9cc00044 	addi	r19,r19,1
   49344:	89c0008c 	andi	r7,r17,2
   49348:	38000126 	beq	r7,zero,49350 <___vfiprintf_internal_r+0x438>
   4934c:	9cc00084 	addi	r19,r19,2
   49350:	88c0210c 	andi	r3,r17,132
   49354:	1801dd1e 	bne	r3,zero,49acc <___vfiprintf_internal_r+0xbb4>
   49358:	d9402517 	ldw	r5,148(sp)
   4935c:	2cebc83a 	sub	r21,r5,r19
   49360:	0541da0e 	bge	zero,r21,49acc <___vfiprintf_internal_r+0xbb4>
   49364:	07000404 	movi	fp,16
   49368:	d8801c17 	ldw	r2,112(sp)
   4936c:	e543be0e 	bge	fp,r21,4a268 <___vfiprintf_internal_r+0x1350>
   49370:	01400174 	movhi	r5,5
   49374:	2944de04 	addi	r5,r5,4984
   49378:	dc002715 	stw	r16,156(sp)
   4937c:	d9801b17 	ldw	r6,108(sp)
   49380:	a821883a 	mov	r16,r21
   49384:	d9402315 	stw	r5,140(sp)
   49388:	028001c4 	movi	r10,7
   4938c:	d9c02915 	stw	r7,164(sp)
   49390:	182b883a 	mov	r21,r3
   49394:	00000506 	br	493ac <___vfiprintf_internal_r+0x494>
   49398:	31000084 	addi	r4,r6,2
   4939c:	42000204 	addi	r8,r8,8
   493a0:	180d883a 	mov	r6,r3
   493a4:	843ffc04 	addi	r16,r16,-16
   493a8:	e4000f0e 	bge	fp,r16,493e8 <___vfiprintf_internal_r+0x4d0>
   493ac:	01000174 	movhi	r4,5
   493b0:	10800404 	addi	r2,r2,16
   493b4:	30c00044 	addi	r3,r6,1
   493b8:	2104de04 	addi	r4,r4,4984
   493bc:	41000015 	stw	r4,0(r8)
   493c0:	47000115 	stw	fp,4(r8)
   493c4:	d8801c15 	stw	r2,112(sp)
   493c8:	d8c01b15 	stw	r3,108(sp)
   493cc:	50fff20e 	bge	r10,r3,49398 <__alt_data_end+0xfffe3b98>
   493d0:	1001b21e 	bne	r2,zero,49a9c <___vfiprintf_internal_r+0xb84>
   493d4:	843ffc04 	addi	r16,r16,-16
   493d8:	000d883a 	mov	r6,zero
   493dc:	01000044 	movi	r4,1
   493e0:	d811883a 	mov	r8,sp
   493e4:	e43ff116 	blt	fp,r16,493ac <__alt_data_end+0xfffe3bac>
   493e8:	a807883a 	mov	r3,r21
   493ec:	d9c02917 	ldw	r7,164(sp)
   493f0:	802b883a 	mov	r21,r16
   493f4:	dc002717 	ldw	r16,156(sp)
   493f8:	d9402317 	ldw	r5,140(sp)
   493fc:	a885883a 	add	r2,r21,r2
   49400:	45400115 	stw	r21,4(r8)
   49404:	41400015 	stw	r5,0(r8)
   49408:	d8801c15 	stw	r2,112(sp)
   4940c:	d9001b15 	stw	r4,108(sp)
   49410:	014001c4 	movi	r5,7
   49414:	29026216 	blt	r5,r4,49da0 <___vfiprintf_internal_r+0xe88>
   49418:	d9801d87 	ldb	r6,118(sp)
   4941c:	42000204 	addi	r8,r8,8
   49420:	21400044 	addi	r5,r4,1
   49424:	3001ae1e 	bne	r6,zero,49ae0 <___vfiprintf_internal_r+0xbc8>
   49428:	3801bb26 	beq	r7,zero,49b18 <___vfiprintf_internal_r+0xc00>
   4942c:	d9001d04 	addi	r4,sp,116
   49430:	10800084 	addi	r2,r2,2
   49434:	41000015 	stw	r4,0(r8)
   49438:	01000084 	movi	r4,2
   4943c:	41000115 	stw	r4,4(r8)
   49440:	d8801c15 	stw	r2,112(sp)
   49444:	d9401b15 	stw	r5,108(sp)
   49448:	010001c4 	movi	r4,7
   4944c:	2142680e 	bge	r4,r5,49df0 <___vfiprintf_internal_r+0xed8>
   49450:	1002b11e 	bne	r2,zero,49f18 <___vfiprintf_internal_r+0x1000>
   49454:	01802004 	movi	r6,128
   49458:	01400044 	movi	r5,1
   4945c:	0009883a 	mov	r4,zero
   49460:	d811883a 	mov	r8,sp
   49464:	1981ae1e 	bne	r3,r6,49b20 <___vfiprintf_internal_r+0xc08>
   49468:	d8c02517 	ldw	r3,148(sp)
   4946c:	1cf9c83a 	sub	fp,r3,r19
   49470:	0701ab0e 	bge	zero,fp,49b20 <___vfiprintf_internal_r+0xc08>
   49474:	05400404 	movi	r21,16
   49478:	af03a90e 	bge	r21,fp,4a320 <___vfiprintf_internal_r+0x1408>
   4947c:	01400174 	movhi	r5,5
   49480:	2944da04 	addi	r5,r5,4968
   49484:	d9402315 	stw	r5,140(sp)
   49488:	01c001c4 	movi	r7,7
   4948c:	00000506 	br	494a4 <___vfiprintf_internal_r+0x58c>
   49490:	21800084 	addi	r6,r4,2
   49494:	42000204 	addi	r8,r8,8
   49498:	1809883a 	mov	r4,r3
   4949c:	e73ffc04 	addi	fp,fp,-16
   494a0:	af000d0e 	bge	r21,fp,494d8 <___vfiprintf_internal_r+0x5c0>
   494a4:	10800404 	addi	r2,r2,16
   494a8:	20c00044 	addi	r3,r4,1
   494ac:	44800015 	stw	r18,0(r8)
   494b0:	45400115 	stw	r21,4(r8)
   494b4:	d8801c15 	stw	r2,112(sp)
   494b8:	d8c01b15 	stw	r3,108(sp)
   494bc:	38fff40e 	bge	r7,r3,49490 <__alt_data_end+0xfffe3c90>
   494c0:	10022b1e 	bne	r2,zero,49d70 <___vfiprintf_internal_r+0xe58>
   494c4:	e73ffc04 	addi	fp,fp,-16
   494c8:	01800044 	movi	r6,1
   494cc:	0009883a 	mov	r4,zero
   494d0:	d811883a 	mov	r8,sp
   494d4:	af3ff316 	blt	r21,fp,494a4 <__alt_data_end+0xfffe3ca4>
   494d8:	d8c02317 	ldw	r3,140(sp)
   494dc:	1705883a 	add	r2,r2,fp
   494e0:	47000115 	stw	fp,4(r8)
   494e4:	40c00015 	stw	r3,0(r8)
   494e8:	d8801c15 	stw	r2,112(sp)
   494ec:	d9801b15 	stw	r6,108(sp)
   494f0:	00c001c4 	movi	r3,7
   494f4:	19829416 	blt	r3,r6,49f48 <___vfiprintf_internal_r+0x1030>
   494f8:	8521c83a 	sub	r16,r16,r20
   494fc:	42000204 	addi	r8,r8,8
   49500:	31400044 	addi	r5,r6,1
   49504:	3009883a 	mov	r4,r6
   49508:	04018716 	blt	zero,r16,49b28 <___vfiprintf_internal_r+0xc10>
   4950c:	a085883a 	add	r2,r20,r2
   49510:	45c00015 	stw	r23,0(r8)
   49514:	45000115 	stw	r20,4(r8)
   49518:	d8801c15 	stw	r2,112(sp)
   4951c:	d9401b15 	stw	r5,108(sp)
   49520:	00c001c4 	movi	r3,7
   49524:	1941c20e 	bge	r3,r5,49c30 <___vfiprintf_internal_r+0xd18>
   49528:	1002531e 	bne	r2,zero,49e78 <___vfiprintf_internal_r+0xf60>
   4952c:	d8001b15 	stw	zero,108(sp)
   49530:	8c40010c 	andi	r17,r17,4
   49534:	88023226 	beq	r17,zero,49e00 <___vfiprintf_internal_r+0xee8>
   49538:	d9002517 	ldw	r4,148(sp)
   4953c:	24e3c83a 	sub	r17,r4,r19
   49540:	04432916 	blt	zero,r17,4a1e8 <___vfiprintf_internal_r+0x12d0>
   49544:	d8802517 	ldw	r2,148(sp)
   49548:	14c0010e 	bge	r2,r19,49550 <___vfiprintf_internal_r+0x638>
   4954c:	9805883a 	mov	r2,r19
   49550:	d8c02417 	ldw	r3,144(sp)
   49554:	1887883a 	add	r3,r3,r2
   49558:	d8c02415 	stw	r3,144(sp)
   4955c:	d8001b15 	stw	zero,108(sp)
   49560:	d811883a 	mov	r8,sp
   49564:	003ea006 	br	48fe8 <__alt_data_end+0xfffe37e8>
   49568:	8c400814 	ori	r17,r17,32
   4956c:	b0c00007 	ldb	r3,0(r22)
   49570:	003ec606 	br	4908c <__alt_data_end+0xfffe388c>
   49574:	b0c00007 	ldb	r3,0(r22)
   49578:	00801b04 	movi	r2,108
   4957c:	18832026 	beq	r3,r2,4a200 <___vfiprintf_internal_r+0x12e8>
   49580:	8c400414 	ori	r17,r17,16
   49584:	003ec106 	br	4908c <__alt_data_end+0xfffe388c>
   49588:	9cc03fcc 	andi	r19,r19,255
   4958c:	b811883a 	mov	r8,r23
   49590:	9803981e 	bne	r19,zero,4a3f4 <___vfiprintf_internal_r+0x14dc>
   49594:	8880080c 	andi	r2,r17,32
   49598:	1002be26 	beq	r2,zero,4a094 <___vfiprintf_internal_r+0x117c>
   4959c:	d9002217 	ldw	r4,136(sp)
   495a0:	d9402417 	ldw	r5,144(sp)
   495a4:	20800017 	ldw	r2,0(r4)
   495a8:	2807d7fa 	srai	r3,r5,31
   495ac:	21000104 	addi	r4,r4,4
   495b0:	d9002215 	stw	r4,136(sp)
   495b4:	11400015 	stw	r5,0(r2)
   495b8:	10c00115 	stw	r3,4(r2)
   495bc:	003e8a06 	br	48fe8 <__alt_data_end+0xfffe37e8>
   495c0:	9cc03fcc 	andi	r19,r19,255
   495c4:	b811883a 	mov	r8,r23
   495c8:	9803871e 	bne	r19,zero,4a3e8 <___vfiprintf_internal_r+0x14d0>
   495cc:	8880080c 	andi	r2,r17,32
   495d0:	10009a26 	beq	r2,zero,4983c <___vfiprintf_internal_r+0x924>
   495d4:	d9002217 	ldw	r4,136(sp)
   495d8:	d8001d85 	stb	zero,118(sp)
   495dc:	20800204 	addi	r2,r4,8
   495e0:	24c00017 	ldw	r19,0(r4)
   495e4:	25000117 	ldw	r20,4(r4)
   495e8:	8002a416 	blt	r16,zero,4a07c <___vfiprintf_internal_r+0x1164>
   495ec:	013fdfc4 	movi	r4,-129
   495f0:	9d06b03a 	or	r3,r19,r20
   495f4:	d8802215 	stw	r2,136(sp)
   495f8:	8922703a 	and	r17,r17,r4
   495fc:	18009b26 	beq	r3,zero,4986c <___vfiprintf_internal_r+0x954>
   49600:	002b883a 	mov	r21,zero
   49604:	ddc01a04 	addi	r23,sp,104
   49608:	9806d0fa 	srli	r3,r19,3
   4960c:	a008977a 	slli	r4,r20,29
   49610:	a028d0fa 	srli	r20,r20,3
   49614:	9cc001cc 	andi	r19,r19,7
   49618:	98800c04 	addi	r2,r19,48
   4961c:	bdffffc4 	addi	r23,r23,-1
   49620:	20e6b03a 	or	r19,r4,r3
   49624:	b8800005 	stb	r2,0(r23)
   49628:	9d06b03a 	or	r3,r19,r20
   4962c:	183ff61e 	bne	r3,zero,49608 <__alt_data_end+0xfffe3e08>
   49630:	88c0004c 	andi	r3,r17,1
   49634:	18021f1e 	bne	r3,zero,49eb4 <___vfiprintf_internal_r+0xf9c>
   49638:	d9401e17 	ldw	r5,120(sp)
   4963c:	2de9c83a 	sub	r20,r5,r23
   49640:	003f3806 	br	49324 <__alt_data_end+0xfffe3b24>
   49644:	9cc03fcc 	andi	r19,r19,255
   49648:	b811883a 	mov	r8,r23
   4964c:	98034f1e 	bne	r19,zero,4a38c <___vfiprintf_internal_r+0x1474>
   49650:	00800174 	movhi	r2,5
   49654:	10847904 	addi	r2,r2,4580
   49658:	d8802615 	stw	r2,152(sp)
   4965c:	8880080c 	andi	r2,r17,32
   49660:	1000ac26 	beq	r2,zero,49914 <___vfiprintf_internal_r+0x9fc>
   49664:	d9002217 	ldw	r4,136(sp)
   49668:	24c00017 	ldw	r19,0(r4)
   4966c:	25000117 	ldw	r20,4(r4)
   49670:	21000204 	addi	r4,r4,8
   49674:	d9002215 	stw	r4,136(sp)
   49678:	8880004c 	andi	r2,r17,1
   4967c:	1001e726 	beq	r2,zero,49e1c <___vfiprintf_internal_r+0xf04>
   49680:	9d04b03a 	or	r2,r19,r20
   49684:	10025c1e 	bne	r2,zero,49ff8 <___vfiprintf_internal_r+0x10e0>
   49688:	d8001d85 	stb	zero,118(sp)
   4968c:	80024416 	blt	r16,zero,49fa0 <___vfiprintf_internal_r+0x1088>
   49690:	00bfdfc4 	movi	r2,-129
   49694:	88a2703a 	and	r17,r17,r2
   49698:	003f1d06 	br	49310 <__alt_data_end+0xfffe3b10>
   4969c:	d8c02217 	ldw	r3,136(sp)
   496a0:	04c00044 	movi	r19,1
   496a4:	b811883a 	mov	r8,r23
   496a8:	18800017 	ldw	r2,0(r3)
   496ac:	18c00104 	addi	r3,r3,4
   496b0:	d8001d85 	stb	zero,118(sp)
   496b4:	d8801005 	stb	r2,64(sp)
   496b8:	d8c02215 	stw	r3,136(sp)
   496bc:	9829883a 	mov	r20,r19
   496c0:	ddc01004 	addi	r23,sp,64
   496c4:	0021883a 	mov	r16,zero
   496c8:	003f1e06 	br	49344 <__alt_data_end+0xfffe3b44>
   496cc:	9cc03fcc 	andi	r19,r19,255
   496d0:	b811883a 	mov	r8,r23
   496d4:	9803331e 	bne	r19,zero,4a3a4 <___vfiprintf_internal_r+0x148c>
   496d8:	8880080c 	andi	r2,r17,32
   496dc:	10004826 	beq	r2,zero,49800 <___vfiprintf_internal_r+0x8e8>
   496e0:	d9002217 	ldw	r4,136(sp)
   496e4:	20800117 	ldw	r2,4(r4)
   496e8:	24c00017 	ldw	r19,0(r4)
   496ec:	21000204 	addi	r4,r4,8
   496f0:	d9002215 	stw	r4,136(sp)
   496f4:	1029883a 	mov	r20,r2
   496f8:	10024c16 	blt	r2,zero,4a02c <___vfiprintf_internal_r+0x1114>
   496fc:	dd401d83 	ldbu	r21,118(sp)
   49700:	80007116 	blt	r16,zero,498c8 <___vfiprintf_internal_r+0x9b0>
   49704:	00ffdfc4 	movi	r3,-129
   49708:	9d04b03a 	or	r2,r19,r20
   4970c:	88e2703a 	and	r17,r17,r3
   49710:	1000d126 	beq	r2,zero,49a58 <___vfiprintf_internal_r+0xb40>
   49714:	a0023526 	beq	r20,zero,49fec <___vfiprintf_internal_r+0x10d4>
   49718:	ddc01a04 	addi	r23,sp,104
   4971c:	4039883a 	mov	fp,r8
   49720:	9809883a 	mov	r4,r19
   49724:	a00b883a 	mov	r5,r20
   49728:	01800284 	movi	r6,10
   4972c:	000f883a 	mov	r7,zero
   49730:	004b4440 	call	4b444 <__umoddi3>
   49734:	10800c04 	addi	r2,r2,48
   49738:	bdffffc4 	addi	r23,r23,-1
   4973c:	9809883a 	mov	r4,r19
   49740:	a00b883a 	mov	r5,r20
   49744:	b8800005 	stb	r2,0(r23)
   49748:	01800284 	movi	r6,10
   4974c:	000f883a 	mov	r7,zero
   49750:	004ae480 	call	4ae48 <__udivdi3>
   49754:	1027883a 	mov	r19,r2
   49758:	10c4b03a 	or	r2,r2,r3
   4975c:	1829883a 	mov	r20,r3
   49760:	103fef1e 	bne	r2,zero,49720 <__alt_data_end+0xfffe3f20>
   49764:	d9001e17 	ldw	r4,120(sp)
   49768:	e011883a 	mov	r8,fp
   4976c:	25e9c83a 	sub	r20,r4,r23
   49770:	003eec06 	br	49324 <__alt_data_end+0xfffe3b24>
   49774:	d8802307 	ldb	r2,140(sp)
   49778:	1002361e 	bne	r2,zero,4a054 <___vfiprintf_internal_r+0x113c>
   4977c:	00c00804 	movi	r3,32
   49780:	d8c02305 	stb	r3,140(sp)
   49784:	04c00044 	movi	r19,1
   49788:	b0c00007 	ldb	r3,0(r22)
   4978c:	003e3f06 	br	4908c <__alt_data_end+0xfffe388c>
   49790:	8c400054 	ori	r17,r17,1
   49794:	b0c00007 	ldb	r3,0(r22)
   49798:	003e3c06 	br	4908c <__alt_data_end+0xfffe388c>
   4979c:	8c402014 	ori	r17,r17,128
   497a0:	b0c00007 	ldb	r3,0(r22)
   497a4:	003e3906 	br	4908c <__alt_data_end+0xfffe388c>
   497a8:	dc002715 	stw	r16,156(sp)
   497ac:	d8002515 	stw	zero,148(sp)
   497b0:	1f3ff404 	addi	fp,r3,-48
   497b4:	0009883a 	mov	r4,zero
   497b8:	b021883a 	mov	r16,r22
   497bc:	01400284 	movi	r5,10
   497c0:	00415200 	call	41520 <__mulsi3>
   497c4:	80c00007 	ldb	r3,0(r16)
   497c8:	e089883a 	add	r4,fp,r2
   497cc:	b5800044 	addi	r22,r22,1
   497d0:	1f3ff404 	addi	fp,r3,-48
   497d4:	b021883a 	mov	r16,r22
   497d8:	af3ff82e 	bgeu	r21,fp,497bc <__alt_data_end+0xfffe3fbc>
   497dc:	d9002515 	stw	r4,148(sp)
   497e0:	dc002717 	ldw	r16,156(sp)
   497e4:	003e2a06 	br	49090 <__alt_data_end+0xfffe3890>
   497e8:	9cc03fcc 	andi	r19,r19,255
   497ec:	b811883a 	mov	r8,r23
   497f0:	9802e91e 	bne	r19,zero,4a398 <___vfiprintf_internal_r+0x1480>
   497f4:	8c400414 	ori	r17,r17,16
   497f8:	8880080c 	andi	r2,r17,32
   497fc:	103fb81e 	bne	r2,zero,496e0 <__alt_data_end+0xfffe3ee0>
   49800:	8880040c 	andi	r2,r17,16
   49804:	10022e26 	beq	r2,zero,4a0c0 <___vfiprintf_internal_r+0x11a8>
   49808:	d9402217 	ldw	r5,136(sp)
   4980c:	2cc00017 	ldw	r19,0(r5)
   49810:	29400104 	addi	r5,r5,4
   49814:	d9402215 	stw	r5,136(sp)
   49818:	9829d7fa 	srai	r20,r19,31
   4981c:	a005883a 	mov	r2,r20
   49820:	003fb506 	br	496f8 <__alt_data_end+0xfffe3ef8>
   49824:	9cc03fcc 	andi	r19,r19,255
   49828:	b811883a 	mov	r8,r23
   4982c:	9802fa1e 	bne	r19,zero,4a418 <___vfiprintf_internal_r+0x1500>
   49830:	8c400414 	ori	r17,r17,16
   49834:	8880080c 	andi	r2,r17,32
   49838:	103f661e 	bne	r2,zero,495d4 <__alt_data_end+0xfffe3dd4>
   4983c:	8880040c 	andi	r2,r17,16
   49840:	10020626 	beq	r2,zero,4a05c <___vfiprintf_internal_r+0x1144>
   49844:	d9402217 	ldw	r5,136(sp)
   49848:	d8001d85 	stb	zero,118(sp)
   4984c:	0029883a 	mov	r20,zero
   49850:	28800104 	addi	r2,r5,4
   49854:	2cc00017 	ldw	r19,0(r5)
   49858:	80020816 	blt	r16,zero,4a07c <___vfiprintf_internal_r+0x1164>
   4985c:	00ffdfc4 	movi	r3,-129
   49860:	d8802215 	stw	r2,136(sp)
   49864:	88e2703a 	and	r17,r17,r3
   49868:	983f651e 	bne	r19,zero,49600 <__alt_data_end+0xfffe3e00>
   4986c:	002b883a 	mov	r21,zero
   49870:	8002cf26 	beq	r16,zero,4a3b0 <___vfiprintf_internal_r+0x1498>
   49874:	0027883a 	mov	r19,zero
   49878:	0029883a 	mov	r20,zero
   4987c:	003f6106 	br	49604 <__alt_data_end+0xfffe3e04>
   49880:	9cc03fcc 	andi	r19,r19,255
   49884:	b811883a 	mov	r8,r23
   49888:	9802e01e 	bne	r19,zero,4a40c <___vfiprintf_internal_r+0x14f4>
   4988c:	8c400414 	ori	r17,r17,16
   49890:	8880080c 	andi	r2,r17,32
   49894:	1000641e 	bne	r2,zero,49a28 <___vfiprintf_internal_r+0xb10>
   49898:	8880040c 	andi	r2,r17,16
   4989c:	1001c81e 	bne	r2,zero,49fc0 <___vfiprintf_internal_r+0x10a8>
   498a0:	8880100c 	andi	r2,r17,64
   498a4:	d8001d85 	stb	zero,118(sp)
   498a8:	1002281e 	bne	r2,zero,4a14c <___vfiprintf_internal_r+0x1234>
   498ac:	d9002217 	ldw	r4,136(sp)
   498b0:	0029883a 	mov	r20,zero
   498b4:	20800104 	addi	r2,r4,4
   498b8:	24c00017 	ldw	r19,0(r4)
   498bc:	8001c60e 	bge	r16,zero,49fd8 <___vfiprintf_internal_r+0x10c0>
   498c0:	d8802215 	stw	r2,136(sp)
   498c4:	002b883a 	mov	r21,zero
   498c8:	9d04b03a 	or	r2,r19,r20
   498cc:	103f911e 	bne	r2,zero,49714 <__alt_data_end+0xfffe3f14>
   498d0:	00800044 	movi	r2,1
   498d4:	10803fcc 	andi	r2,r2,255
   498d8:	00c00044 	movi	r3,1
   498dc:	10c05f26 	beq	r2,r3,49a5c <___vfiprintf_internal_r+0xb44>
   498e0:	00c00084 	movi	r3,2
   498e4:	10ffe31e 	bne	r2,r3,49874 <__alt_data_end+0xfffe4074>
   498e8:	0027883a 	mov	r19,zero
   498ec:	0029883a 	mov	r20,zero
   498f0:	00015106 	br	49e38 <___vfiprintf_internal_r+0xf20>
   498f4:	9cc03fcc 	andi	r19,r19,255
   498f8:	b811883a 	mov	r8,r23
   498fc:	9802c01e 	bne	r19,zero,4a400 <___vfiprintf_internal_r+0x14e8>
   49900:	01400174 	movhi	r5,5
   49904:	29447404 	addi	r5,r5,4560
   49908:	d9402615 	stw	r5,152(sp)
   4990c:	8880080c 	andi	r2,r17,32
   49910:	103f541e 	bne	r2,zero,49664 <__alt_data_end+0xfffe3e64>
   49914:	8880040c 	andi	r2,r17,16
   49918:	1001f226 	beq	r2,zero,4a0e4 <___vfiprintf_internal_r+0x11cc>
   4991c:	d9402217 	ldw	r5,136(sp)
   49920:	0029883a 	mov	r20,zero
   49924:	2cc00017 	ldw	r19,0(r5)
   49928:	29400104 	addi	r5,r5,4
   4992c:	d9402215 	stw	r5,136(sp)
   49930:	003f5106 	br	49678 <__alt_data_end+0xfffe3e78>
   49934:	d8c02217 	ldw	r3,136(sp)
   49938:	b811883a 	mov	r8,r23
   4993c:	d8001d85 	stb	zero,118(sp)
   49940:	1dc00017 	ldw	r23,0(r3)
   49944:	1f000104 	addi	fp,r3,4
   49948:	b8025926 	beq	r23,zero,4a2b0 <___vfiprintf_internal_r+0x1398>
   4994c:	80023316 	blt	r16,zero,4a21c <___vfiprintf_internal_r+0x1304>
   49950:	800d883a 	mov	r6,r16
   49954:	000b883a 	mov	r5,zero
   49958:	b809883a 	mov	r4,r23
   4995c:	da002a15 	stw	r8,168(sp)
   49960:	00470580 	call	47058 <memchr>
   49964:	da002a17 	ldw	r8,168(sp)
   49968:	10026826 	beq	r2,zero,4a30c <___vfiprintf_internal_r+0x13f4>
   4996c:	15e9c83a 	sub	r20,r2,r23
   49970:	dd401d83 	ldbu	r21,118(sp)
   49974:	df002215 	stw	fp,136(sp)
   49978:	0021883a 	mov	r16,zero
   4997c:	003e6906 	br	49324 <__alt_data_end+0xfffe3b24>
   49980:	9cc03fcc 	andi	r19,r19,255
   49984:	b811883a 	mov	r8,r23
   49988:	983fc126 	beq	r19,zero,49890 <__alt_data_end+0xfffe4090>
   4998c:	d8c02303 	ldbu	r3,140(sp)
   49990:	d8c01d85 	stb	r3,118(sp)
   49994:	003fbe06 	br	49890 <__alt_data_end+0xfffe4090>
   49998:	d9002217 	ldw	r4,136(sp)
   4999c:	d9402217 	ldw	r5,136(sp)
   499a0:	21000017 	ldw	r4,0(r4)
   499a4:	28800104 	addi	r2,r5,4
   499a8:	d9002515 	stw	r4,148(sp)
   499ac:	203e3d16 	blt	r4,zero,492a4 <__alt_data_end+0xfffe3aa4>
   499b0:	d8802215 	stw	r2,136(sp)
   499b4:	b0c00007 	ldb	r3,0(r22)
   499b8:	003db406 	br	4908c <__alt_data_end+0xfffe388c>
   499bc:	00c00ac4 	movi	r3,43
   499c0:	d8c02305 	stb	r3,140(sp)
   499c4:	04c00044 	movi	r19,1
   499c8:	b0c00007 	ldb	r3,0(r22)
   499cc:	003daf06 	br	4908c <__alt_data_end+0xfffe388c>
   499d0:	b0c00007 	ldb	r3,0(r22)
   499d4:	01000a84 	movi	r4,42
   499d8:	b4000044 	addi	r16,r22,1
   499dc:	19025e26 	beq	r3,r4,4a358 <___vfiprintf_internal_r+0x1440>
   499e0:	1f3ff404 	addi	fp,r3,-48
   499e4:	0009883a 	mov	r4,zero
   499e8:	af025236 	bltu	r21,fp,4a334 <___vfiprintf_internal_r+0x141c>
   499ec:	01400284 	movi	r5,10
   499f0:	00415200 	call	41520 <__mulsi3>
   499f4:	80c00007 	ldb	r3,0(r16)
   499f8:	1709883a 	add	r4,r2,fp
   499fc:	85800044 	addi	r22,r16,1
   49a00:	1f3ff404 	addi	fp,r3,-48
   49a04:	b021883a 	mov	r16,r22
   49a08:	af3ff82e 	bgeu	r21,fp,499ec <__alt_data_end+0xfffe41ec>
   49a0c:	2021883a 	mov	r16,r4
   49a10:	203d9f0e 	bge	r4,zero,49090 <__alt_data_end+0xfffe3890>
   49a14:	043fffc4 	movi	r16,-1
   49a18:	003d9d06 	br	49090 <__alt_data_end+0xfffe3890>
   49a1c:	8c401014 	ori	r17,r17,64
   49a20:	b0c00007 	ldb	r3,0(r22)
   49a24:	003d9906 	br	4908c <__alt_data_end+0xfffe388c>
   49a28:	d9002217 	ldw	r4,136(sp)
   49a2c:	d8001d85 	stb	zero,118(sp)
   49a30:	20c00204 	addi	r3,r4,8
   49a34:	24c00017 	ldw	r19,0(r4)
   49a38:	25000117 	ldw	r20,4(r4)
   49a3c:	8001e716 	blt	r16,zero,4a1dc <___vfiprintf_internal_r+0x12c4>
   49a40:	013fdfc4 	movi	r4,-129
   49a44:	9d04b03a 	or	r2,r19,r20
   49a48:	d8c02215 	stw	r3,136(sp)
   49a4c:	8922703a 	and	r17,r17,r4
   49a50:	002b883a 	mov	r21,zero
   49a54:	103f2f1e 	bne	r2,zero,49714 <__alt_data_end+0xfffe3f14>
   49a58:	803e2f26 	beq	r16,zero,49318 <__alt_data_end+0xfffe3b18>
   49a5c:	0027883a 	mov	r19,zero
   49a60:	9cc00c04 	addi	r19,r19,48
   49a64:	dcc019c5 	stb	r19,103(sp)
   49a68:	dd002817 	ldw	r20,160(sp)
   49a6c:	ddc019c4 	addi	r23,sp,103
   49a70:	003e2c06 	br	49324 <__alt_data_end+0xfffe3b24>
   49a74:	9cc03fcc 	andi	r19,r19,255
   49a78:	b811883a 	mov	r8,r23
   49a7c:	9802571e 	bne	r19,zero,4a3dc <___vfiprintf_internal_r+0x14c4>
   49a80:	18005726 	beq	r3,zero,49be0 <___vfiprintf_internal_r+0xcc8>
   49a84:	04c00044 	movi	r19,1
   49a88:	d8c01005 	stb	r3,64(sp)
   49a8c:	d8001d85 	stb	zero,118(sp)
   49a90:	9829883a 	mov	r20,r19
   49a94:	ddc01004 	addi	r23,sp,64
   49a98:	003f0a06 	br	496c4 <__alt_data_end+0xfffe3ec4>
   49a9c:	d9402017 	ldw	r5,128(sp)
   49aa0:	d9002117 	ldw	r4,132(sp)
   49aa4:	d9801a04 	addi	r6,sp,104
   49aa8:	da802a15 	stw	r10,168(sp)
   49aac:	0048e040 	call	48e04 <__sprint_r.part.0>
   49ab0:	da802a17 	ldw	r10,168(sp)
   49ab4:	1000501e 	bne	r2,zero,49bf8 <___vfiprintf_internal_r+0xce0>
   49ab8:	d9801b17 	ldw	r6,108(sp)
   49abc:	d8801c17 	ldw	r2,112(sp)
   49ac0:	d811883a 	mov	r8,sp
   49ac4:	31000044 	addi	r4,r6,1
   49ac8:	003e3606 	br	493a4 <__alt_data_end+0xfffe3ba4>
   49acc:	d9001b17 	ldw	r4,108(sp)
   49ad0:	d8801c17 	ldw	r2,112(sp)
   49ad4:	21400044 	addi	r5,r4,1
   49ad8:	d9801d87 	ldb	r6,118(sp)
   49adc:	303e5226 	beq	r6,zero,49428 <__alt_data_end+0xfffe3c28>
   49ae0:	01800044 	movi	r6,1
   49ae4:	d9001d84 	addi	r4,sp,118
   49ae8:	1185883a 	add	r2,r2,r6
   49aec:	41000015 	stw	r4,0(r8)
   49af0:	41800115 	stw	r6,4(r8)
   49af4:	d8801c15 	stw	r2,112(sp)
   49af8:	d9401b15 	stw	r5,108(sp)
   49afc:	010001c4 	movi	r4,7
   49b00:	2140b00e 	bge	r4,r5,49dc4 <___vfiprintf_internal_r+0xeac>
   49b04:	1000f61e 	bne	r2,zero,49ee0 <___vfiprintf_internal_r+0xfc8>
   49b08:	3800b31e 	bne	r7,zero,49dd8 <___vfiprintf_internal_r+0xec0>
   49b0c:	0009883a 	mov	r4,zero
   49b10:	300b883a 	mov	r5,r6
   49b14:	d811883a 	mov	r8,sp
   49b18:	01802004 	movi	r6,128
   49b1c:	19be5226 	beq	r3,r6,49468 <__alt_data_end+0xfffe3c68>
   49b20:	8521c83a 	sub	r16,r16,r20
   49b24:	043e790e 	bge	zero,r16,4950c <__alt_data_end+0xfffe3d0c>
   49b28:	05400404 	movi	r21,16
   49b2c:	ac01b00e 	bge	r21,r16,4a1f0 <___vfiprintf_internal_r+0x12d8>
   49b30:	01400174 	movhi	r5,5
   49b34:	2944da04 	addi	r5,r5,4968
   49b38:	d9402315 	stw	r5,140(sp)
   49b3c:	070001c4 	movi	fp,7
   49b40:	00000506 	br	49b58 <___vfiprintf_internal_r+0xc40>
   49b44:	21400084 	addi	r5,r4,2
   49b48:	42000204 	addi	r8,r8,8
   49b4c:	1809883a 	mov	r4,r3
   49b50:	843ffc04 	addi	r16,r16,-16
   49b54:	ac000d0e 	bge	r21,r16,49b8c <___vfiprintf_internal_r+0xc74>
   49b58:	10800404 	addi	r2,r2,16
   49b5c:	20c00044 	addi	r3,r4,1
   49b60:	44800015 	stw	r18,0(r8)
   49b64:	45400115 	stw	r21,4(r8)
   49b68:	d8801c15 	stw	r2,112(sp)
   49b6c:	d8c01b15 	stw	r3,108(sp)
   49b70:	e0fff40e 	bge	fp,r3,49b44 <__alt_data_end+0xfffe4344>
   49b74:	1000101e 	bne	r2,zero,49bb8 <___vfiprintf_internal_r+0xca0>
   49b78:	843ffc04 	addi	r16,r16,-16
   49b7c:	01400044 	movi	r5,1
   49b80:	0009883a 	mov	r4,zero
   49b84:	d811883a 	mov	r8,sp
   49b88:	ac3ff316 	blt	r21,r16,49b58 <__alt_data_end+0xfffe4358>
   49b8c:	d8c02317 	ldw	r3,140(sp)
   49b90:	1405883a 	add	r2,r2,r16
   49b94:	44000115 	stw	r16,4(r8)
   49b98:	40c00015 	stw	r3,0(r8)
   49b9c:	d8801c15 	stw	r2,112(sp)
   49ba0:	d9401b15 	stw	r5,108(sp)
   49ba4:	00c001c4 	movi	r3,7
   49ba8:	19401916 	blt	r3,r5,49c10 <___vfiprintf_internal_r+0xcf8>
   49bac:	42000204 	addi	r8,r8,8
   49bb0:	29400044 	addi	r5,r5,1
   49bb4:	003e5506 	br	4950c <__alt_data_end+0xfffe3d0c>
   49bb8:	d9402017 	ldw	r5,128(sp)
   49bbc:	d9002117 	ldw	r4,132(sp)
   49bc0:	d9801a04 	addi	r6,sp,104
   49bc4:	0048e040 	call	48e04 <__sprint_r.part.0>
   49bc8:	10000b1e 	bne	r2,zero,49bf8 <___vfiprintf_internal_r+0xce0>
   49bcc:	d9001b17 	ldw	r4,108(sp)
   49bd0:	d8801c17 	ldw	r2,112(sp)
   49bd4:	d811883a 	mov	r8,sp
   49bd8:	21400044 	addi	r5,r4,1
   49bdc:	003fdc06 	br	49b50 <__alt_data_end+0xfffe4350>
   49be0:	d8801c17 	ldw	r2,112(sp)
   49be4:	10000426 	beq	r2,zero,49bf8 <___vfiprintf_internal_r+0xce0>
   49be8:	d9402017 	ldw	r5,128(sp)
   49bec:	d9002117 	ldw	r4,132(sp)
   49bf0:	d9801a04 	addi	r6,sp,104
   49bf4:	0048e040 	call	48e04 <__sprint_r.part.0>
   49bf8:	d9402017 	ldw	r5,128(sp)
   49bfc:	2880030b 	ldhu	r2,12(r5)
   49c00:	1080100c 	andi	r2,r2,64
   49c04:	10014d1e 	bne	r2,zero,4a13c <___vfiprintf_internal_r+0x1224>
   49c08:	d8802417 	ldw	r2,144(sp)
   49c0c:	003d9706 	br	4926c <__alt_data_end+0xfffe3a6c>
   49c10:	1000d21e 	bne	r2,zero,49f5c <___vfiprintf_internal_r+0x1044>
   49c14:	00c00044 	movi	r3,1
   49c18:	a005883a 	mov	r2,r20
   49c1c:	ddc00015 	stw	r23,0(sp)
   49c20:	dd000115 	stw	r20,4(sp)
   49c24:	dd001c15 	stw	r20,112(sp)
   49c28:	d8c01b15 	stw	r3,108(sp)
   49c2c:	d811883a 	mov	r8,sp
   49c30:	42000204 	addi	r8,r8,8
   49c34:	8c40010c 	andi	r17,r17,4
   49c38:	88004026 	beq	r17,zero,49d3c <___vfiprintf_internal_r+0xe24>
   49c3c:	d9002517 	ldw	r4,148(sp)
   49c40:	24e3c83a 	sub	r17,r4,r19
   49c44:	04403d0e 	bge	zero,r17,49d3c <___vfiprintf_internal_r+0xe24>
   49c48:	04000404 	movi	r16,16
   49c4c:	8441a90e 	bge	r16,r17,4a2f4 <___vfiprintf_internal_r+0x13dc>
   49c50:	00c00174 	movhi	r3,5
   49c54:	18c4de04 	addi	r3,r3,4984
   49c58:	d9001b17 	ldw	r4,108(sp)
   49c5c:	d8c02315 	stw	r3,140(sp)
   49c60:	050001c4 	movi	r20,7
   49c64:	dd402117 	ldw	r21,132(sp)
   49c68:	ddc02017 	ldw	r23,128(sp)
   49c6c:	00000506 	br	49c84 <___vfiprintf_internal_r+0xd6c>
   49c70:	21400084 	addi	r5,r4,2
   49c74:	42000204 	addi	r8,r8,8
   49c78:	1809883a 	mov	r4,r3
   49c7c:	8c7ffc04 	addi	r17,r17,-16
   49c80:	84400f0e 	bge	r16,r17,49cc0 <___vfiprintf_internal_r+0xda8>
   49c84:	01400174 	movhi	r5,5
   49c88:	10800404 	addi	r2,r2,16
   49c8c:	20c00044 	addi	r3,r4,1
   49c90:	2944de04 	addi	r5,r5,4984
   49c94:	41400015 	stw	r5,0(r8)
   49c98:	44000115 	stw	r16,4(r8)
   49c9c:	d8801c15 	stw	r2,112(sp)
   49ca0:	d8c01b15 	stw	r3,108(sp)
   49ca4:	a0fff20e 	bge	r20,r3,49c70 <__alt_data_end+0xfffe4470>
   49ca8:	1000141e 	bne	r2,zero,49cfc <___vfiprintf_internal_r+0xde4>
   49cac:	8c7ffc04 	addi	r17,r17,-16
   49cb0:	01400044 	movi	r5,1
   49cb4:	0009883a 	mov	r4,zero
   49cb8:	d811883a 	mov	r8,sp
   49cbc:	847ff116 	blt	r16,r17,49c84 <__alt_data_end+0xfffe4484>
   49cc0:	d8c02317 	ldw	r3,140(sp)
   49cc4:	1445883a 	add	r2,r2,r17
   49cc8:	44400115 	stw	r17,4(r8)
   49ccc:	40c00015 	stw	r3,0(r8)
   49cd0:	d8801c15 	stw	r2,112(sp)
   49cd4:	d9401b15 	stw	r5,108(sp)
   49cd8:	00c001c4 	movi	r3,7
   49cdc:	1940170e 	bge	r3,r5,49d3c <___vfiprintf_internal_r+0xe24>
   49ce0:	1000101e 	bne	r2,zero,49d24 <___vfiprintf_internal_r+0xe0c>
   49ce4:	d8802517 	ldw	r2,148(sp)
   49ce8:	14c11616 	blt	r2,r19,4a144 <___vfiprintf_internal_r+0x122c>
   49cec:	d9002417 	ldw	r4,144(sp)
   49cf0:	2089883a 	add	r4,r4,r2
   49cf4:	d9002415 	stw	r4,144(sp)
   49cf8:	003e1806 	br	4955c <__alt_data_end+0xfffe3d5c>
   49cfc:	d9801a04 	addi	r6,sp,104
   49d00:	b80b883a 	mov	r5,r23
   49d04:	a809883a 	mov	r4,r21
   49d08:	0048e040 	call	48e04 <__sprint_r.part.0>
   49d0c:	103fba1e 	bne	r2,zero,49bf8 <__alt_data_end+0xfffe43f8>
   49d10:	d9001b17 	ldw	r4,108(sp)
   49d14:	d8801c17 	ldw	r2,112(sp)
   49d18:	d811883a 	mov	r8,sp
   49d1c:	21400044 	addi	r5,r4,1
   49d20:	003fd606 	br	49c7c <__alt_data_end+0xfffe447c>
   49d24:	d9402017 	ldw	r5,128(sp)
   49d28:	d9002117 	ldw	r4,132(sp)
   49d2c:	d9801a04 	addi	r6,sp,104
   49d30:	0048e040 	call	48e04 <__sprint_r.part.0>
   49d34:	103fb01e 	bne	r2,zero,49bf8 <__alt_data_end+0xfffe43f8>
   49d38:	d8801c17 	ldw	r2,112(sp)
   49d3c:	d8c02517 	ldw	r3,148(sp)
   49d40:	1cc0010e 	bge	r3,r19,49d48 <___vfiprintf_internal_r+0xe30>
   49d44:	9807883a 	mov	r3,r19
   49d48:	d9002417 	ldw	r4,144(sp)
   49d4c:	20c9883a 	add	r4,r4,r3
   49d50:	d9002415 	stw	r4,144(sp)
   49d54:	103e0126 	beq	r2,zero,4955c <__alt_data_end+0xfffe3d5c>
   49d58:	d9402017 	ldw	r5,128(sp)
   49d5c:	d9002117 	ldw	r4,132(sp)
   49d60:	d9801a04 	addi	r6,sp,104
   49d64:	0048e040 	call	48e04 <__sprint_r.part.0>
   49d68:	103dfc26 	beq	r2,zero,4955c <__alt_data_end+0xfffe3d5c>
   49d6c:	003fa206 	br	49bf8 <__alt_data_end+0xfffe43f8>
   49d70:	d9402017 	ldw	r5,128(sp)
   49d74:	d9002117 	ldw	r4,132(sp)
   49d78:	d9801a04 	addi	r6,sp,104
   49d7c:	d9c02b15 	stw	r7,172(sp)
   49d80:	0048e040 	call	48e04 <__sprint_r.part.0>
   49d84:	d9c02b17 	ldw	r7,172(sp)
   49d88:	103f9b1e 	bne	r2,zero,49bf8 <__alt_data_end+0xfffe43f8>
   49d8c:	d9001b17 	ldw	r4,108(sp)
   49d90:	d8801c17 	ldw	r2,112(sp)
   49d94:	d811883a 	mov	r8,sp
   49d98:	21800044 	addi	r6,r4,1
   49d9c:	003dbf06 	br	4949c <__alt_data_end+0xfffe3c9c>
   49da0:	1000d81e 	bne	r2,zero,4a104 <___vfiprintf_internal_r+0x11ec>
   49da4:	d9001d87 	ldb	r4,118(sp)
   49da8:	20000a26 	beq	r4,zero,49dd4 <___vfiprintf_internal_r+0xebc>
   49dac:	00800044 	movi	r2,1
   49db0:	d9001d84 	addi	r4,sp,118
   49db4:	100b883a 	mov	r5,r2
   49db8:	d9000015 	stw	r4,0(sp)
   49dbc:	d8800115 	stw	r2,4(sp)
   49dc0:	d811883a 	mov	r8,sp
   49dc4:	2809883a 	mov	r4,r5
   49dc8:	42000204 	addi	r8,r8,8
   49dcc:	29400044 	addi	r5,r5,1
   49dd0:	003d9506 	br	49428 <__alt_data_end+0xfffe3c28>
   49dd4:	3800fd26 	beq	r7,zero,4a1cc <___vfiprintf_internal_r+0x12b4>
   49dd8:	00800084 	movi	r2,2
   49ddc:	d9001d04 	addi	r4,sp,116
   49de0:	d9000015 	stw	r4,0(sp)
   49de4:	d8800115 	stw	r2,4(sp)
   49de8:	01400044 	movi	r5,1
   49dec:	d811883a 	mov	r8,sp
   49df0:	2809883a 	mov	r4,r5
   49df4:	42000204 	addi	r8,r8,8
   49df8:	29400044 	addi	r5,r5,1
   49dfc:	003f4606 	br	49b18 <__alt_data_end+0xfffe4318>
   49e00:	d8802517 	ldw	r2,148(sp)
   49e04:	14c0010e 	bge	r2,r19,49e0c <___vfiprintf_internal_r+0xef4>
   49e08:	9805883a 	mov	r2,r19
   49e0c:	d9402417 	ldw	r5,144(sp)
   49e10:	288b883a 	add	r5,r5,r2
   49e14:	d9402415 	stw	r5,144(sp)
   49e18:	003dd006 	br	4955c <__alt_data_end+0xfffe3d5c>
   49e1c:	d8001d85 	stb	zero,118(sp)
   49e20:	80005d16 	blt	r16,zero,49f98 <___vfiprintf_internal_r+0x1080>
   49e24:	00ffdfc4 	movi	r3,-129
   49e28:	9d04b03a 	or	r2,r19,r20
   49e2c:	88e2703a 	and	r17,r17,r3
   49e30:	103d3726 	beq	r2,zero,49310 <__alt_data_end+0xfffe3b10>
   49e34:	002b883a 	mov	r21,zero
   49e38:	d9002617 	ldw	r4,152(sp)
   49e3c:	ddc01a04 	addi	r23,sp,104
   49e40:	988003cc 	andi	r2,r19,15
   49e44:	a006973a 	slli	r3,r20,28
   49e48:	2085883a 	add	r2,r4,r2
   49e4c:	9826d13a 	srli	r19,r19,4
   49e50:	10800003 	ldbu	r2,0(r2)
   49e54:	a028d13a 	srli	r20,r20,4
   49e58:	bdffffc4 	addi	r23,r23,-1
   49e5c:	1ce6b03a 	or	r19,r3,r19
   49e60:	b8800005 	stb	r2,0(r23)
   49e64:	9d04b03a 	or	r2,r19,r20
   49e68:	103ff51e 	bne	r2,zero,49e40 <__alt_data_end+0xfffe4640>
   49e6c:	d8801e17 	ldw	r2,120(sp)
   49e70:	15e9c83a 	sub	r20,r2,r23
   49e74:	003d2b06 	br	49324 <__alt_data_end+0xfffe3b24>
   49e78:	d9402017 	ldw	r5,128(sp)
   49e7c:	d9002117 	ldw	r4,132(sp)
   49e80:	d9801a04 	addi	r6,sp,104
   49e84:	0048e040 	call	48e04 <__sprint_r.part.0>
   49e88:	103f5b1e 	bne	r2,zero,49bf8 <__alt_data_end+0xfffe43f8>
   49e8c:	d8801c17 	ldw	r2,112(sp)
   49e90:	d811883a 	mov	r8,sp
   49e94:	003f6706 	br	49c34 <__alt_data_end+0xfffe4434>
   49e98:	d9402017 	ldw	r5,128(sp)
   49e9c:	d9002117 	ldw	r4,132(sp)
   49ea0:	d9801a04 	addi	r6,sp,104
   49ea4:	0048e040 	call	48e04 <__sprint_r.part.0>
   49ea8:	103f531e 	bne	r2,zero,49bf8 <__alt_data_end+0xfffe43f8>
   49eac:	d811883a 	mov	r8,sp
   49eb0:	003cd906 	br	49218 <__alt_data_end+0xfffe3a18>
   49eb4:	10803fcc 	andi	r2,r2,255
   49eb8:	1080201c 	xori	r2,r2,128
   49ebc:	10bfe004 	addi	r2,r2,-128
   49ec0:	00c00c04 	movi	r3,48
   49ec4:	10ffe926 	beq	r2,r3,49e6c <__alt_data_end+0xfffe466c>
   49ec8:	b8ffffc5 	stb	r3,-1(r23)
   49ecc:	d8c01e17 	ldw	r3,120(sp)
   49ed0:	b8bfffc4 	addi	r2,r23,-1
   49ed4:	102f883a 	mov	r23,r2
   49ed8:	18a9c83a 	sub	r20,r3,r2
   49edc:	003d1106 	br	49324 <__alt_data_end+0xfffe3b24>
   49ee0:	d9402017 	ldw	r5,128(sp)
   49ee4:	d9002117 	ldw	r4,132(sp)
   49ee8:	d9801a04 	addi	r6,sp,104
   49eec:	d8c02a15 	stw	r3,168(sp)
   49ef0:	d9c02b15 	stw	r7,172(sp)
   49ef4:	0048e040 	call	48e04 <__sprint_r.part.0>
   49ef8:	d8c02a17 	ldw	r3,168(sp)
   49efc:	d9c02b17 	ldw	r7,172(sp)
   49f00:	103f3d1e 	bne	r2,zero,49bf8 <__alt_data_end+0xfffe43f8>
   49f04:	d9001b17 	ldw	r4,108(sp)
   49f08:	d8801c17 	ldw	r2,112(sp)
   49f0c:	d811883a 	mov	r8,sp
   49f10:	21400044 	addi	r5,r4,1
   49f14:	003d4406 	br	49428 <__alt_data_end+0xfffe3c28>
   49f18:	d9402017 	ldw	r5,128(sp)
   49f1c:	d9002117 	ldw	r4,132(sp)
   49f20:	d9801a04 	addi	r6,sp,104
   49f24:	d8c02a15 	stw	r3,168(sp)
   49f28:	0048e040 	call	48e04 <__sprint_r.part.0>
   49f2c:	d8c02a17 	ldw	r3,168(sp)
   49f30:	103f311e 	bne	r2,zero,49bf8 <__alt_data_end+0xfffe43f8>
   49f34:	d9001b17 	ldw	r4,108(sp)
   49f38:	d8801c17 	ldw	r2,112(sp)
   49f3c:	d811883a 	mov	r8,sp
   49f40:	21400044 	addi	r5,r4,1
   49f44:	003ef406 	br	49b18 <__alt_data_end+0xfffe4318>
   49f48:	1000bd1e 	bne	r2,zero,4a240 <___vfiprintf_internal_r+0x1328>
   49f4c:	01400044 	movi	r5,1
   49f50:	0009883a 	mov	r4,zero
   49f54:	d811883a 	mov	r8,sp
   49f58:	003ef106 	br	49b20 <__alt_data_end+0xfffe4320>
   49f5c:	d9402017 	ldw	r5,128(sp)
   49f60:	d9002117 	ldw	r4,132(sp)
   49f64:	d9801a04 	addi	r6,sp,104
   49f68:	0048e040 	call	48e04 <__sprint_r.part.0>
   49f6c:	103f221e 	bne	r2,zero,49bf8 <__alt_data_end+0xfffe43f8>
   49f70:	d9401b17 	ldw	r5,108(sp)
   49f74:	d8801c17 	ldw	r2,112(sp)
   49f78:	d811883a 	mov	r8,sp
   49f7c:	29400044 	addi	r5,r5,1
   49f80:	003d6206 	br	4950c <__alt_data_end+0xfffe3d0c>
   49f84:	01400174 	movhi	r5,5
   49f88:	29447904 	addi	r5,r5,4580
   49f8c:	d9402615 	stw	r5,152(sp)
   49f90:	d8c02215 	stw	r3,136(sp)
   49f94:	1023883a 	mov	r17,r2
   49f98:	9d04b03a 	or	r2,r19,r20
   49f9c:	103fa51e 	bne	r2,zero,49e34 <__alt_data_end+0xfffe4634>
   49fa0:	002b883a 	mov	r21,zero
   49fa4:	00800084 	movi	r2,2
   49fa8:	003e4a06 	br	498d4 <__alt_data_end+0xfffe40d4>
   49fac:	01400174 	movhi	r5,5
   49fb0:	29447904 	addi	r5,r5,4580
   49fb4:	002b883a 	mov	r21,zero
   49fb8:	d9402615 	stw	r5,152(sp)
   49fbc:	003f9e06 	br	49e38 <__alt_data_end+0xfffe4638>
   49fc0:	d9402217 	ldw	r5,136(sp)
   49fc4:	d8001d85 	stb	zero,118(sp)
   49fc8:	0029883a 	mov	r20,zero
   49fcc:	28800104 	addi	r2,r5,4
   49fd0:	2cc00017 	ldw	r19,0(r5)
   49fd4:	803e3a16 	blt	r16,zero,498c0 <__alt_data_end+0xfffe40c0>
   49fd8:	00ffdfc4 	movi	r3,-129
   49fdc:	d8802215 	stw	r2,136(sp)
   49fe0:	88e2703a 	and	r17,r17,r3
   49fe4:	002b883a 	mov	r21,zero
   49fe8:	983e9b26 	beq	r19,zero,49a58 <__alt_data_end+0xfffe4258>
   49fec:	00800244 	movi	r2,9
   49ff0:	14fdc936 	bltu	r2,r19,49718 <__alt_data_end+0xfffe3f18>
   49ff4:	003e9a06 	br	49a60 <__alt_data_end+0xfffe4260>
   49ff8:	00800c04 	movi	r2,48
   49ffc:	d8c01d45 	stb	r3,117(sp)
   4a000:	d8801d05 	stb	r2,116(sp)
   4a004:	d8001d85 	stb	zero,118(sp)
   4a008:	88c00094 	ori	r3,r17,2
   4a00c:	80009c16 	blt	r16,zero,4a280 <___vfiprintf_internal_r+0x1368>
   4a010:	00bfdfc4 	movi	r2,-129
   4a014:	88a2703a 	and	r17,r17,r2
   4a018:	8c400094 	ori	r17,r17,2
   4a01c:	002b883a 	mov	r21,zero
   4a020:	003f8506 	br	49e38 <__alt_data_end+0xfffe4638>
   4a024:	b029883a 	mov	r20,r22
   4a028:	003c0b06 	br	49058 <__alt_data_end+0xfffe3858>
   4a02c:	04e7c83a 	sub	r19,zero,r19
   4a030:	05400b44 	movi	r21,45
   4a034:	9804c03a 	cmpne	r2,r19,zero
   4a038:	0529c83a 	sub	r20,zero,r20
   4a03c:	dd401d85 	stb	r21,118(sp)
   4a040:	a0a9c83a 	sub	r20,r20,r2
   4a044:	80009716 	blt	r16,zero,4a2a4 <___vfiprintf_internal_r+0x138c>
   4a048:	00bfdfc4 	movi	r2,-129
   4a04c:	88a2703a 	and	r17,r17,r2
   4a050:	003db006 	br	49714 <__alt_data_end+0xfffe3f14>
   4a054:	b0c00007 	ldb	r3,0(r22)
   4a058:	003c0c06 	br	4908c <__alt_data_end+0xfffe388c>
   4a05c:	8880100c 	andi	r2,r17,64
   4a060:	d8001d85 	stb	zero,118(sp)
   4a064:	1000461e 	bne	r2,zero,4a180 <___vfiprintf_internal_r+0x1268>
   4a068:	d9002217 	ldw	r4,136(sp)
   4a06c:	0029883a 	mov	r20,zero
   4a070:	20800104 	addi	r2,r4,4
   4a074:	24c00017 	ldw	r19,0(r4)
   4a078:	803df80e 	bge	r16,zero,4985c <__alt_data_end+0xfffe405c>
   4a07c:	9d06b03a 	or	r3,r19,r20
   4a080:	d8802215 	stw	r2,136(sp)
   4a084:	183d5e1e 	bne	r3,zero,49600 <__alt_data_end+0xfffe3e00>
   4a088:	002b883a 	mov	r21,zero
   4a08c:	0005883a 	mov	r2,zero
   4a090:	003e1006 	br	498d4 <__alt_data_end+0xfffe40d4>
   4a094:	8880040c 	andi	r2,r17,16
   4a098:	1000321e 	bne	r2,zero,4a164 <___vfiprintf_internal_r+0x124c>
   4a09c:	8c40100c 	andi	r17,r17,64
   4a0a0:	88008d26 	beq	r17,zero,4a2d8 <___vfiprintf_internal_r+0x13c0>
   4a0a4:	d9402217 	ldw	r5,136(sp)
   4a0a8:	d8c02417 	ldw	r3,144(sp)
   4a0ac:	28800017 	ldw	r2,0(r5)
   4a0b0:	29400104 	addi	r5,r5,4
   4a0b4:	d9402215 	stw	r5,136(sp)
   4a0b8:	10c0000d 	sth	r3,0(r2)
   4a0bc:	003bca06 	br	48fe8 <__alt_data_end+0xfffe37e8>
   4a0c0:	8880100c 	andi	r2,r17,64
   4a0c4:	10003a26 	beq	r2,zero,4a1b0 <___vfiprintf_internal_r+0x1298>
   4a0c8:	d8802217 	ldw	r2,136(sp)
   4a0cc:	14c0000f 	ldh	r19,0(r2)
   4a0d0:	10800104 	addi	r2,r2,4
   4a0d4:	d8802215 	stw	r2,136(sp)
   4a0d8:	9829d7fa 	srai	r20,r19,31
   4a0dc:	a005883a 	mov	r2,r20
   4a0e0:	003d8506 	br	496f8 <__alt_data_end+0xfffe3ef8>
   4a0e4:	8880100c 	andi	r2,r17,64
   4a0e8:	10002b26 	beq	r2,zero,4a198 <___vfiprintf_internal_r+0x1280>
   4a0ec:	d8802217 	ldw	r2,136(sp)
   4a0f0:	0029883a 	mov	r20,zero
   4a0f4:	14c0000b 	ldhu	r19,0(r2)
   4a0f8:	10800104 	addi	r2,r2,4
   4a0fc:	d8802215 	stw	r2,136(sp)
   4a100:	003d5d06 	br	49678 <__alt_data_end+0xfffe3e78>
   4a104:	d9402017 	ldw	r5,128(sp)
   4a108:	d9002117 	ldw	r4,132(sp)
   4a10c:	d9801a04 	addi	r6,sp,104
   4a110:	d8c02a15 	stw	r3,168(sp)
   4a114:	d9c02b15 	stw	r7,172(sp)
   4a118:	0048e040 	call	48e04 <__sprint_r.part.0>
   4a11c:	d8c02a17 	ldw	r3,168(sp)
   4a120:	d9c02b17 	ldw	r7,172(sp)
   4a124:	103eb41e 	bne	r2,zero,49bf8 <__alt_data_end+0xfffe43f8>
   4a128:	d9001b17 	ldw	r4,108(sp)
   4a12c:	d8801c17 	ldw	r2,112(sp)
   4a130:	d811883a 	mov	r8,sp
   4a134:	21400044 	addi	r5,r4,1
   4a138:	003e6706 	br	49ad8 <__alt_data_end+0xfffe42d8>
   4a13c:	00bfffc4 	movi	r2,-1
   4a140:	003c4a06 	br	4926c <__alt_data_end+0xfffe3a6c>
   4a144:	9805883a 	mov	r2,r19
   4a148:	003ee806 	br	49cec <__alt_data_end+0xfffe44ec>
   4a14c:	d8c02217 	ldw	r3,136(sp)
   4a150:	0029883a 	mov	r20,zero
   4a154:	18800104 	addi	r2,r3,4
   4a158:	1cc0000b 	ldhu	r19,0(r3)
   4a15c:	803f9e0e 	bge	r16,zero,49fd8 <__alt_data_end+0xfffe47d8>
   4a160:	003dd706 	br	498c0 <__alt_data_end+0xfffe40c0>
   4a164:	d8c02217 	ldw	r3,136(sp)
   4a168:	d9002417 	ldw	r4,144(sp)
   4a16c:	18800017 	ldw	r2,0(r3)
   4a170:	18c00104 	addi	r3,r3,4
   4a174:	d8c02215 	stw	r3,136(sp)
   4a178:	11000015 	stw	r4,0(r2)
   4a17c:	003b9a06 	br	48fe8 <__alt_data_end+0xfffe37e8>
   4a180:	d8c02217 	ldw	r3,136(sp)
   4a184:	0029883a 	mov	r20,zero
   4a188:	18800104 	addi	r2,r3,4
   4a18c:	1cc0000b 	ldhu	r19,0(r3)
   4a190:	803db20e 	bge	r16,zero,4985c <__alt_data_end+0xfffe405c>
   4a194:	003fb906 	br	4a07c <__alt_data_end+0xfffe487c>
   4a198:	d9002217 	ldw	r4,136(sp)
   4a19c:	0029883a 	mov	r20,zero
   4a1a0:	24c00017 	ldw	r19,0(r4)
   4a1a4:	21000104 	addi	r4,r4,4
   4a1a8:	d9002215 	stw	r4,136(sp)
   4a1ac:	003d3206 	br	49678 <__alt_data_end+0xfffe3e78>
   4a1b0:	d8c02217 	ldw	r3,136(sp)
   4a1b4:	1cc00017 	ldw	r19,0(r3)
   4a1b8:	18c00104 	addi	r3,r3,4
   4a1bc:	d8c02215 	stw	r3,136(sp)
   4a1c0:	9829d7fa 	srai	r20,r19,31
   4a1c4:	a005883a 	mov	r2,r20
   4a1c8:	003d4b06 	br	496f8 <__alt_data_end+0xfffe3ef8>
   4a1cc:	0009883a 	mov	r4,zero
   4a1d0:	01400044 	movi	r5,1
   4a1d4:	d811883a 	mov	r8,sp
   4a1d8:	003e4f06 	br	49b18 <__alt_data_end+0xfffe4318>
   4a1dc:	d8c02215 	stw	r3,136(sp)
   4a1e0:	002b883a 	mov	r21,zero
   4a1e4:	003db806 	br	498c8 <__alt_data_end+0xfffe40c8>
   4a1e8:	d811883a 	mov	r8,sp
   4a1ec:	003e9606 	br	49c48 <__alt_data_end+0xfffe4448>
   4a1f0:	01000174 	movhi	r4,5
   4a1f4:	2104da04 	addi	r4,r4,4968
   4a1f8:	d9002315 	stw	r4,140(sp)
   4a1fc:	003e6306 	br	49b8c <__alt_data_end+0xfffe438c>
   4a200:	b0c00043 	ldbu	r3,1(r22)
   4a204:	8c400814 	ori	r17,r17,32
   4a208:	b5800044 	addi	r22,r22,1
   4a20c:	18c03fcc 	andi	r3,r3,255
   4a210:	18c0201c 	xori	r3,r3,128
   4a214:	18ffe004 	addi	r3,r3,-128
   4a218:	003b9c06 	br	4908c <__alt_data_end+0xfffe388c>
   4a21c:	b809883a 	mov	r4,r23
   4a220:	da002a15 	stw	r8,168(sp)
   4a224:	00416880 	call	41688 <strlen>
   4a228:	1029883a 	mov	r20,r2
   4a22c:	dd401d83 	ldbu	r21,118(sp)
   4a230:	df002215 	stw	fp,136(sp)
   4a234:	0021883a 	mov	r16,zero
   4a238:	da002a17 	ldw	r8,168(sp)
   4a23c:	003c3906 	br	49324 <__alt_data_end+0xfffe3b24>
   4a240:	d9402017 	ldw	r5,128(sp)
   4a244:	d9002117 	ldw	r4,132(sp)
   4a248:	d9801a04 	addi	r6,sp,104
   4a24c:	0048e040 	call	48e04 <__sprint_r.part.0>
   4a250:	103e691e 	bne	r2,zero,49bf8 <__alt_data_end+0xfffe43f8>
   4a254:	d9001b17 	ldw	r4,108(sp)
   4a258:	d8801c17 	ldw	r2,112(sp)
   4a25c:	d811883a 	mov	r8,sp
   4a260:	21400044 	addi	r5,r4,1
   4a264:	003e2e06 	br	49b20 <__alt_data_end+0xfffe4320>
   4a268:	01000174 	movhi	r4,5
   4a26c:	2104de04 	addi	r4,r4,4984
   4a270:	d9002315 	stw	r4,140(sp)
   4a274:	d9001b17 	ldw	r4,108(sp)
   4a278:	21000044 	addi	r4,r4,1
   4a27c:	003c5e06 	br	493f8 <__alt_data_end+0xfffe3bf8>
   4a280:	002b883a 	mov	r21,zero
   4a284:	00800084 	movi	r2,2
   4a288:	10803fcc 	andi	r2,r2,255
   4a28c:	01000044 	movi	r4,1
   4a290:	11002b26 	beq	r2,r4,4a340 <___vfiprintf_internal_r+0x1428>
   4a294:	01000084 	movi	r4,2
   4a298:	11002b1e 	bne	r2,r4,4a348 <___vfiprintf_internal_r+0x1430>
   4a29c:	1823883a 	mov	r17,r3
   4a2a0:	003ee506 	br	49e38 <__alt_data_end+0xfffe4638>
   4a2a4:	8807883a 	mov	r3,r17
   4a2a8:	00800044 	movi	r2,1
   4a2ac:	003ff606 	br	4a288 <__alt_data_end+0xfffe4a88>
   4a2b0:	00800184 	movi	r2,6
   4a2b4:	1400012e 	bgeu	r2,r16,4a2bc <___vfiprintf_internal_r+0x13a4>
   4a2b8:	1021883a 	mov	r16,r2
   4a2bc:	8029883a 	mov	r20,r16
   4a2c0:	8027883a 	mov	r19,r16
   4a2c4:	80002216 	blt	r16,zero,4a350 <___vfiprintf_internal_r+0x1438>
   4a2c8:	05c00174 	movhi	r23,5
   4a2cc:	df002215 	stw	fp,136(sp)
   4a2d0:	bdc47e04 	addi	r23,r23,4600
   4a2d4:	003cfb06 	br	496c4 <__alt_data_end+0xfffe3ec4>
   4a2d8:	d9002217 	ldw	r4,136(sp)
   4a2dc:	d9402417 	ldw	r5,144(sp)
   4a2e0:	20800017 	ldw	r2,0(r4)
   4a2e4:	21000104 	addi	r4,r4,4
   4a2e8:	d9002215 	stw	r4,136(sp)
   4a2ec:	11400015 	stw	r5,0(r2)
   4a2f0:	003b3d06 	br	48fe8 <__alt_data_end+0xfffe37e8>
   4a2f4:	01400174 	movhi	r5,5
   4a2f8:	2944de04 	addi	r5,r5,4984
   4a2fc:	d9402315 	stw	r5,140(sp)
   4a300:	d9401b17 	ldw	r5,108(sp)
   4a304:	29400044 	addi	r5,r5,1
   4a308:	003e6d06 	br	49cc0 <__alt_data_end+0xfffe44c0>
   4a30c:	8029883a 	mov	r20,r16
   4a310:	dd401d83 	ldbu	r21,118(sp)
   4a314:	df002215 	stw	fp,136(sp)
   4a318:	0021883a 	mov	r16,zero
   4a31c:	003c0106 	br	49324 <__alt_data_end+0xfffe3b24>
   4a320:	00c00174 	movhi	r3,5
   4a324:	18c4da04 	addi	r3,r3,4968
   4a328:	d8c02315 	stw	r3,140(sp)
   4a32c:	280d883a 	mov	r6,r5
   4a330:	003c6906 	br	494d8 <__alt_data_end+0xfffe3cd8>
   4a334:	802d883a 	mov	r22,r16
   4a338:	0021883a 	mov	r16,zero
   4a33c:	003b5406 	br	49090 <__alt_data_end+0xfffe3890>
   4a340:	1823883a 	mov	r17,r3
   4a344:	003cf306 	br	49714 <__alt_data_end+0xfffe3f14>
   4a348:	1823883a 	mov	r17,r3
   4a34c:	003cad06 	br	49604 <__alt_data_end+0xfffe3e04>
   4a350:	0027883a 	mov	r19,zero
   4a354:	003fdc06 	br	4a2c8 <__alt_data_end+0xfffe4ac8>
   4a358:	d9402217 	ldw	r5,136(sp)
   4a35c:	8005883a 	mov	r2,r16
   4a360:	b0c00043 	ldbu	r3,1(r22)
   4a364:	2c000017 	ldw	r16,0(r5)
   4a368:	29000104 	addi	r4,r5,4
   4a36c:	d9002215 	stw	r4,136(sp)
   4a370:	102d883a 	mov	r22,r2
   4a374:	803fa50e 	bge	r16,zero,4a20c <__alt_data_end+0xfffe4a0c>
   4a378:	18c03fcc 	andi	r3,r3,255
   4a37c:	18c0201c 	xori	r3,r3,128
   4a380:	043fffc4 	movi	r16,-1
   4a384:	18ffe004 	addi	r3,r3,-128
   4a388:	003b4006 	br	4908c <__alt_data_end+0xfffe388c>
   4a38c:	d9402303 	ldbu	r5,140(sp)
   4a390:	d9401d85 	stb	r5,118(sp)
   4a394:	003cae06 	br	49650 <__alt_data_end+0xfffe3e50>
   4a398:	d8c02303 	ldbu	r3,140(sp)
   4a39c:	d8c01d85 	stb	r3,118(sp)
   4a3a0:	003d1406 	br	497f4 <__alt_data_end+0xfffe3ff4>
   4a3a4:	d8c02303 	ldbu	r3,140(sp)
   4a3a8:	d8c01d85 	stb	r3,118(sp)
   4a3ac:	003cca06 	br	496d8 <__alt_data_end+0xfffe3ed8>
   4a3b0:	8880004c 	andi	r2,r17,1
   4a3b4:	002b883a 	mov	r21,zero
   4a3b8:	10000526 	beq	r2,zero,4a3d0 <___vfiprintf_internal_r+0x14b8>
   4a3bc:	00800c04 	movi	r2,48
   4a3c0:	d88019c5 	stb	r2,103(sp)
   4a3c4:	dd002817 	ldw	r20,160(sp)
   4a3c8:	ddc019c4 	addi	r23,sp,103
   4a3cc:	003bd506 	br	49324 <__alt_data_end+0xfffe3b24>
   4a3d0:	0029883a 	mov	r20,zero
   4a3d4:	ddc01a04 	addi	r23,sp,104
   4a3d8:	003bd206 	br	49324 <__alt_data_end+0xfffe3b24>
   4a3dc:	d9002303 	ldbu	r4,140(sp)
   4a3e0:	d9001d85 	stb	r4,118(sp)
   4a3e4:	003da606 	br	49a80 <__alt_data_end+0xfffe4280>
   4a3e8:	d8c02303 	ldbu	r3,140(sp)
   4a3ec:	d8c01d85 	stb	r3,118(sp)
   4a3f0:	003c7606 	br	495cc <__alt_data_end+0xfffe3dcc>
   4a3f4:	d8c02303 	ldbu	r3,140(sp)
   4a3f8:	d8c01d85 	stb	r3,118(sp)
   4a3fc:	003c6506 	br	49594 <__alt_data_end+0xfffe3d94>
   4a400:	d9002303 	ldbu	r4,140(sp)
   4a404:	d9001d85 	stb	r4,118(sp)
   4a408:	003d3d06 	br	49900 <__alt_data_end+0xfffe4100>
   4a40c:	d8c02303 	ldbu	r3,140(sp)
   4a410:	d8c01d85 	stb	r3,118(sp)
   4a414:	003d1d06 	br	4988c <__alt_data_end+0xfffe408c>
   4a418:	d8c02303 	ldbu	r3,140(sp)
   4a41c:	d8c01d85 	stb	r3,118(sp)
   4a420:	003d0306 	br	49830 <__alt_data_end+0xfffe4030>

0004a424 <__vfiprintf_internal>:
   4a424:	00800174 	movhi	r2,5
   4a428:	108b9904 	addi	r2,r2,11876
   4a42c:	300f883a 	mov	r7,r6
   4a430:	280d883a 	mov	r6,r5
   4a434:	200b883a 	mov	r5,r4
   4a438:	11000017 	ldw	r4,0(r2)
   4a43c:	0048f181 	jmpi	48f18 <___vfiprintf_internal_r>

0004a440 <__sbprintf>:
   4a440:	2880030b 	ldhu	r2,12(r5)
   4a444:	2ac01917 	ldw	r11,100(r5)
   4a448:	2a80038b 	ldhu	r10,14(r5)
   4a44c:	2a400717 	ldw	r9,28(r5)
   4a450:	2a000917 	ldw	r8,36(r5)
   4a454:	defee204 	addi	sp,sp,-1144
   4a458:	00c10004 	movi	r3,1024
   4a45c:	dc011a15 	stw	r16,1128(sp)
   4a460:	10bfff4c 	andi	r2,r2,65533
   4a464:	2821883a 	mov	r16,r5
   4a468:	d8cb883a 	add	r5,sp,r3
   4a46c:	dc811c15 	stw	r18,1136(sp)
   4a470:	dc411b15 	stw	r17,1132(sp)
   4a474:	dfc11d15 	stw	ra,1140(sp)
   4a478:	2025883a 	mov	r18,r4
   4a47c:	d881030d 	sth	r2,1036(sp)
   4a480:	dac11915 	stw	r11,1124(sp)
   4a484:	da81038d 	sth	r10,1038(sp)
   4a488:	da410715 	stw	r9,1052(sp)
   4a48c:	da010915 	stw	r8,1060(sp)
   4a490:	dec10015 	stw	sp,1024(sp)
   4a494:	dec10415 	stw	sp,1040(sp)
   4a498:	d8c10215 	stw	r3,1032(sp)
   4a49c:	d8c10515 	stw	r3,1044(sp)
   4a4a0:	d8010615 	stw	zero,1048(sp)
   4a4a4:	0048f180 	call	48f18 <___vfiprintf_internal_r>
   4a4a8:	1023883a 	mov	r17,r2
   4a4ac:	10000416 	blt	r2,zero,4a4c0 <__sbprintf+0x80>
   4a4b0:	d9410004 	addi	r5,sp,1024
   4a4b4:	9009883a 	mov	r4,r18
   4a4b8:	00456f40 	call	456f4 <_fflush_r>
   4a4bc:	10000d1e 	bne	r2,zero,4a4f4 <__sbprintf+0xb4>
   4a4c0:	d881030b 	ldhu	r2,1036(sp)
   4a4c4:	1080100c 	andi	r2,r2,64
   4a4c8:	10000326 	beq	r2,zero,4a4d8 <__sbprintf+0x98>
   4a4cc:	8080030b 	ldhu	r2,12(r16)
   4a4d0:	10801014 	ori	r2,r2,64
   4a4d4:	8080030d 	sth	r2,12(r16)
   4a4d8:	8805883a 	mov	r2,r17
   4a4dc:	dfc11d17 	ldw	ra,1140(sp)
   4a4e0:	dc811c17 	ldw	r18,1136(sp)
   4a4e4:	dc411b17 	ldw	r17,1132(sp)
   4a4e8:	dc011a17 	ldw	r16,1128(sp)
   4a4ec:	dec11e04 	addi	sp,sp,1144
   4a4f0:	f800283a 	ret
   4a4f4:	047fffc4 	movi	r17,-1
   4a4f8:	003ff106 	br	4a4c0 <__alt_data_end+0xfffe4cc0>

0004a4fc <_write_r>:
   4a4fc:	defffd04 	addi	sp,sp,-12
   4a500:	2805883a 	mov	r2,r5
   4a504:	dc000015 	stw	r16,0(sp)
   4a508:	04000174 	movhi	r16,5
   4a50c:	dc400115 	stw	r17,4(sp)
   4a510:	300b883a 	mov	r5,r6
   4a514:	84126c04 	addi	r16,r16,18864
   4a518:	2023883a 	mov	r17,r4
   4a51c:	380d883a 	mov	r6,r7
   4a520:	1009883a 	mov	r4,r2
   4a524:	dfc00215 	stw	ra,8(sp)
   4a528:	80000015 	stw	zero,0(r16)
   4a52c:	004ef600 	call	4ef60 <write>
   4a530:	00ffffc4 	movi	r3,-1
   4a534:	10c00526 	beq	r2,r3,4a54c <_write_r+0x50>
   4a538:	dfc00217 	ldw	ra,8(sp)
   4a53c:	dc400117 	ldw	r17,4(sp)
   4a540:	dc000017 	ldw	r16,0(sp)
   4a544:	dec00304 	addi	sp,sp,12
   4a548:	f800283a 	ret
   4a54c:	80c00017 	ldw	r3,0(r16)
   4a550:	183ff926 	beq	r3,zero,4a538 <__alt_data_end+0xfffe4d38>
   4a554:	88c00015 	stw	r3,0(r17)
   4a558:	003ff706 	br	4a538 <__alt_data_end+0xfffe4d38>

0004a55c <_close_r>:
   4a55c:	defffd04 	addi	sp,sp,-12
   4a560:	dc000015 	stw	r16,0(sp)
   4a564:	04000174 	movhi	r16,5
   4a568:	dc400115 	stw	r17,4(sp)
   4a56c:	84126c04 	addi	r16,r16,18864
   4a570:	2023883a 	mov	r17,r4
   4a574:	2809883a 	mov	r4,r5
   4a578:	dfc00215 	stw	ra,8(sp)
   4a57c:	80000015 	stw	zero,0(r16)
   4a580:	004e4380 	call	4e438 <close>
   4a584:	00ffffc4 	movi	r3,-1
   4a588:	10c00526 	beq	r2,r3,4a5a0 <_close_r+0x44>
   4a58c:	dfc00217 	ldw	ra,8(sp)
   4a590:	dc400117 	ldw	r17,4(sp)
   4a594:	dc000017 	ldw	r16,0(sp)
   4a598:	dec00304 	addi	sp,sp,12
   4a59c:	f800283a 	ret
   4a5a0:	80c00017 	ldw	r3,0(r16)
   4a5a4:	183ff926 	beq	r3,zero,4a58c <__alt_data_end+0xfffe4d8c>
   4a5a8:	88c00015 	stw	r3,0(r17)
   4a5ac:	003ff706 	br	4a58c <__alt_data_end+0xfffe4d8c>

0004a5b0 <_calloc_r>:
   4a5b0:	defffe04 	addi	sp,sp,-8
   4a5b4:	2805883a 	mov	r2,r5
   4a5b8:	dc000015 	stw	r16,0(sp)
   4a5bc:	300b883a 	mov	r5,r6
   4a5c0:	2021883a 	mov	r16,r4
   4a5c4:	1009883a 	mov	r4,r2
   4a5c8:	dfc00115 	stw	ra,4(sp)
   4a5cc:	00415200 	call	41520 <__mulsi3>
   4a5d0:	100b883a 	mov	r5,r2
   4a5d4:	8009883a 	mov	r4,r16
   4a5d8:	004684c0 	call	4684c <_malloc_r>
   4a5dc:	10002926 	beq	r2,zero,4a684 <_calloc_r+0xd4>
   4a5e0:	11bfff17 	ldw	r6,-4(r2)
   4a5e4:	1021883a 	mov	r16,r2
   4a5e8:	00bfff04 	movi	r2,-4
   4a5ec:	308c703a 	and	r6,r6,r2
   4a5f0:	00c00904 	movi	r3,36
   4a5f4:	308d883a 	add	r6,r6,r2
   4a5f8:	19801636 	bltu	r3,r6,4a654 <_calloc_r+0xa4>
   4a5fc:	008004c4 	movi	r2,19
   4a600:	11800b2e 	bgeu	r2,r6,4a630 <_calloc_r+0x80>
   4a604:	80000015 	stw	zero,0(r16)
   4a608:	80000115 	stw	zero,4(r16)
   4a60c:	008006c4 	movi	r2,27
   4a610:	11801a2e 	bgeu	r2,r6,4a67c <_calloc_r+0xcc>
   4a614:	80000215 	stw	zero,8(r16)
   4a618:	80000315 	stw	zero,12(r16)
   4a61c:	30c0151e 	bne	r6,r3,4a674 <_calloc_r+0xc4>
   4a620:	80000415 	stw	zero,16(r16)
   4a624:	80800604 	addi	r2,r16,24
   4a628:	80000515 	stw	zero,20(r16)
   4a62c:	00000106 	br	4a634 <_calloc_r+0x84>
   4a630:	8005883a 	mov	r2,r16
   4a634:	10000015 	stw	zero,0(r2)
   4a638:	10000115 	stw	zero,4(r2)
   4a63c:	10000215 	stw	zero,8(r2)
   4a640:	8005883a 	mov	r2,r16
   4a644:	dfc00117 	ldw	ra,4(sp)
   4a648:	dc000017 	ldw	r16,0(sp)
   4a64c:	dec00204 	addi	sp,sp,8
   4a650:	f800283a 	ret
   4a654:	000b883a 	mov	r5,zero
   4a658:	8009883a 	mov	r4,r16
   4a65c:	00473e00 	call	473e0 <memset>
   4a660:	8005883a 	mov	r2,r16
   4a664:	dfc00117 	ldw	ra,4(sp)
   4a668:	dc000017 	ldw	r16,0(sp)
   4a66c:	dec00204 	addi	sp,sp,8
   4a670:	f800283a 	ret
   4a674:	80800404 	addi	r2,r16,16
   4a678:	003fee06 	br	4a634 <__alt_data_end+0xfffe4e34>
   4a67c:	80800204 	addi	r2,r16,8
   4a680:	003fec06 	br	4a634 <__alt_data_end+0xfffe4e34>
   4a684:	0005883a 	mov	r2,zero
   4a688:	003fee06 	br	4a644 <__alt_data_end+0xfffe4e44>

0004a68c <_fclose_r>:
   4a68c:	28003926 	beq	r5,zero,4a774 <_fclose_r+0xe8>
   4a690:	defffc04 	addi	sp,sp,-16
   4a694:	dc400115 	stw	r17,4(sp)
   4a698:	dc000015 	stw	r16,0(sp)
   4a69c:	dfc00315 	stw	ra,12(sp)
   4a6a0:	dc800215 	stw	r18,8(sp)
   4a6a4:	2023883a 	mov	r17,r4
   4a6a8:	2821883a 	mov	r16,r5
   4a6ac:	20000226 	beq	r4,zero,4a6b8 <_fclose_r+0x2c>
   4a6b0:	20800e17 	ldw	r2,56(r4)
   4a6b4:	10002726 	beq	r2,zero,4a754 <_fclose_r+0xc8>
   4a6b8:	8080030f 	ldh	r2,12(r16)
   4a6bc:	1000071e 	bne	r2,zero,4a6dc <_fclose_r+0x50>
   4a6c0:	0005883a 	mov	r2,zero
   4a6c4:	dfc00317 	ldw	ra,12(sp)
   4a6c8:	dc800217 	ldw	r18,8(sp)
   4a6cc:	dc400117 	ldw	r17,4(sp)
   4a6d0:	dc000017 	ldw	r16,0(sp)
   4a6d4:	dec00404 	addi	sp,sp,16
   4a6d8:	f800283a 	ret
   4a6dc:	800b883a 	mov	r5,r16
   4a6e0:	8809883a 	mov	r4,r17
   4a6e4:	00454d80 	call	454d8 <__sflush_r>
   4a6e8:	1025883a 	mov	r18,r2
   4a6ec:	80800b17 	ldw	r2,44(r16)
   4a6f0:	10000426 	beq	r2,zero,4a704 <_fclose_r+0x78>
   4a6f4:	81400717 	ldw	r5,28(r16)
   4a6f8:	8809883a 	mov	r4,r17
   4a6fc:	103ee83a 	callr	r2
   4a700:	10001616 	blt	r2,zero,4a75c <_fclose_r+0xd0>
   4a704:	8080030b 	ldhu	r2,12(r16)
   4a708:	1080200c 	andi	r2,r2,128
   4a70c:	1000151e 	bne	r2,zero,4a764 <_fclose_r+0xd8>
   4a710:	81400c17 	ldw	r5,48(r16)
   4a714:	28000526 	beq	r5,zero,4a72c <_fclose_r+0xa0>
   4a718:	80801004 	addi	r2,r16,64
   4a71c:	28800226 	beq	r5,r2,4a728 <_fclose_r+0x9c>
   4a720:	8809883a 	mov	r4,r17
   4a724:	0045c540 	call	45c54 <_free_r>
   4a728:	80000c15 	stw	zero,48(r16)
   4a72c:	81401117 	ldw	r5,68(r16)
   4a730:	28000326 	beq	r5,zero,4a740 <_fclose_r+0xb4>
   4a734:	8809883a 	mov	r4,r17
   4a738:	0045c540 	call	45c54 <_free_r>
   4a73c:	80001115 	stw	zero,68(r16)
   4a740:	0045af00 	call	45af0 <__sfp_lock_acquire>
   4a744:	8000030d 	sth	zero,12(r16)
   4a748:	0045af40 	call	45af4 <__sfp_lock_release>
   4a74c:	9005883a 	mov	r2,r18
   4a750:	003fdc06 	br	4a6c4 <__alt_data_end+0xfffe4ec4>
   4a754:	0045ae00 	call	45ae0 <__sinit>
   4a758:	003fd706 	br	4a6b8 <__alt_data_end+0xfffe4eb8>
   4a75c:	04bfffc4 	movi	r18,-1
   4a760:	003fe806 	br	4a704 <__alt_data_end+0xfffe4f04>
   4a764:	81400417 	ldw	r5,16(r16)
   4a768:	8809883a 	mov	r4,r17
   4a76c:	0045c540 	call	45c54 <_free_r>
   4a770:	003fe706 	br	4a710 <__alt_data_end+0xfffe4f10>
   4a774:	0005883a 	mov	r2,zero
   4a778:	f800283a 	ret

0004a77c <fclose>:
   4a77c:	00800174 	movhi	r2,5
   4a780:	108b9904 	addi	r2,r2,11876
   4a784:	200b883a 	mov	r5,r4
   4a788:	11000017 	ldw	r4,0(r2)
   4a78c:	004a68c1 	jmpi	4a68c <_fclose_r>

0004a790 <__fputwc>:
   4a790:	defff804 	addi	sp,sp,-32
   4a794:	dcc00415 	stw	r19,16(sp)
   4a798:	dc800315 	stw	r18,12(sp)
   4a79c:	dc000115 	stw	r16,4(sp)
   4a7a0:	dfc00715 	stw	ra,28(sp)
   4a7a4:	dd400615 	stw	r21,24(sp)
   4a7a8:	dd000515 	stw	r20,20(sp)
   4a7ac:	dc400215 	stw	r17,8(sp)
   4a7b0:	2027883a 	mov	r19,r4
   4a7b4:	2825883a 	mov	r18,r5
   4a7b8:	3021883a 	mov	r16,r6
   4a7bc:	004663c0 	call	4663c <__locale_mb_cur_max>
   4a7c0:	00c00044 	movi	r3,1
   4a7c4:	10c03e26 	beq	r2,r3,4a8c0 <__fputwc+0x130>
   4a7c8:	81c01704 	addi	r7,r16,92
   4a7cc:	900d883a 	mov	r6,r18
   4a7d0:	d80b883a 	mov	r5,sp
   4a7d4:	9809883a 	mov	r4,r19
   4a7d8:	004ac600 	call	4ac60 <_wcrtomb_r>
   4a7dc:	1029883a 	mov	r20,r2
   4a7e0:	00bfffc4 	movi	r2,-1
   4a7e4:	a0802026 	beq	r20,r2,4a868 <__fputwc+0xd8>
   4a7e8:	d9400003 	ldbu	r5,0(sp)
   4a7ec:	a0001c26 	beq	r20,zero,4a860 <__fputwc+0xd0>
   4a7f0:	0023883a 	mov	r17,zero
   4a7f4:	05400284 	movi	r21,10
   4a7f8:	00000906 	br	4a820 <__fputwc+0x90>
   4a7fc:	80800017 	ldw	r2,0(r16)
   4a800:	11400005 	stb	r5,0(r2)
   4a804:	80c00017 	ldw	r3,0(r16)
   4a808:	18c00044 	addi	r3,r3,1
   4a80c:	80c00015 	stw	r3,0(r16)
   4a810:	8c400044 	addi	r17,r17,1
   4a814:	dc45883a 	add	r2,sp,r17
   4a818:	8d00112e 	bgeu	r17,r20,4a860 <__fputwc+0xd0>
   4a81c:	11400003 	ldbu	r5,0(r2)
   4a820:	80c00217 	ldw	r3,8(r16)
   4a824:	18ffffc4 	addi	r3,r3,-1
   4a828:	80c00215 	stw	r3,8(r16)
   4a82c:	183ff30e 	bge	r3,zero,4a7fc <__alt_data_end+0xfffe4ffc>
   4a830:	80800617 	ldw	r2,24(r16)
   4a834:	18801916 	blt	r3,r2,4a89c <__fputwc+0x10c>
   4a838:	80800017 	ldw	r2,0(r16)
   4a83c:	11400005 	stb	r5,0(r2)
   4a840:	80800017 	ldw	r2,0(r16)
   4a844:	10c00003 	ldbu	r3,0(r2)
   4a848:	10800044 	addi	r2,r2,1
   4a84c:	1d402326 	beq	r3,r21,4a8dc <__fputwc+0x14c>
   4a850:	80800015 	stw	r2,0(r16)
   4a854:	8c400044 	addi	r17,r17,1
   4a858:	dc45883a 	add	r2,sp,r17
   4a85c:	8d3fef36 	bltu	r17,r20,4a81c <__alt_data_end+0xfffe501c>
   4a860:	9005883a 	mov	r2,r18
   4a864:	00000406 	br	4a878 <__fputwc+0xe8>
   4a868:	80c0030b 	ldhu	r3,12(r16)
   4a86c:	a005883a 	mov	r2,r20
   4a870:	18c01014 	ori	r3,r3,64
   4a874:	80c0030d 	sth	r3,12(r16)
   4a878:	dfc00717 	ldw	ra,28(sp)
   4a87c:	dd400617 	ldw	r21,24(sp)
   4a880:	dd000517 	ldw	r20,20(sp)
   4a884:	dcc00417 	ldw	r19,16(sp)
   4a888:	dc800317 	ldw	r18,12(sp)
   4a88c:	dc400217 	ldw	r17,8(sp)
   4a890:	dc000117 	ldw	r16,4(sp)
   4a894:	dec00804 	addi	sp,sp,32
   4a898:	f800283a 	ret
   4a89c:	800d883a 	mov	r6,r16
   4a8a0:	29403fcc 	andi	r5,r5,255
   4a8a4:	9809883a 	mov	r4,r19
   4a8a8:	004ab080 	call	4ab08 <__swbuf_r>
   4a8ac:	10bfffe0 	cmpeqi	r2,r2,-1
   4a8b0:	10803fcc 	andi	r2,r2,255
   4a8b4:	103fd626 	beq	r2,zero,4a810 <__alt_data_end+0xfffe5010>
   4a8b8:	00bfffc4 	movi	r2,-1
   4a8bc:	003fee06 	br	4a878 <__alt_data_end+0xfffe5078>
   4a8c0:	90ffffc4 	addi	r3,r18,-1
   4a8c4:	01003f84 	movi	r4,254
   4a8c8:	20ffbf36 	bltu	r4,r3,4a7c8 <__alt_data_end+0xfffe4fc8>
   4a8cc:	900b883a 	mov	r5,r18
   4a8d0:	dc800005 	stb	r18,0(sp)
   4a8d4:	1029883a 	mov	r20,r2
   4a8d8:	003fc506 	br	4a7f0 <__alt_data_end+0xfffe4ff0>
   4a8dc:	800d883a 	mov	r6,r16
   4a8e0:	a80b883a 	mov	r5,r21
   4a8e4:	9809883a 	mov	r4,r19
   4a8e8:	004ab080 	call	4ab08 <__swbuf_r>
   4a8ec:	10bfffe0 	cmpeqi	r2,r2,-1
   4a8f0:	003fef06 	br	4a8b0 <__alt_data_end+0xfffe50b0>

0004a8f4 <_fputwc_r>:
   4a8f4:	3080030b 	ldhu	r2,12(r6)
   4a8f8:	10c8000c 	andi	r3,r2,8192
   4a8fc:	1800051e 	bne	r3,zero,4a914 <_fputwc_r+0x20>
   4a900:	30c01917 	ldw	r3,100(r6)
   4a904:	10880014 	ori	r2,r2,8192
   4a908:	3080030d 	sth	r2,12(r6)
   4a90c:	18880014 	ori	r2,r3,8192
   4a910:	30801915 	stw	r2,100(r6)
   4a914:	004a7901 	jmpi	4a790 <__fputwc>

0004a918 <fputwc>:
   4a918:	00800174 	movhi	r2,5
   4a91c:	defffc04 	addi	sp,sp,-16
   4a920:	108b9904 	addi	r2,r2,11876
   4a924:	dc000115 	stw	r16,4(sp)
   4a928:	14000017 	ldw	r16,0(r2)
   4a92c:	dc400215 	stw	r17,8(sp)
   4a930:	dfc00315 	stw	ra,12(sp)
   4a934:	2023883a 	mov	r17,r4
   4a938:	80000226 	beq	r16,zero,4a944 <fputwc+0x2c>
   4a93c:	80800e17 	ldw	r2,56(r16)
   4a940:	10001026 	beq	r2,zero,4a984 <fputwc+0x6c>
   4a944:	2880030b 	ldhu	r2,12(r5)
   4a948:	10c8000c 	andi	r3,r2,8192
   4a94c:	1800051e 	bne	r3,zero,4a964 <fputwc+0x4c>
   4a950:	28c01917 	ldw	r3,100(r5)
   4a954:	10880014 	ori	r2,r2,8192
   4a958:	2880030d 	sth	r2,12(r5)
   4a95c:	18880014 	ori	r2,r3,8192
   4a960:	28801915 	stw	r2,100(r5)
   4a964:	280d883a 	mov	r6,r5
   4a968:	8009883a 	mov	r4,r16
   4a96c:	880b883a 	mov	r5,r17
   4a970:	dfc00317 	ldw	ra,12(sp)
   4a974:	dc400217 	ldw	r17,8(sp)
   4a978:	dc000117 	ldw	r16,4(sp)
   4a97c:	dec00404 	addi	sp,sp,16
   4a980:	004a7901 	jmpi	4a790 <__fputwc>
   4a984:	8009883a 	mov	r4,r16
   4a988:	d9400015 	stw	r5,0(sp)
   4a98c:	0045ae00 	call	45ae0 <__sinit>
   4a990:	d9400017 	ldw	r5,0(sp)
   4a994:	003feb06 	br	4a944 <__alt_data_end+0xfffe5144>

0004a998 <_fstat_r>:
   4a998:	defffd04 	addi	sp,sp,-12
   4a99c:	2805883a 	mov	r2,r5
   4a9a0:	dc000015 	stw	r16,0(sp)
   4a9a4:	04000174 	movhi	r16,5
   4a9a8:	dc400115 	stw	r17,4(sp)
   4a9ac:	84126c04 	addi	r16,r16,18864
   4a9b0:	2023883a 	mov	r17,r4
   4a9b4:	300b883a 	mov	r5,r6
   4a9b8:	1009883a 	mov	r4,r2
   4a9bc:	dfc00215 	stw	ra,8(sp)
   4a9c0:	80000015 	stw	zero,0(r16)
   4a9c4:	004e5780 	call	4e578 <fstat>
   4a9c8:	00ffffc4 	movi	r3,-1
   4a9cc:	10c00526 	beq	r2,r3,4a9e4 <_fstat_r+0x4c>
   4a9d0:	dfc00217 	ldw	ra,8(sp)
   4a9d4:	dc400117 	ldw	r17,4(sp)
   4a9d8:	dc000017 	ldw	r16,0(sp)
   4a9dc:	dec00304 	addi	sp,sp,12
   4a9e0:	f800283a 	ret
   4a9e4:	80c00017 	ldw	r3,0(r16)
   4a9e8:	183ff926 	beq	r3,zero,4a9d0 <__alt_data_end+0xfffe51d0>
   4a9ec:	88c00015 	stw	r3,0(r17)
   4a9f0:	003ff706 	br	4a9d0 <__alt_data_end+0xfffe51d0>

0004a9f4 <_isatty_r>:
   4a9f4:	defffd04 	addi	sp,sp,-12
   4a9f8:	dc000015 	stw	r16,0(sp)
   4a9fc:	04000174 	movhi	r16,5
   4aa00:	dc400115 	stw	r17,4(sp)
   4aa04:	84126c04 	addi	r16,r16,18864
   4aa08:	2023883a 	mov	r17,r4
   4aa0c:	2809883a 	mov	r4,r5
   4aa10:	dfc00215 	stw	ra,8(sp)
   4aa14:	80000015 	stw	zero,0(r16)
   4aa18:	004e90c0 	call	4e90c <isatty>
   4aa1c:	00ffffc4 	movi	r3,-1
   4aa20:	10c00526 	beq	r2,r3,4aa38 <_isatty_r+0x44>
   4aa24:	dfc00217 	ldw	ra,8(sp)
   4aa28:	dc400117 	ldw	r17,4(sp)
   4aa2c:	dc000017 	ldw	r16,0(sp)
   4aa30:	dec00304 	addi	sp,sp,12
   4aa34:	f800283a 	ret
   4aa38:	80c00017 	ldw	r3,0(r16)
   4aa3c:	183ff926 	beq	r3,zero,4aa24 <__alt_data_end+0xfffe5224>
   4aa40:	88c00015 	stw	r3,0(r17)
   4aa44:	003ff706 	br	4aa24 <__alt_data_end+0xfffe5224>

0004aa48 <_lseek_r>:
   4aa48:	defffd04 	addi	sp,sp,-12
   4aa4c:	2805883a 	mov	r2,r5
   4aa50:	dc000015 	stw	r16,0(sp)
   4aa54:	04000174 	movhi	r16,5
   4aa58:	dc400115 	stw	r17,4(sp)
   4aa5c:	300b883a 	mov	r5,r6
   4aa60:	84126c04 	addi	r16,r16,18864
   4aa64:	2023883a 	mov	r17,r4
   4aa68:	380d883a 	mov	r6,r7
   4aa6c:	1009883a 	mov	r4,r2
   4aa70:	dfc00215 	stw	ra,8(sp)
   4aa74:	80000015 	stw	zero,0(r16)
   4aa78:	004eae00 	call	4eae0 <lseek>
   4aa7c:	00ffffc4 	movi	r3,-1
   4aa80:	10c00526 	beq	r2,r3,4aa98 <_lseek_r+0x50>
   4aa84:	dfc00217 	ldw	ra,8(sp)
   4aa88:	dc400117 	ldw	r17,4(sp)
   4aa8c:	dc000017 	ldw	r16,0(sp)
   4aa90:	dec00304 	addi	sp,sp,12
   4aa94:	f800283a 	ret
   4aa98:	80c00017 	ldw	r3,0(r16)
   4aa9c:	183ff926 	beq	r3,zero,4aa84 <__alt_data_end+0xfffe5284>
   4aaa0:	88c00015 	stw	r3,0(r17)
   4aaa4:	003ff706 	br	4aa84 <__alt_data_end+0xfffe5284>

0004aaa8 <_read_r>:
   4aaa8:	defffd04 	addi	sp,sp,-12
   4aaac:	2805883a 	mov	r2,r5
   4aab0:	dc000015 	stw	r16,0(sp)
   4aab4:	04000174 	movhi	r16,5
   4aab8:	dc400115 	stw	r17,4(sp)
   4aabc:	300b883a 	mov	r5,r6
   4aac0:	84126c04 	addi	r16,r16,18864
   4aac4:	2023883a 	mov	r17,r4
   4aac8:	380d883a 	mov	r6,r7
   4aacc:	1009883a 	mov	r4,r2
   4aad0:	dfc00215 	stw	ra,8(sp)
   4aad4:	80000015 	stw	zero,0(r16)
   4aad8:	004ecbc0 	call	4ecbc <read>
   4aadc:	00ffffc4 	movi	r3,-1
   4aae0:	10c00526 	beq	r2,r3,4aaf8 <_read_r+0x50>
   4aae4:	dfc00217 	ldw	ra,8(sp)
   4aae8:	dc400117 	ldw	r17,4(sp)
   4aaec:	dc000017 	ldw	r16,0(sp)
   4aaf0:	dec00304 	addi	sp,sp,12
   4aaf4:	f800283a 	ret
   4aaf8:	80c00017 	ldw	r3,0(r16)
   4aafc:	183ff926 	beq	r3,zero,4aae4 <__alt_data_end+0xfffe52e4>
   4ab00:	88c00015 	stw	r3,0(r17)
   4ab04:	003ff706 	br	4aae4 <__alt_data_end+0xfffe52e4>

0004ab08 <__swbuf_r>:
   4ab08:	defffb04 	addi	sp,sp,-20
   4ab0c:	dcc00315 	stw	r19,12(sp)
   4ab10:	dc800215 	stw	r18,8(sp)
   4ab14:	dc000015 	stw	r16,0(sp)
   4ab18:	dfc00415 	stw	ra,16(sp)
   4ab1c:	dc400115 	stw	r17,4(sp)
   4ab20:	2025883a 	mov	r18,r4
   4ab24:	2827883a 	mov	r19,r5
   4ab28:	3021883a 	mov	r16,r6
   4ab2c:	20000226 	beq	r4,zero,4ab38 <__swbuf_r+0x30>
   4ab30:	20800e17 	ldw	r2,56(r4)
   4ab34:	10004226 	beq	r2,zero,4ac40 <__swbuf_r+0x138>
   4ab38:	80800617 	ldw	r2,24(r16)
   4ab3c:	8100030b 	ldhu	r4,12(r16)
   4ab40:	80800215 	stw	r2,8(r16)
   4ab44:	2080020c 	andi	r2,r4,8
   4ab48:	10003626 	beq	r2,zero,4ac24 <__swbuf_r+0x11c>
   4ab4c:	80c00417 	ldw	r3,16(r16)
   4ab50:	18003426 	beq	r3,zero,4ac24 <__swbuf_r+0x11c>
   4ab54:	2088000c 	andi	r2,r4,8192
   4ab58:	9c403fcc 	andi	r17,r19,255
   4ab5c:	10001a26 	beq	r2,zero,4abc8 <__swbuf_r+0xc0>
   4ab60:	80800017 	ldw	r2,0(r16)
   4ab64:	81000517 	ldw	r4,20(r16)
   4ab68:	10c7c83a 	sub	r3,r2,r3
   4ab6c:	1900200e 	bge	r3,r4,4abf0 <__swbuf_r+0xe8>
   4ab70:	18c00044 	addi	r3,r3,1
   4ab74:	81000217 	ldw	r4,8(r16)
   4ab78:	11400044 	addi	r5,r2,1
   4ab7c:	81400015 	stw	r5,0(r16)
   4ab80:	213fffc4 	addi	r4,r4,-1
   4ab84:	81000215 	stw	r4,8(r16)
   4ab88:	14c00005 	stb	r19,0(r2)
   4ab8c:	80800517 	ldw	r2,20(r16)
   4ab90:	10c01e26 	beq	r2,r3,4ac0c <__swbuf_r+0x104>
   4ab94:	8080030b 	ldhu	r2,12(r16)
   4ab98:	1080004c 	andi	r2,r2,1
   4ab9c:	10000226 	beq	r2,zero,4aba8 <__swbuf_r+0xa0>
   4aba0:	00800284 	movi	r2,10
   4aba4:	88801926 	beq	r17,r2,4ac0c <__swbuf_r+0x104>
   4aba8:	8805883a 	mov	r2,r17
   4abac:	dfc00417 	ldw	ra,16(sp)
   4abb0:	dcc00317 	ldw	r19,12(sp)
   4abb4:	dc800217 	ldw	r18,8(sp)
   4abb8:	dc400117 	ldw	r17,4(sp)
   4abbc:	dc000017 	ldw	r16,0(sp)
   4abc0:	dec00504 	addi	sp,sp,20
   4abc4:	f800283a 	ret
   4abc8:	81401917 	ldw	r5,100(r16)
   4abcc:	00b7ffc4 	movi	r2,-8193
   4abd0:	21080014 	ori	r4,r4,8192
   4abd4:	2884703a 	and	r2,r5,r2
   4abd8:	80801915 	stw	r2,100(r16)
   4abdc:	80800017 	ldw	r2,0(r16)
   4abe0:	8100030d 	sth	r4,12(r16)
   4abe4:	81000517 	ldw	r4,20(r16)
   4abe8:	10c7c83a 	sub	r3,r2,r3
   4abec:	193fe016 	blt	r3,r4,4ab70 <__alt_data_end+0xfffe5370>
   4abf0:	800b883a 	mov	r5,r16
   4abf4:	9009883a 	mov	r4,r18
   4abf8:	00456f40 	call	456f4 <_fflush_r>
   4abfc:	1000071e 	bne	r2,zero,4ac1c <__swbuf_r+0x114>
   4ac00:	80800017 	ldw	r2,0(r16)
   4ac04:	00c00044 	movi	r3,1
   4ac08:	003fda06 	br	4ab74 <__alt_data_end+0xfffe5374>
   4ac0c:	800b883a 	mov	r5,r16
   4ac10:	9009883a 	mov	r4,r18
   4ac14:	00456f40 	call	456f4 <_fflush_r>
   4ac18:	103fe326 	beq	r2,zero,4aba8 <__alt_data_end+0xfffe53a8>
   4ac1c:	00bfffc4 	movi	r2,-1
   4ac20:	003fe206 	br	4abac <__alt_data_end+0xfffe53ac>
   4ac24:	800b883a 	mov	r5,r16
   4ac28:	9009883a 	mov	r4,r18
   4ac2c:	0043ad40 	call	43ad4 <__swsetup_r>
   4ac30:	103ffa1e 	bne	r2,zero,4ac1c <__alt_data_end+0xfffe541c>
   4ac34:	8100030b 	ldhu	r4,12(r16)
   4ac38:	80c00417 	ldw	r3,16(r16)
   4ac3c:	003fc506 	br	4ab54 <__alt_data_end+0xfffe5354>
   4ac40:	0045ae00 	call	45ae0 <__sinit>
   4ac44:	003fbc06 	br	4ab38 <__alt_data_end+0xfffe5338>

0004ac48 <__swbuf>:
   4ac48:	00800174 	movhi	r2,5
   4ac4c:	108b9904 	addi	r2,r2,11876
   4ac50:	280d883a 	mov	r6,r5
   4ac54:	200b883a 	mov	r5,r4
   4ac58:	11000017 	ldw	r4,0(r2)
   4ac5c:	004ab081 	jmpi	4ab08 <__swbuf_r>

0004ac60 <_wcrtomb_r>:
   4ac60:	defff604 	addi	sp,sp,-40
   4ac64:	00800174 	movhi	r2,5
   4ac68:	dc800815 	stw	r18,32(sp)
   4ac6c:	dc400715 	stw	r17,28(sp)
   4ac70:	dc000615 	stw	r16,24(sp)
   4ac74:	108b9d04 	addi	r2,r2,11892
   4ac78:	dfc00915 	stw	ra,36(sp)
   4ac7c:	2021883a 	mov	r16,r4
   4ac80:	3823883a 	mov	r17,r7
   4ac84:	14800017 	ldw	r18,0(r2)
   4ac88:	28001426 	beq	r5,zero,4acdc <_wcrtomb_r+0x7c>
   4ac8c:	d9400415 	stw	r5,16(sp)
   4ac90:	d9800515 	stw	r6,20(sp)
   4ac94:	00466300 	call	46630 <__locale_charset>
   4ac98:	d9800517 	ldw	r6,20(sp)
   4ac9c:	d9400417 	ldw	r5,16(sp)
   4aca0:	100f883a 	mov	r7,r2
   4aca4:	dc400015 	stw	r17,0(sp)
   4aca8:	8009883a 	mov	r4,r16
   4acac:	903ee83a 	callr	r18
   4acb0:	00ffffc4 	movi	r3,-1
   4acb4:	10c0031e 	bne	r2,r3,4acc4 <_wcrtomb_r+0x64>
   4acb8:	88000015 	stw	zero,0(r17)
   4acbc:	00c02284 	movi	r3,138
   4acc0:	80c00015 	stw	r3,0(r16)
   4acc4:	dfc00917 	ldw	ra,36(sp)
   4acc8:	dc800817 	ldw	r18,32(sp)
   4accc:	dc400717 	ldw	r17,28(sp)
   4acd0:	dc000617 	ldw	r16,24(sp)
   4acd4:	dec00a04 	addi	sp,sp,40
   4acd8:	f800283a 	ret
   4acdc:	00466300 	call	46630 <__locale_charset>
   4ace0:	100f883a 	mov	r7,r2
   4ace4:	dc400015 	stw	r17,0(sp)
   4ace8:	000d883a 	mov	r6,zero
   4acec:	d9400104 	addi	r5,sp,4
   4acf0:	8009883a 	mov	r4,r16
   4acf4:	903ee83a 	callr	r18
   4acf8:	003fed06 	br	4acb0 <__alt_data_end+0xfffe54b0>

0004acfc <wcrtomb>:
   4acfc:	defff604 	addi	sp,sp,-40
   4ad00:	00800174 	movhi	r2,5
   4ad04:	dc800615 	stw	r18,24(sp)
   4ad08:	dc400515 	stw	r17,20(sp)
   4ad0c:	108b9904 	addi	r2,r2,11876
   4ad10:	dfc00915 	stw	ra,36(sp)
   4ad14:	dd000815 	stw	r20,32(sp)
   4ad18:	dcc00715 	stw	r19,28(sp)
   4ad1c:	dc000415 	stw	r16,16(sp)
   4ad20:	3025883a 	mov	r18,r6
   4ad24:	14400017 	ldw	r17,0(r2)
   4ad28:	20001926 	beq	r4,zero,4ad90 <wcrtomb+0x94>
   4ad2c:	00800174 	movhi	r2,5
   4ad30:	108b9d04 	addi	r2,r2,11892
   4ad34:	15000017 	ldw	r20,0(r2)
   4ad38:	2021883a 	mov	r16,r4
   4ad3c:	2827883a 	mov	r19,r5
   4ad40:	00466300 	call	46630 <__locale_charset>
   4ad44:	100f883a 	mov	r7,r2
   4ad48:	dc800015 	stw	r18,0(sp)
   4ad4c:	980d883a 	mov	r6,r19
   4ad50:	800b883a 	mov	r5,r16
   4ad54:	8809883a 	mov	r4,r17
   4ad58:	a03ee83a 	callr	r20
   4ad5c:	00ffffc4 	movi	r3,-1
   4ad60:	10c0031e 	bne	r2,r3,4ad70 <wcrtomb+0x74>
   4ad64:	90000015 	stw	zero,0(r18)
   4ad68:	00c02284 	movi	r3,138
   4ad6c:	88c00015 	stw	r3,0(r17)
   4ad70:	dfc00917 	ldw	ra,36(sp)
   4ad74:	dd000817 	ldw	r20,32(sp)
   4ad78:	dcc00717 	ldw	r19,28(sp)
   4ad7c:	dc800617 	ldw	r18,24(sp)
   4ad80:	dc400517 	ldw	r17,20(sp)
   4ad84:	dc000417 	ldw	r16,16(sp)
   4ad88:	dec00a04 	addi	sp,sp,40
   4ad8c:	f800283a 	ret
   4ad90:	00800174 	movhi	r2,5
   4ad94:	108b9d04 	addi	r2,r2,11892
   4ad98:	14000017 	ldw	r16,0(r2)
   4ad9c:	00466300 	call	46630 <__locale_charset>
   4ada0:	100f883a 	mov	r7,r2
   4ada4:	dc800015 	stw	r18,0(sp)
   4ada8:	000d883a 	mov	r6,zero
   4adac:	d9400104 	addi	r5,sp,4
   4adb0:	8809883a 	mov	r4,r17
   4adb4:	803ee83a 	callr	r16
   4adb8:	003fe806 	br	4ad5c <__alt_data_end+0xfffe555c>

0004adbc <__ascii_wctomb>:
   4adbc:	28000526 	beq	r5,zero,4add4 <__ascii_wctomb+0x18>
   4adc0:	00803fc4 	movi	r2,255
   4adc4:	11800536 	bltu	r2,r6,4addc <__ascii_wctomb+0x20>
   4adc8:	29800005 	stb	r6,0(r5)
   4adcc:	00800044 	movi	r2,1
   4add0:	f800283a 	ret
   4add4:	0005883a 	mov	r2,zero
   4add8:	f800283a 	ret
   4addc:	00802284 	movi	r2,138
   4ade0:	20800015 	stw	r2,0(r4)
   4ade4:	00bfffc4 	movi	r2,-1
   4ade8:	f800283a 	ret

0004adec <_wctomb_r>:
   4adec:	00800174 	movhi	r2,5
   4adf0:	defff904 	addi	sp,sp,-28
   4adf4:	108b9d04 	addi	r2,r2,11892
   4adf8:	dfc00615 	stw	ra,24(sp)
   4adfc:	dc400515 	stw	r17,20(sp)
   4ae00:	dc000415 	stw	r16,16(sp)
   4ae04:	3823883a 	mov	r17,r7
   4ae08:	14000017 	ldw	r16,0(r2)
   4ae0c:	d9000115 	stw	r4,4(sp)
   4ae10:	d9400215 	stw	r5,8(sp)
   4ae14:	d9800315 	stw	r6,12(sp)
   4ae18:	00466300 	call	46630 <__locale_charset>
   4ae1c:	d9800317 	ldw	r6,12(sp)
   4ae20:	d9400217 	ldw	r5,8(sp)
   4ae24:	d9000117 	ldw	r4,4(sp)
   4ae28:	100f883a 	mov	r7,r2
   4ae2c:	dc400015 	stw	r17,0(sp)
   4ae30:	803ee83a 	callr	r16
   4ae34:	dfc00617 	ldw	ra,24(sp)
   4ae38:	dc400517 	ldw	r17,20(sp)
   4ae3c:	dc000417 	ldw	r16,16(sp)
   4ae40:	dec00704 	addi	sp,sp,28
   4ae44:	f800283a 	ret

0004ae48 <__udivdi3>:
   4ae48:	defff404 	addi	sp,sp,-48
   4ae4c:	dcc00515 	stw	r19,20(sp)
   4ae50:	dc000215 	stw	r16,8(sp)
   4ae54:	dfc00b15 	stw	ra,44(sp)
   4ae58:	df000a15 	stw	fp,40(sp)
   4ae5c:	ddc00915 	stw	r23,36(sp)
   4ae60:	dd800815 	stw	r22,32(sp)
   4ae64:	dd400715 	stw	r21,28(sp)
   4ae68:	dd000615 	stw	r20,24(sp)
   4ae6c:	dc800415 	stw	r18,16(sp)
   4ae70:	dc400315 	stw	r17,12(sp)
   4ae74:	2027883a 	mov	r19,r4
   4ae78:	2821883a 	mov	r16,r5
   4ae7c:	3800461e 	bne	r7,zero,4af98 <__udivdi3+0x150>
   4ae80:	3023883a 	mov	r17,r6
   4ae84:	2025883a 	mov	r18,r4
   4ae88:	2980572e 	bgeu	r5,r6,4afe8 <__udivdi3+0x1a0>
   4ae8c:	00bfffd4 	movui	r2,65535
   4ae90:	282d883a 	mov	r22,r5
   4ae94:	1180b236 	bltu	r2,r6,4b160 <__udivdi3+0x318>
   4ae98:	00803fc4 	movi	r2,255
   4ae9c:	1185803a 	cmpltu	r2,r2,r6
   4aea0:	100490fa 	slli	r2,r2,3
   4aea4:	3086d83a 	srl	r3,r6,r2
   4aea8:	01000174 	movhi	r4,5
   4aeac:	21042e44 	addi	r4,r4,4281
   4aeb0:	20c7883a 	add	r3,r4,r3
   4aeb4:	18c00003 	ldbu	r3,0(r3)
   4aeb8:	1885883a 	add	r2,r3,r2
   4aebc:	00c00804 	movi	r3,32
   4aec0:	1887c83a 	sub	r3,r3,r2
   4aec4:	18000526 	beq	r3,zero,4aedc <__udivdi3+0x94>
   4aec8:	80e0983a 	sll	r16,r16,r3
   4aecc:	9884d83a 	srl	r2,r19,r2
   4aed0:	30e2983a 	sll	r17,r6,r3
   4aed4:	98e4983a 	sll	r18,r19,r3
   4aed8:	142cb03a 	or	r22,r2,r16
   4aedc:	882ad43a 	srli	r21,r17,16
   4aee0:	b009883a 	mov	r4,r22
   4aee4:	8d3fffcc 	andi	r20,r17,65535
   4aee8:	a80b883a 	mov	r5,r21
   4aeec:	004bb640 	call	4bb64 <__umodsi3>
   4aef0:	b009883a 	mov	r4,r22
   4aef4:	a80b883a 	mov	r5,r21
   4aef8:	1027883a 	mov	r19,r2
   4aefc:	004bb000 	call	4bb00 <__udivsi3>
   4af00:	100b883a 	mov	r5,r2
   4af04:	a009883a 	mov	r4,r20
   4af08:	102d883a 	mov	r22,r2
   4af0c:	00415200 	call	41520 <__mulsi3>
   4af10:	9826943a 	slli	r19,r19,16
   4af14:	9006d43a 	srli	r3,r18,16
   4af18:	1cc6b03a 	or	r3,r3,r19
   4af1c:	1880052e 	bgeu	r3,r2,4af34 <__udivdi3+0xec>
   4af20:	1c47883a 	add	r3,r3,r17
   4af24:	b13fffc4 	addi	r4,r22,-1
   4af28:	1c400136 	bltu	r3,r17,4af30 <__udivdi3+0xe8>
   4af2c:	18814236 	bltu	r3,r2,4b438 <__udivdi3+0x5f0>
   4af30:	202d883a 	mov	r22,r4
   4af34:	18a1c83a 	sub	r16,r3,r2
   4af38:	8009883a 	mov	r4,r16
   4af3c:	a80b883a 	mov	r5,r21
   4af40:	004bb640 	call	4bb64 <__umodsi3>
   4af44:	1027883a 	mov	r19,r2
   4af48:	8009883a 	mov	r4,r16
   4af4c:	a80b883a 	mov	r5,r21
   4af50:	9826943a 	slli	r19,r19,16
   4af54:	004bb000 	call	4bb00 <__udivsi3>
   4af58:	100b883a 	mov	r5,r2
   4af5c:	a009883a 	mov	r4,r20
   4af60:	94bfffcc 	andi	r18,r18,65535
   4af64:	1021883a 	mov	r16,r2
   4af68:	94e4b03a 	or	r18,r18,r19
   4af6c:	00415200 	call	41520 <__mulsi3>
   4af70:	9080052e 	bgeu	r18,r2,4af88 <__udivdi3+0x140>
   4af74:	8ca5883a 	add	r18,r17,r18
   4af78:	80ffffc4 	addi	r3,r16,-1
   4af7c:	94410c36 	bltu	r18,r17,4b3b0 <__udivdi3+0x568>
   4af80:	90810b2e 	bgeu	r18,r2,4b3b0 <__udivdi3+0x568>
   4af84:	843fff84 	addi	r16,r16,-2
   4af88:	b004943a 	slli	r2,r22,16
   4af8c:	0007883a 	mov	r3,zero
   4af90:	1404b03a 	or	r2,r2,r16
   4af94:	00005e06 	br	4b110 <__udivdi3+0x2c8>
   4af98:	29c05b36 	bltu	r5,r7,4b108 <__udivdi3+0x2c0>
   4af9c:	00bfffd4 	movui	r2,65535
   4afa0:	11c0672e 	bgeu	r2,r7,4b140 <__udivdi3+0x2f8>
   4afa4:	00804034 	movhi	r2,256
   4afa8:	10bfffc4 	addi	r2,r2,-1
   4afac:	11c10a36 	bltu	r2,r7,4b3d8 <__udivdi3+0x590>
   4afb0:	00800404 	movi	r2,16
   4afb4:	3886d83a 	srl	r3,r7,r2
   4afb8:	01000174 	movhi	r4,5
   4afbc:	21042e44 	addi	r4,r4,4281
   4afc0:	20c7883a 	add	r3,r4,r3
   4afc4:	18c00003 	ldbu	r3,0(r3)
   4afc8:	05c00804 	movi	r23,32
   4afcc:	1885883a 	add	r2,r3,r2
   4afd0:	b8afc83a 	sub	r23,r23,r2
   4afd4:	b800671e 	bne	r23,zero,4b174 <__udivdi3+0x32c>
   4afd8:	3c010536 	bltu	r7,r16,4b3f0 <__udivdi3+0x5a8>
   4afdc:	9985403a 	cmpgeu	r2,r19,r6
   4afe0:	0007883a 	mov	r3,zero
   4afe4:	00004a06 	br	4b110 <__udivdi3+0x2c8>
   4afe8:	3000041e 	bne	r6,zero,4affc <__udivdi3+0x1b4>
   4afec:	000b883a 	mov	r5,zero
   4aff0:	01000044 	movi	r4,1
   4aff4:	004bb000 	call	4bb00 <__udivsi3>
   4aff8:	1023883a 	mov	r17,r2
   4affc:	00bfffd4 	movui	r2,65535
   4b000:	1440532e 	bgeu	r2,r17,4b150 <__udivdi3+0x308>
   4b004:	00804034 	movhi	r2,256
   4b008:	10bfffc4 	addi	r2,r2,-1
   4b00c:	1440f436 	bltu	r2,r17,4b3e0 <__udivdi3+0x598>
   4b010:	00800404 	movi	r2,16
   4b014:	8886d83a 	srl	r3,r17,r2
   4b018:	01000174 	movhi	r4,5
   4b01c:	21042e44 	addi	r4,r4,4281
   4b020:	20c7883a 	add	r3,r4,r3
   4b024:	18c00003 	ldbu	r3,0(r3)
   4b028:	1885883a 	add	r2,r3,r2
   4b02c:	00c00804 	movi	r3,32
   4b030:	1887c83a 	sub	r3,r3,r2
   4b034:	1800a51e 	bne	r3,zero,4b2cc <__udivdi3+0x484>
   4b038:	882ad43a 	srli	r21,r17,16
   4b03c:	8461c83a 	sub	r16,r16,r17
   4b040:	8d3fffcc 	andi	r20,r17,65535
   4b044:	00c00044 	movi	r3,1
   4b048:	a80b883a 	mov	r5,r21
   4b04c:	8009883a 	mov	r4,r16
   4b050:	d8c00115 	stw	r3,4(sp)
   4b054:	004bb640 	call	4bb64 <__umodsi3>
   4b058:	a80b883a 	mov	r5,r21
   4b05c:	8009883a 	mov	r4,r16
   4b060:	1027883a 	mov	r19,r2
   4b064:	004bb000 	call	4bb00 <__udivsi3>
   4b068:	a00b883a 	mov	r5,r20
   4b06c:	1009883a 	mov	r4,r2
   4b070:	102d883a 	mov	r22,r2
   4b074:	00415200 	call	41520 <__mulsi3>
   4b078:	9826943a 	slli	r19,r19,16
   4b07c:	900ed43a 	srli	r7,r18,16
   4b080:	d8c00117 	ldw	r3,4(sp)
   4b084:	3cceb03a 	or	r7,r7,r19
   4b088:	3880052e 	bgeu	r7,r2,4b0a0 <__udivdi3+0x258>
   4b08c:	3c4f883a 	add	r7,r7,r17
   4b090:	b13fffc4 	addi	r4,r22,-1
   4b094:	3c400136 	bltu	r7,r17,4b09c <__udivdi3+0x254>
   4b098:	3880e436 	bltu	r7,r2,4b42c <__udivdi3+0x5e4>
   4b09c:	202d883a 	mov	r22,r4
   4b0a0:	38a1c83a 	sub	r16,r7,r2
   4b0a4:	8009883a 	mov	r4,r16
   4b0a8:	a80b883a 	mov	r5,r21
   4b0ac:	d8c00115 	stw	r3,4(sp)
   4b0b0:	004bb640 	call	4bb64 <__umodsi3>
   4b0b4:	1027883a 	mov	r19,r2
   4b0b8:	8009883a 	mov	r4,r16
   4b0bc:	a80b883a 	mov	r5,r21
   4b0c0:	9826943a 	slli	r19,r19,16
   4b0c4:	004bb000 	call	4bb00 <__udivsi3>
   4b0c8:	a00b883a 	mov	r5,r20
   4b0cc:	1009883a 	mov	r4,r2
   4b0d0:	94bfffcc 	andi	r18,r18,65535
   4b0d4:	1021883a 	mov	r16,r2
   4b0d8:	94e4b03a 	or	r18,r18,r19
   4b0dc:	00415200 	call	41520 <__mulsi3>
   4b0e0:	d8c00117 	ldw	r3,4(sp)
   4b0e4:	9080052e 	bgeu	r18,r2,4b0fc <__udivdi3+0x2b4>
   4b0e8:	8ca5883a 	add	r18,r17,r18
   4b0ec:	813fffc4 	addi	r4,r16,-1
   4b0f0:	9440ad36 	bltu	r18,r17,4b3a8 <__udivdi3+0x560>
   4b0f4:	9080ac2e 	bgeu	r18,r2,4b3a8 <__udivdi3+0x560>
   4b0f8:	843fff84 	addi	r16,r16,-2
   4b0fc:	b004943a 	slli	r2,r22,16
   4b100:	1404b03a 	or	r2,r2,r16
   4b104:	00000206 	br	4b110 <__udivdi3+0x2c8>
   4b108:	0007883a 	mov	r3,zero
   4b10c:	0005883a 	mov	r2,zero
   4b110:	dfc00b17 	ldw	ra,44(sp)
   4b114:	df000a17 	ldw	fp,40(sp)
   4b118:	ddc00917 	ldw	r23,36(sp)
   4b11c:	dd800817 	ldw	r22,32(sp)
   4b120:	dd400717 	ldw	r21,28(sp)
   4b124:	dd000617 	ldw	r20,24(sp)
   4b128:	dcc00517 	ldw	r19,20(sp)
   4b12c:	dc800417 	ldw	r18,16(sp)
   4b130:	dc400317 	ldw	r17,12(sp)
   4b134:	dc000217 	ldw	r16,8(sp)
   4b138:	dec00c04 	addi	sp,sp,48
   4b13c:	f800283a 	ret
   4b140:	00803fc4 	movi	r2,255
   4b144:	11c5803a 	cmpltu	r2,r2,r7
   4b148:	100490fa 	slli	r2,r2,3
   4b14c:	003f9906 	br	4afb4 <__alt_data_end+0xfffe57b4>
   4b150:	00803fc4 	movi	r2,255
   4b154:	1445803a 	cmpltu	r2,r2,r17
   4b158:	100490fa 	slli	r2,r2,3
   4b15c:	003fad06 	br	4b014 <__alt_data_end+0xfffe5814>
   4b160:	00804034 	movhi	r2,256
   4b164:	10bfffc4 	addi	r2,r2,-1
   4b168:	11809f36 	bltu	r2,r6,4b3e8 <__udivdi3+0x5a0>
   4b16c:	00800404 	movi	r2,16
   4b170:	003f4c06 	br	4aea4 <__alt_data_end+0xfffe56a4>
   4b174:	3dce983a 	sll	r7,r7,r23
   4b178:	30b8d83a 	srl	fp,r6,r2
   4b17c:	80a2d83a 	srl	r17,r16,r2
   4b180:	35cc983a 	sll	r6,r6,r23
   4b184:	3f38b03a 	or	fp,r7,fp
   4b188:	e024d43a 	srli	r18,fp,16
   4b18c:	9884d83a 	srl	r2,r19,r2
   4b190:	85e0983a 	sll	r16,r16,r23
   4b194:	8809883a 	mov	r4,r17
   4b198:	900b883a 	mov	r5,r18
   4b19c:	d9800015 	stw	r6,0(sp)
   4b1a0:	1420b03a 	or	r16,r2,r16
   4b1a4:	004bb640 	call	4bb64 <__umodsi3>
   4b1a8:	900b883a 	mov	r5,r18
   4b1ac:	8809883a 	mov	r4,r17
   4b1b0:	1029883a 	mov	r20,r2
   4b1b4:	e5bfffcc 	andi	r22,fp,65535
   4b1b8:	004bb000 	call	4bb00 <__udivsi3>
   4b1bc:	100b883a 	mov	r5,r2
   4b1c0:	b009883a 	mov	r4,r22
   4b1c4:	102b883a 	mov	r21,r2
   4b1c8:	00415200 	call	41520 <__mulsi3>
   4b1cc:	a028943a 	slli	r20,r20,16
   4b1d0:	8006d43a 	srli	r3,r16,16
   4b1d4:	1d06b03a 	or	r3,r3,r20
   4b1d8:	1880042e 	bgeu	r3,r2,4b1ec <__udivdi3+0x3a4>
   4b1dc:	1f07883a 	add	r3,r3,fp
   4b1e0:	a93fffc4 	addi	r4,r21,-1
   4b1e4:	1f00892e 	bgeu	r3,fp,4b40c <__udivdi3+0x5c4>
   4b1e8:	202b883a 	mov	r21,r4
   4b1ec:	18a3c83a 	sub	r17,r3,r2
   4b1f0:	8809883a 	mov	r4,r17
   4b1f4:	900b883a 	mov	r5,r18
   4b1f8:	004bb640 	call	4bb64 <__umodsi3>
   4b1fc:	1029883a 	mov	r20,r2
   4b200:	8809883a 	mov	r4,r17
   4b204:	900b883a 	mov	r5,r18
   4b208:	a028943a 	slli	r20,r20,16
   4b20c:	004bb000 	call	4bb00 <__udivsi3>
   4b210:	100b883a 	mov	r5,r2
   4b214:	b009883a 	mov	r4,r22
   4b218:	843fffcc 	andi	r16,r16,65535
   4b21c:	1023883a 	mov	r17,r2
   4b220:	8520b03a 	or	r16,r16,r20
   4b224:	00415200 	call	41520 <__mulsi3>
   4b228:	8080042e 	bgeu	r16,r2,4b23c <__udivdi3+0x3f4>
   4b22c:	8721883a 	add	r16,r16,fp
   4b230:	88ffffc4 	addi	r3,r17,-1
   4b234:	8700712e 	bgeu	r16,fp,4b3fc <__udivdi3+0x5b4>
   4b238:	1823883a 	mov	r17,r3
   4b23c:	a80e943a 	slli	r7,r21,16
   4b240:	d8c00017 	ldw	r3,0(sp)
   4b244:	80a1c83a 	sub	r16,r16,r2
   4b248:	3c64b03a 	or	r18,r7,r17
   4b24c:	1d3fffcc 	andi	r20,r3,65535
   4b250:	9022d43a 	srli	r17,r18,16
   4b254:	95bfffcc 	andi	r22,r18,65535
   4b258:	a00b883a 	mov	r5,r20
   4b25c:	b009883a 	mov	r4,r22
   4b260:	182ad43a 	srli	r21,r3,16
   4b264:	00415200 	call	41520 <__mulsi3>
   4b268:	a00b883a 	mov	r5,r20
   4b26c:	8809883a 	mov	r4,r17
   4b270:	1039883a 	mov	fp,r2
   4b274:	00415200 	call	41520 <__mulsi3>
   4b278:	8809883a 	mov	r4,r17
   4b27c:	a80b883a 	mov	r5,r21
   4b280:	1029883a 	mov	r20,r2
   4b284:	00415200 	call	41520 <__mulsi3>
   4b288:	a80b883a 	mov	r5,r21
   4b28c:	b009883a 	mov	r4,r22
   4b290:	1023883a 	mov	r17,r2
   4b294:	00415200 	call	41520 <__mulsi3>
   4b298:	e006d43a 	srli	r3,fp,16
   4b29c:	1505883a 	add	r2,r2,r20
   4b2a0:	1887883a 	add	r3,r3,r2
   4b2a4:	1d00022e 	bgeu	r3,r20,4b2b0 <__udivdi3+0x468>
   4b2a8:	00800074 	movhi	r2,1
   4b2ac:	88a3883a 	add	r17,r17,r2
   4b2b0:	1804d43a 	srli	r2,r3,16
   4b2b4:	1463883a 	add	r17,r2,r17
   4b2b8:	84404436 	bltu	r16,r17,4b3cc <__udivdi3+0x584>
   4b2bc:	84403e26 	beq	r16,r17,4b3b8 <__udivdi3+0x570>
   4b2c0:	9005883a 	mov	r2,r18
   4b2c4:	0007883a 	mov	r3,zero
   4b2c8:	003f9106 	br	4b110 <__alt_data_end+0xfffe5910>
   4b2cc:	88e2983a 	sll	r17,r17,r3
   4b2d0:	80aed83a 	srl	r23,r16,r2
   4b2d4:	80e0983a 	sll	r16,r16,r3
   4b2d8:	882ad43a 	srli	r21,r17,16
   4b2dc:	9884d83a 	srl	r2,r19,r2
   4b2e0:	b809883a 	mov	r4,r23
   4b2e4:	a80b883a 	mov	r5,r21
   4b2e8:	98e4983a 	sll	r18,r19,r3
   4b2ec:	142cb03a 	or	r22,r2,r16
   4b2f0:	004bb640 	call	4bb64 <__umodsi3>
   4b2f4:	b809883a 	mov	r4,r23
   4b2f8:	a80b883a 	mov	r5,r21
   4b2fc:	1027883a 	mov	r19,r2
   4b300:	8d3fffcc 	andi	r20,r17,65535
   4b304:	004bb000 	call	4bb00 <__udivsi3>
   4b308:	a009883a 	mov	r4,r20
   4b30c:	100b883a 	mov	r5,r2
   4b310:	102f883a 	mov	r23,r2
   4b314:	00415200 	call	41520 <__mulsi3>
   4b318:	9826943a 	slli	r19,r19,16
   4b31c:	b008d43a 	srli	r4,r22,16
   4b320:	24c8b03a 	or	r4,r4,r19
   4b324:	2080062e 	bgeu	r4,r2,4b340 <__udivdi3+0x4f8>
   4b328:	2449883a 	add	r4,r4,r17
   4b32c:	b8ffffc4 	addi	r3,r23,-1
   4b330:	24403c36 	bltu	r4,r17,4b424 <__udivdi3+0x5dc>
   4b334:	20803b2e 	bgeu	r4,r2,4b424 <__udivdi3+0x5dc>
   4b338:	bdffff84 	addi	r23,r23,-2
   4b33c:	2449883a 	add	r4,r4,r17
   4b340:	20a1c83a 	sub	r16,r4,r2
   4b344:	a80b883a 	mov	r5,r21
   4b348:	8009883a 	mov	r4,r16
   4b34c:	004bb640 	call	4bb64 <__umodsi3>
   4b350:	a80b883a 	mov	r5,r21
   4b354:	8009883a 	mov	r4,r16
   4b358:	1027883a 	mov	r19,r2
   4b35c:	004bb000 	call	4bb00 <__udivsi3>
   4b360:	a009883a 	mov	r4,r20
   4b364:	100b883a 	mov	r5,r2
   4b368:	9826943a 	slli	r19,r19,16
   4b36c:	1039883a 	mov	fp,r2
   4b370:	00415200 	call	41520 <__mulsi3>
   4b374:	b13fffcc 	andi	r4,r22,65535
   4b378:	24c8b03a 	or	r4,r4,r19
   4b37c:	2080062e 	bgeu	r4,r2,4b398 <__udivdi3+0x550>
   4b380:	2449883a 	add	r4,r4,r17
   4b384:	e0ffffc4 	addi	r3,fp,-1
   4b388:	24402436 	bltu	r4,r17,4b41c <__udivdi3+0x5d4>
   4b38c:	2080232e 	bgeu	r4,r2,4b41c <__udivdi3+0x5d4>
   4b390:	e73fff84 	addi	fp,fp,-2
   4b394:	2449883a 	add	r4,r4,r17
   4b398:	b82e943a 	slli	r23,r23,16
   4b39c:	20a1c83a 	sub	r16,r4,r2
   4b3a0:	bf06b03a 	or	r3,r23,fp
   4b3a4:	003f2806 	br	4b048 <__alt_data_end+0xfffe5848>
   4b3a8:	2021883a 	mov	r16,r4
   4b3ac:	003f5306 	br	4b0fc <__alt_data_end+0xfffe58fc>
   4b3b0:	1821883a 	mov	r16,r3
   4b3b4:	003ef406 	br	4af88 <__alt_data_end+0xfffe5788>
   4b3b8:	1806943a 	slli	r3,r3,16
   4b3bc:	9de6983a 	sll	r19,r19,r23
   4b3c0:	e73fffcc 	andi	fp,fp,65535
   4b3c4:	1f07883a 	add	r3,r3,fp
   4b3c8:	98ffbd2e 	bgeu	r19,r3,4b2c0 <__alt_data_end+0xfffe5ac0>
   4b3cc:	90bfffc4 	addi	r2,r18,-1
   4b3d0:	0007883a 	mov	r3,zero
   4b3d4:	003f4e06 	br	4b110 <__alt_data_end+0xfffe5910>
   4b3d8:	00800604 	movi	r2,24
   4b3dc:	003ef506 	br	4afb4 <__alt_data_end+0xfffe57b4>
   4b3e0:	00800604 	movi	r2,24
   4b3e4:	003f0b06 	br	4b014 <__alt_data_end+0xfffe5814>
   4b3e8:	00800604 	movi	r2,24
   4b3ec:	003ead06 	br	4aea4 <__alt_data_end+0xfffe56a4>
   4b3f0:	0007883a 	mov	r3,zero
   4b3f4:	00800044 	movi	r2,1
   4b3f8:	003f4506 	br	4b110 <__alt_data_end+0xfffe5910>
   4b3fc:	80bf8e2e 	bgeu	r16,r2,4b238 <__alt_data_end+0xfffe5a38>
   4b400:	8c7fff84 	addi	r17,r17,-2
   4b404:	8721883a 	add	r16,r16,fp
   4b408:	003f8c06 	br	4b23c <__alt_data_end+0xfffe5a3c>
   4b40c:	18bf762e 	bgeu	r3,r2,4b1e8 <__alt_data_end+0xfffe59e8>
   4b410:	ad7fff84 	addi	r21,r21,-2
   4b414:	1f07883a 	add	r3,r3,fp
   4b418:	003f7406 	br	4b1ec <__alt_data_end+0xfffe59ec>
   4b41c:	1839883a 	mov	fp,r3
   4b420:	003fdd06 	br	4b398 <__alt_data_end+0xfffe5b98>
   4b424:	182f883a 	mov	r23,r3
   4b428:	003fc506 	br	4b340 <__alt_data_end+0xfffe5b40>
   4b42c:	b5bfff84 	addi	r22,r22,-2
   4b430:	3c4f883a 	add	r7,r7,r17
   4b434:	003f1a06 	br	4b0a0 <__alt_data_end+0xfffe58a0>
   4b438:	b5bfff84 	addi	r22,r22,-2
   4b43c:	1c47883a 	add	r3,r3,r17
   4b440:	003ebc06 	br	4af34 <__alt_data_end+0xfffe5734>

0004b444 <__umoddi3>:
   4b444:	defff304 	addi	sp,sp,-52
   4b448:	df000b15 	stw	fp,44(sp)
   4b44c:	dc400415 	stw	r17,16(sp)
   4b450:	dc000315 	stw	r16,12(sp)
   4b454:	dfc00c15 	stw	ra,48(sp)
   4b458:	ddc00a15 	stw	r23,40(sp)
   4b45c:	dd800915 	stw	r22,36(sp)
   4b460:	dd400815 	stw	r21,32(sp)
   4b464:	dd000715 	stw	r20,28(sp)
   4b468:	dcc00615 	stw	r19,24(sp)
   4b46c:	dc800515 	stw	r18,20(sp)
   4b470:	2021883a 	mov	r16,r4
   4b474:	2823883a 	mov	r17,r5
   4b478:	2839883a 	mov	fp,r5
   4b47c:	3800401e 	bne	r7,zero,4b580 <__umoddi3+0x13c>
   4b480:	3027883a 	mov	r19,r6
   4b484:	2029883a 	mov	r20,r4
   4b488:	2980552e 	bgeu	r5,r6,4b5e0 <__umoddi3+0x19c>
   4b48c:	00bfffd4 	movui	r2,65535
   4b490:	1180a236 	bltu	r2,r6,4b71c <__umoddi3+0x2d8>
   4b494:	01003fc4 	movi	r4,255
   4b498:	2189803a 	cmpltu	r4,r4,r6
   4b49c:	200890fa 	slli	r4,r4,3
   4b4a0:	3104d83a 	srl	r2,r6,r4
   4b4a4:	00c00174 	movhi	r3,5
   4b4a8:	18c42e44 	addi	r3,r3,4281
   4b4ac:	1885883a 	add	r2,r3,r2
   4b4b0:	10c00003 	ldbu	r3,0(r2)
   4b4b4:	00800804 	movi	r2,32
   4b4b8:	1909883a 	add	r4,r3,r4
   4b4bc:	1125c83a 	sub	r18,r2,r4
   4b4c0:	90000526 	beq	r18,zero,4b4d8 <__umoddi3+0x94>
   4b4c4:	8ca2983a 	sll	r17,r17,r18
   4b4c8:	8108d83a 	srl	r4,r16,r4
   4b4cc:	34a6983a 	sll	r19,r6,r18
   4b4d0:	84a8983a 	sll	r20,r16,r18
   4b4d4:	2478b03a 	or	fp,r4,r17
   4b4d8:	982cd43a 	srli	r22,r19,16
   4b4dc:	e009883a 	mov	r4,fp
   4b4e0:	9dffffcc 	andi	r23,r19,65535
   4b4e4:	b00b883a 	mov	r5,r22
   4b4e8:	004bb640 	call	4bb64 <__umodsi3>
   4b4ec:	b00b883a 	mov	r5,r22
   4b4f0:	e009883a 	mov	r4,fp
   4b4f4:	102b883a 	mov	r21,r2
   4b4f8:	004bb000 	call	4bb00 <__udivsi3>
   4b4fc:	100b883a 	mov	r5,r2
   4b500:	b809883a 	mov	r4,r23
   4b504:	00415200 	call	41520 <__mulsi3>
   4b508:	a82a943a 	slli	r21,r21,16
   4b50c:	a006d43a 	srli	r3,r20,16
   4b510:	1d46b03a 	or	r3,r3,r21
   4b514:	1880032e 	bgeu	r3,r2,4b524 <__umoddi3+0xe0>
   4b518:	1cc7883a 	add	r3,r3,r19
   4b51c:	1cc00136 	bltu	r3,r19,4b524 <__umoddi3+0xe0>
   4b520:	18813136 	bltu	r3,r2,4b9e8 <__umoddi3+0x5a4>
   4b524:	18a1c83a 	sub	r16,r3,r2
   4b528:	b00b883a 	mov	r5,r22
   4b52c:	8009883a 	mov	r4,r16
   4b530:	004bb640 	call	4bb64 <__umodsi3>
   4b534:	b00b883a 	mov	r5,r22
   4b538:	8009883a 	mov	r4,r16
   4b53c:	1023883a 	mov	r17,r2
   4b540:	004bb000 	call	4bb00 <__udivsi3>
   4b544:	100b883a 	mov	r5,r2
   4b548:	b809883a 	mov	r4,r23
   4b54c:	8822943a 	slli	r17,r17,16
   4b550:	00415200 	call	41520 <__mulsi3>
   4b554:	a0ffffcc 	andi	r3,r20,65535
   4b558:	1c46b03a 	or	r3,r3,r17
   4b55c:	1880042e 	bgeu	r3,r2,4b570 <__umoddi3+0x12c>
   4b560:	1cc7883a 	add	r3,r3,r19
   4b564:	1cc00236 	bltu	r3,r19,4b570 <__umoddi3+0x12c>
   4b568:	1880012e 	bgeu	r3,r2,4b570 <__umoddi3+0x12c>
   4b56c:	1cc7883a 	add	r3,r3,r19
   4b570:	1885c83a 	sub	r2,r3,r2
   4b574:	1484d83a 	srl	r2,r2,r18
   4b578:	0007883a 	mov	r3,zero
   4b57c:	00005306 	br	4b6cc <__umoddi3+0x288>
   4b580:	29c05036 	bltu	r5,r7,4b6c4 <__umoddi3+0x280>
   4b584:	00bfffd4 	movui	r2,65535
   4b588:	11c05c2e 	bgeu	r2,r7,4b6fc <__umoddi3+0x2b8>
   4b58c:	00804034 	movhi	r2,256
   4b590:	10bfffc4 	addi	r2,r2,-1
   4b594:	11c10636 	bltu	r2,r7,4b9b0 <__umoddi3+0x56c>
   4b598:	01000404 	movi	r4,16
   4b59c:	3904d83a 	srl	r2,r7,r4
   4b5a0:	00c00174 	movhi	r3,5
   4b5a4:	18c42e44 	addi	r3,r3,4281
   4b5a8:	1885883a 	add	r2,r3,r2
   4b5ac:	14c00003 	ldbu	r19,0(r2)
   4b5b0:	00c00804 	movi	r3,32
   4b5b4:	9927883a 	add	r19,r19,r4
   4b5b8:	1ce9c83a 	sub	r20,r3,r19
   4b5bc:	a0005c1e 	bne	r20,zero,4b730 <__umoddi3+0x2ec>
   4b5c0:	3c400136 	bltu	r7,r17,4b5c8 <__umoddi3+0x184>
   4b5c4:	81810a36 	bltu	r16,r6,4b9f0 <__umoddi3+0x5ac>
   4b5c8:	8185c83a 	sub	r2,r16,r6
   4b5cc:	89e3c83a 	sub	r17,r17,r7
   4b5d0:	8089803a 	cmpltu	r4,r16,r2
   4b5d4:	8939c83a 	sub	fp,r17,r4
   4b5d8:	e007883a 	mov	r3,fp
   4b5dc:	00003b06 	br	4b6cc <__umoddi3+0x288>
   4b5e0:	3000041e 	bne	r6,zero,4b5f4 <__umoddi3+0x1b0>
   4b5e4:	000b883a 	mov	r5,zero
   4b5e8:	01000044 	movi	r4,1
   4b5ec:	004bb000 	call	4bb00 <__udivsi3>
   4b5f0:	1027883a 	mov	r19,r2
   4b5f4:	00bfffd4 	movui	r2,65535
   4b5f8:	14c0442e 	bgeu	r2,r19,4b70c <__umoddi3+0x2c8>
   4b5fc:	00804034 	movhi	r2,256
   4b600:	10bfffc4 	addi	r2,r2,-1
   4b604:	14c0ec36 	bltu	r2,r19,4b9b8 <__umoddi3+0x574>
   4b608:	00800404 	movi	r2,16
   4b60c:	9886d83a 	srl	r3,r19,r2
   4b610:	01000174 	movhi	r4,5
   4b614:	21042e44 	addi	r4,r4,4281
   4b618:	20c7883a 	add	r3,r4,r3
   4b61c:	18c00003 	ldbu	r3,0(r3)
   4b620:	1887883a 	add	r3,r3,r2
   4b624:	00800804 	movi	r2,32
   4b628:	10e5c83a 	sub	r18,r2,r3
   4b62c:	9000ab1e 	bne	r18,zero,4b8dc <__umoddi3+0x498>
   4b630:	982cd43a 	srli	r22,r19,16
   4b634:	8ce3c83a 	sub	r17,r17,r19
   4b638:	9dffffcc 	andi	r23,r19,65535
   4b63c:	b00b883a 	mov	r5,r22
   4b640:	8809883a 	mov	r4,r17
   4b644:	004bb640 	call	4bb64 <__umodsi3>
   4b648:	b00b883a 	mov	r5,r22
   4b64c:	8809883a 	mov	r4,r17
   4b650:	102b883a 	mov	r21,r2
   4b654:	004bb000 	call	4bb00 <__udivsi3>
   4b658:	b80b883a 	mov	r5,r23
   4b65c:	1009883a 	mov	r4,r2
   4b660:	00415200 	call	41520 <__mulsi3>
   4b664:	a82a943a 	slli	r21,r21,16
   4b668:	a006d43a 	srli	r3,r20,16
   4b66c:	1d46b03a 	or	r3,r3,r21
   4b670:	1880042e 	bgeu	r3,r2,4b684 <__umoddi3+0x240>
   4b674:	1cc7883a 	add	r3,r3,r19
   4b678:	1cc00236 	bltu	r3,r19,4b684 <__umoddi3+0x240>
   4b67c:	1880012e 	bgeu	r3,r2,4b684 <__umoddi3+0x240>
   4b680:	1cc7883a 	add	r3,r3,r19
   4b684:	18a1c83a 	sub	r16,r3,r2
   4b688:	b00b883a 	mov	r5,r22
   4b68c:	8009883a 	mov	r4,r16
   4b690:	004bb640 	call	4bb64 <__umodsi3>
   4b694:	1023883a 	mov	r17,r2
   4b698:	b00b883a 	mov	r5,r22
   4b69c:	8009883a 	mov	r4,r16
   4b6a0:	004bb000 	call	4bb00 <__udivsi3>
   4b6a4:	8822943a 	slli	r17,r17,16
   4b6a8:	b80b883a 	mov	r5,r23
   4b6ac:	1009883a 	mov	r4,r2
   4b6b0:	00415200 	call	41520 <__mulsi3>
   4b6b4:	a53fffcc 	andi	r20,r20,65535
   4b6b8:	a446b03a 	or	r3,r20,r17
   4b6bc:	18bfac2e 	bgeu	r3,r2,4b570 <__alt_data_end+0xfffe5d70>
   4b6c0:	003fa706 	br	4b560 <__alt_data_end+0xfffe5d60>
   4b6c4:	2005883a 	mov	r2,r4
   4b6c8:	2807883a 	mov	r3,r5
   4b6cc:	dfc00c17 	ldw	ra,48(sp)
   4b6d0:	df000b17 	ldw	fp,44(sp)
   4b6d4:	ddc00a17 	ldw	r23,40(sp)
   4b6d8:	dd800917 	ldw	r22,36(sp)
   4b6dc:	dd400817 	ldw	r21,32(sp)
   4b6e0:	dd000717 	ldw	r20,28(sp)
   4b6e4:	dcc00617 	ldw	r19,24(sp)
   4b6e8:	dc800517 	ldw	r18,20(sp)
   4b6ec:	dc400417 	ldw	r17,16(sp)
   4b6f0:	dc000317 	ldw	r16,12(sp)
   4b6f4:	dec00d04 	addi	sp,sp,52
   4b6f8:	f800283a 	ret
   4b6fc:	04c03fc4 	movi	r19,255
   4b700:	99c9803a 	cmpltu	r4,r19,r7
   4b704:	200890fa 	slli	r4,r4,3
   4b708:	003fa406 	br	4b59c <__alt_data_end+0xfffe5d9c>
   4b70c:	00803fc4 	movi	r2,255
   4b710:	14c5803a 	cmpltu	r2,r2,r19
   4b714:	100490fa 	slli	r2,r2,3
   4b718:	003fbc06 	br	4b60c <__alt_data_end+0xfffe5e0c>
   4b71c:	00804034 	movhi	r2,256
   4b720:	10bfffc4 	addi	r2,r2,-1
   4b724:	1180a636 	bltu	r2,r6,4b9c0 <__umoddi3+0x57c>
   4b728:	01000404 	movi	r4,16
   4b72c:	003f5c06 	br	4b4a0 <__alt_data_end+0xfffe5ca0>
   4b730:	3d0e983a 	sll	r7,r7,r20
   4b734:	34ead83a 	srl	r21,r6,r19
   4b738:	8cc6d83a 	srl	r3,r17,r19
   4b73c:	8d10983a 	sll	r8,r17,r20
   4b740:	3d6ab03a 	or	r21,r7,r21
   4b744:	a82cd43a 	srli	r22,r21,16
   4b748:	84e2d83a 	srl	r17,r16,r19
   4b74c:	1809883a 	mov	r4,r3
   4b750:	b00b883a 	mov	r5,r22
   4b754:	8a22b03a 	or	r17,r17,r8
   4b758:	3524983a 	sll	r18,r6,r20
   4b75c:	dc400015 	stw	r17,0(sp)
   4b760:	d8c00115 	stw	r3,4(sp)
   4b764:	004bb640 	call	4bb64 <__umodsi3>
   4b768:	d8c00117 	ldw	r3,4(sp)
   4b76c:	b00b883a 	mov	r5,r22
   4b770:	1039883a 	mov	fp,r2
   4b774:	1809883a 	mov	r4,r3
   4b778:	004bb000 	call	4bb00 <__udivsi3>
   4b77c:	adffffcc 	andi	r23,r21,65535
   4b780:	100b883a 	mov	r5,r2
   4b784:	b809883a 	mov	r4,r23
   4b788:	1023883a 	mov	r17,r2
   4b78c:	00415200 	call	41520 <__mulsi3>
   4b790:	d9400017 	ldw	r5,0(sp)
   4b794:	e008943a 	slli	r4,fp,16
   4b798:	8520983a 	sll	r16,r16,r20
   4b79c:	2806d43a 	srli	r3,r5,16
   4b7a0:	1906b03a 	or	r3,r3,r4
   4b7a4:	1880042e 	bgeu	r3,r2,4b7b8 <__umoddi3+0x374>
   4b7a8:	1d47883a 	add	r3,r3,r21
   4b7ac:	893fffc4 	addi	r4,r17,-1
   4b7b0:	1d40892e 	bgeu	r3,r21,4b9d8 <__umoddi3+0x594>
   4b7b4:	2023883a 	mov	r17,r4
   4b7b8:	18b9c83a 	sub	fp,r3,r2
   4b7bc:	b00b883a 	mov	r5,r22
   4b7c0:	e009883a 	mov	r4,fp
   4b7c4:	004bb640 	call	4bb64 <__umodsi3>
   4b7c8:	b00b883a 	mov	r5,r22
   4b7cc:	e009883a 	mov	r4,fp
   4b7d0:	d8800215 	stw	r2,8(sp)
   4b7d4:	004bb000 	call	4bb00 <__udivsi3>
   4b7d8:	100b883a 	mov	r5,r2
   4b7dc:	b809883a 	mov	r4,r23
   4b7e0:	102d883a 	mov	r22,r2
   4b7e4:	00415200 	call	41520 <__mulsi3>
   4b7e8:	d9800217 	ldw	r6,8(sp)
   4b7ec:	d8c00017 	ldw	r3,0(sp)
   4b7f0:	300c943a 	slli	r6,r6,16
   4b7f4:	1a3fffcc 	andi	r8,r3,65535
   4b7f8:	4190b03a 	or	r8,r8,r6
   4b7fc:	4080042e 	bgeu	r8,r2,4b810 <__umoddi3+0x3cc>
   4b800:	4551883a 	add	r8,r8,r21
   4b804:	b0ffffc4 	addi	r3,r22,-1
   4b808:	45406f2e 	bgeu	r8,r21,4b9c8 <__umoddi3+0x584>
   4b80c:	182d883a 	mov	r22,r3
   4b810:	880e943a 	slli	r7,r17,16
   4b814:	9006d43a 	srli	r3,r18,16
   4b818:	91bfffcc 	andi	r6,r18,65535
   4b81c:	3dacb03a 	or	r22,r7,r22
   4b820:	b02ed43a 	srli	r23,r22,16
   4b824:	b5bfffcc 	andi	r22,r22,65535
   4b828:	300b883a 	mov	r5,r6
   4b82c:	b009883a 	mov	r4,r22
   4b830:	40a3c83a 	sub	r17,r8,r2
   4b834:	d8c00115 	stw	r3,4(sp)
   4b838:	d9800215 	stw	r6,8(sp)
   4b83c:	00415200 	call	41520 <__mulsi3>
   4b840:	d9800217 	ldw	r6,8(sp)
   4b844:	b809883a 	mov	r4,r23
   4b848:	1039883a 	mov	fp,r2
   4b84c:	300b883a 	mov	r5,r6
   4b850:	00415200 	call	41520 <__mulsi3>
   4b854:	d8c00117 	ldw	r3,4(sp)
   4b858:	b809883a 	mov	r4,r23
   4b85c:	d8800215 	stw	r2,8(sp)
   4b860:	180b883a 	mov	r5,r3
   4b864:	00415200 	call	41520 <__mulsi3>
   4b868:	d8c00117 	ldw	r3,4(sp)
   4b86c:	b009883a 	mov	r4,r22
   4b870:	102f883a 	mov	r23,r2
   4b874:	180b883a 	mov	r5,r3
   4b878:	00415200 	call	41520 <__mulsi3>
   4b87c:	d9800217 	ldw	r6,8(sp)
   4b880:	e006d43a 	srli	r3,fp,16
   4b884:	1185883a 	add	r2,r2,r6
   4b888:	1885883a 	add	r2,r3,r2
   4b88c:	1180022e 	bgeu	r2,r6,4b898 <__umoddi3+0x454>
   4b890:	00c00074 	movhi	r3,1
   4b894:	b8ef883a 	add	r23,r23,r3
   4b898:	1006d43a 	srli	r3,r2,16
   4b89c:	1004943a 	slli	r2,r2,16
   4b8a0:	e73fffcc 	andi	fp,fp,65535
   4b8a4:	1dc7883a 	add	r3,r3,r23
   4b8a8:	1739883a 	add	fp,r2,fp
   4b8ac:	88c03a36 	bltu	r17,r3,4b998 <__umoddi3+0x554>
   4b8b0:	88c05126 	beq	r17,r3,4b9f8 <__umoddi3+0x5b4>
   4b8b4:	88c9c83a 	sub	r4,r17,r3
   4b8b8:	e00f883a 	mov	r7,fp
   4b8bc:	81cfc83a 	sub	r7,r16,r7
   4b8c0:	81c7803a 	cmpltu	r3,r16,r7
   4b8c4:	20c7c83a 	sub	r3,r4,r3
   4b8c8:	1cc4983a 	sll	r2,r3,r19
   4b8cc:	3d0ed83a 	srl	r7,r7,r20
   4b8d0:	1d06d83a 	srl	r3,r3,r20
   4b8d4:	11c4b03a 	or	r2,r2,r7
   4b8d8:	003f7c06 	br	4b6cc <__alt_data_end+0xfffe5ecc>
   4b8dc:	9ca6983a 	sll	r19,r19,r18
   4b8e0:	88f8d83a 	srl	fp,r17,r3
   4b8e4:	80c4d83a 	srl	r2,r16,r3
   4b8e8:	982cd43a 	srli	r22,r19,16
   4b8ec:	8ca2983a 	sll	r17,r17,r18
   4b8f0:	e009883a 	mov	r4,fp
   4b8f4:	b00b883a 	mov	r5,r22
   4b8f8:	146ab03a 	or	r21,r2,r17
   4b8fc:	004bb640 	call	4bb64 <__umodsi3>
   4b900:	b00b883a 	mov	r5,r22
   4b904:	e009883a 	mov	r4,fp
   4b908:	1029883a 	mov	r20,r2
   4b90c:	9dffffcc 	andi	r23,r19,65535
   4b910:	004bb000 	call	4bb00 <__udivsi3>
   4b914:	b809883a 	mov	r4,r23
   4b918:	100b883a 	mov	r5,r2
   4b91c:	00415200 	call	41520 <__mulsi3>
   4b920:	a008943a 	slli	r4,r20,16
   4b924:	a806d43a 	srli	r3,r21,16
   4b928:	84a8983a 	sll	r20,r16,r18
   4b92c:	1906b03a 	or	r3,r3,r4
   4b930:	1880042e 	bgeu	r3,r2,4b944 <__umoddi3+0x500>
   4b934:	1cc7883a 	add	r3,r3,r19
   4b938:	1cc00236 	bltu	r3,r19,4b944 <__umoddi3+0x500>
   4b93c:	1880012e 	bgeu	r3,r2,4b944 <__umoddi3+0x500>
   4b940:	1cc7883a 	add	r3,r3,r19
   4b944:	18a3c83a 	sub	r17,r3,r2
   4b948:	b00b883a 	mov	r5,r22
   4b94c:	8809883a 	mov	r4,r17
   4b950:	004bb640 	call	4bb64 <__umodsi3>
   4b954:	b00b883a 	mov	r5,r22
   4b958:	8809883a 	mov	r4,r17
   4b95c:	1021883a 	mov	r16,r2
   4b960:	004bb000 	call	4bb00 <__udivsi3>
   4b964:	100b883a 	mov	r5,r2
   4b968:	b809883a 	mov	r4,r23
   4b96c:	8020943a 	slli	r16,r16,16
   4b970:	00415200 	call	41520 <__mulsi3>
   4b974:	a8ffffcc 	andi	r3,r21,65535
   4b978:	1c06b03a 	or	r3,r3,r16
   4b97c:	1880042e 	bgeu	r3,r2,4b990 <__umoddi3+0x54c>
   4b980:	1cc7883a 	add	r3,r3,r19
   4b984:	1cc00236 	bltu	r3,r19,4b990 <__umoddi3+0x54c>
   4b988:	1880012e 	bgeu	r3,r2,4b990 <__umoddi3+0x54c>
   4b98c:	1cc7883a 	add	r3,r3,r19
   4b990:	18a3c83a 	sub	r17,r3,r2
   4b994:	003f2906 	br	4b63c <__alt_data_end+0xfffe5e3c>
   4b998:	e48fc83a 	sub	r7,fp,r18
   4b99c:	1d49c83a 	sub	r4,r3,r21
   4b9a0:	e1f9803a 	cmpltu	fp,fp,r7
   4b9a4:	2739c83a 	sub	fp,r4,fp
   4b9a8:	8f09c83a 	sub	r4,r17,fp
   4b9ac:	003fc306 	br	4b8bc <__alt_data_end+0xfffe60bc>
   4b9b0:	01000604 	movi	r4,24
   4b9b4:	003ef906 	br	4b59c <__alt_data_end+0xfffe5d9c>
   4b9b8:	00800604 	movi	r2,24
   4b9bc:	003f1306 	br	4b60c <__alt_data_end+0xfffe5e0c>
   4b9c0:	01000604 	movi	r4,24
   4b9c4:	003eb606 	br	4b4a0 <__alt_data_end+0xfffe5ca0>
   4b9c8:	40bf902e 	bgeu	r8,r2,4b80c <__alt_data_end+0xfffe600c>
   4b9cc:	b5bfff84 	addi	r22,r22,-2
   4b9d0:	4551883a 	add	r8,r8,r21
   4b9d4:	003f8e06 	br	4b810 <__alt_data_end+0xfffe6010>
   4b9d8:	18bf762e 	bgeu	r3,r2,4b7b4 <__alt_data_end+0xfffe5fb4>
   4b9dc:	8c7fff84 	addi	r17,r17,-2
   4b9e0:	1d47883a 	add	r3,r3,r21
   4b9e4:	003f7406 	br	4b7b8 <__alt_data_end+0xfffe5fb8>
   4b9e8:	1cc7883a 	add	r3,r3,r19
   4b9ec:	003ecd06 	br	4b524 <__alt_data_end+0xfffe5d24>
   4b9f0:	8005883a 	mov	r2,r16
   4b9f4:	003ef806 	br	4b5d8 <__alt_data_end+0xfffe5dd8>
   4b9f8:	873fe736 	bltu	r16,fp,4b998 <__alt_data_end+0xfffe6198>
   4b9fc:	e00f883a 	mov	r7,fp
   4ba00:	0009883a 	mov	r4,zero
   4ba04:	003fad06 	br	4b8bc <__alt_data_end+0xfffe60bc>

0004ba08 <__divsi3>:
   4ba08:	20001b16 	blt	r4,zero,4ba78 <__divsi3+0x70>
   4ba0c:	000f883a 	mov	r7,zero
   4ba10:	28001616 	blt	r5,zero,4ba6c <__divsi3+0x64>
   4ba14:	200d883a 	mov	r6,r4
   4ba18:	29001a2e 	bgeu	r5,r4,4ba84 <__divsi3+0x7c>
   4ba1c:	00800804 	movi	r2,32
   4ba20:	00c00044 	movi	r3,1
   4ba24:	00000106 	br	4ba2c <__divsi3+0x24>
   4ba28:	10000d26 	beq	r2,zero,4ba60 <__divsi3+0x58>
   4ba2c:	294b883a 	add	r5,r5,r5
   4ba30:	10bfffc4 	addi	r2,r2,-1
   4ba34:	18c7883a 	add	r3,r3,r3
   4ba38:	293ffb36 	bltu	r5,r4,4ba28 <__alt_data_end+0xfffe6228>
   4ba3c:	0005883a 	mov	r2,zero
   4ba40:	18000726 	beq	r3,zero,4ba60 <__divsi3+0x58>
   4ba44:	0005883a 	mov	r2,zero
   4ba48:	31400236 	bltu	r6,r5,4ba54 <__divsi3+0x4c>
   4ba4c:	314dc83a 	sub	r6,r6,r5
   4ba50:	10c4b03a 	or	r2,r2,r3
   4ba54:	1806d07a 	srli	r3,r3,1
   4ba58:	280ad07a 	srli	r5,r5,1
   4ba5c:	183ffa1e 	bne	r3,zero,4ba48 <__alt_data_end+0xfffe6248>
   4ba60:	38000126 	beq	r7,zero,4ba68 <__divsi3+0x60>
   4ba64:	0085c83a 	sub	r2,zero,r2
   4ba68:	f800283a 	ret
   4ba6c:	014bc83a 	sub	r5,zero,r5
   4ba70:	39c0005c 	xori	r7,r7,1
   4ba74:	003fe706 	br	4ba14 <__alt_data_end+0xfffe6214>
   4ba78:	0109c83a 	sub	r4,zero,r4
   4ba7c:	01c00044 	movi	r7,1
   4ba80:	003fe306 	br	4ba10 <__alt_data_end+0xfffe6210>
   4ba84:	00c00044 	movi	r3,1
   4ba88:	003fee06 	br	4ba44 <__alt_data_end+0xfffe6244>

0004ba8c <__modsi3>:
   4ba8c:	20001716 	blt	r4,zero,4baec <__modsi3+0x60>
   4ba90:	000f883a 	mov	r7,zero
   4ba94:	2005883a 	mov	r2,r4
   4ba98:	28001216 	blt	r5,zero,4bae4 <__modsi3+0x58>
   4ba9c:	2900162e 	bgeu	r5,r4,4baf8 <__modsi3+0x6c>
   4baa0:	01800804 	movi	r6,32
   4baa4:	00c00044 	movi	r3,1
   4baa8:	00000106 	br	4bab0 <__modsi3+0x24>
   4baac:	30000a26 	beq	r6,zero,4bad8 <__modsi3+0x4c>
   4bab0:	294b883a 	add	r5,r5,r5
   4bab4:	31bfffc4 	addi	r6,r6,-1
   4bab8:	18c7883a 	add	r3,r3,r3
   4babc:	293ffb36 	bltu	r5,r4,4baac <__alt_data_end+0xfffe62ac>
   4bac0:	18000526 	beq	r3,zero,4bad8 <__modsi3+0x4c>
   4bac4:	1806d07a 	srli	r3,r3,1
   4bac8:	11400136 	bltu	r2,r5,4bad0 <__modsi3+0x44>
   4bacc:	1145c83a 	sub	r2,r2,r5
   4bad0:	280ad07a 	srli	r5,r5,1
   4bad4:	183ffb1e 	bne	r3,zero,4bac4 <__alt_data_end+0xfffe62c4>
   4bad8:	38000126 	beq	r7,zero,4bae0 <__modsi3+0x54>
   4badc:	0085c83a 	sub	r2,zero,r2
   4bae0:	f800283a 	ret
   4bae4:	014bc83a 	sub	r5,zero,r5
   4bae8:	003fec06 	br	4ba9c <__alt_data_end+0xfffe629c>
   4baec:	0109c83a 	sub	r4,zero,r4
   4baf0:	01c00044 	movi	r7,1
   4baf4:	003fe706 	br	4ba94 <__alt_data_end+0xfffe6294>
   4baf8:	00c00044 	movi	r3,1
   4bafc:	003ff106 	br	4bac4 <__alt_data_end+0xfffe62c4>

0004bb00 <__udivsi3>:
   4bb00:	200d883a 	mov	r6,r4
   4bb04:	2900152e 	bgeu	r5,r4,4bb5c <__udivsi3+0x5c>
   4bb08:	28001416 	blt	r5,zero,4bb5c <__udivsi3+0x5c>
   4bb0c:	00800804 	movi	r2,32
   4bb10:	00c00044 	movi	r3,1
   4bb14:	00000206 	br	4bb20 <__udivsi3+0x20>
   4bb18:	10000e26 	beq	r2,zero,4bb54 <__udivsi3+0x54>
   4bb1c:	28000516 	blt	r5,zero,4bb34 <__udivsi3+0x34>
   4bb20:	294b883a 	add	r5,r5,r5
   4bb24:	10bfffc4 	addi	r2,r2,-1
   4bb28:	18c7883a 	add	r3,r3,r3
   4bb2c:	293ffa36 	bltu	r5,r4,4bb18 <__alt_data_end+0xfffe6318>
   4bb30:	18000826 	beq	r3,zero,4bb54 <__udivsi3+0x54>
   4bb34:	0005883a 	mov	r2,zero
   4bb38:	31400236 	bltu	r6,r5,4bb44 <__udivsi3+0x44>
   4bb3c:	314dc83a 	sub	r6,r6,r5
   4bb40:	10c4b03a 	or	r2,r2,r3
   4bb44:	1806d07a 	srli	r3,r3,1
   4bb48:	280ad07a 	srli	r5,r5,1
   4bb4c:	183ffa1e 	bne	r3,zero,4bb38 <__alt_data_end+0xfffe6338>
   4bb50:	f800283a 	ret
   4bb54:	0005883a 	mov	r2,zero
   4bb58:	f800283a 	ret
   4bb5c:	00c00044 	movi	r3,1
   4bb60:	003ff406 	br	4bb34 <__alt_data_end+0xfffe6334>

0004bb64 <__umodsi3>:
   4bb64:	2005883a 	mov	r2,r4
   4bb68:	2900122e 	bgeu	r5,r4,4bbb4 <__umodsi3+0x50>
   4bb6c:	28001116 	blt	r5,zero,4bbb4 <__umodsi3+0x50>
   4bb70:	01800804 	movi	r6,32
   4bb74:	00c00044 	movi	r3,1
   4bb78:	00000206 	br	4bb84 <__umodsi3+0x20>
   4bb7c:	30000c26 	beq	r6,zero,4bbb0 <__umodsi3+0x4c>
   4bb80:	28000516 	blt	r5,zero,4bb98 <__umodsi3+0x34>
   4bb84:	294b883a 	add	r5,r5,r5
   4bb88:	31bfffc4 	addi	r6,r6,-1
   4bb8c:	18c7883a 	add	r3,r3,r3
   4bb90:	293ffa36 	bltu	r5,r4,4bb7c <__alt_data_end+0xfffe637c>
   4bb94:	18000626 	beq	r3,zero,4bbb0 <__umodsi3+0x4c>
   4bb98:	1806d07a 	srli	r3,r3,1
   4bb9c:	11400136 	bltu	r2,r5,4bba4 <__umodsi3+0x40>
   4bba0:	1145c83a 	sub	r2,r2,r5
   4bba4:	280ad07a 	srli	r5,r5,1
   4bba8:	183ffb1e 	bne	r3,zero,4bb98 <__alt_data_end+0xfffe6398>
   4bbac:	f800283a 	ret
   4bbb0:	f800283a 	ret
   4bbb4:	00c00044 	movi	r3,1
   4bbb8:	003ff706 	br	4bb98 <__alt_data_end+0xfffe6398>

0004bbbc <__adddf3>:
   4bbbc:	02c00434 	movhi	r11,16
   4bbc0:	5affffc4 	addi	r11,r11,-1
   4bbc4:	2806d7fa 	srli	r3,r5,31
   4bbc8:	2ad4703a 	and	r10,r5,r11
   4bbcc:	3ad2703a 	and	r9,r7,r11
   4bbd0:	3804d53a 	srli	r2,r7,20
   4bbd4:	3018d77a 	srli	r12,r6,29
   4bbd8:	280ad53a 	srli	r5,r5,20
   4bbdc:	501490fa 	slli	r10,r10,3
   4bbe0:	2010d77a 	srli	r8,r4,29
   4bbe4:	481290fa 	slli	r9,r9,3
   4bbe8:	380ed7fa 	srli	r7,r7,31
   4bbec:	defffb04 	addi	sp,sp,-20
   4bbf0:	dc800215 	stw	r18,8(sp)
   4bbf4:	dc400115 	stw	r17,4(sp)
   4bbf8:	dc000015 	stw	r16,0(sp)
   4bbfc:	dfc00415 	stw	ra,16(sp)
   4bc00:	dcc00315 	stw	r19,12(sp)
   4bc04:	1c803fcc 	andi	r18,r3,255
   4bc08:	2c01ffcc 	andi	r16,r5,2047
   4bc0c:	5210b03a 	or	r8,r10,r8
   4bc10:	202290fa 	slli	r17,r4,3
   4bc14:	1081ffcc 	andi	r2,r2,2047
   4bc18:	4b12b03a 	or	r9,r9,r12
   4bc1c:	300c90fa 	slli	r6,r6,3
   4bc20:	91c07526 	beq	r18,r7,4bdf8 <__adddf3+0x23c>
   4bc24:	8087c83a 	sub	r3,r16,r2
   4bc28:	00c0ab0e 	bge	zero,r3,4bed8 <__adddf3+0x31c>
   4bc2c:	10002a1e 	bne	r2,zero,4bcd8 <__adddf3+0x11c>
   4bc30:	4984b03a 	or	r2,r9,r6
   4bc34:	1000961e 	bne	r2,zero,4be90 <__adddf3+0x2d4>
   4bc38:	888001cc 	andi	r2,r17,7
   4bc3c:	10000726 	beq	r2,zero,4bc5c <__adddf3+0xa0>
   4bc40:	888003cc 	andi	r2,r17,15
   4bc44:	00c00104 	movi	r3,4
   4bc48:	10c00426 	beq	r2,r3,4bc5c <__adddf3+0xa0>
   4bc4c:	88c7883a 	add	r3,r17,r3
   4bc50:	1c63803a 	cmpltu	r17,r3,r17
   4bc54:	4451883a 	add	r8,r8,r17
   4bc58:	1823883a 	mov	r17,r3
   4bc5c:	4080202c 	andhi	r2,r8,128
   4bc60:	10005926 	beq	r2,zero,4bdc8 <__adddf3+0x20c>
   4bc64:	84000044 	addi	r16,r16,1
   4bc68:	0081ffc4 	movi	r2,2047
   4bc6c:	8080ba26 	beq	r16,r2,4bf58 <__adddf3+0x39c>
   4bc70:	00bfe034 	movhi	r2,65408
   4bc74:	10bfffc4 	addi	r2,r2,-1
   4bc78:	4090703a 	and	r8,r8,r2
   4bc7c:	4004977a 	slli	r2,r8,29
   4bc80:	4010927a 	slli	r8,r8,9
   4bc84:	8822d0fa 	srli	r17,r17,3
   4bc88:	8401ffcc 	andi	r16,r16,2047
   4bc8c:	4010d33a 	srli	r8,r8,12
   4bc90:	9007883a 	mov	r3,r18
   4bc94:	1444b03a 	or	r2,r2,r17
   4bc98:	8401ffcc 	andi	r16,r16,2047
   4bc9c:	8020953a 	slli	r16,r16,20
   4bca0:	18c03fcc 	andi	r3,r3,255
   4bca4:	01000434 	movhi	r4,16
   4bca8:	213fffc4 	addi	r4,r4,-1
   4bcac:	180697fa 	slli	r3,r3,31
   4bcb0:	4110703a 	and	r8,r8,r4
   4bcb4:	4410b03a 	or	r8,r8,r16
   4bcb8:	40c6b03a 	or	r3,r8,r3
   4bcbc:	dfc00417 	ldw	ra,16(sp)
   4bcc0:	dcc00317 	ldw	r19,12(sp)
   4bcc4:	dc800217 	ldw	r18,8(sp)
   4bcc8:	dc400117 	ldw	r17,4(sp)
   4bccc:	dc000017 	ldw	r16,0(sp)
   4bcd0:	dec00504 	addi	sp,sp,20
   4bcd4:	f800283a 	ret
   4bcd8:	0081ffc4 	movi	r2,2047
   4bcdc:	80bfd626 	beq	r16,r2,4bc38 <__alt_data_end+0xfffe6438>
   4bce0:	4a402034 	orhi	r9,r9,128
   4bce4:	00800e04 	movi	r2,56
   4bce8:	10c09f16 	blt	r2,r3,4bf68 <__adddf3+0x3ac>
   4bcec:	008007c4 	movi	r2,31
   4bcf0:	10c0c216 	blt	r2,r3,4bffc <__adddf3+0x440>
   4bcf4:	00800804 	movi	r2,32
   4bcf8:	10c5c83a 	sub	r2,r2,r3
   4bcfc:	488a983a 	sll	r5,r9,r2
   4bd00:	30c8d83a 	srl	r4,r6,r3
   4bd04:	3084983a 	sll	r2,r6,r2
   4bd08:	48c6d83a 	srl	r3,r9,r3
   4bd0c:	290cb03a 	or	r6,r5,r4
   4bd10:	1004c03a 	cmpne	r2,r2,zero
   4bd14:	308cb03a 	or	r6,r6,r2
   4bd18:	898dc83a 	sub	r6,r17,r6
   4bd1c:	89a3803a 	cmpltu	r17,r17,r6
   4bd20:	40d1c83a 	sub	r8,r8,r3
   4bd24:	4451c83a 	sub	r8,r8,r17
   4bd28:	3023883a 	mov	r17,r6
   4bd2c:	4080202c 	andhi	r2,r8,128
   4bd30:	10002326 	beq	r2,zero,4bdc0 <__adddf3+0x204>
   4bd34:	04c02034 	movhi	r19,128
   4bd38:	9cffffc4 	addi	r19,r19,-1
   4bd3c:	44e6703a 	and	r19,r8,r19
   4bd40:	98007626 	beq	r19,zero,4bf1c <__adddf3+0x360>
   4bd44:	9809883a 	mov	r4,r19
   4bd48:	00414bc0 	call	414bc <__clzsi2>
   4bd4c:	10fffe04 	addi	r3,r2,-8
   4bd50:	010007c4 	movi	r4,31
   4bd54:	20c07716 	blt	r4,r3,4bf34 <__adddf3+0x378>
   4bd58:	00800804 	movi	r2,32
   4bd5c:	10c5c83a 	sub	r2,r2,r3
   4bd60:	8884d83a 	srl	r2,r17,r2
   4bd64:	98d0983a 	sll	r8,r19,r3
   4bd68:	88e2983a 	sll	r17,r17,r3
   4bd6c:	1204b03a 	or	r2,r2,r8
   4bd70:	1c007416 	blt	r3,r16,4bf44 <__adddf3+0x388>
   4bd74:	1c21c83a 	sub	r16,r3,r16
   4bd78:	82000044 	addi	r8,r16,1
   4bd7c:	00c007c4 	movi	r3,31
   4bd80:	1a009116 	blt	r3,r8,4bfc8 <__adddf3+0x40c>
   4bd84:	00c00804 	movi	r3,32
   4bd88:	1a07c83a 	sub	r3,r3,r8
   4bd8c:	8a08d83a 	srl	r4,r17,r8
   4bd90:	88e2983a 	sll	r17,r17,r3
   4bd94:	10c6983a 	sll	r3,r2,r3
   4bd98:	1210d83a 	srl	r8,r2,r8
   4bd9c:	8804c03a 	cmpne	r2,r17,zero
   4bda0:	1906b03a 	or	r3,r3,r4
   4bda4:	18a2b03a 	or	r17,r3,r2
   4bda8:	0021883a 	mov	r16,zero
   4bdac:	003fa206 	br	4bc38 <__alt_data_end+0xfffe6438>
   4bdb0:	1890b03a 	or	r8,r3,r2
   4bdb4:	40017d26 	beq	r8,zero,4c3ac <__adddf3+0x7f0>
   4bdb8:	1011883a 	mov	r8,r2
   4bdbc:	1823883a 	mov	r17,r3
   4bdc0:	888001cc 	andi	r2,r17,7
   4bdc4:	103f9e1e 	bne	r2,zero,4bc40 <__alt_data_end+0xfffe6440>
   4bdc8:	4004977a 	slli	r2,r8,29
   4bdcc:	8822d0fa 	srli	r17,r17,3
   4bdd0:	4010d0fa 	srli	r8,r8,3
   4bdd4:	9007883a 	mov	r3,r18
   4bdd8:	1444b03a 	or	r2,r2,r17
   4bddc:	0101ffc4 	movi	r4,2047
   4bde0:	81002426 	beq	r16,r4,4be74 <__adddf3+0x2b8>
   4bde4:	8120703a 	and	r16,r16,r4
   4bde8:	01000434 	movhi	r4,16
   4bdec:	213fffc4 	addi	r4,r4,-1
   4bdf0:	4110703a 	and	r8,r8,r4
   4bdf4:	003fa806 	br	4bc98 <__alt_data_end+0xfffe6498>
   4bdf8:	8089c83a 	sub	r4,r16,r2
   4bdfc:	01005e0e 	bge	zero,r4,4bf78 <__adddf3+0x3bc>
   4be00:	10002b26 	beq	r2,zero,4beb0 <__adddf3+0x2f4>
   4be04:	0081ffc4 	movi	r2,2047
   4be08:	80bf8b26 	beq	r16,r2,4bc38 <__alt_data_end+0xfffe6438>
   4be0c:	4a402034 	orhi	r9,r9,128
   4be10:	00800e04 	movi	r2,56
   4be14:	1100a40e 	bge	r2,r4,4c0a8 <__adddf3+0x4ec>
   4be18:	498cb03a 	or	r6,r9,r6
   4be1c:	300ac03a 	cmpne	r5,r6,zero
   4be20:	0013883a 	mov	r9,zero
   4be24:	2c4b883a 	add	r5,r5,r17
   4be28:	2c63803a 	cmpltu	r17,r5,r17
   4be2c:	4a11883a 	add	r8,r9,r8
   4be30:	8a11883a 	add	r8,r17,r8
   4be34:	2823883a 	mov	r17,r5
   4be38:	4080202c 	andhi	r2,r8,128
   4be3c:	103fe026 	beq	r2,zero,4bdc0 <__alt_data_end+0xfffe65c0>
   4be40:	84000044 	addi	r16,r16,1
   4be44:	0081ffc4 	movi	r2,2047
   4be48:	8080d226 	beq	r16,r2,4c194 <__adddf3+0x5d8>
   4be4c:	00bfe034 	movhi	r2,65408
   4be50:	10bfffc4 	addi	r2,r2,-1
   4be54:	4090703a 	and	r8,r8,r2
   4be58:	880ad07a 	srli	r5,r17,1
   4be5c:	400897fa 	slli	r4,r8,31
   4be60:	88c0004c 	andi	r3,r17,1
   4be64:	28e2b03a 	or	r17,r5,r3
   4be68:	4010d07a 	srli	r8,r8,1
   4be6c:	2462b03a 	or	r17,r4,r17
   4be70:	003f7106 	br	4bc38 <__alt_data_end+0xfffe6438>
   4be74:	4088b03a 	or	r4,r8,r2
   4be78:	20014526 	beq	r4,zero,4c390 <__adddf3+0x7d4>
   4be7c:	01000434 	movhi	r4,16
   4be80:	42000234 	orhi	r8,r8,8
   4be84:	213fffc4 	addi	r4,r4,-1
   4be88:	4110703a 	and	r8,r8,r4
   4be8c:	003f8206 	br	4bc98 <__alt_data_end+0xfffe6498>
   4be90:	18ffffc4 	addi	r3,r3,-1
   4be94:	1800491e 	bne	r3,zero,4bfbc <__adddf3+0x400>
   4be98:	898bc83a 	sub	r5,r17,r6
   4be9c:	8963803a 	cmpltu	r17,r17,r5
   4bea0:	4251c83a 	sub	r8,r8,r9
   4bea4:	4451c83a 	sub	r8,r8,r17
   4bea8:	2823883a 	mov	r17,r5
   4beac:	003f9f06 	br	4bd2c <__alt_data_end+0xfffe652c>
   4beb0:	4984b03a 	or	r2,r9,r6
   4beb4:	103f6026 	beq	r2,zero,4bc38 <__alt_data_end+0xfffe6438>
   4beb8:	213fffc4 	addi	r4,r4,-1
   4bebc:	2000931e 	bne	r4,zero,4c10c <__adddf3+0x550>
   4bec0:	898d883a 	add	r6,r17,r6
   4bec4:	3463803a 	cmpltu	r17,r6,r17
   4bec8:	4251883a 	add	r8,r8,r9
   4becc:	8a11883a 	add	r8,r17,r8
   4bed0:	3023883a 	mov	r17,r6
   4bed4:	003fd806 	br	4be38 <__alt_data_end+0xfffe6638>
   4bed8:	1800541e 	bne	r3,zero,4c02c <__adddf3+0x470>
   4bedc:	80800044 	addi	r2,r16,1
   4bee0:	1081ffcc 	andi	r2,r2,2047
   4bee4:	00c00044 	movi	r3,1
   4bee8:	1880a00e 	bge	r3,r2,4c16c <__adddf3+0x5b0>
   4beec:	8989c83a 	sub	r4,r17,r6
   4bef0:	8905803a 	cmpltu	r2,r17,r4
   4bef4:	4267c83a 	sub	r19,r8,r9
   4bef8:	98a7c83a 	sub	r19,r19,r2
   4befc:	9880202c 	andhi	r2,r19,128
   4bf00:	10006326 	beq	r2,zero,4c090 <__adddf3+0x4d4>
   4bf04:	3463c83a 	sub	r17,r6,r17
   4bf08:	4a07c83a 	sub	r3,r9,r8
   4bf0c:	344d803a 	cmpltu	r6,r6,r17
   4bf10:	19a7c83a 	sub	r19,r3,r6
   4bf14:	3825883a 	mov	r18,r7
   4bf18:	983f8a1e 	bne	r19,zero,4bd44 <__alt_data_end+0xfffe6544>
   4bf1c:	8809883a 	mov	r4,r17
   4bf20:	00414bc0 	call	414bc <__clzsi2>
   4bf24:	10800804 	addi	r2,r2,32
   4bf28:	10fffe04 	addi	r3,r2,-8
   4bf2c:	010007c4 	movi	r4,31
   4bf30:	20ff890e 	bge	r4,r3,4bd58 <__alt_data_end+0xfffe6558>
   4bf34:	10bff604 	addi	r2,r2,-40
   4bf38:	8884983a 	sll	r2,r17,r2
   4bf3c:	0023883a 	mov	r17,zero
   4bf40:	1c3f8c0e 	bge	r3,r16,4bd74 <__alt_data_end+0xfffe6574>
   4bf44:	023fe034 	movhi	r8,65408
   4bf48:	423fffc4 	addi	r8,r8,-1
   4bf4c:	80e1c83a 	sub	r16,r16,r3
   4bf50:	1210703a 	and	r8,r2,r8
   4bf54:	003f3806 	br	4bc38 <__alt_data_end+0xfffe6438>
   4bf58:	9007883a 	mov	r3,r18
   4bf5c:	0011883a 	mov	r8,zero
   4bf60:	0005883a 	mov	r2,zero
   4bf64:	003f4c06 	br	4bc98 <__alt_data_end+0xfffe6498>
   4bf68:	498cb03a 	or	r6,r9,r6
   4bf6c:	300cc03a 	cmpne	r6,r6,zero
   4bf70:	0007883a 	mov	r3,zero
   4bf74:	003f6806 	br	4bd18 <__alt_data_end+0xfffe6518>
   4bf78:	20009c1e 	bne	r4,zero,4c1ec <__adddf3+0x630>
   4bf7c:	80800044 	addi	r2,r16,1
   4bf80:	1141ffcc 	andi	r5,r2,2047
   4bf84:	01000044 	movi	r4,1
   4bf88:	2140670e 	bge	r4,r5,4c128 <__adddf3+0x56c>
   4bf8c:	0101ffc4 	movi	r4,2047
   4bf90:	11007f26 	beq	r2,r4,4c190 <__adddf3+0x5d4>
   4bf94:	898d883a 	add	r6,r17,r6
   4bf98:	4247883a 	add	r3,r8,r9
   4bf9c:	3451803a 	cmpltu	r8,r6,r17
   4bfa0:	40d1883a 	add	r8,r8,r3
   4bfa4:	402297fa 	slli	r17,r8,31
   4bfa8:	300cd07a 	srli	r6,r6,1
   4bfac:	4010d07a 	srli	r8,r8,1
   4bfb0:	1021883a 	mov	r16,r2
   4bfb4:	89a2b03a 	or	r17,r17,r6
   4bfb8:	003f1f06 	br	4bc38 <__alt_data_end+0xfffe6438>
   4bfbc:	0081ffc4 	movi	r2,2047
   4bfc0:	80bf481e 	bne	r16,r2,4bce4 <__alt_data_end+0xfffe64e4>
   4bfc4:	003f1c06 	br	4bc38 <__alt_data_end+0xfffe6438>
   4bfc8:	843ff844 	addi	r16,r16,-31
   4bfcc:	01000804 	movi	r4,32
   4bfd0:	1406d83a 	srl	r3,r2,r16
   4bfd4:	41005026 	beq	r8,r4,4c118 <__adddf3+0x55c>
   4bfd8:	01001004 	movi	r4,64
   4bfdc:	2211c83a 	sub	r8,r4,r8
   4bfe0:	1204983a 	sll	r2,r2,r8
   4bfe4:	88a2b03a 	or	r17,r17,r2
   4bfe8:	8822c03a 	cmpne	r17,r17,zero
   4bfec:	1c62b03a 	or	r17,r3,r17
   4bff0:	0011883a 	mov	r8,zero
   4bff4:	0021883a 	mov	r16,zero
   4bff8:	003f7106 	br	4bdc0 <__alt_data_end+0xfffe65c0>
   4bffc:	193ff804 	addi	r4,r3,-32
   4c000:	00800804 	movi	r2,32
   4c004:	4908d83a 	srl	r4,r9,r4
   4c008:	18804526 	beq	r3,r2,4c120 <__adddf3+0x564>
   4c00c:	00801004 	movi	r2,64
   4c010:	10c5c83a 	sub	r2,r2,r3
   4c014:	4886983a 	sll	r3,r9,r2
   4c018:	198cb03a 	or	r6,r3,r6
   4c01c:	300cc03a 	cmpne	r6,r6,zero
   4c020:	218cb03a 	or	r6,r4,r6
   4c024:	0007883a 	mov	r3,zero
   4c028:	003f3b06 	br	4bd18 <__alt_data_end+0xfffe6518>
   4c02c:	80002a26 	beq	r16,zero,4c0d8 <__adddf3+0x51c>
   4c030:	0101ffc4 	movi	r4,2047
   4c034:	11006826 	beq	r2,r4,4c1d8 <__adddf3+0x61c>
   4c038:	00c7c83a 	sub	r3,zero,r3
   4c03c:	42002034 	orhi	r8,r8,128
   4c040:	01000e04 	movi	r4,56
   4c044:	20c07c16 	blt	r4,r3,4c238 <__adddf3+0x67c>
   4c048:	010007c4 	movi	r4,31
   4c04c:	20c0da16 	blt	r4,r3,4c3b8 <__adddf3+0x7fc>
   4c050:	01000804 	movi	r4,32
   4c054:	20c9c83a 	sub	r4,r4,r3
   4c058:	4114983a 	sll	r10,r8,r4
   4c05c:	88cad83a 	srl	r5,r17,r3
   4c060:	8908983a 	sll	r4,r17,r4
   4c064:	40c6d83a 	srl	r3,r8,r3
   4c068:	5162b03a 	or	r17,r10,r5
   4c06c:	2008c03a 	cmpne	r4,r4,zero
   4c070:	8922b03a 	or	r17,r17,r4
   4c074:	3463c83a 	sub	r17,r6,r17
   4c078:	48c7c83a 	sub	r3,r9,r3
   4c07c:	344d803a 	cmpltu	r6,r6,r17
   4c080:	1991c83a 	sub	r8,r3,r6
   4c084:	1021883a 	mov	r16,r2
   4c088:	3825883a 	mov	r18,r7
   4c08c:	003f2706 	br	4bd2c <__alt_data_end+0xfffe652c>
   4c090:	24d0b03a 	or	r8,r4,r19
   4c094:	40001b1e 	bne	r8,zero,4c104 <__adddf3+0x548>
   4c098:	0005883a 	mov	r2,zero
   4c09c:	0007883a 	mov	r3,zero
   4c0a0:	0021883a 	mov	r16,zero
   4c0a4:	003f4d06 	br	4bddc <__alt_data_end+0xfffe65dc>
   4c0a8:	008007c4 	movi	r2,31
   4c0ac:	11003c16 	blt	r2,r4,4c1a0 <__adddf3+0x5e4>
   4c0b0:	00800804 	movi	r2,32
   4c0b4:	1105c83a 	sub	r2,r2,r4
   4c0b8:	488e983a 	sll	r7,r9,r2
   4c0bc:	310ad83a 	srl	r5,r6,r4
   4c0c0:	3084983a 	sll	r2,r6,r2
   4c0c4:	4912d83a 	srl	r9,r9,r4
   4c0c8:	394ab03a 	or	r5,r7,r5
   4c0cc:	1004c03a 	cmpne	r2,r2,zero
   4c0d0:	288ab03a 	or	r5,r5,r2
   4c0d4:	003f5306 	br	4be24 <__alt_data_end+0xfffe6624>
   4c0d8:	4448b03a 	or	r4,r8,r17
   4c0dc:	20003e26 	beq	r4,zero,4c1d8 <__adddf3+0x61c>
   4c0e0:	00c6303a 	nor	r3,zero,r3
   4c0e4:	18003a1e 	bne	r3,zero,4c1d0 <__adddf3+0x614>
   4c0e8:	3463c83a 	sub	r17,r6,r17
   4c0ec:	4a07c83a 	sub	r3,r9,r8
   4c0f0:	344d803a 	cmpltu	r6,r6,r17
   4c0f4:	1991c83a 	sub	r8,r3,r6
   4c0f8:	1021883a 	mov	r16,r2
   4c0fc:	3825883a 	mov	r18,r7
   4c100:	003f0a06 	br	4bd2c <__alt_data_end+0xfffe652c>
   4c104:	2023883a 	mov	r17,r4
   4c108:	003f0d06 	br	4bd40 <__alt_data_end+0xfffe6540>
   4c10c:	0081ffc4 	movi	r2,2047
   4c110:	80bf3f1e 	bne	r16,r2,4be10 <__alt_data_end+0xfffe6610>
   4c114:	003ec806 	br	4bc38 <__alt_data_end+0xfffe6438>
   4c118:	0005883a 	mov	r2,zero
   4c11c:	003fb106 	br	4bfe4 <__alt_data_end+0xfffe67e4>
   4c120:	0007883a 	mov	r3,zero
   4c124:	003fbc06 	br	4c018 <__alt_data_end+0xfffe6818>
   4c128:	4444b03a 	or	r2,r8,r17
   4c12c:	8000871e 	bne	r16,zero,4c34c <__adddf3+0x790>
   4c130:	1000ba26 	beq	r2,zero,4c41c <__adddf3+0x860>
   4c134:	4984b03a 	or	r2,r9,r6
   4c138:	103ebf26 	beq	r2,zero,4bc38 <__alt_data_end+0xfffe6438>
   4c13c:	8985883a 	add	r2,r17,r6
   4c140:	4247883a 	add	r3,r8,r9
   4c144:	1451803a 	cmpltu	r8,r2,r17
   4c148:	40d1883a 	add	r8,r8,r3
   4c14c:	40c0202c 	andhi	r3,r8,128
   4c150:	1023883a 	mov	r17,r2
   4c154:	183f1a26 	beq	r3,zero,4bdc0 <__alt_data_end+0xfffe65c0>
   4c158:	00bfe034 	movhi	r2,65408
   4c15c:	10bfffc4 	addi	r2,r2,-1
   4c160:	2021883a 	mov	r16,r4
   4c164:	4090703a 	and	r8,r8,r2
   4c168:	003eb306 	br	4bc38 <__alt_data_end+0xfffe6438>
   4c16c:	4444b03a 	or	r2,r8,r17
   4c170:	8000291e 	bne	r16,zero,4c218 <__adddf3+0x65c>
   4c174:	10004b1e 	bne	r2,zero,4c2a4 <__adddf3+0x6e8>
   4c178:	4990b03a 	or	r8,r9,r6
   4c17c:	40008b26 	beq	r8,zero,4c3ac <__adddf3+0x7f0>
   4c180:	4811883a 	mov	r8,r9
   4c184:	3023883a 	mov	r17,r6
   4c188:	3825883a 	mov	r18,r7
   4c18c:	003eaa06 	br	4bc38 <__alt_data_end+0xfffe6438>
   4c190:	1021883a 	mov	r16,r2
   4c194:	0011883a 	mov	r8,zero
   4c198:	0005883a 	mov	r2,zero
   4c19c:	003f0f06 	br	4bddc <__alt_data_end+0xfffe65dc>
   4c1a0:	217ff804 	addi	r5,r4,-32
   4c1a4:	00800804 	movi	r2,32
   4c1a8:	494ad83a 	srl	r5,r9,r5
   4c1ac:	20807d26 	beq	r4,r2,4c3a4 <__adddf3+0x7e8>
   4c1b0:	00801004 	movi	r2,64
   4c1b4:	1109c83a 	sub	r4,r2,r4
   4c1b8:	4912983a 	sll	r9,r9,r4
   4c1bc:	498cb03a 	or	r6,r9,r6
   4c1c0:	300cc03a 	cmpne	r6,r6,zero
   4c1c4:	298ab03a 	or	r5,r5,r6
   4c1c8:	0013883a 	mov	r9,zero
   4c1cc:	003f1506 	br	4be24 <__alt_data_end+0xfffe6624>
   4c1d0:	0101ffc4 	movi	r4,2047
   4c1d4:	113f9a1e 	bne	r2,r4,4c040 <__alt_data_end+0xfffe6840>
   4c1d8:	4811883a 	mov	r8,r9
   4c1dc:	3023883a 	mov	r17,r6
   4c1e0:	1021883a 	mov	r16,r2
   4c1e4:	3825883a 	mov	r18,r7
   4c1e8:	003e9306 	br	4bc38 <__alt_data_end+0xfffe6438>
   4c1ec:	8000161e 	bne	r16,zero,4c248 <__adddf3+0x68c>
   4c1f0:	444ab03a 	or	r5,r8,r17
   4c1f4:	28005126 	beq	r5,zero,4c33c <__adddf3+0x780>
   4c1f8:	0108303a 	nor	r4,zero,r4
   4c1fc:	20004d1e 	bne	r4,zero,4c334 <__adddf3+0x778>
   4c200:	89a3883a 	add	r17,r17,r6
   4c204:	4253883a 	add	r9,r8,r9
   4c208:	898d803a 	cmpltu	r6,r17,r6
   4c20c:	3251883a 	add	r8,r6,r9
   4c210:	1021883a 	mov	r16,r2
   4c214:	003f0806 	br	4be38 <__alt_data_end+0xfffe6638>
   4c218:	1000301e 	bne	r2,zero,4c2dc <__adddf3+0x720>
   4c21c:	4984b03a 	or	r2,r9,r6
   4c220:	10007126 	beq	r2,zero,4c3e8 <__adddf3+0x82c>
   4c224:	4811883a 	mov	r8,r9
   4c228:	3023883a 	mov	r17,r6
   4c22c:	3825883a 	mov	r18,r7
   4c230:	0401ffc4 	movi	r16,2047
   4c234:	003e8006 	br	4bc38 <__alt_data_end+0xfffe6438>
   4c238:	4462b03a 	or	r17,r8,r17
   4c23c:	8822c03a 	cmpne	r17,r17,zero
   4c240:	0007883a 	mov	r3,zero
   4c244:	003f8b06 	br	4c074 <__alt_data_end+0xfffe6874>
   4c248:	0141ffc4 	movi	r5,2047
   4c24c:	11403b26 	beq	r2,r5,4c33c <__adddf3+0x780>
   4c250:	0109c83a 	sub	r4,zero,r4
   4c254:	42002034 	orhi	r8,r8,128
   4c258:	01400e04 	movi	r5,56
   4c25c:	29006716 	blt	r5,r4,4c3fc <__adddf3+0x840>
   4c260:	014007c4 	movi	r5,31
   4c264:	29007016 	blt	r5,r4,4c428 <__adddf3+0x86c>
   4c268:	01400804 	movi	r5,32
   4c26c:	290bc83a 	sub	r5,r5,r4
   4c270:	4154983a 	sll	r10,r8,r5
   4c274:	890ed83a 	srl	r7,r17,r4
   4c278:	894a983a 	sll	r5,r17,r5
   4c27c:	4108d83a 	srl	r4,r8,r4
   4c280:	51e2b03a 	or	r17,r10,r7
   4c284:	280ac03a 	cmpne	r5,r5,zero
   4c288:	8962b03a 	or	r17,r17,r5
   4c28c:	89a3883a 	add	r17,r17,r6
   4c290:	2253883a 	add	r9,r4,r9
   4c294:	898d803a 	cmpltu	r6,r17,r6
   4c298:	3251883a 	add	r8,r6,r9
   4c29c:	1021883a 	mov	r16,r2
   4c2a0:	003ee506 	br	4be38 <__alt_data_end+0xfffe6638>
   4c2a4:	4984b03a 	or	r2,r9,r6
   4c2a8:	103e6326 	beq	r2,zero,4bc38 <__alt_data_end+0xfffe6438>
   4c2ac:	8987c83a 	sub	r3,r17,r6
   4c2b0:	88c9803a 	cmpltu	r4,r17,r3
   4c2b4:	4245c83a 	sub	r2,r8,r9
   4c2b8:	1105c83a 	sub	r2,r2,r4
   4c2bc:	1100202c 	andhi	r4,r2,128
   4c2c0:	203ebb26 	beq	r4,zero,4bdb0 <__alt_data_end+0xfffe65b0>
   4c2c4:	3463c83a 	sub	r17,r6,r17
   4c2c8:	4a07c83a 	sub	r3,r9,r8
   4c2cc:	344d803a 	cmpltu	r6,r6,r17
   4c2d0:	1991c83a 	sub	r8,r3,r6
   4c2d4:	3825883a 	mov	r18,r7
   4c2d8:	003e5706 	br	4bc38 <__alt_data_end+0xfffe6438>
   4c2dc:	4984b03a 	or	r2,r9,r6
   4c2e0:	10002e26 	beq	r2,zero,4c39c <__adddf3+0x7e0>
   4c2e4:	4004d0fa 	srli	r2,r8,3
   4c2e8:	8822d0fa 	srli	r17,r17,3
   4c2ec:	4010977a 	slli	r8,r8,29
   4c2f0:	10c0022c 	andhi	r3,r2,8
   4c2f4:	4462b03a 	or	r17,r8,r17
   4c2f8:	18000826 	beq	r3,zero,4c31c <__adddf3+0x760>
   4c2fc:	4808d0fa 	srli	r4,r9,3
   4c300:	20c0022c 	andhi	r3,r4,8
   4c304:	1800051e 	bne	r3,zero,4c31c <__adddf3+0x760>
   4c308:	300cd0fa 	srli	r6,r6,3
   4c30c:	4806977a 	slli	r3,r9,29
   4c310:	2005883a 	mov	r2,r4
   4c314:	3825883a 	mov	r18,r7
   4c318:	19a2b03a 	or	r17,r3,r6
   4c31c:	8810d77a 	srli	r8,r17,29
   4c320:	100490fa 	slli	r2,r2,3
   4c324:	882290fa 	slli	r17,r17,3
   4c328:	0401ffc4 	movi	r16,2047
   4c32c:	4090b03a 	or	r8,r8,r2
   4c330:	003e4106 	br	4bc38 <__alt_data_end+0xfffe6438>
   4c334:	0141ffc4 	movi	r5,2047
   4c338:	117fc71e 	bne	r2,r5,4c258 <__alt_data_end+0xfffe6a58>
   4c33c:	4811883a 	mov	r8,r9
   4c340:	3023883a 	mov	r17,r6
   4c344:	1021883a 	mov	r16,r2
   4c348:	003e3b06 	br	4bc38 <__alt_data_end+0xfffe6438>
   4c34c:	10002f26 	beq	r2,zero,4c40c <__adddf3+0x850>
   4c350:	4984b03a 	or	r2,r9,r6
   4c354:	10001126 	beq	r2,zero,4c39c <__adddf3+0x7e0>
   4c358:	4004d0fa 	srli	r2,r8,3
   4c35c:	8822d0fa 	srli	r17,r17,3
   4c360:	4010977a 	slli	r8,r8,29
   4c364:	10c0022c 	andhi	r3,r2,8
   4c368:	4462b03a 	or	r17,r8,r17
   4c36c:	183feb26 	beq	r3,zero,4c31c <__alt_data_end+0xfffe6b1c>
   4c370:	4808d0fa 	srli	r4,r9,3
   4c374:	20c0022c 	andhi	r3,r4,8
   4c378:	183fe81e 	bne	r3,zero,4c31c <__alt_data_end+0xfffe6b1c>
   4c37c:	300cd0fa 	srli	r6,r6,3
   4c380:	4806977a 	slli	r3,r9,29
   4c384:	2005883a 	mov	r2,r4
   4c388:	19a2b03a 	or	r17,r3,r6
   4c38c:	003fe306 	br	4c31c <__alt_data_end+0xfffe6b1c>
   4c390:	0011883a 	mov	r8,zero
   4c394:	0005883a 	mov	r2,zero
   4c398:	003e3f06 	br	4bc98 <__alt_data_end+0xfffe6498>
   4c39c:	0401ffc4 	movi	r16,2047
   4c3a0:	003e2506 	br	4bc38 <__alt_data_end+0xfffe6438>
   4c3a4:	0013883a 	mov	r9,zero
   4c3a8:	003f8406 	br	4c1bc <__alt_data_end+0xfffe69bc>
   4c3ac:	0005883a 	mov	r2,zero
   4c3b0:	0007883a 	mov	r3,zero
   4c3b4:	003e8906 	br	4bddc <__alt_data_end+0xfffe65dc>
   4c3b8:	197ff804 	addi	r5,r3,-32
   4c3bc:	01000804 	movi	r4,32
   4c3c0:	414ad83a 	srl	r5,r8,r5
   4c3c4:	19002426 	beq	r3,r4,4c458 <__adddf3+0x89c>
   4c3c8:	01001004 	movi	r4,64
   4c3cc:	20c7c83a 	sub	r3,r4,r3
   4c3d0:	40c6983a 	sll	r3,r8,r3
   4c3d4:	1c46b03a 	or	r3,r3,r17
   4c3d8:	1806c03a 	cmpne	r3,r3,zero
   4c3dc:	28e2b03a 	or	r17,r5,r3
   4c3e0:	0007883a 	mov	r3,zero
   4c3e4:	003f2306 	br	4c074 <__alt_data_end+0xfffe6874>
   4c3e8:	0007883a 	mov	r3,zero
   4c3ec:	5811883a 	mov	r8,r11
   4c3f0:	00bfffc4 	movi	r2,-1
   4c3f4:	0401ffc4 	movi	r16,2047
   4c3f8:	003e7806 	br	4bddc <__alt_data_end+0xfffe65dc>
   4c3fc:	4462b03a 	or	r17,r8,r17
   4c400:	8822c03a 	cmpne	r17,r17,zero
   4c404:	0009883a 	mov	r4,zero
   4c408:	003fa006 	br	4c28c <__alt_data_end+0xfffe6a8c>
   4c40c:	4811883a 	mov	r8,r9
   4c410:	3023883a 	mov	r17,r6
   4c414:	0401ffc4 	movi	r16,2047
   4c418:	003e0706 	br	4bc38 <__alt_data_end+0xfffe6438>
   4c41c:	4811883a 	mov	r8,r9
   4c420:	3023883a 	mov	r17,r6
   4c424:	003e0406 	br	4bc38 <__alt_data_end+0xfffe6438>
   4c428:	21fff804 	addi	r7,r4,-32
   4c42c:	01400804 	movi	r5,32
   4c430:	41ced83a 	srl	r7,r8,r7
   4c434:	21400a26 	beq	r4,r5,4c460 <__adddf3+0x8a4>
   4c438:	01401004 	movi	r5,64
   4c43c:	2909c83a 	sub	r4,r5,r4
   4c440:	4108983a 	sll	r4,r8,r4
   4c444:	2448b03a 	or	r4,r4,r17
   4c448:	2008c03a 	cmpne	r4,r4,zero
   4c44c:	3922b03a 	or	r17,r7,r4
   4c450:	0009883a 	mov	r4,zero
   4c454:	003f8d06 	br	4c28c <__alt_data_end+0xfffe6a8c>
   4c458:	0007883a 	mov	r3,zero
   4c45c:	003fdd06 	br	4c3d4 <__alt_data_end+0xfffe6bd4>
   4c460:	0009883a 	mov	r4,zero
   4c464:	003ff706 	br	4c444 <__alt_data_end+0xfffe6c44>

0004c468 <__divdf3>:
   4c468:	defff004 	addi	sp,sp,-64
   4c46c:	dc800815 	stw	r18,32(sp)
   4c470:	2824d53a 	srli	r18,r5,20
   4c474:	dd800c15 	stw	r22,48(sp)
   4c478:	282cd7fa 	srli	r22,r5,31
   4c47c:	dc000615 	stw	r16,24(sp)
   4c480:	04000434 	movhi	r16,16
   4c484:	843fffc4 	addi	r16,r16,-1
   4c488:	dfc00f15 	stw	ra,60(sp)
   4c48c:	df000e15 	stw	fp,56(sp)
   4c490:	ddc00d15 	stw	r23,52(sp)
   4c494:	dd400b15 	stw	r21,44(sp)
   4c498:	dd000a15 	stw	r20,40(sp)
   4c49c:	dcc00915 	stw	r19,36(sp)
   4c4a0:	dc400715 	stw	r17,28(sp)
   4c4a4:	9481ffcc 	andi	r18,r18,2047
   4c4a8:	2c20703a 	and	r16,r5,r16
   4c4ac:	b2003fcc 	andi	r8,r22,255
   4c4b0:	90006126 	beq	r18,zero,4c638 <__divdf3+0x1d0>
   4c4b4:	0081ffc4 	movi	r2,2047
   4c4b8:	202b883a 	mov	r21,r4
   4c4bc:	90803726 	beq	r18,r2,4c59c <__divdf3+0x134>
   4c4c0:	80800434 	orhi	r2,r16,16
   4c4c4:	100490fa 	slli	r2,r2,3
   4c4c8:	2020d77a 	srli	r16,r4,29
   4c4cc:	202a90fa 	slli	r21,r4,3
   4c4d0:	94bf0044 	addi	r18,r18,-1023
   4c4d4:	80a0b03a 	or	r16,r16,r2
   4c4d8:	0013883a 	mov	r9,zero
   4c4dc:	000b883a 	mov	r5,zero
   4c4e0:	3806d53a 	srli	r3,r7,20
   4c4e4:	382ed7fa 	srli	r23,r7,31
   4c4e8:	04400434 	movhi	r17,16
   4c4ec:	8c7fffc4 	addi	r17,r17,-1
   4c4f0:	18c1ffcc 	andi	r3,r3,2047
   4c4f4:	3029883a 	mov	r20,r6
   4c4f8:	3c62703a 	and	r17,r7,r17
   4c4fc:	bf003fcc 	andi	fp,r23,255
   4c500:	18006e26 	beq	r3,zero,4c6bc <__divdf3+0x254>
   4c504:	0081ffc4 	movi	r2,2047
   4c508:	18806626 	beq	r3,r2,4c6a4 <__divdf3+0x23c>
   4c50c:	88800434 	orhi	r2,r17,16
   4c510:	100490fa 	slli	r2,r2,3
   4c514:	3022d77a 	srli	r17,r6,29
   4c518:	302890fa 	slli	r20,r6,3
   4c51c:	18ff0044 	addi	r3,r3,-1023
   4c520:	88a2b03a 	or	r17,r17,r2
   4c524:	000f883a 	mov	r7,zero
   4c528:	b5e6f03a 	xor	r19,r22,r23
   4c52c:	3a4cb03a 	or	r6,r7,r9
   4c530:	008003c4 	movi	r2,15
   4c534:	9809883a 	mov	r4,r19
   4c538:	90c7c83a 	sub	r3,r18,r3
   4c53c:	9cc03fcc 	andi	r19,r19,255
   4c540:	11809636 	bltu	r2,r6,4c79c <__divdf3+0x334>
   4c544:	300c90ba 	slli	r6,r6,2
   4c548:	00800174 	movhi	r2,5
   4c54c:	10b15704 	addi	r2,r2,-15012
   4c550:	308d883a 	add	r6,r6,r2
   4c554:	30800017 	ldw	r2,0(r6)
   4c558:	1000683a 	jmp	r2
   4c55c:	0004c79c 	xori	zero,zero,4894
   4c560:	0004c5d4 	movui	zero,4887
   4c564:	0004c78c 	andi	zero,zero,4894
   4c568:	0004c5c8 	cmpgei	zero,zero,4887
   4c56c:	0004c78c 	andi	zero,zero,4894
   4c570:	0004c760 	cmpeqi	zero,zero,4893
   4c574:	0004c78c 	andi	zero,zero,4894
   4c578:	0004c5c8 	cmpgei	zero,zero,4887
   4c57c:	0004c5d4 	movui	zero,4887
   4c580:	0004c5d4 	movui	zero,4887
   4c584:	0004c760 	cmpeqi	zero,zero,4893
   4c588:	0004c5c8 	cmpgei	zero,zero,4887
   4c58c:	0004c5b8 	rdprs	zero,zero,4886
   4c590:	0004c5b8 	rdprs	zero,zero,4886
   4c594:	0004c5b8 	rdprs	zero,zero,4886
   4c598:	0004cb24 	muli	zero,zero,4908
   4c59c:	2404b03a 	or	r2,r4,r16
   4c5a0:	10006c1e 	bne	r2,zero,4c754 <__divdf3+0x2ec>
   4c5a4:	02400204 	movi	r9,8
   4c5a8:	0021883a 	mov	r16,zero
   4c5ac:	002b883a 	mov	r21,zero
   4c5b0:	01400084 	movi	r5,2
   4c5b4:	003fca06 	br	4c4e0 <__alt_data_end+0xfffe6ce0>
   4c5b8:	8023883a 	mov	r17,r16
   4c5bc:	a829883a 	mov	r20,r21
   4c5c0:	4039883a 	mov	fp,r8
   4c5c4:	280f883a 	mov	r7,r5
   4c5c8:	00800084 	movi	r2,2
   4c5cc:	3881601e 	bne	r7,r2,4cb50 <__divdf3+0x6e8>
   4c5d0:	e027883a 	mov	r19,fp
   4c5d4:	9900004c 	andi	r4,r19,1
   4c5d8:	0081ffc4 	movi	r2,2047
   4c5dc:	0021883a 	mov	r16,zero
   4c5e0:	002b883a 	mov	r21,zero
   4c5e4:	1004953a 	slli	r2,r2,20
   4c5e8:	20c03fcc 	andi	r3,r4,255
   4c5ec:	01400434 	movhi	r5,16
   4c5f0:	297fffc4 	addi	r5,r5,-1
   4c5f4:	180697fa 	slli	r3,r3,31
   4c5f8:	8160703a 	and	r16,r16,r5
   4c5fc:	80a0b03a 	or	r16,r16,r2
   4c600:	80c6b03a 	or	r3,r16,r3
   4c604:	a805883a 	mov	r2,r21
   4c608:	dfc00f17 	ldw	ra,60(sp)
   4c60c:	df000e17 	ldw	fp,56(sp)
   4c610:	ddc00d17 	ldw	r23,52(sp)
   4c614:	dd800c17 	ldw	r22,48(sp)
   4c618:	dd400b17 	ldw	r21,44(sp)
   4c61c:	dd000a17 	ldw	r20,40(sp)
   4c620:	dcc00917 	ldw	r19,36(sp)
   4c624:	dc800817 	ldw	r18,32(sp)
   4c628:	dc400717 	ldw	r17,28(sp)
   4c62c:	dc000617 	ldw	r16,24(sp)
   4c630:	dec01004 	addi	sp,sp,64
   4c634:	f800283a 	ret
   4c638:	2404b03a 	or	r2,r4,r16
   4c63c:	2023883a 	mov	r17,r4
   4c640:	10003f26 	beq	r2,zero,4c740 <__divdf3+0x2d8>
   4c644:	80015e26 	beq	r16,zero,4cbc0 <__divdf3+0x758>
   4c648:	8009883a 	mov	r4,r16
   4c64c:	d9800215 	stw	r6,8(sp)
   4c650:	d9c00515 	stw	r7,20(sp)
   4c654:	da000415 	stw	r8,16(sp)
   4c658:	00414bc0 	call	414bc <__clzsi2>
   4c65c:	d9800217 	ldw	r6,8(sp)
   4c660:	d9c00517 	ldw	r7,20(sp)
   4c664:	da000417 	ldw	r8,16(sp)
   4c668:	113ffd44 	addi	r4,r2,-11
   4c66c:	00c00704 	movi	r3,28
   4c670:	19014f16 	blt	r3,r4,4cbb0 <__divdf3+0x748>
   4c674:	00c00744 	movi	r3,29
   4c678:	157ffe04 	addi	r21,r2,-8
   4c67c:	1907c83a 	sub	r3,r3,r4
   4c680:	8560983a 	sll	r16,r16,r21
   4c684:	88c6d83a 	srl	r3,r17,r3
   4c688:	8d6a983a 	sll	r21,r17,r21
   4c68c:	1c20b03a 	or	r16,r3,r16
   4c690:	1080fcc4 	addi	r2,r2,1011
   4c694:	00a5c83a 	sub	r18,zero,r2
   4c698:	0013883a 	mov	r9,zero
   4c69c:	000b883a 	mov	r5,zero
   4c6a0:	003f8f06 	br	4c4e0 <__alt_data_end+0xfffe6ce0>
   4c6a4:	3444b03a 	or	r2,r6,r17
   4c6a8:	1000231e 	bne	r2,zero,4c738 <__divdf3+0x2d0>
   4c6ac:	0023883a 	mov	r17,zero
   4c6b0:	0029883a 	mov	r20,zero
   4c6b4:	01c00084 	movi	r7,2
   4c6b8:	003f9b06 	br	4c528 <__alt_data_end+0xfffe6d28>
   4c6bc:	3444b03a 	or	r2,r6,r17
   4c6c0:	10001926 	beq	r2,zero,4c728 <__divdf3+0x2c0>
   4c6c4:	88014b26 	beq	r17,zero,4cbf4 <__divdf3+0x78c>
   4c6c8:	8809883a 	mov	r4,r17
   4c6cc:	d9400115 	stw	r5,4(sp)
   4c6d0:	d9800215 	stw	r6,8(sp)
   4c6d4:	da000415 	stw	r8,16(sp)
   4c6d8:	da400315 	stw	r9,12(sp)
   4c6dc:	00414bc0 	call	414bc <__clzsi2>
   4c6e0:	d9400117 	ldw	r5,4(sp)
   4c6e4:	d9800217 	ldw	r6,8(sp)
   4c6e8:	da000417 	ldw	r8,16(sp)
   4c6ec:	da400317 	ldw	r9,12(sp)
   4c6f0:	113ffd44 	addi	r4,r2,-11
   4c6f4:	00c00704 	movi	r3,28
   4c6f8:	19013a16 	blt	r3,r4,4cbe4 <__divdf3+0x77c>
   4c6fc:	00c00744 	movi	r3,29
   4c700:	153ffe04 	addi	r20,r2,-8
   4c704:	1907c83a 	sub	r3,r3,r4
   4c708:	8d22983a 	sll	r17,r17,r20
   4c70c:	30c6d83a 	srl	r3,r6,r3
   4c710:	3528983a 	sll	r20,r6,r20
   4c714:	1c62b03a 	or	r17,r3,r17
   4c718:	1080fcc4 	addi	r2,r2,1011
   4c71c:	0087c83a 	sub	r3,zero,r2
   4c720:	000f883a 	mov	r7,zero
   4c724:	003f8006 	br	4c528 <__alt_data_end+0xfffe6d28>
   4c728:	0023883a 	mov	r17,zero
   4c72c:	0029883a 	mov	r20,zero
   4c730:	01c00044 	movi	r7,1
   4c734:	003f7c06 	br	4c528 <__alt_data_end+0xfffe6d28>
   4c738:	01c000c4 	movi	r7,3
   4c73c:	003f7a06 	br	4c528 <__alt_data_end+0xfffe6d28>
   4c740:	02400104 	movi	r9,4
   4c744:	0021883a 	mov	r16,zero
   4c748:	002b883a 	mov	r21,zero
   4c74c:	01400044 	movi	r5,1
   4c750:	003f6306 	br	4c4e0 <__alt_data_end+0xfffe6ce0>
   4c754:	02400304 	movi	r9,12
   4c758:	014000c4 	movi	r5,3
   4c75c:	003f6006 	br	4c4e0 <__alt_data_end+0xfffe6ce0>
   4c760:	04000434 	movhi	r16,16
   4c764:	0009883a 	mov	r4,zero
   4c768:	843fffc4 	addi	r16,r16,-1
   4c76c:	057fffc4 	movi	r21,-1
   4c770:	0081ffc4 	movi	r2,2047
   4c774:	003f9b06 	br	4c5e4 <__alt_data_end+0xfffe6de4>
   4c778:	00c00044 	movi	r3,1
   4c77c:	1887c83a 	sub	r3,r3,r2
   4c780:	01000e04 	movi	r4,56
   4c784:	20c1530e 	bge	r4,r3,4ccd4 <__divdf3+0x86c>
   4c788:	9900004c 	andi	r4,r19,1
   4c78c:	0005883a 	mov	r2,zero
   4c790:	0021883a 	mov	r16,zero
   4c794:	002b883a 	mov	r21,zero
   4c798:	003f9206 	br	4c5e4 <__alt_data_end+0xfffe6de4>
   4c79c:	8c012e36 	bltu	r17,r16,4cc58 <__divdf3+0x7f0>
   4c7a0:	84412c26 	beq	r16,r17,4cc54 <__divdf3+0x7ec>
   4c7a4:	a82f883a 	mov	r23,r21
   4c7a8:	18ffffc4 	addi	r3,r3,-1
   4c7ac:	002b883a 	mov	r21,zero
   4c7b0:	a004d63a 	srli	r2,r20,24
   4c7b4:	8822923a 	slli	r17,r17,8
   4c7b8:	a028923a 	slli	r20,r20,8
   4c7bc:	8009883a 	mov	r4,r16
   4c7c0:	88acb03a 	or	r22,r17,r2
   4c7c4:	dd000015 	stw	r20,0(sp)
   4c7c8:	b028d43a 	srli	r20,r22,16
   4c7cc:	d8c00215 	stw	r3,8(sp)
   4c7d0:	b4bfffcc 	andi	r18,r22,65535
   4c7d4:	a00b883a 	mov	r5,r20
   4c7d8:	004bb000 	call	4bb00 <__udivsi3>
   4c7dc:	100b883a 	mov	r5,r2
   4c7e0:	9009883a 	mov	r4,r18
   4c7e4:	1023883a 	mov	r17,r2
   4c7e8:	00415200 	call	41520 <__mulsi3>
   4c7ec:	8009883a 	mov	r4,r16
   4c7f0:	a00b883a 	mov	r5,r20
   4c7f4:	1039883a 	mov	fp,r2
   4c7f8:	004bb640 	call	4bb64 <__umodsi3>
   4c7fc:	1004943a 	slli	r2,r2,16
   4c800:	b808d43a 	srli	r4,r23,16
   4c804:	d8c00217 	ldw	r3,8(sp)
   4c808:	2084b03a 	or	r2,r4,r2
   4c80c:	1700062e 	bgeu	r2,fp,4c828 <__divdf3+0x3c0>
   4c810:	1585883a 	add	r2,r2,r22
   4c814:	893fffc4 	addi	r4,r17,-1
   4c818:	15811d36 	bltu	r2,r22,4cc90 <__divdf3+0x828>
   4c81c:	17011c2e 	bgeu	r2,fp,4cc90 <__divdf3+0x828>
   4c820:	8c7fff84 	addi	r17,r17,-2
   4c824:	1585883a 	add	r2,r2,r22
   4c828:	1739c83a 	sub	fp,r2,fp
   4c82c:	a00b883a 	mov	r5,r20
   4c830:	e009883a 	mov	r4,fp
   4c834:	d8c00215 	stw	r3,8(sp)
   4c838:	004bb000 	call	4bb00 <__udivsi3>
   4c83c:	100b883a 	mov	r5,r2
   4c840:	9009883a 	mov	r4,r18
   4c844:	1021883a 	mov	r16,r2
   4c848:	00415200 	call	41520 <__mulsi3>
   4c84c:	a00b883a 	mov	r5,r20
   4c850:	e009883a 	mov	r4,fp
   4c854:	d8800415 	stw	r2,16(sp)
   4c858:	004bb640 	call	4bb64 <__umodsi3>
   4c85c:	1004943a 	slli	r2,r2,16
   4c860:	da000417 	ldw	r8,16(sp)
   4c864:	bdffffcc 	andi	r23,r23,65535
   4c868:	b884b03a 	or	r2,r23,r2
   4c86c:	d8c00217 	ldw	r3,8(sp)
   4c870:	1200062e 	bgeu	r2,r8,4c88c <__divdf3+0x424>
   4c874:	1585883a 	add	r2,r2,r22
   4c878:	813fffc4 	addi	r4,r16,-1
   4c87c:	15810236 	bltu	r2,r22,4cc88 <__divdf3+0x820>
   4c880:	1201012e 	bgeu	r2,r8,4cc88 <__divdf3+0x820>
   4c884:	843fff84 	addi	r16,r16,-2
   4c888:	1585883a 	add	r2,r2,r22
   4c88c:	8822943a 	slli	r17,r17,16
   4c890:	d9800017 	ldw	r6,0(sp)
   4c894:	1211c83a 	sub	r8,r2,r8
   4c898:	8c22b03a 	or	r17,r17,r16
   4c89c:	373fffcc 	andi	fp,r6,65535
   4c8a0:	8abfffcc 	andi	r10,r17,65535
   4c8a4:	8820d43a 	srli	r16,r17,16
   4c8a8:	5009883a 	mov	r4,r10
   4c8ac:	e00b883a 	mov	r5,fp
   4c8b0:	302ed43a 	srli	r23,r6,16
   4c8b4:	d8c00215 	stw	r3,8(sp)
   4c8b8:	da000415 	stw	r8,16(sp)
   4c8bc:	da800115 	stw	r10,4(sp)
   4c8c0:	00415200 	call	41520 <__mulsi3>
   4c8c4:	800b883a 	mov	r5,r16
   4c8c8:	e009883a 	mov	r4,fp
   4c8cc:	d8800515 	stw	r2,20(sp)
   4c8d0:	00415200 	call	41520 <__mulsi3>
   4c8d4:	8009883a 	mov	r4,r16
   4c8d8:	b80b883a 	mov	r5,r23
   4c8dc:	d8800315 	stw	r2,12(sp)
   4c8e0:	00415200 	call	41520 <__mulsi3>
   4c8e4:	da800117 	ldw	r10,4(sp)
   4c8e8:	b80b883a 	mov	r5,r23
   4c8ec:	1021883a 	mov	r16,r2
   4c8f0:	5009883a 	mov	r4,r10
   4c8f4:	00415200 	call	41520 <__mulsi3>
   4c8f8:	d9c00517 	ldw	r7,20(sp)
   4c8fc:	da400317 	ldw	r9,12(sp)
   4c900:	d8c00217 	ldw	r3,8(sp)
   4c904:	3808d43a 	srli	r4,r7,16
   4c908:	1245883a 	add	r2,r2,r9
   4c90c:	da000417 	ldw	r8,16(sp)
   4c910:	2085883a 	add	r2,r4,r2
   4c914:	1240022e 	bgeu	r2,r9,4c920 <__divdf3+0x4b8>
   4c918:	01000074 	movhi	r4,1
   4c91c:	8121883a 	add	r16,r16,r4
   4c920:	1008d43a 	srli	r4,r2,16
   4c924:	1004943a 	slli	r2,r2,16
   4c928:	39ffffcc 	andi	r7,r7,65535
   4c92c:	2409883a 	add	r4,r4,r16
   4c930:	11c5883a 	add	r2,r2,r7
   4c934:	4100bb36 	bltu	r8,r4,4cc24 <__divdf3+0x7bc>
   4c938:	4100d726 	beq	r8,r4,4cc98 <__divdf3+0x830>
   4c93c:	4109c83a 	sub	r4,r8,r4
   4c940:	a8a1c83a 	sub	r16,r21,r2
   4c944:	ac2b803a 	cmpltu	r21,r21,r16
   4c948:	256bc83a 	sub	r21,r4,r21
   4c94c:	b540d926 	beq	r22,r21,4ccb4 <__divdf3+0x84c>
   4c950:	a00b883a 	mov	r5,r20
   4c954:	a809883a 	mov	r4,r21
   4c958:	d8c00215 	stw	r3,8(sp)
   4c95c:	004bb000 	call	4bb00 <__udivsi3>
   4c960:	100b883a 	mov	r5,r2
   4c964:	9009883a 	mov	r4,r18
   4c968:	d8800515 	stw	r2,20(sp)
   4c96c:	00415200 	call	41520 <__mulsi3>
   4c970:	a809883a 	mov	r4,r21
   4c974:	a00b883a 	mov	r5,r20
   4c978:	d8800415 	stw	r2,16(sp)
   4c97c:	004bb640 	call	4bb64 <__umodsi3>
   4c980:	1004943a 	slli	r2,r2,16
   4c984:	8008d43a 	srli	r4,r16,16
   4c988:	da000417 	ldw	r8,16(sp)
   4c98c:	d8c00217 	ldw	r3,8(sp)
   4c990:	2084b03a 	or	r2,r4,r2
   4c994:	d9c00517 	ldw	r7,20(sp)
   4c998:	1200062e 	bgeu	r2,r8,4c9b4 <__divdf3+0x54c>
   4c99c:	1585883a 	add	r2,r2,r22
   4c9a0:	393fffc4 	addi	r4,r7,-1
   4c9a4:	1580c536 	bltu	r2,r22,4ccbc <__divdf3+0x854>
   4c9a8:	1200c42e 	bgeu	r2,r8,4ccbc <__divdf3+0x854>
   4c9ac:	39ffff84 	addi	r7,r7,-2
   4c9b0:	1585883a 	add	r2,r2,r22
   4c9b4:	122bc83a 	sub	r21,r2,r8
   4c9b8:	a00b883a 	mov	r5,r20
   4c9bc:	a809883a 	mov	r4,r21
   4c9c0:	d8c00215 	stw	r3,8(sp)
   4c9c4:	d9c00515 	stw	r7,20(sp)
   4c9c8:	004bb000 	call	4bb00 <__udivsi3>
   4c9cc:	9009883a 	mov	r4,r18
   4c9d0:	100b883a 	mov	r5,r2
   4c9d4:	d8800415 	stw	r2,16(sp)
   4c9d8:	00415200 	call	41520 <__mulsi3>
   4c9dc:	a809883a 	mov	r4,r21
   4c9e0:	a00b883a 	mov	r5,r20
   4c9e4:	1025883a 	mov	r18,r2
   4c9e8:	004bb640 	call	4bb64 <__umodsi3>
   4c9ec:	1004943a 	slli	r2,r2,16
   4c9f0:	813fffcc 	andi	r4,r16,65535
   4c9f4:	d8c00217 	ldw	r3,8(sp)
   4c9f8:	20a0b03a 	or	r16,r4,r2
   4c9fc:	d9c00517 	ldw	r7,20(sp)
   4ca00:	da000417 	ldw	r8,16(sp)
   4ca04:	8480062e 	bgeu	r16,r18,4ca20 <__divdf3+0x5b8>
   4ca08:	85a1883a 	add	r16,r16,r22
   4ca0c:	40bfffc4 	addi	r2,r8,-1
   4ca10:	8580ac36 	bltu	r16,r22,4ccc4 <__divdf3+0x85c>
   4ca14:	8480ab2e 	bgeu	r16,r18,4ccc4 <__divdf3+0x85c>
   4ca18:	423fff84 	addi	r8,r8,-2
   4ca1c:	85a1883a 	add	r16,r16,r22
   4ca20:	3804943a 	slli	r2,r7,16
   4ca24:	84a1c83a 	sub	r16,r16,r18
   4ca28:	e009883a 	mov	r4,fp
   4ca2c:	1228b03a 	or	r20,r2,r8
   4ca30:	a1ffffcc 	andi	r7,r20,65535
   4ca34:	a024d43a 	srli	r18,r20,16
   4ca38:	380b883a 	mov	r5,r7
   4ca3c:	d8c00215 	stw	r3,8(sp)
   4ca40:	d9c00515 	stw	r7,20(sp)
   4ca44:	00415200 	call	41520 <__mulsi3>
   4ca48:	900b883a 	mov	r5,r18
   4ca4c:	e009883a 	mov	r4,fp
   4ca50:	102b883a 	mov	r21,r2
   4ca54:	00415200 	call	41520 <__mulsi3>
   4ca58:	900b883a 	mov	r5,r18
   4ca5c:	b809883a 	mov	r4,r23
   4ca60:	1039883a 	mov	fp,r2
   4ca64:	00415200 	call	41520 <__mulsi3>
   4ca68:	d9c00517 	ldw	r7,20(sp)
   4ca6c:	b80b883a 	mov	r5,r23
   4ca70:	1025883a 	mov	r18,r2
   4ca74:	3809883a 	mov	r4,r7
   4ca78:	00415200 	call	41520 <__mulsi3>
   4ca7c:	a808d43a 	srli	r4,r21,16
   4ca80:	1705883a 	add	r2,r2,fp
   4ca84:	d8c00217 	ldw	r3,8(sp)
   4ca88:	2085883a 	add	r2,r4,r2
   4ca8c:	1700022e 	bgeu	r2,fp,4ca98 <__divdf3+0x630>
   4ca90:	01000074 	movhi	r4,1
   4ca94:	9125883a 	add	r18,r18,r4
   4ca98:	1008d43a 	srli	r4,r2,16
   4ca9c:	1004943a 	slli	r2,r2,16
   4caa0:	ad7fffcc 	andi	r21,r21,65535
   4caa4:	2489883a 	add	r4,r4,r18
   4caa8:	1545883a 	add	r2,r2,r21
   4caac:	81003836 	bltu	r16,r4,4cb90 <__divdf3+0x728>
   4cab0:	81003626 	beq	r16,r4,4cb8c <__divdf3+0x724>
   4cab4:	a5000054 	ori	r20,r20,1
   4cab8:	1880ffc4 	addi	r2,r3,1023
   4cabc:	00bf2e0e 	bge	zero,r2,4c778 <__alt_data_end+0xfffe6f78>
   4cac0:	a10001cc 	andi	r4,r20,7
   4cac4:	20000726 	beq	r4,zero,4cae4 <__divdf3+0x67c>
   4cac8:	a10003cc 	andi	r4,r20,15
   4cacc:	01400104 	movi	r5,4
   4cad0:	21400426 	beq	r4,r5,4cae4 <__divdf3+0x67c>
   4cad4:	a149883a 	add	r4,r20,r5
   4cad8:	2529803a 	cmpltu	r20,r4,r20
   4cadc:	8d23883a 	add	r17,r17,r20
   4cae0:	2029883a 	mov	r20,r4
   4cae4:	8900402c 	andhi	r4,r17,256
   4cae8:	20000426 	beq	r4,zero,4cafc <__divdf3+0x694>
   4caec:	18810004 	addi	r2,r3,1024
   4caf0:	00ffc034 	movhi	r3,65280
   4caf4:	18ffffc4 	addi	r3,r3,-1
   4caf8:	88e2703a 	and	r17,r17,r3
   4cafc:	00c1ff84 	movi	r3,2046
   4cb00:	18beb416 	blt	r3,r2,4c5d4 <__alt_data_end+0xfffe6dd4>
   4cb04:	a028d0fa 	srli	r20,r20,3
   4cb08:	882a977a 	slli	r21,r17,29
   4cb0c:	8820927a 	slli	r16,r17,9
   4cb10:	1081ffcc 	andi	r2,r2,2047
   4cb14:	ad2ab03a 	or	r21,r21,r20
   4cb18:	8020d33a 	srli	r16,r16,12
   4cb1c:	9900004c 	andi	r4,r19,1
   4cb20:	003eb006 	br	4c5e4 <__alt_data_end+0xfffe6de4>
   4cb24:	8080022c 	andhi	r2,r16,8
   4cb28:	10001226 	beq	r2,zero,4cb74 <__divdf3+0x70c>
   4cb2c:	8880022c 	andhi	r2,r17,8
   4cb30:	1000101e 	bne	r2,zero,4cb74 <__divdf3+0x70c>
   4cb34:	00800434 	movhi	r2,16
   4cb38:	8c000234 	orhi	r16,r17,8
   4cb3c:	10bfffc4 	addi	r2,r2,-1
   4cb40:	b809883a 	mov	r4,r23
   4cb44:	80a0703a 	and	r16,r16,r2
   4cb48:	a02b883a 	mov	r21,r20
   4cb4c:	003f0806 	br	4c770 <__alt_data_end+0xfffe6f70>
   4cb50:	008000c4 	movi	r2,3
   4cb54:	3880b126 	beq	r7,r2,4ce1c <__divdf3+0x9b4>
   4cb58:	00800044 	movi	r2,1
   4cb5c:	38805b1e 	bne	r7,r2,4cccc <__divdf3+0x864>
   4cb60:	e009883a 	mov	r4,fp
   4cb64:	0005883a 	mov	r2,zero
   4cb68:	0021883a 	mov	r16,zero
   4cb6c:	002b883a 	mov	r21,zero
   4cb70:	003e9c06 	br	4c5e4 <__alt_data_end+0xfffe6de4>
   4cb74:	00800434 	movhi	r2,16
   4cb78:	84000234 	orhi	r16,r16,8
   4cb7c:	10bfffc4 	addi	r2,r2,-1
   4cb80:	b009883a 	mov	r4,r22
   4cb84:	80a0703a 	and	r16,r16,r2
   4cb88:	003ef906 	br	4c770 <__alt_data_end+0xfffe6f70>
   4cb8c:	103fca26 	beq	r2,zero,4cab8 <__alt_data_end+0xfffe72b8>
   4cb90:	b421883a 	add	r16,r22,r16
   4cb94:	a17fffc4 	addi	r5,r20,-1
   4cb98:	8580422e 	bgeu	r16,r22,4cca4 <__divdf3+0x83c>
   4cb9c:	2829883a 	mov	r20,r5
   4cba0:	813fc41e 	bne	r16,r4,4cab4 <__alt_data_end+0xfffe72b4>
   4cba4:	d9800017 	ldw	r6,0(sp)
   4cba8:	30bfc21e 	bne	r6,r2,4cab4 <__alt_data_end+0xfffe72b4>
   4cbac:	003fc206 	br	4cab8 <__alt_data_end+0xfffe72b8>
   4cbb0:	143ff604 	addi	r16,r2,-40
   4cbb4:	8c20983a 	sll	r16,r17,r16
   4cbb8:	002b883a 	mov	r21,zero
   4cbbc:	003eb406 	br	4c690 <__alt_data_end+0xfffe6e90>
   4cbc0:	d9800215 	stw	r6,8(sp)
   4cbc4:	d9c00515 	stw	r7,20(sp)
   4cbc8:	da000415 	stw	r8,16(sp)
   4cbcc:	00414bc0 	call	414bc <__clzsi2>
   4cbd0:	10800804 	addi	r2,r2,32
   4cbd4:	da000417 	ldw	r8,16(sp)
   4cbd8:	d9c00517 	ldw	r7,20(sp)
   4cbdc:	d9800217 	ldw	r6,8(sp)
   4cbe0:	003ea106 	br	4c668 <__alt_data_end+0xfffe6e68>
   4cbe4:	147ff604 	addi	r17,r2,-40
   4cbe8:	3462983a 	sll	r17,r6,r17
   4cbec:	0029883a 	mov	r20,zero
   4cbf0:	003ec906 	br	4c718 <__alt_data_end+0xfffe6f18>
   4cbf4:	3009883a 	mov	r4,r6
   4cbf8:	d9400115 	stw	r5,4(sp)
   4cbfc:	d9800215 	stw	r6,8(sp)
   4cc00:	da000415 	stw	r8,16(sp)
   4cc04:	da400315 	stw	r9,12(sp)
   4cc08:	00414bc0 	call	414bc <__clzsi2>
   4cc0c:	10800804 	addi	r2,r2,32
   4cc10:	da400317 	ldw	r9,12(sp)
   4cc14:	da000417 	ldw	r8,16(sp)
   4cc18:	d9800217 	ldw	r6,8(sp)
   4cc1c:	d9400117 	ldw	r5,4(sp)
   4cc20:	003eb306 	br	4c6f0 <__alt_data_end+0xfffe6ef0>
   4cc24:	d9800017 	ldw	r6,0(sp)
   4cc28:	a9ab883a 	add	r21,r21,r6
   4cc2c:	a98b803a 	cmpltu	r5,r21,r6
   4cc30:	2d8b883a 	add	r5,r5,r22
   4cc34:	2a11883a 	add	r8,r5,r8
   4cc38:	897fffc4 	addi	r5,r17,-1
   4cc3c:	b2000c2e 	bgeu	r22,r8,4cc70 <__divdf3+0x808>
   4cc40:	41003f36 	bltu	r8,r4,4cd40 <__divdf3+0x8d8>
   4cc44:	22006c26 	beq	r4,r8,4cdf8 <__divdf3+0x990>
   4cc48:	4109c83a 	sub	r4,r8,r4
   4cc4c:	2823883a 	mov	r17,r5
   4cc50:	003f3b06 	br	4c940 <__alt_data_end+0xfffe7140>
   4cc54:	ad3ed336 	bltu	r21,r20,4c7a4 <__alt_data_end+0xfffe6fa4>
   4cc58:	a804d07a 	srli	r2,r21,1
   4cc5c:	802e97fa 	slli	r23,r16,31
   4cc60:	a82a97fa 	slli	r21,r21,31
   4cc64:	8020d07a 	srli	r16,r16,1
   4cc68:	b8aeb03a 	or	r23,r23,r2
   4cc6c:	003ed006 	br	4c7b0 <__alt_data_end+0xfffe6fb0>
   4cc70:	b23ff51e 	bne	r22,r8,4cc48 <__alt_data_end+0xfffe7448>
   4cc74:	d9800017 	ldw	r6,0(sp)
   4cc78:	a9bff12e 	bgeu	r21,r6,4cc40 <__alt_data_end+0xfffe7440>
   4cc7c:	b109c83a 	sub	r4,r22,r4
   4cc80:	2823883a 	mov	r17,r5
   4cc84:	003f2e06 	br	4c940 <__alt_data_end+0xfffe7140>
   4cc88:	2021883a 	mov	r16,r4
   4cc8c:	003eff06 	br	4c88c <__alt_data_end+0xfffe708c>
   4cc90:	2023883a 	mov	r17,r4
   4cc94:	003ee406 	br	4c828 <__alt_data_end+0xfffe7028>
   4cc98:	a8bfe236 	bltu	r21,r2,4cc24 <__alt_data_end+0xfffe7424>
   4cc9c:	0009883a 	mov	r4,zero
   4cca0:	003f2706 	br	4c940 <__alt_data_end+0xfffe7140>
   4cca4:	81002d36 	bltu	r16,r4,4cd5c <__divdf3+0x8f4>
   4cca8:	24005626 	beq	r4,r16,4ce04 <__divdf3+0x99c>
   4ccac:	2829883a 	mov	r20,r5
   4ccb0:	003f8006 	br	4cab4 <__alt_data_end+0xfffe72b4>
   4ccb4:	053fffc4 	movi	r20,-1
   4ccb8:	003f7f06 	br	4cab8 <__alt_data_end+0xfffe72b8>
   4ccbc:	200f883a 	mov	r7,r4
   4ccc0:	003f3c06 	br	4c9b4 <__alt_data_end+0xfffe71b4>
   4ccc4:	1011883a 	mov	r8,r2
   4ccc8:	003f5506 	br	4ca20 <__alt_data_end+0xfffe7220>
   4cccc:	e027883a 	mov	r19,fp
   4ccd0:	003f7906 	br	4cab8 <__alt_data_end+0xfffe72b8>
   4ccd4:	010007c4 	movi	r4,31
   4ccd8:	20c02816 	blt	r4,r3,4cd7c <__divdf3+0x914>
   4ccdc:	00800804 	movi	r2,32
   4cce0:	10c5c83a 	sub	r2,r2,r3
   4cce4:	888a983a 	sll	r5,r17,r2
   4cce8:	a0c8d83a 	srl	r4,r20,r3
   4ccec:	a084983a 	sll	r2,r20,r2
   4ccf0:	88e2d83a 	srl	r17,r17,r3
   4ccf4:	2906b03a 	or	r3,r5,r4
   4ccf8:	1004c03a 	cmpne	r2,r2,zero
   4ccfc:	1886b03a 	or	r3,r3,r2
   4cd00:	188001cc 	andi	r2,r3,7
   4cd04:	10000726 	beq	r2,zero,4cd24 <__divdf3+0x8bc>
   4cd08:	188003cc 	andi	r2,r3,15
   4cd0c:	01000104 	movi	r4,4
   4cd10:	11000426 	beq	r2,r4,4cd24 <__divdf3+0x8bc>
   4cd14:	1805883a 	mov	r2,r3
   4cd18:	10c00104 	addi	r3,r2,4
   4cd1c:	1885803a 	cmpltu	r2,r3,r2
   4cd20:	88a3883a 	add	r17,r17,r2
   4cd24:	8880202c 	andhi	r2,r17,128
   4cd28:	10002926 	beq	r2,zero,4cdd0 <__divdf3+0x968>
   4cd2c:	9900004c 	andi	r4,r19,1
   4cd30:	00800044 	movi	r2,1
   4cd34:	0021883a 	mov	r16,zero
   4cd38:	002b883a 	mov	r21,zero
   4cd3c:	003e2906 	br	4c5e4 <__alt_data_end+0xfffe6de4>
   4cd40:	d9800017 	ldw	r6,0(sp)
   4cd44:	8c7fff84 	addi	r17,r17,-2
   4cd48:	a9ab883a 	add	r21,r21,r6
   4cd4c:	a98b803a 	cmpltu	r5,r21,r6
   4cd50:	2d8b883a 	add	r5,r5,r22
   4cd54:	2a11883a 	add	r8,r5,r8
   4cd58:	003ef806 	br	4c93c <__alt_data_end+0xfffe713c>
   4cd5c:	d9800017 	ldw	r6,0(sp)
   4cd60:	318f883a 	add	r7,r6,r6
   4cd64:	398b803a 	cmpltu	r5,r7,r6
   4cd68:	2d8d883a 	add	r6,r5,r22
   4cd6c:	81a1883a 	add	r16,r16,r6
   4cd70:	a17fff84 	addi	r5,r20,-2
   4cd74:	d9c00015 	stw	r7,0(sp)
   4cd78:	003f8806 	br	4cb9c <__alt_data_end+0xfffe739c>
   4cd7c:	013ff844 	movi	r4,-31
   4cd80:	2085c83a 	sub	r2,r4,r2
   4cd84:	8888d83a 	srl	r4,r17,r2
   4cd88:	00800804 	movi	r2,32
   4cd8c:	18802126 	beq	r3,r2,4ce14 <__divdf3+0x9ac>
   4cd90:	04001004 	movi	r16,64
   4cd94:	80c7c83a 	sub	r3,r16,r3
   4cd98:	88e0983a 	sll	r16,r17,r3
   4cd9c:	8504b03a 	or	r2,r16,r20
   4cda0:	1004c03a 	cmpne	r2,r2,zero
   4cda4:	2084b03a 	or	r2,r4,r2
   4cda8:	144001cc 	andi	r17,r2,7
   4cdac:	88000d1e 	bne	r17,zero,4cde4 <__divdf3+0x97c>
   4cdb0:	0021883a 	mov	r16,zero
   4cdb4:	102ad0fa 	srli	r21,r2,3
   4cdb8:	9900004c 	andi	r4,r19,1
   4cdbc:	0005883a 	mov	r2,zero
   4cdc0:	ac6ab03a 	or	r21,r21,r17
   4cdc4:	003e0706 	br	4c5e4 <__alt_data_end+0xfffe6de4>
   4cdc8:	1007883a 	mov	r3,r2
   4cdcc:	0023883a 	mov	r17,zero
   4cdd0:	8820927a 	slli	r16,r17,9
   4cdd4:	1805883a 	mov	r2,r3
   4cdd8:	8822977a 	slli	r17,r17,29
   4cddc:	8020d33a 	srli	r16,r16,12
   4cde0:	003ff406 	br	4cdb4 <__alt_data_end+0xfffe75b4>
   4cde4:	10c003cc 	andi	r3,r2,15
   4cde8:	01000104 	movi	r4,4
   4cdec:	193ff626 	beq	r3,r4,4cdc8 <__alt_data_end+0xfffe75c8>
   4cdf0:	0023883a 	mov	r17,zero
   4cdf4:	003fc806 	br	4cd18 <__alt_data_end+0xfffe7518>
   4cdf8:	a8bfd136 	bltu	r21,r2,4cd40 <__alt_data_end+0xfffe7540>
   4cdfc:	2823883a 	mov	r17,r5
   4ce00:	003fa606 	br	4cc9c <__alt_data_end+0xfffe749c>
   4ce04:	d9800017 	ldw	r6,0(sp)
   4ce08:	30bfd436 	bltu	r6,r2,4cd5c <__alt_data_end+0xfffe755c>
   4ce0c:	2829883a 	mov	r20,r5
   4ce10:	003f6406 	br	4cba4 <__alt_data_end+0xfffe73a4>
   4ce14:	0021883a 	mov	r16,zero
   4ce18:	003fe006 	br	4cd9c <__alt_data_end+0xfffe759c>
   4ce1c:	00800434 	movhi	r2,16
   4ce20:	8c000234 	orhi	r16,r17,8
   4ce24:	10bfffc4 	addi	r2,r2,-1
   4ce28:	e009883a 	mov	r4,fp
   4ce2c:	80a0703a 	and	r16,r16,r2
   4ce30:	a02b883a 	mov	r21,r20
   4ce34:	003e4e06 	br	4c770 <__alt_data_end+0xfffe6f70>

0004ce38 <__eqdf2>:
   4ce38:	2804d53a 	srli	r2,r5,20
   4ce3c:	3806d53a 	srli	r3,r7,20
   4ce40:	02000434 	movhi	r8,16
   4ce44:	423fffc4 	addi	r8,r8,-1
   4ce48:	1081ffcc 	andi	r2,r2,2047
   4ce4c:	0281ffc4 	movi	r10,2047
   4ce50:	2a12703a 	and	r9,r5,r8
   4ce54:	18c1ffcc 	andi	r3,r3,2047
   4ce58:	3a10703a 	and	r8,r7,r8
   4ce5c:	280ad7fa 	srli	r5,r5,31
   4ce60:	380ed7fa 	srli	r7,r7,31
   4ce64:	12801026 	beq	r2,r10,4cea8 <__eqdf2+0x70>
   4ce68:	0281ffc4 	movi	r10,2047
   4ce6c:	1a800a26 	beq	r3,r10,4ce98 <__eqdf2+0x60>
   4ce70:	10c00226 	beq	r2,r3,4ce7c <__eqdf2+0x44>
   4ce74:	00800044 	movi	r2,1
   4ce78:	f800283a 	ret
   4ce7c:	4a3ffd1e 	bne	r9,r8,4ce74 <__alt_data_end+0xfffe7674>
   4ce80:	21bffc1e 	bne	r4,r6,4ce74 <__alt_data_end+0xfffe7674>
   4ce84:	29c00c26 	beq	r5,r7,4ceb8 <__eqdf2+0x80>
   4ce88:	103ffa1e 	bne	r2,zero,4ce74 <__alt_data_end+0xfffe7674>
   4ce8c:	2244b03a 	or	r2,r4,r9
   4ce90:	1004c03a 	cmpne	r2,r2,zero
   4ce94:	f800283a 	ret
   4ce98:	3214b03a 	or	r10,r6,r8
   4ce9c:	503ff426 	beq	r10,zero,4ce70 <__alt_data_end+0xfffe7670>
   4cea0:	00800044 	movi	r2,1
   4cea4:	f800283a 	ret
   4cea8:	2254b03a 	or	r10,r4,r9
   4ceac:	503fee26 	beq	r10,zero,4ce68 <__alt_data_end+0xfffe7668>
   4ceb0:	00800044 	movi	r2,1
   4ceb4:	f800283a 	ret
   4ceb8:	0005883a 	mov	r2,zero
   4cebc:	f800283a 	ret

0004cec0 <__gedf2>:
   4cec0:	2804d53a 	srli	r2,r5,20
   4cec4:	3806d53a 	srli	r3,r7,20
   4cec8:	02000434 	movhi	r8,16
   4cecc:	423fffc4 	addi	r8,r8,-1
   4ced0:	1081ffcc 	andi	r2,r2,2047
   4ced4:	0241ffc4 	movi	r9,2047
   4ced8:	2a14703a 	and	r10,r5,r8
   4cedc:	18c1ffcc 	andi	r3,r3,2047
   4cee0:	3a10703a 	and	r8,r7,r8
   4cee4:	280ad7fa 	srli	r5,r5,31
   4cee8:	380ed7fa 	srli	r7,r7,31
   4ceec:	12401d26 	beq	r2,r9,4cf64 <__gedf2+0xa4>
   4cef0:	0241ffc4 	movi	r9,2047
   4cef4:	1a401226 	beq	r3,r9,4cf40 <__gedf2+0x80>
   4cef8:	1000081e 	bne	r2,zero,4cf1c <__gedf2+0x5c>
   4cefc:	2296b03a 	or	r11,r4,r10
   4cf00:	5813003a 	cmpeq	r9,r11,zero
   4cf04:	1800091e 	bne	r3,zero,4cf2c <__gedf2+0x6c>
   4cf08:	3218b03a 	or	r12,r6,r8
   4cf0c:	6000071e 	bne	r12,zero,4cf2c <__gedf2+0x6c>
   4cf10:	0005883a 	mov	r2,zero
   4cf14:	5800101e 	bne	r11,zero,4cf58 <__gedf2+0x98>
   4cf18:	f800283a 	ret
   4cf1c:	18000c1e 	bne	r3,zero,4cf50 <__gedf2+0x90>
   4cf20:	3212b03a 	or	r9,r6,r8
   4cf24:	48000c26 	beq	r9,zero,4cf58 <__gedf2+0x98>
   4cf28:	0013883a 	mov	r9,zero
   4cf2c:	39c03fcc 	andi	r7,r7,255
   4cf30:	48000826 	beq	r9,zero,4cf54 <__gedf2+0x94>
   4cf34:	38000926 	beq	r7,zero,4cf5c <__gedf2+0x9c>
   4cf38:	00800044 	movi	r2,1
   4cf3c:	f800283a 	ret
   4cf40:	3212b03a 	or	r9,r6,r8
   4cf44:	483fec26 	beq	r9,zero,4cef8 <__alt_data_end+0xfffe76f8>
   4cf48:	00bfff84 	movi	r2,-2
   4cf4c:	f800283a 	ret
   4cf50:	39c03fcc 	andi	r7,r7,255
   4cf54:	29c00626 	beq	r5,r7,4cf70 <__gedf2+0xb0>
   4cf58:	283ff726 	beq	r5,zero,4cf38 <__alt_data_end+0xfffe7738>
   4cf5c:	00bfffc4 	movi	r2,-1
   4cf60:	f800283a 	ret
   4cf64:	2292b03a 	or	r9,r4,r10
   4cf68:	483fe126 	beq	r9,zero,4cef0 <__alt_data_end+0xfffe76f0>
   4cf6c:	003ff606 	br	4cf48 <__alt_data_end+0xfffe7748>
   4cf70:	18bff916 	blt	r3,r2,4cf58 <__alt_data_end+0xfffe7758>
   4cf74:	10c00316 	blt	r2,r3,4cf84 <__gedf2+0xc4>
   4cf78:	42bff736 	bltu	r8,r10,4cf58 <__alt_data_end+0xfffe7758>
   4cf7c:	52000326 	beq	r10,r8,4cf8c <__gedf2+0xcc>
   4cf80:	5200042e 	bgeu	r10,r8,4cf94 <__gedf2+0xd4>
   4cf84:	283fec1e 	bne	r5,zero,4cf38 <__alt_data_end+0xfffe7738>
   4cf88:	003ff406 	br	4cf5c <__alt_data_end+0xfffe775c>
   4cf8c:	313ff236 	bltu	r6,r4,4cf58 <__alt_data_end+0xfffe7758>
   4cf90:	21bffc36 	bltu	r4,r6,4cf84 <__alt_data_end+0xfffe7784>
   4cf94:	0005883a 	mov	r2,zero
   4cf98:	f800283a 	ret

0004cf9c <__ledf2>:
   4cf9c:	2804d53a 	srli	r2,r5,20
   4cfa0:	3810d53a 	srli	r8,r7,20
   4cfa4:	00c00434 	movhi	r3,16
   4cfa8:	18ffffc4 	addi	r3,r3,-1
   4cfac:	1081ffcc 	andi	r2,r2,2047
   4cfb0:	0241ffc4 	movi	r9,2047
   4cfb4:	28d4703a 	and	r10,r5,r3
   4cfb8:	4201ffcc 	andi	r8,r8,2047
   4cfbc:	38c6703a 	and	r3,r7,r3
   4cfc0:	280ad7fa 	srli	r5,r5,31
   4cfc4:	380ed7fa 	srli	r7,r7,31
   4cfc8:	12401f26 	beq	r2,r9,4d048 <__ledf2+0xac>
   4cfcc:	0241ffc4 	movi	r9,2047
   4cfd0:	42401426 	beq	r8,r9,4d024 <__ledf2+0x88>
   4cfd4:	1000091e 	bne	r2,zero,4cffc <__ledf2+0x60>
   4cfd8:	2296b03a 	or	r11,r4,r10
   4cfdc:	5813003a 	cmpeq	r9,r11,zero
   4cfe0:	29403fcc 	andi	r5,r5,255
   4cfe4:	40000a1e 	bne	r8,zero,4d010 <__ledf2+0x74>
   4cfe8:	30d8b03a 	or	r12,r6,r3
   4cfec:	6000081e 	bne	r12,zero,4d010 <__ledf2+0x74>
   4cff0:	0005883a 	mov	r2,zero
   4cff4:	5800111e 	bne	r11,zero,4d03c <__ledf2+0xa0>
   4cff8:	f800283a 	ret
   4cffc:	29403fcc 	andi	r5,r5,255
   4d000:	40000c1e 	bne	r8,zero,4d034 <__ledf2+0x98>
   4d004:	30d2b03a 	or	r9,r6,r3
   4d008:	48000c26 	beq	r9,zero,4d03c <__ledf2+0xa0>
   4d00c:	0013883a 	mov	r9,zero
   4d010:	39c03fcc 	andi	r7,r7,255
   4d014:	48000826 	beq	r9,zero,4d038 <__ledf2+0x9c>
   4d018:	38001126 	beq	r7,zero,4d060 <__ledf2+0xc4>
   4d01c:	00800044 	movi	r2,1
   4d020:	f800283a 	ret
   4d024:	30d2b03a 	or	r9,r6,r3
   4d028:	483fea26 	beq	r9,zero,4cfd4 <__alt_data_end+0xfffe77d4>
   4d02c:	00800084 	movi	r2,2
   4d030:	f800283a 	ret
   4d034:	39c03fcc 	andi	r7,r7,255
   4d038:	39400726 	beq	r7,r5,4d058 <__ledf2+0xbc>
   4d03c:	2800081e 	bne	r5,zero,4d060 <__ledf2+0xc4>
   4d040:	00800044 	movi	r2,1
   4d044:	f800283a 	ret
   4d048:	2292b03a 	or	r9,r4,r10
   4d04c:	483fdf26 	beq	r9,zero,4cfcc <__alt_data_end+0xfffe77cc>
   4d050:	00800084 	movi	r2,2
   4d054:	f800283a 	ret
   4d058:	4080030e 	bge	r8,r2,4d068 <__ledf2+0xcc>
   4d05c:	383fef26 	beq	r7,zero,4d01c <__alt_data_end+0xfffe781c>
   4d060:	00bfffc4 	movi	r2,-1
   4d064:	f800283a 	ret
   4d068:	123feb16 	blt	r2,r8,4d018 <__alt_data_end+0xfffe7818>
   4d06c:	1abff336 	bltu	r3,r10,4d03c <__alt_data_end+0xfffe783c>
   4d070:	50c00326 	beq	r10,r3,4d080 <__ledf2+0xe4>
   4d074:	50c0042e 	bgeu	r10,r3,4d088 <__ledf2+0xec>
   4d078:	283fe81e 	bne	r5,zero,4d01c <__alt_data_end+0xfffe781c>
   4d07c:	003ff806 	br	4d060 <__alt_data_end+0xfffe7860>
   4d080:	313fee36 	bltu	r6,r4,4d03c <__alt_data_end+0xfffe783c>
   4d084:	21bffc36 	bltu	r4,r6,4d078 <__alt_data_end+0xfffe7878>
   4d088:	0005883a 	mov	r2,zero
   4d08c:	f800283a 	ret

0004d090 <__muldf3>:
   4d090:	deffee04 	addi	sp,sp,-72
   4d094:	dd000c15 	stw	r20,48(sp)
   4d098:	2828d53a 	srli	r20,r5,20
   4d09c:	ddc00f15 	stw	r23,60(sp)
   4d0a0:	282ed7fa 	srli	r23,r5,31
   4d0a4:	dc000815 	stw	r16,32(sp)
   4d0a8:	04000434 	movhi	r16,16
   4d0ac:	dcc00b15 	stw	r19,44(sp)
   4d0b0:	843fffc4 	addi	r16,r16,-1
   4d0b4:	dfc01115 	stw	ra,68(sp)
   4d0b8:	df001015 	stw	fp,64(sp)
   4d0bc:	dd800e15 	stw	r22,56(sp)
   4d0c0:	dd400d15 	stw	r21,52(sp)
   4d0c4:	dc800a15 	stw	r18,40(sp)
   4d0c8:	dc400915 	stw	r17,36(sp)
   4d0cc:	a501ffcc 	andi	r20,r20,2047
   4d0d0:	2c20703a 	and	r16,r5,r16
   4d0d4:	b827883a 	mov	r19,r23
   4d0d8:	ba403fcc 	andi	r9,r23,255
   4d0dc:	a0006026 	beq	r20,zero,4d260 <__muldf3+0x1d0>
   4d0e0:	0081ffc4 	movi	r2,2047
   4d0e4:	202d883a 	mov	r22,r4
   4d0e8:	a0803626 	beq	r20,r2,4d1c4 <__muldf3+0x134>
   4d0ec:	84000434 	orhi	r16,r16,16
   4d0f0:	200ad77a 	srli	r5,r4,29
   4d0f4:	800490fa 	slli	r2,r16,3
   4d0f8:	202c90fa 	slli	r22,r4,3
   4d0fc:	a53f0044 	addi	r20,r20,-1023
   4d100:	28a0b03a 	or	r16,r5,r2
   4d104:	002b883a 	mov	r21,zero
   4d108:	000b883a 	mov	r5,zero
   4d10c:	3804d53a 	srli	r2,r7,20
   4d110:	3838d7fa 	srli	fp,r7,31
   4d114:	04400434 	movhi	r17,16
   4d118:	8c7fffc4 	addi	r17,r17,-1
   4d11c:	1081ffcc 	andi	r2,r2,2047
   4d120:	3025883a 	mov	r18,r6
   4d124:	3c62703a 	and	r17,r7,r17
   4d128:	e2803fcc 	andi	r10,fp,255
   4d12c:	10006d26 	beq	r2,zero,4d2e4 <__muldf3+0x254>
   4d130:	00c1ffc4 	movi	r3,2047
   4d134:	10c06526 	beq	r2,r3,4d2cc <__muldf3+0x23c>
   4d138:	8c400434 	orhi	r17,r17,16
   4d13c:	300ed77a 	srli	r7,r6,29
   4d140:	880690fa 	slli	r3,r17,3
   4d144:	302490fa 	slli	r18,r6,3
   4d148:	10bf0044 	addi	r2,r2,-1023
   4d14c:	38e2b03a 	or	r17,r7,r3
   4d150:	000f883a 	mov	r7,zero
   4d154:	a087883a 	add	r3,r20,r2
   4d158:	010003c4 	movi	r4,15
   4d15c:	3d44b03a 	or	r2,r7,r21
   4d160:	e5ccf03a 	xor	r6,fp,r23
   4d164:	1a000044 	addi	r8,r3,1
   4d168:	20809b36 	bltu	r4,r2,4d3d8 <__muldf3+0x348>
   4d16c:	100490ba 	slli	r2,r2,2
   4d170:	01000174 	movhi	r4,5
   4d174:	21346104 	addi	r4,r4,-11900
   4d178:	1105883a 	add	r2,r2,r4
   4d17c:	10800017 	ldw	r2,0(r2)
   4d180:	1000683a 	jmp	r2
   4d184:	0004d3d8 	cmpnei	zero,zero,4943
   4d188:	0004d1e4 	muli	zero,zero,4935
   4d18c:	0004d1e4 	muli	zero,zero,4935
   4d190:	0004d1e0 	cmpeqi	zero,zero,4935
   4d194:	0004d3b4 	movhi	zero,4942
   4d198:	0004d3b4 	movhi	zero,4942
   4d19c:	0004d39c 	xori	zero,zero,4942
   4d1a0:	0004d1e0 	cmpeqi	zero,zero,4935
   4d1a4:	0004d3b4 	movhi	zero,4942
   4d1a8:	0004d39c 	xori	zero,zero,4942
   4d1ac:	0004d3b4 	movhi	zero,4942
   4d1b0:	0004d1e0 	cmpeqi	zero,zero,4935
   4d1b4:	0004d3c4 	movi	zero,4943
   4d1b8:	0004d3c4 	movi	zero,4943
   4d1bc:	0004d3c4 	movi	zero,4943
   4d1c0:	0004d724 	muli	zero,zero,4956
   4d1c4:	2404b03a 	or	r2,r4,r16
   4d1c8:	1000711e 	bne	r2,zero,4d390 <__muldf3+0x300>
   4d1cc:	05400204 	movi	r21,8
   4d1d0:	0021883a 	mov	r16,zero
   4d1d4:	002d883a 	mov	r22,zero
   4d1d8:	01400084 	movi	r5,2
   4d1dc:	003fcb06 	br	4d10c <__alt_data_end+0xfffe790c>
   4d1e0:	500d883a 	mov	r6,r10
   4d1e4:	00800084 	movi	r2,2
   4d1e8:	38805926 	beq	r7,r2,4d350 <__muldf3+0x2c0>
   4d1ec:	008000c4 	movi	r2,3
   4d1f0:	3881bb26 	beq	r7,r2,4d8e0 <__muldf3+0x850>
   4d1f4:	00800044 	movi	r2,1
   4d1f8:	3881961e 	bne	r7,r2,4d854 <__muldf3+0x7c4>
   4d1fc:	3027883a 	mov	r19,r6
   4d200:	0005883a 	mov	r2,zero
   4d204:	0021883a 	mov	r16,zero
   4d208:	002d883a 	mov	r22,zero
   4d20c:	1004953a 	slli	r2,r2,20
   4d210:	98c03fcc 	andi	r3,r19,255
   4d214:	04400434 	movhi	r17,16
   4d218:	8c7fffc4 	addi	r17,r17,-1
   4d21c:	180697fa 	slli	r3,r3,31
   4d220:	8460703a 	and	r16,r16,r17
   4d224:	80a0b03a 	or	r16,r16,r2
   4d228:	80c6b03a 	or	r3,r16,r3
   4d22c:	b005883a 	mov	r2,r22
   4d230:	dfc01117 	ldw	ra,68(sp)
   4d234:	df001017 	ldw	fp,64(sp)
   4d238:	ddc00f17 	ldw	r23,60(sp)
   4d23c:	dd800e17 	ldw	r22,56(sp)
   4d240:	dd400d17 	ldw	r21,52(sp)
   4d244:	dd000c17 	ldw	r20,48(sp)
   4d248:	dcc00b17 	ldw	r19,44(sp)
   4d24c:	dc800a17 	ldw	r18,40(sp)
   4d250:	dc400917 	ldw	r17,36(sp)
   4d254:	dc000817 	ldw	r16,32(sp)
   4d258:	dec01204 	addi	sp,sp,72
   4d25c:	f800283a 	ret
   4d260:	2404b03a 	or	r2,r4,r16
   4d264:	202b883a 	mov	r21,r4
   4d268:	10004426 	beq	r2,zero,4d37c <__muldf3+0x2ec>
   4d26c:	80015126 	beq	r16,zero,4d7b4 <__muldf3+0x724>
   4d270:	8009883a 	mov	r4,r16
   4d274:	d9800715 	stw	r6,28(sp)
   4d278:	d9c00215 	stw	r7,8(sp)
   4d27c:	da400415 	stw	r9,16(sp)
   4d280:	00414bc0 	call	414bc <__clzsi2>
   4d284:	d9800717 	ldw	r6,28(sp)
   4d288:	d9c00217 	ldw	r7,8(sp)
   4d28c:	da400417 	ldw	r9,16(sp)
   4d290:	113ffd44 	addi	r4,r2,-11
   4d294:	00c00704 	movi	r3,28
   4d298:	19014216 	blt	r3,r4,4d7a4 <__muldf3+0x714>
   4d29c:	00c00744 	movi	r3,29
   4d2a0:	15bffe04 	addi	r22,r2,-8
   4d2a4:	1907c83a 	sub	r3,r3,r4
   4d2a8:	85a0983a 	sll	r16,r16,r22
   4d2ac:	a8c6d83a 	srl	r3,r21,r3
   4d2b0:	adac983a 	sll	r22,r21,r22
   4d2b4:	1c20b03a 	or	r16,r3,r16
   4d2b8:	1080fcc4 	addi	r2,r2,1011
   4d2bc:	00a9c83a 	sub	r20,zero,r2
   4d2c0:	002b883a 	mov	r21,zero
   4d2c4:	000b883a 	mov	r5,zero
   4d2c8:	003f9006 	br	4d10c <__alt_data_end+0xfffe790c>
   4d2cc:	3446b03a 	or	r3,r6,r17
   4d2d0:	1800281e 	bne	r3,zero,4d374 <__muldf3+0x2e4>
   4d2d4:	0023883a 	mov	r17,zero
   4d2d8:	0025883a 	mov	r18,zero
   4d2dc:	01c00084 	movi	r7,2
   4d2e0:	003f9c06 	br	4d154 <__alt_data_end+0xfffe7954>
   4d2e4:	3446b03a 	or	r3,r6,r17
   4d2e8:	18001e26 	beq	r3,zero,4d364 <__muldf3+0x2d4>
   4d2ec:	88012126 	beq	r17,zero,4d774 <__muldf3+0x6e4>
   4d2f0:	8809883a 	mov	r4,r17
   4d2f4:	d9400215 	stw	r5,8(sp)
   4d2f8:	d9800715 	stw	r6,28(sp)
   4d2fc:	da400415 	stw	r9,16(sp)
   4d300:	da800315 	stw	r10,12(sp)
   4d304:	00414bc0 	call	414bc <__clzsi2>
   4d308:	d9400217 	ldw	r5,8(sp)
   4d30c:	d9800717 	ldw	r6,28(sp)
   4d310:	da400417 	ldw	r9,16(sp)
   4d314:	da800317 	ldw	r10,12(sp)
   4d318:	113ffd44 	addi	r4,r2,-11
   4d31c:	00c00704 	movi	r3,28
   4d320:	19011016 	blt	r3,r4,4d764 <__muldf3+0x6d4>
   4d324:	00c00744 	movi	r3,29
   4d328:	14bffe04 	addi	r18,r2,-8
   4d32c:	1907c83a 	sub	r3,r3,r4
   4d330:	8ca2983a 	sll	r17,r17,r18
   4d334:	30c6d83a 	srl	r3,r6,r3
   4d338:	34a4983a 	sll	r18,r6,r18
   4d33c:	1c62b03a 	or	r17,r3,r17
   4d340:	1080fcc4 	addi	r2,r2,1011
   4d344:	0085c83a 	sub	r2,zero,r2
   4d348:	000f883a 	mov	r7,zero
   4d34c:	003f8106 	br	4d154 <__alt_data_end+0xfffe7954>
   4d350:	3027883a 	mov	r19,r6
   4d354:	0081ffc4 	movi	r2,2047
   4d358:	0021883a 	mov	r16,zero
   4d35c:	002d883a 	mov	r22,zero
   4d360:	003faa06 	br	4d20c <__alt_data_end+0xfffe7a0c>
   4d364:	0023883a 	mov	r17,zero
   4d368:	0025883a 	mov	r18,zero
   4d36c:	01c00044 	movi	r7,1
   4d370:	003f7806 	br	4d154 <__alt_data_end+0xfffe7954>
   4d374:	01c000c4 	movi	r7,3
   4d378:	003f7606 	br	4d154 <__alt_data_end+0xfffe7954>
   4d37c:	05400104 	movi	r21,4
   4d380:	0021883a 	mov	r16,zero
   4d384:	002d883a 	mov	r22,zero
   4d388:	01400044 	movi	r5,1
   4d38c:	003f5f06 	br	4d10c <__alt_data_end+0xfffe790c>
   4d390:	05400304 	movi	r21,12
   4d394:	014000c4 	movi	r5,3
   4d398:	003f5c06 	br	4d10c <__alt_data_end+0xfffe790c>
   4d39c:	04000434 	movhi	r16,16
   4d3a0:	0027883a 	mov	r19,zero
   4d3a4:	843fffc4 	addi	r16,r16,-1
   4d3a8:	05bfffc4 	movi	r22,-1
   4d3ac:	0081ffc4 	movi	r2,2047
   4d3b0:	003f9606 	br	4d20c <__alt_data_end+0xfffe7a0c>
   4d3b4:	8023883a 	mov	r17,r16
   4d3b8:	b025883a 	mov	r18,r22
   4d3bc:	280f883a 	mov	r7,r5
   4d3c0:	003f8806 	br	4d1e4 <__alt_data_end+0xfffe79e4>
   4d3c4:	8023883a 	mov	r17,r16
   4d3c8:	b025883a 	mov	r18,r22
   4d3cc:	480d883a 	mov	r6,r9
   4d3d0:	280f883a 	mov	r7,r5
   4d3d4:	003f8306 	br	4d1e4 <__alt_data_end+0xfffe79e4>
   4d3d8:	b026d43a 	srli	r19,r22,16
   4d3dc:	902ed43a 	srli	r23,r18,16
   4d3e0:	b5bfffcc 	andi	r22,r22,65535
   4d3e4:	94bfffcc 	andi	r18,r18,65535
   4d3e8:	b00b883a 	mov	r5,r22
   4d3ec:	9009883a 	mov	r4,r18
   4d3f0:	d8c00515 	stw	r3,20(sp)
   4d3f4:	d9800715 	stw	r6,28(sp)
   4d3f8:	da000615 	stw	r8,24(sp)
   4d3fc:	00415200 	call	41520 <__mulsi3>
   4d400:	980b883a 	mov	r5,r19
   4d404:	9009883a 	mov	r4,r18
   4d408:	1029883a 	mov	r20,r2
   4d40c:	00415200 	call	41520 <__mulsi3>
   4d410:	b80b883a 	mov	r5,r23
   4d414:	9809883a 	mov	r4,r19
   4d418:	102b883a 	mov	r21,r2
   4d41c:	00415200 	call	41520 <__mulsi3>
   4d420:	b809883a 	mov	r4,r23
   4d424:	b00b883a 	mov	r5,r22
   4d428:	1039883a 	mov	fp,r2
   4d42c:	00415200 	call	41520 <__mulsi3>
   4d430:	a008d43a 	srli	r4,r20,16
   4d434:	1545883a 	add	r2,r2,r21
   4d438:	d8c00517 	ldw	r3,20(sp)
   4d43c:	2085883a 	add	r2,r4,r2
   4d440:	d9800717 	ldw	r6,28(sp)
   4d444:	da000617 	ldw	r8,24(sp)
   4d448:	1540022e 	bgeu	r2,r21,4d454 <__muldf3+0x3c4>
   4d44c:	01000074 	movhi	r4,1
   4d450:	e139883a 	add	fp,fp,r4
   4d454:	100e943a 	slli	r7,r2,16
   4d458:	1004d43a 	srli	r2,r2,16
   4d45c:	882ad43a 	srli	r21,r17,16
   4d460:	a53fffcc 	andi	r20,r20,65535
   4d464:	8c7fffcc 	andi	r17,r17,65535
   4d468:	3d29883a 	add	r20,r7,r20
   4d46c:	b00b883a 	mov	r5,r22
   4d470:	8809883a 	mov	r4,r17
   4d474:	d8c00515 	stw	r3,20(sp)
   4d478:	d9800715 	stw	r6,28(sp)
   4d47c:	da000615 	stw	r8,24(sp)
   4d480:	dd000115 	stw	r20,4(sp)
   4d484:	d8800015 	stw	r2,0(sp)
   4d488:	00415200 	call	41520 <__mulsi3>
   4d48c:	980b883a 	mov	r5,r19
   4d490:	8809883a 	mov	r4,r17
   4d494:	d8800215 	stw	r2,8(sp)
   4d498:	00415200 	call	41520 <__mulsi3>
   4d49c:	9809883a 	mov	r4,r19
   4d4a0:	a80b883a 	mov	r5,r21
   4d4a4:	1029883a 	mov	r20,r2
   4d4a8:	00415200 	call	41520 <__mulsi3>
   4d4ac:	b00b883a 	mov	r5,r22
   4d4b0:	a809883a 	mov	r4,r21
   4d4b4:	d8800415 	stw	r2,16(sp)
   4d4b8:	00415200 	call	41520 <__mulsi3>
   4d4bc:	d9c00217 	ldw	r7,8(sp)
   4d4c0:	1505883a 	add	r2,r2,r20
   4d4c4:	d8c00517 	ldw	r3,20(sp)
   4d4c8:	3826d43a 	srli	r19,r7,16
   4d4cc:	d9800717 	ldw	r6,28(sp)
   4d4d0:	da000617 	ldw	r8,24(sp)
   4d4d4:	9885883a 	add	r2,r19,r2
   4d4d8:	da400417 	ldw	r9,16(sp)
   4d4dc:	1500022e 	bgeu	r2,r20,4d4e8 <__muldf3+0x458>
   4d4e0:	01000074 	movhi	r4,1
   4d4e4:	4913883a 	add	r9,r9,r4
   4d4e8:	1028d43a 	srli	r20,r2,16
   4d4ec:	1004943a 	slli	r2,r2,16
   4d4f0:	802cd43a 	srli	r22,r16,16
   4d4f4:	843fffcc 	andi	r16,r16,65535
   4d4f8:	3cffffcc 	andi	r19,r7,65535
   4d4fc:	9009883a 	mov	r4,r18
   4d500:	800b883a 	mov	r5,r16
   4d504:	a269883a 	add	r20,r20,r9
   4d508:	d8c00515 	stw	r3,20(sp)
   4d50c:	d9800715 	stw	r6,28(sp)
   4d510:	da000615 	stw	r8,24(sp)
   4d514:	14e7883a 	add	r19,r2,r19
   4d518:	00415200 	call	41520 <__mulsi3>
   4d51c:	9009883a 	mov	r4,r18
   4d520:	b00b883a 	mov	r5,r22
   4d524:	d8800315 	stw	r2,12(sp)
   4d528:	00415200 	call	41520 <__mulsi3>
   4d52c:	b809883a 	mov	r4,r23
   4d530:	b00b883a 	mov	r5,r22
   4d534:	d8800215 	stw	r2,8(sp)
   4d538:	00415200 	call	41520 <__mulsi3>
   4d53c:	b80b883a 	mov	r5,r23
   4d540:	8009883a 	mov	r4,r16
   4d544:	d8800415 	stw	r2,16(sp)
   4d548:	00415200 	call	41520 <__mulsi3>
   4d54c:	da800317 	ldw	r10,12(sp)
   4d550:	d9c00217 	ldw	r7,8(sp)
   4d554:	d9000017 	ldw	r4,0(sp)
   4d558:	502ed43a 	srli	r23,r10,16
   4d55c:	11c5883a 	add	r2,r2,r7
   4d560:	24e5883a 	add	r18,r4,r19
   4d564:	b885883a 	add	r2,r23,r2
   4d568:	d8c00517 	ldw	r3,20(sp)
   4d56c:	d9800717 	ldw	r6,28(sp)
   4d570:	da000617 	ldw	r8,24(sp)
   4d574:	da400417 	ldw	r9,16(sp)
   4d578:	11c0022e 	bgeu	r2,r7,4d584 <__muldf3+0x4f4>
   4d57c:	01000074 	movhi	r4,1
   4d580:	4913883a 	add	r9,r9,r4
   4d584:	100ed43a 	srli	r7,r2,16
   4d588:	1004943a 	slli	r2,r2,16
   4d58c:	55ffffcc 	andi	r23,r10,65535
   4d590:	3a53883a 	add	r9,r7,r9
   4d594:	8809883a 	mov	r4,r17
   4d598:	800b883a 	mov	r5,r16
   4d59c:	d8c00515 	stw	r3,20(sp)
   4d5a0:	d9800715 	stw	r6,28(sp)
   4d5a4:	da000615 	stw	r8,24(sp)
   4d5a8:	da400415 	stw	r9,16(sp)
   4d5ac:	15ef883a 	add	r23,r2,r23
   4d5b0:	00415200 	call	41520 <__mulsi3>
   4d5b4:	8809883a 	mov	r4,r17
   4d5b8:	b00b883a 	mov	r5,r22
   4d5bc:	d8800215 	stw	r2,8(sp)
   4d5c0:	00415200 	call	41520 <__mulsi3>
   4d5c4:	b00b883a 	mov	r5,r22
   4d5c8:	a809883a 	mov	r4,r21
   4d5cc:	d8800315 	stw	r2,12(sp)
   4d5d0:	00415200 	call	41520 <__mulsi3>
   4d5d4:	8009883a 	mov	r4,r16
   4d5d8:	a80b883a 	mov	r5,r21
   4d5dc:	1023883a 	mov	r17,r2
   4d5e0:	00415200 	call	41520 <__mulsi3>
   4d5e4:	d9c00217 	ldw	r7,8(sp)
   4d5e8:	da800317 	ldw	r10,12(sp)
   4d5ec:	d8c00517 	ldw	r3,20(sp)
   4d5f0:	3808d43a 	srli	r4,r7,16
   4d5f4:	1285883a 	add	r2,r2,r10
   4d5f8:	d9800717 	ldw	r6,28(sp)
   4d5fc:	2085883a 	add	r2,r4,r2
   4d600:	da000617 	ldw	r8,24(sp)
   4d604:	da400417 	ldw	r9,16(sp)
   4d608:	1280022e 	bgeu	r2,r10,4d614 <__muldf3+0x584>
   4d60c:	01000074 	movhi	r4,1
   4d610:	8923883a 	add	r17,r17,r4
   4d614:	1008943a 	slli	r4,r2,16
   4d618:	39ffffcc 	andi	r7,r7,65535
   4d61c:	e4b9883a 	add	fp,fp,r18
   4d620:	21cf883a 	add	r7,r4,r7
   4d624:	e4e7803a 	cmpltu	r19,fp,r19
   4d628:	3d0f883a 	add	r7,r7,r20
   4d62c:	bf39883a 	add	fp,r23,fp
   4d630:	99c9883a 	add	r4,r19,r7
   4d634:	e5ef803a 	cmpltu	r23,fp,r23
   4d638:	490b883a 	add	r5,r9,r4
   4d63c:	1004d43a 	srli	r2,r2,16
   4d640:	b965883a 	add	r18,r23,r5
   4d644:	24c9803a 	cmpltu	r4,r4,r19
   4d648:	3d29803a 	cmpltu	r20,r7,r20
   4d64c:	a128b03a 	or	r20,r20,r4
   4d650:	95ef803a 	cmpltu	r23,r18,r23
   4d654:	2a53803a 	cmpltu	r9,r5,r9
   4d658:	a0a9883a 	add	r20,r20,r2
   4d65c:	4deeb03a 	or	r23,r9,r23
   4d660:	a5ef883a 	add	r23,r20,r23
   4d664:	bc63883a 	add	r17,r23,r17
   4d668:	e004927a 	slli	r2,fp,9
   4d66c:	d9000117 	ldw	r4,4(sp)
   4d670:	882e927a 	slli	r23,r17,9
   4d674:	9022d5fa 	srli	r17,r18,23
   4d678:	e038d5fa 	srli	fp,fp,23
   4d67c:	1104b03a 	or	r2,r2,r4
   4d680:	9024927a 	slli	r18,r18,9
   4d684:	1004c03a 	cmpne	r2,r2,zero
   4d688:	bc62b03a 	or	r17,r23,r17
   4d68c:	1738b03a 	or	fp,r2,fp
   4d690:	8880402c 	andhi	r2,r17,256
   4d694:	e4a4b03a 	or	r18,fp,r18
   4d698:	10000726 	beq	r2,zero,4d6b8 <__muldf3+0x628>
   4d69c:	9006d07a 	srli	r3,r18,1
   4d6a0:	880497fa 	slli	r2,r17,31
   4d6a4:	9480004c 	andi	r18,r18,1
   4d6a8:	8822d07a 	srli	r17,r17,1
   4d6ac:	1ca4b03a 	or	r18,r3,r18
   4d6b0:	14a4b03a 	or	r18,r2,r18
   4d6b4:	4007883a 	mov	r3,r8
   4d6b8:	1880ffc4 	addi	r2,r3,1023
   4d6bc:	0080460e 	bge	zero,r2,4d7d8 <__muldf3+0x748>
   4d6c0:	910001cc 	andi	r4,r18,7
   4d6c4:	20000726 	beq	r4,zero,4d6e4 <__muldf3+0x654>
   4d6c8:	910003cc 	andi	r4,r18,15
   4d6cc:	01400104 	movi	r5,4
   4d6d0:	21400426 	beq	r4,r5,4d6e4 <__muldf3+0x654>
   4d6d4:	9149883a 	add	r4,r18,r5
   4d6d8:	24a5803a 	cmpltu	r18,r4,r18
   4d6dc:	8ca3883a 	add	r17,r17,r18
   4d6e0:	2025883a 	mov	r18,r4
   4d6e4:	8900402c 	andhi	r4,r17,256
   4d6e8:	20000426 	beq	r4,zero,4d6fc <__muldf3+0x66c>
   4d6ec:	18810004 	addi	r2,r3,1024
   4d6f0:	00ffc034 	movhi	r3,65280
   4d6f4:	18ffffc4 	addi	r3,r3,-1
   4d6f8:	88e2703a 	and	r17,r17,r3
   4d6fc:	00c1ff84 	movi	r3,2046
   4d700:	18bf1316 	blt	r3,r2,4d350 <__alt_data_end+0xfffe7b50>
   4d704:	882c977a 	slli	r22,r17,29
   4d708:	9024d0fa 	srli	r18,r18,3
   4d70c:	8822927a 	slli	r17,r17,9
   4d710:	1081ffcc 	andi	r2,r2,2047
   4d714:	b4acb03a 	or	r22,r22,r18
   4d718:	8820d33a 	srli	r16,r17,12
   4d71c:	3027883a 	mov	r19,r6
   4d720:	003eba06 	br	4d20c <__alt_data_end+0xfffe7a0c>
   4d724:	8080022c 	andhi	r2,r16,8
   4d728:	10000926 	beq	r2,zero,4d750 <__muldf3+0x6c0>
   4d72c:	8880022c 	andhi	r2,r17,8
   4d730:	1000071e 	bne	r2,zero,4d750 <__muldf3+0x6c0>
   4d734:	00800434 	movhi	r2,16
   4d738:	8c000234 	orhi	r16,r17,8
   4d73c:	10bfffc4 	addi	r2,r2,-1
   4d740:	e027883a 	mov	r19,fp
   4d744:	80a0703a 	and	r16,r16,r2
   4d748:	902d883a 	mov	r22,r18
   4d74c:	003f1706 	br	4d3ac <__alt_data_end+0xfffe7bac>
   4d750:	00800434 	movhi	r2,16
   4d754:	84000234 	orhi	r16,r16,8
   4d758:	10bfffc4 	addi	r2,r2,-1
   4d75c:	80a0703a 	and	r16,r16,r2
   4d760:	003f1206 	br	4d3ac <__alt_data_end+0xfffe7bac>
   4d764:	147ff604 	addi	r17,r2,-40
   4d768:	3462983a 	sll	r17,r6,r17
   4d76c:	0025883a 	mov	r18,zero
   4d770:	003ef306 	br	4d340 <__alt_data_end+0xfffe7b40>
   4d774:	3009883a 	mov	r4,r6
   4d778:	d9400215 	stw	r5,8(sp)
   4d77c:	d9800715 	stw	r6,28(sp)
   4d780:	da400415 	stw	r9,16(sp)
   4d784:	da800315 	stw	r10,12(sp)
   4d788:	00414bc0 	call	414bc <__clzsi2>
   4d78c:	10800804 	addi	r2,r2,32
   4d790:	da800317 	ldw	r10,12(sp)
   4d794:	da400417 	ldw	r9,16(sp)
   4d798:	d9800717 	ldw	r6,28(sp)
   4d79c:	d9400217 	ldw	r5,8(sp)
   4d7a0:	003edd06 	br	4d318 <__alt_data_end+0xfffe7b18>
   4d7a4:	143ff604 	addi	r16,r2,-40
   4d7a8:	ac20983a 	sll	r16,r21,r16
   4d7ac:	002d883a 	mov	r22,zero
   4d7b0:	003ec106 	br	4d2b8 <__alt_data_end+0xfffe7ab8>
   4d7b4:	d9800715 	stw	r6,28(sp)
   4d7b8:	d9c00215 	stw	r7,8(sp)
   4d7bc:	da400415 	stw	r9,16(sp)
   4d7c0:	00414bc0 	call	414bc <__clzsi2>
   4d7c4:	10800804 	addi	r2,r2,32
   4d7c8:	da400417 	ldw	r9,16(sp)
   4d7cc:	d9c00217 	ldw	r7,8(sp)
   4d7d0:	d9800717 	ldw	r6,28(sp)
   4d7d4:	003eae06 	br	4d290 <__alt_data_end+0xfffe7a90>
   4d7d8:	00c00044 	movi	r3,1
   4d7dc:	1887c83a 	sub	r3,r3,r2
   4d7e0:	01000e04 	movi	r4,56
   4d7e4:	20fe8516 	blt	r4,r3,4d1fc <__alt_data_end+0xfffe79fc>
   4d7e8:	010007c4 	movi	r4,31
   4d7ec:	20c01b16 	blt	r4,r3,4d85c <__muldf3+0x7cc>
   4d7f0:	00800804 	movi	r2,32
   4d7f4:	10c5c83a 	sub	r2,r2,r3
   4d7f8:	888a983a 	sll	r5,r17,r2
   4d7fc:	90c8d83a 	srl	r4,r18,r3
   4d800:	9084983a 	sll	r2,r18,r2
   4d804:	88e2d83a 	srl	r17,r17,r3
   4d808:	2906b03a 	or	r3,r5,r4
   4d80c:	1004c03a 	cmpne	r2,r2,zero
   4d810:	1886b03a 	or	r3,r3,r2
   4d814:	188001cc 	andi	r2,r3,7
   4d818:	10000726 	beq	r2,zero,4d838 <__muldf3+0x7a8>
   4d81c:	188003cc 	andi	r2,r3,15
   4d820:	01000104 	movi	r4,4
   4d824:	11000426 	beq	r2,r4,4d838 <__muldf3+0x7a8>
   4d828:	1805883a 	mov	r2,r3
   4d82c:	10c00104 	addi	r3,r2,4
   4d830:	1885803a 	cmpltu	r2,r3,r2
   4d834:	88a3883a 	add	r17,r17,r2
   4d838:	8880202c 	andhi	r2,r17,128
   4d83c:	10001c26 	beq	r2,zero,4d8b0 <__muldf3+0x820>
   4d840:	3027883a 	mov	r19,r6
   4d844:	00800044 	movi	r2,1
   4d848:	0021883a 	mov	r16,zero
   4d84c:	002d883a 	mov	r22,zero
   4d850:	003e6e06 	br	4d20c <__alt_data_end+0xfffe7a0c>
   4d854:	4007883a 	mov	r3,r8
   4d858:	003f9706 	br	4d6b8 <__alt_data_end+0xfffe7eb8>
   4d85c:	017ff844 	movi	r5,-31
   4d860:	2885c83a 	sub	r2,r5,r2
   4d864:	888ad83a 	srl	r5,r17,r2
   4d868:	00800804 	movi	r2,32
   4d86c:	18801a26 	beq	r3,r2,4d8d8 <__muldf3+0x848>
   4d870:	01001004 	movi	r4,64
   4d874:	20c7c83a 	sub	r3,r4,r3
   4d878:	88e2983a 	sll	r17,r17,r3
   4d87c:	8ca4b03a 	or	r18,r17,r18
   4d880:	9004c03a 	cmpne	r2,r18,zero
   4d884:	2884b03a 	or	r2,r5,r2
   4d888:	144001cc 	andi	r17,r2,7
   4d88c:	88000d1e 	bne	r17,zero,4d8c4 <__muldf3+0x834>
   4d890:	0021883a 	mov	r16,zero
   4d894:	102cd0fa 	srli	r22,r2,3
   4d898:	3027883a 	mov	r19,r6
   4d89c:	0005883a 	mov	r2,zero
   4d8a0:	b46cb03a 	or	r22,r22,r17
   4d8a4:	003e5906 	br	4d20c <__alt_data_end+0xfffe7a0c>
   4d8a8:	1007883a 	mov	r3,r2
   4d8ac:	0023883a 	mov	r17,zero
   4d8b0:	8820927a 	slli	r16,r17,9
   4d8b4:	1805883a 	mov	r2,r3
   4d8b8:	8822977a 	slli	r17,r17,29
   4d8bc:	8020d33a 	srli	r16,r16,12
   4d8c0:	003ff406 	br	4d894 <__alt_data_end+0xfffe8094>
   4d8c4:	10c003cc 	andi	r3,r2,15
   4d8c8:	01000104 	movi	r4,4
   4d8cc:	193ff626 	beq	r3,r4,4d8a8 <__alt_data_end+0xfffe80a8>
   4d8d0:	0023883a 	mov	r17,zero
   4d8d4:	003fd506 	br	4d82c <__alt_data_end+0xfffe802c>
   4d8d8:	0023883a 	mov	r17,zero
   4d8dc:	003fe706 	br	4d87c <__alt_data_end+0xfffe807c>
   4d8e0:	00800434 	movhi	r2,16
   4d8e4:	8c000234 	orhi	r16,r17,8
   4d8e8:	10bfffc4 	addi	r2,r2,-1
   4d8ec:	3027883a 	mov	r19,r6
   4d8f0:	80a0703a 	and	r16,r16,r2
   4d8f4:	902d883a 	mov	r22,r18
   4d8f8:	003eac06 	br	4d3ac <__alt_data_end+0xfffe7bac>

0004d8fc <__subdf3>:
   4d8fc:	02000434 	movhi	r8,16
   4d900:	423fffc4 	addi	r8,r8,-1
   4d904:	defffb04 	addi	sp,sp,-20
   4d908:	2a14703a 	and	r10,r5,r8
   4d90c:	3812d53a 	srli	r9,r7,20
   4d910:	3a10703a 	and	r8,r7,r8
   4d914:	2006d77a 	srli	r3,r4,29
   4d918:	3004d77a 	srli	r2,r6,29
   4d91c:	dc000015 	stw	r16,0(sp)
   4d920:	501490fa 	slli	r10,r10,3
   4d924:	2820d53a 	srli	r16,r5,20
   4d928:	401090fa 	slli	r8,r8,3
   4d92c:	dc800215 	stw	r18,8(sp)
   4d930:	dc400115 	stw	r17,4(sp)
   4d934:	dfc00415 	stw	ra,16(sp)
   4d938:	202290fa 	slli	r17,r4,3
   4d93c:	dcc00315 	stw	r19,12(sp)
   4d940:	4a41ffcc 	andi	r9,r9,2047
   4d944:	0101ffc4 	movi	r4,2047
   4d948:	2824d7fa 	srli	r18,r5,31
   4d94c:	8401ffcc 	andi	r16,r16,2047
   4d950:	50c6b03a 	or	r3,r10,r3
   4d954:	380ed7fa 	srli	r7,r7,31
   4d958:	408ab03a 	or	r5,r8,r2
   4d95c:	300c90fa 	slli	r6,r6,3
   4d960:	49009626 	beq	r9,r4,4dbbc <__subdf3+0x2c0>
   4d964:	39c0005c 	xori	r7,r7,1
   4d968:	8245c83a 	sub	r2,r16,r9
   4d96c:	3c807426 	beq	r7,r18,4db40 <__subdf3+0x244>
   4d970:	0080af0e 	bge	zero,r2,4dc30 <__subdf3+0x334>
   4d974:	48002a1e 	bne	r9,zero,4da20 <__subdf3+0x124>
   4d978:	2988b03a 	or	r4,r5,r6
   4d97c:	20009a1e 	bne	r4,zero,4dbe8 <__subdf3+0x2ec>
   4d980:	888001cc 	andi	r2,r17,7
   4d984:	10000726 	beq	r2,zero,4d9a4 <__subdf3+0xa8>
   4d988:	888003cc 	andi	r2,r17,15
   4d98c:	01000104 	movi	r4,4
   4d990:	11000426 	beq	r2,r4,4d9a4 <__subdf3+0xa8>
   4d994:	890b883a 	add	r5,r17,r4
   4d998:	2c63803a 	cmpltu	r17,r5,r17
   4d99c:	1c47883a 	add	r3,r3,r17
   4d9a0:	2823883a 	mov	r17,r5
   4d9a4:	1880202c 	andhi	r2,r3,128
   4d9a8:	10005926 	beq	r2,zero,4db10 <__subdf3+0x214>
   4d9ac:	84000044 	addi	r16,r16,1
   4d9b0:	0081ffc4 	movi	r2,2047
   4d9b4:	8080be26 	beq	r16,r2,4dcb0 <__subdf3+0x3b4>
   4d9b8:	017fe034 	movhi	r5,65408
   4d9bc:	297fffc4 	addi	r5,r5,-1
   4d9c0:	1946703a 	and	r3,r3,r5
   4d9c4:	1804977a 	slli	r2,r3,29
   4d9c8:	1806927a 	slli	r3,r3,9
   4d9cc:	8822d0fa 	srli	r17,r17,3
   4d9d0:	8401ffcc 	andi	r16,r16,2047
   4d9d4:	180ad33a 	srli	r5,r3,12
   4d9d8:	9100004c 	andi	r4,r18,1
   4d9dc:	1444b03a 	or	r2,r2,r17
   4d9e0:	80c1ffcc 	andi	r3,r16,2047
   4d9e4:	1820953a 	slli	r16,r3,20
   4d9e8:	20c03fcc 	andi	r3,r4,255
   4d9ec:	180897fa 	slli	r4,r3,31
   4d9f0:	00c00434 	movhi	r3,16
   4d9f4:	18ffffc4 	addi	r3,r3,-1
   4d9f8:	28c6703a 	and	r3,r5,r3
   4d9fc:	1c06b03a 	or	r3,r3,r16
   4da00:	1906b03a 	or	r3,r3,r4
   4da04:	dfc00417 	ldw	ra,16(sp)
   4da08:	dcc00317 	ldw	r19,12(sp)
   4da0c:	dc800217 	ldw	r18,8(sp)
   4da10:	dc400117 	ldw	r17,4(sp)
   4da14:	dc000017 	ldw	r16,0(sp)
   4da18:	dec00504 	addi	sp,sp,20
   4da1c:	f800283a 	ret
   4da20:	0101ffc4 	movi	r4,2047
   4da24:	813fd626 	beq	r16,r4,4d980 <__alt_data_end+0xfffe8180>
   4da28:	29402034 	orhi	r5,r5,128
   4da2c:	01000e04 	movi	r4,56
   4da30:	2080a316 	blt	r4,r2,4dcc0 <__subdf3+0x3c4>
   4da34:	010007c4 	movi	r4,31
   4da38:	2080c616 	blt	r4,r2,4dd54 <__subdf3+0x458>
   4da3c:	01000804 	movi	r4,32
   4da40:	2089c83a 	sub	r4,r4,r2
   4da44:	2910983a 	sll	r8,r5,r4
   4da48:	308ed83a 	srl	r7,r6,r2
   4da4c:	3108983a 	sll	r4,r6,r4
   4da50:	2884d83a 	srl	r2,r5,r2
   4da54:	41ccb03a 	or	r6,r8,r7
   4da58:	2008c03a 	cmpne	r4,r4,zero
   4da5c:	310cb03a 	or	r6,r6,r4
   4da60:	898dc83a 	sub	r6,r17,r6
   4da64:	89a3803a 	cmpltu	r17,r17,r6
   4da68:	1887c83a 	sub	r3,r3,r2
   4da6c:	1c47c83a 	sub	r3,r3,r17
   4da70:	3023883a 	mov	r17,r6
   4da74:	1880202c 	andhi	r2,r3,128
   4da78:	10002326 	beq	r2,zero,4db08 <__subdf3+0x20c>
   4da7c:	04c02034 	movhi	r19,128
   4da80:	9cffffc4 	addi	r19,r19,-1
   4da84:	1ce6703a 	and	r19,r3,r19
   4da88:	98007a26 	beq	r19,zero,4dc74 <__subdf3+0x378>
   4da8c:	9809883a 	mov	r4,r19
   4da90:	00414bc0 	call	414bc <__clzsi2>
   4da94:	113ffe04 	addi	r4,r2,-8
   4da98:	00c007c4 	movi	r3,31
   4da9c:	19007b16 	blt	r3,r4,4dc8c <__subdf3+0x390>
   4daa0:	00800804 	movi	r2,32
   4daa4:	1105c83a 	sub	r2,r2,r4
   4daa8:	8884d83a 	srl	r2,r17,r2
   4daac:	9906983a 	sll	r3,r19,r4
   4dab0:	8922983a 	sll	r17,r17,r4
   4dab4:	10c4b03a 	or	r2,r2,r3
   4dab8:	24007816 	blt	r4,r16,4dc9c <__subdf3+0x3a0>
   4dabc:	2421c83a 	sub	r16,r4,r16
   4dac0:	80c00044 	addi	r3,r16,1
   4dac4:	010007c4 	movi	r4,31
   4dac8:	20c09516 	blt	r4,r3,4dd20 <__subdf3+0x424>
   4dacc:	01400804 	movi	r5,32
   4dad0:	28cbc83a 	sub	r5,r5,r3
   4dad4:	88c8d83a 	srl	r4,r17,r3
   4dad8:	8962983a 	sll	r17,r17,r5
   4dadc:	114a983a 	sll	r5,r2,r5
   4dae0:	10c6d83a 	srl	r3,r2,r3
   4dae4:	8804c03a 	cmpne	r2,r17,zero
   4dae8:	290ab03a 	or	r5,r5,r4
   4daec:	28a2b03a 	or	r17,r5,r2
   4daf0:	0021883a 	mov	r16,zero
   4daf4:	003fa206 	br	4d980 <__alt_data_end+0xfffe8180>
   4daf8:	2090b03a 	or	r8,r4,r2
   4dafc:	40018e26 	beq	r8,zero,4e138 <__subdf3+0x83c>
   4db00:	1007883a 	mov	r3,r2
   4db04:	2023883a 	mov	r17,r4
   4db08:	888001cc 	andi	r2,r17,7
   4db0c:	103f9e1e 	bne	r2,zero,4d988 <__alt_data_end+0xfffe8188>
   4db10:	1804977a 	slli	r2,r3,29
   4db14:	8822d0fa 	srli	r17,r17,3
   4db18:	1810d0fa 	srli	r8,r3,3
   4db1c:	9100004c 	andi	r4,r18,1
   4db20:	1444b03a 	or	r2,r2,r17
   4db24:	00c1ffc4 	movi	r3,2047
   4db28:	80c02826 	beq	r16,r3,4dbcc <__subdf3+0x2d0>
   4db2c:	01400434 	movhi	r5,16
   4db30:	297fffc4 	addi	r5,r5,-1
   4db34:	80e0703a 	and	r16,r16,r3
   4db38:	414a703a 	and	r5,r8,r5
   4db3c:	003fa806 	br	4d9e0 <__alt_data_end+0xfffe81e0>
   4db40:	0080630e 	bge	zero,r2,4dcd0 <__subdf3+0x3d4>
   4db44:	48003026 	beq	r9,zero,4dc08 <__subdf3+0x30c>
   4db48:	0101ffc4 	movi	r4,2047
   4db4c:	813f8c26 	beq	r16,r4,4d980 <__alt_data_end+0xfffe8180>
   4db50:	29402034 	orhi	r5,r5,128
   4db54:	01000e04 	movi	r4,56
   4db58:	2080a90e 	bge	r4,r2,4de00 <__subdf3+0x504>
   4db5c:	298cb03a 	or	r6,r5,r6
   4db60:	3012c03a 	cmpne	r9,r6,zero
   4db64:	0005883a 	mov	r2,zero
   4db68:	4c53883a 	add	r9,r9,r17
   4db6c:	4c63803a 	cmpltu	r17,r9,r17
   4db70:	10c7883a 	add	r3,r2,r3
   4db74:	88c7883a 	add	r3,r17,r3
   4db78:	4823883a 	mov	r17,r9
   4db7c:	1880202c 	andhi	r2,r3,128
   4db80:	1000d026 	beq	r2,zero,4dec4 <__subdf3+0x5c8>
   4db84:	84000044 	addi	r16,r16,1
   4db88:	0081ffc4 	movi	r2,2047
   4db8c:	8080fe26 	beq	r16,r2,4df88 <__subdf3+0x68c>
   4db90:	00bfe034 	movhi	r2,65408
   4db94:	10bfffc4 	addi	r2,r2,-1
   4db98:	1886703a 	and	r3,r3,r2
   4db9c:	880ad07a 	srli	r5,r17,1
   4dba0:	180497fa 	slli	r2,r3,31
   4dba4:	8900004c 	andi	r4,r17,1
   4dba8:	2922b03a 	or	r17,r5,r4
   4dbac:	1806d07a 	srli	r3,r3,1
   4dbb0:	1462b03a 	or	r17,r2,r17
   4dbb4:	3825883a 	mov	r18,r7
   4dbb8:	003f7106 	br	4d980 <__alt_data_end+0xfffe8180>
   4dbbc:	2984b03a 	or	r2,r5,r6
   4dbc0:	103f6826 	beq	r2,zero,4d964 <__alt_data_end+0xfffe8164>
   4dbc4:	39c03fcc 	andi	r7,r7,255
   4dbc8:	003f6706 	br	4d968 <__alt_data_end+0xfffe8168>
   4dbcc:	4086b03a 	or	r3,r8,r2
   4dbd0:	18015226 	beq	r3,zero,4e11c <__subdf3+0x820>
   4dbd4:	00c00434 	movhi	r3,16
   4dbd8:	41400234 	orhi	r5,r8,8
   4dbdc:	18ffffc4 	addi	r3,r3,-1
   4dbe0:	28ca703a 	and	r5,r5,r3
   4dbe4:	003f7e06 	br	4d9e0 <__alt_data_end+0xfffe81e0>
   4dbe8:	10bfffc4 	addi	r2,r2,-1
   4dbec:	1000491e 	bne	r2,zero,4dd14 <__subdf3+0x418>
   4dbf0:	898fc83a 	sub	r7,r17,r6
   4dbf4:	89e3803a 	cmpltu	r17,r17,r7
   4dbf8:	1947c83a 	sub	r3,r3,r5
   4dbfc:	1c47c83a 	sub	r3,r3,r17
   4dc00:	3823883a 	mov	r17,r7
   4dc04:	003f9b06 	br	4da74 <__alt_data_end+0xfffe8274>
   4dc08:	2988b03a 	or	r4,r5,r6
   4dc0c:	203f5c26 	beq	r4,zero,4d980 <__alt_data_end+0xfffe8180>
   4dc10:	10bfffc4 	addi	r2,r2,-1
   4dc14:	1000931e 	bne	r2,zero,4de64 <__subdf3+0x568>
   4dc18:	898d883a 	add	r6,r17,r6
   4dc1c:	3463803a 	cmpltu	r17,r6,r17
   4dc20:	1947883a 	add	r3,r3,r5
   4dc24:	88c7883a 	add	r3,r17,r3
   4dc28:	3023883a 	mov	r17,r6
   4dc2c:	003fd306 	br	4db7c <__alt_data_end+0xfffe837c>
   4dc30:	1000541e 	bne	r2,zero,4dd84 <__subdf3+0x488>
   4dc34:	80800044 	addi	r2,r16,1
   4dc38:	1081ffcc 	andi	r2,r2,2047
   4dc3c:	01000044 	movi	r4,1
   4dc40:	2080a20e 	bge	r4,r2,4decc <__subdf3+0x5d0>
   4dc44:	8989c83a 	sub	r4,r17,r6
   4dc48:	8905803a 	cmpltu	r2,r17,r4
   4dc4c:	1967c83a 	sub	r19,r3,r5
   4dc50:	98a7c83a 	sub	r19,r19,r2
   4dc54:	9880202c 	andhi	r2,r19,128
   4dc58:	10006326 	beq	r2,zero,4dde8 <__subdf3+0x4ec>
   4dc5c:	3463c83a 	sub	r17,r6,r17
   4dc60:	28c7c83a 	sub	r3,r5,r3
   4dc64:	344d803a 	cmpltu	r6,r6,r17
   4dc68:	19a7c83a 	sub	r19,r3,r6
   4dc6c:	3825883a 	mov	r18,r7
   4dc70:	983f861e 	bne	r19,zero,4da8c <__alt_data_end+0xfffe828c>
   4dc74:	8809883a 	mov	r4,r17
   4dc78:	00414bc0 	call	414bc <__clzsi2>
   4dc7c:	10800804 	addi	r2,r2,32
   4dc80:	113ffe04 	addi	r4,r2,-8
   4dc84:	00c007c4 	movi	r3,31
   4dc88:	193f850e 	bge	r3,r4,4daa0 <__alt_data_end+0xfffe82a0>
   4dc8c:	10bff604 	addi	r2,r2,-40
   4dc90:	8884983a 	sll	r2,r17,r2
   4dc94:	0023883a 	mov	r17,zero
   4dc98:	243f880e 	bge	r4,r16,4dabc <__alt_data_end+0xfffe82bc>
   4dc9c:	00ffe034 	movhi	r3,65408
   4dca0:	18ffffc4 	addi	r3,r3,-1
   4dca4:	8121c83a 	sub	r16,r16,r4
   4dca8:	10c6703a 	and	r3,r2,r3
   4dcac:	003f3406 	br	4d980 <__alt_data_end+0xfffe8180>
   4dcb0:	9100004c 	andi	r4,r18,1
   4dcb4:	000b883a 	mov	r5,zero
   4dcb8:	0005883a 	mov	r2,zero
   4dcbc:	003f4806 	br	4d9e0 <__alt_data_end+0xfffe81e0>
   4dcc0:	298cb03a 	or	r6,r5,r6
   4dcc4:	300cc03a 	cmpne	r6,r6,zero
   4dcc8:	0005883a 	mov	r2,zero
   4dccc:	003f6406 	br	4da60 <__alt_data_end+0xfffe8260>
   4dcd0:	10009a1e 	bne	r2,zero,4df3c <__subdf3+0x640>
   4dcd4:	82400044 	addi	r9,r16,1
   4dcd8:	4881ffcc 	andi	r2,r9,2047
   4dcdc:	02800044 	movi	r10,1
   4dce0:	5080670e 	bge	r10,r2,4de80 <__subdf3+0x584>
   4dce4:	0081ffc4 	movi	r2,2047
   4dce8:	4880af26 	beq	r9,r2,4dfa8 <__subdf3+0x6ac>
   4dcec:	898d883a 	add	r6,r17,r6
   4dcf0:	1945883a 	add	r2,r3,r5
   4dcf4:	3447803a 	cmpltu	r3,r6,r17
   4dcf8:	1887883a 	add	r3,r3,r2
   4dcfc:	182297fa 	slli	r17,r3,31
   4dd00:	300cd07a 	srli	r6,r6,1
   4dd04:	1806d07a 	srli	r3,r3,1
   4dd08:	4821883a 	mov	r16,r9
   4dd0c:	89a2b03a 	or	r17,r17,r6
   4dd10:	003f1b06 	br	4d980 <__alt_data_end+0xfffe8180>
   4dd14:	0101ffc4 	movi	r4,2047
   4dd18:	813f441e 	bne	r16,r4,4da2c <__alt_data_end+0xfffe822c>
   4dd1c:	003f1806 	br	4d980 <__alt_data_end+0xfffe8180>
   4dd20:	843ff844 	addi	r16,r16,-31
   4dd24:	01400804 	movi	r5,32
   4dd28:	1408d83a 	srl	r4,r2,r16
   4dd2c:	19405026 	beq	r3,r5,4de70 <__subdf3+0x574>
   4dd30:	01401004 	movi	r5,64
   4dd34:	28c7c83a 	sub	r3,r5,r3
   4dd38:	10c4983a 	sll	r2,r2,r3
   4dd3c:	88a2b03a 	or	r17,r17,r2
   4dd40:	8822c03a 	cmpne	r17,r17,zero
   4dd44:	2462b03a 	or	r17,r4,r17
   4dd48:	0007883a 	mov	r3,zero
   4dd4c:	0021883a 	mov	r16,zero
   4dd50:	003f6d06 	br	4db08 <__alt_data_end+0xfffe8308>
   4dd54:	11fff804 	addi	r7,r2,-32
   4dd58:	01000804 	movi	r4,32
   4dd5c:	29ced83a 	srl	r7,r5,r7
   4dd60:	11004526 	beq	r2,r4,4de78 <__subdf3+0x57c>
   4dd64:	01001004 	movi	r4,64
   4dd68:	2089c83a 	sub	r4,r4,r2
   4dd6c:	2904983a 	sll	r2,r5,r4
   4dd70:	118cb03a 	or	r6,r2,r6
   4dd74:	300cc03a 	cmpne	r6,r6,zero
   4dd78:	398cb03a 	or	r6,r7,r6
   4dd7c:	0005883a 	mov	r2,zero
   4dd80:	003f3706 	br	4da60 <__alt_data_end+0xfffe8260>
   4dd84:	80002a26 	beq	r16,zero,4de30 <__subdf3+0x534>
   4dd88:	0101ffc4 	movi	r4,2047
   4dd8c:	49006626 	beq	r9,r4,4df28 <__subdf3+0x62c>
   4dd90:	0085c83a 	sub	r2,zero,r2
   4dd94:	18c02034 	orhi	r3,r3,128
   4dd98:	01000e04 	movi	r4,56
   4dd9c:	20807e16 	blt	r4,r2,4df98 <__subdf3+0x69c>
   4dda0:	010007c4 	movi	r4,31
   4dda4:	2080e716 	blt	r4,r2,4e144 <__subdf3+0x848>
   4dda8:	01000804 	movi	r4,32
   4ddac:	2089c83a 	sub	r4,r4,r2
   4ddb0:	1914983a 	sll	r10,r3,r4
   4ddb4:	8890d83a 	srl	r8,r17,r2
   4ddb8:	8908983a 	sll	r4,r17,r4
   4ddbc:	1884d83a 	srl	r2,r3,r2
   4ddc0:	5222b03a 	or	r17,r10,r8
   4ddc4:	2006c03a 	cmpne	r3,r4,zero
   4ddc8:	88e2b03a 	or	r17,r17,r3
   4ddcc:	3463c83a 	sub	r17,r6,r17
   4ddd0:	2885c83a 	sub	r2,r5,r2
   4ddd4:	344d803a 	cmpltu	r6,r6,r17
   4ddd8:	1187c83a 	sub	r3,r2,r6
   4dddc:	4821883a 	mov	r16,r9
   4dde0:	3825883a 	mov	r18,r7
   4dde4:	003f2306 	br	4da74 <__alt_data_end+0xfffe8274>
   4dde8:	24d0b03a 	or	r8,r4,r19
   4ddec:	40001b1e 	bne	r8,zero,4de5c <__subdf3+0x560>
   4ddf0:	0005883a 	mov	r2,zero
   4ddf4:	0009883a 	mov	r4,zero
   4ddf8:	0021883a 	mov	r16,zero
   4ddfc:	003f4906 	br	4db24 <__alt_data_end+0xfffe8324>
   4de00:	010007c4 	movi	r4,31
   4de04:	20803a16 	blt	r4,r2,4def0 <__subdf3+0x5f4>
   4de08:	01000804 	movi	r4,32
   4de0c:	2089c83a 	sub	r4,r4,r2
   4de10:	2912983a 	sll	r9,r5,r4
   4de14:	3090d83a 	srl	r8,r6,r2
   4de18:	3108983a 	sll	r4,r6,r4
   4de1c:	2884d83a 	srl	r2,r5,r2
   4de20:	4a12b03a 	or	r9,r9,r8
   4de24:	2008c03a 	cmpne	r4,r4,zero
   4de28:	4912b03a 	or	r9,r9,r4
   4de2c:	003f4e06 	br	4db68 <__alt_data_end+0xfffe8368>
   4de30:	1c48b03a 	or	r4,r3,r17
   4de34:	20003c26 	beq	r4,zero,4df28 <__subdf3+0x62c>
   4de38:	0084303a 	nor	r2,zero,r2
   4de3c:	1000381e 	bne	r2,zero,4df20 <__subdf3+0x624>
   4de40:	3463c83a 	sub	r17,r6,r17
   4de44:	28c5c83a 	sub	r2,r5,r3
   4de48:	344d803a 	cmpltu	r6,r6,r17
   4de4c:	1187c83a 	sub	r3,r2,r6
   4de50:	4821883a 	mov	r16,r9
   4de54:	3825883a 	mov	r18,r7
   4de58:	003f0606 	br	4da74 <__alt_data_end+0xfffe8274>
   4de5c:	2023883a 	mov	r17,r4
   4de60:	003f0906 	br	4da88 <__alt_data_end+0xfffe8288>
   4de64:	0101ffc4 	movi	r4,2047
   4de68:	813f3a1e 	bne	r16,r4,4db54 <__alt_data_end+0xfffe8354>
   4de6c:	003ec406 	br	4d980 <__alt_data_end+0xfffe8180>
   4de70:	0005883a 	mov	r2,zero
   4de74:	003fb106 	br	4dd3c <__alt_data_end+0xfffe853c>
   4de78:	0005883a 	mov	r2,zero
   4de7c:	003fbc06 	br	4dd70 <__alt_data_end+0xfffe8570>
   4de80:	1c44b03a 	or	r2,r3,r17
   4de84:	80008e1e 	bne	r16,zero,4e0c0 <__subdf3+0x7c4>
   4de88:	1000c826 	beq	r2,zero,4e1ac <__subdf3+0x8b0>
   4de8c:	2984b03a 	or	r2,r5,r6
   4de90:	103ebb26 	beq	r2,zero,4d980 <__alt_data_end+0xfffe8180>
   4de94:	8989883a 	add	r4,r17,r6
   4de98:	1945883a 	add	r2,r3,r5
   4de9c:	2447803a 	cmpltu	r3,r4,r17
   4dea0:	1887883a 	add	r3,r3,r2
   4dea4:	1880202c 	andhi	r2,r3,128
   4dea8:	2023883a 	mov	r17,r4
   4deac:	103f1626 	beq	r2,zero,4db08 <__alt_data_end+0xfffe8308>
   4deb0:	00bfe034 	movhi	r2,65408
   4deb4:	10bfffc4 	addi	r2,r2,-1
   4deb8:	5021883a 	mov	r16,r10
   4debc:	1886703a 	and	r3,r3,r2
   4dec0:	003eaf06 	br	4d980 <__alt_data_end+0xfffe8180>
   4dec4:	3825883a 	mov	r18,r7
   4dec8:	003f0f06 	br	4db08 <__alt_data_end+0xfffe8308>
   4decc:	1c44b03a 	or	r2,r3,r17
   4ded0:	8000251e 	bne	r16,zero,4df68 <__subdf3+0x66c>
   4ded4:	1000661e 	bne	r2,zero,4e070 <__subdf3+0x774>
   4ded8:	2990b03a 	or	r8,r5,r6
   4dedc:	40009626 	beq	r8,zero,4e138 <__subdf3+0x83c>
   4dee0:	2807883a 	mov	r3,r5
   4dee4:	3023883a 	mov	r17,r6
   4dee8:	3825883a 	mov	r18,r7
   4deec:	003ea406 	br	4d980 <__alt_data_end+0xfffe8180>
   4def0:	127ff804 	addi	r9,r2,-32
   4def4:	01000804 	movi	r4,32
   4def8:	2a52d83a 	srl	r9,r5,r9
   4defc:	11008c26 	beq	r2,r4,4e130 <__subdf3+0x834>
   4df00:	01001004 	movi	r4,64
   4df04:	2085c83a 	sub	r2,r4,r2
   4df08:	2884983a 	sll	r2,r5,r2
   4df0c:	118cb03a 	or	r6,r2,r6
   4df10:	300cc03a 	cmpne	r6,r6,zero
   4df14:	4992b03a 	or	r9,r9,r6
   4df18:	0005883a 	mov	r2,zero
   4df1c:	003f1206 	br	4db68 <__alt_data_end+0xfffe8368>
   4df20:	0101ffc4 	movi	r4,2047
   4df24:	493f9c1e 	bne	r9,r4,4dd98 <__alt_data_end+0xfffe8598>
   4df28:	2807883a 	mov	r3,r5
   4df2c:	3023883a 	mov	r17,r6
   4df30:	4821883a 	mov	r16,r9
   4df34:	3825883a 	mov	r18,r7
   4df38:	003e9106 	br	4d980 <__alt_data_end+0xfffe8180>
   4df3c:	80001f1e 	bne	r16,zero,4dfbc <__subdf3+0x6c0>
   4df40:	1c48b03a 	or	r4,r3,r17
   4df44:	20005a26 	beq	r4,zero,4e0b0 <__subdf3+0x7b4>
   4df48:	0084303a 	nor	r2,zero,r2
   4df4c:	1000561e 	bne	r2,zero,4e0a8 <__subdf3+0x7ac>
   4df50:	89a3883a 	add	r17,r17,r6
   4df54:	1945883a 	add	r2,r3,r5
   4df58:	898d803a 	cmpltu	r6,r17,r6
   4df5c:	3087883a 	add	r3,r6,r2
   4df60:	4821883a 	mov	r16,r9
   4df64:	003f0506 	br	4db7c <__alt_data_end+0xfffe837c>
   4df68:	10002b1e 	bne	r2,zero,4e018 <__subdf3+0x71c>
   4df6c:	2984b03a 	or	r2,r5,r6
   4df70:	10008026 	beq	r2,zero,4e174 <__subdf3+0x878>
   4df74:	2807883a 	mov	r3,r5
   4df78:	3023883a 	mov	r17,r6
   4df7c:	3825883a 	mov	r18,r7
   4df80:	0401ffc4 	movi	r16,2047
   4df84:	003e7e06 	br	4d980 <__alt_data_end+0xfffe8180>
   4df88:	3809883a 	mov	r4,r7
   4df8c:	0011883a 	mov	r8,zero
   4df90:	0005883a 	mov	r2,zero
   4df94:	003ee306 	br	4db24 <__alt_data_end+0xfffe8324>
   4df98:	1c62b03a 	or	r17,r3,r17
   4df9c:	8822c03a 	cmpne	r17,r17,zero
   4dfa0:	0005883a 	mov	r2,zero
   4dfa4:	003f8906 	br	4ddcc <__alt_data_end+0xfffe85cc>
   4dfa8:	3809883a 	mov	r4,r7
   4dfac:	4821883a 	mov	r16,r9
   4dfb0:	0011883a 	mov	r8,zero
   4dfb4:	0005883a 	mov	r2,zero
   4dfb8:	003eda06 	br	4db24 <__alt_data_end+0xfffe8324>
   4dfbc:	0101ffc4 	movi	r4,2047
   4dfc0:	49003b26 	beq	r9,r4,4e0b0 <__subdf3+0x7b4>
   4dfc4:	0085c83a 	sub	r2,zero,r2
   4dfc8:	18c02034 	orhi	r3,r3,128
   4dfcc:	01000e04 	movi	r4,56
   4dfd0:	20806e16 	blt	r4,r2,4e18c <__subdf3+0x890>
   4dfd4:	010007c4 	movi	r4,31
   4dfd8:	20807716 	blt	r4,r2,4e1b8 <__subdf3+0x8bc>
   4dfdc:	01000804 	movi	r4,32
   4dfe0:	2089c83a 	sub	r4,r4,r2
   4dfe4:	1914983a 	sll	r10,r3,r4
   4dfe8:	8890d83a 	srl	r8,r17,r2
   4dfec:	8908983a 	sll	r4,r17,r4
   4dff0:	1884d83a 	srl	r2,r3,r2
   4dff4:	5222b03a 	or	r17,r10,r8
   4dff8:	2006c03a 	cmpne	r3,r4,zero
   4dffc:	88e2b03a 	or	r17,r17,r3
   4e000:	89a3883a 	add	r17,r17,r6
   4e004:	1145883a 	add	r2,r2,r5
   4e008:	898d803a 	cmpltu	r6,r17,r6
   4e00c:	3087883a 	add	r3,r6,r2
   4e010:	4821883a 	mov	r16,r9
   4e014:	003ed906 	br	4db7c <__alt_data_end+0xfffe837c>
   4e018:	2984b03a 	or	r2,r5,r6
   4e01c:	10004226 	beq	r2,zero,4e128 <__subdf3+0x82c>
   4e020:	1808d0fa 	srli	r4,r3,3
   4e024:	8822d0fa 	srli	r17,r17,3
   4e028:	1806977a 	slli	r3,r3,29
   4e02c:	2080022c 	andhi	r2,r4,8
   4e030:	1c62b03a 	or	r17,r3,r17
   4e034:	10000826 	beq	r2,zero,4e058 <__subdf3+0x75c>
   4e038:	2812d0fa 	srli	r9,r5,3
   4e03c:	4880022c 	andhi	r2,r9,8
   4e040:	1000051e 	bne	r2,zero,4e058 <__subdf3+0x75c>
   4e044:	300cd0fa 	srli	r6,r6,3
   4e048:	2804977a 	slli	r2,r5,29
   4e04c:	4809883a 	mov	r4,r9
   4e050:	3825883a 	mov	r18,r7
   4e054:	11a2b03a 	or	r17,r2,r6
   4e058:	8806d77a 	srli	r3,r17,29
   4e05c:	200890fa 	slli	r4,r4,3
   4e060:	882290fa 	slli	r17,r17,3
   4e064:	0401ffc4 	movi	r16,2047
   4e068:	1906b03a 	or	r3,r3,r4
   4e06c:	003e4406 	br	4d980 <__alt_data_end+0xfffe8180>
   4e070:	2984b03a 	or	r2,r5,r6
   4e074:	103e4226 	beq	r2,zero,4d980 <__alt_data_end+0xfffe8180>
   4e078:	8989c83a 	sub	r4,r17,r6
   4e07c:	8911803a 	cmpltu	r8,r17,r4
   4e080:	1945c83a 	sub	r2,r3,r5
   4e084:	1205c83a 	sub	r2,r2,r8
   4e088:	1200202c 	andhi	r8,r2,128
   4e08c:	403e9a26 	beq	r8,zero,4daf8 <__alt_data_end+0xfffe82f8>
   4e090:	3463c83a 	sub	r17,r6,r17
   4e094:	28c5c83a 	sub	r2,r5,r3
   4e098:	344d803a 	cmpltu	r6,r6,r17
   4e09c:	1187c83a 	sub	r3,r2,r6
   4e0a0:	3825883a 	mov	r18,r7
   4e0a4:	003e3606 	br	4d980 <__alt_data_end+0xfffe8180>
   4e0a8:	0101ffc4 	movi	r4,2047
   4e0ac:	493fc71e 	bne	r9,r4,4dfcc <__alt_data_end+0xfffe87cc>
   4e0b0:	2807883a 	mov	r3,r5
   4e0b4:	3023883a 	mov	r17,r6
   4e0b8:	4821883a 	mov	r16,r9
   4e0bc:	003e3006 	br	4d980 <__alt_data_end+0xfffe8180>
   4e0c0:	10003626 	beq	r2,zero,4e19c <__subdf3+0x8a0>
   4e0c4:	2984b03a 	or	r2,r5,r6
   4e0c8:	10001726 	beq	r2,zero,4e128 <__subdf3+0x82c>
   4e0cc:	1808d0fa 	srli	r4,r3,3
   4e0d0:	8822d0fa 	srli	r17,r17,3
   4e0d4:	1806977a 	slli	r3,r3,29
   4e0d8:	2080022c 	andhi	r2,r4,8
   4e0dc:	1c62b03a 	or	r17,r3,r17
   4e0e0:	10000726 	beq	r2,zero,4e100 <__subdf3+0x804>
   4e0e4:	2812d0fa 	srli	r9,r5,3
   4e0e8:	4880022c 	andhi	r2,r9,8
   4e0ec:	1000041e 	bne	r2,zero,4e100 <__subdf3+0x804>
   4e0f0:	300cd0fa 	srli	r6,r6,3
   4e0f4:	2804977a 	slli	r2,r5,29
   4e0f8:	4809883a 	mov	r4,r9
   4e0fc:	11a2b03a 	or	r17,r2,r6
   4e100:	8806d77a 	srli	r3,r17,29
   4e104:	200890fa 	slli	r4,r4,3
   4e108:	882290fa 	slli	r17,r17,3
   4e10c:	3825883a 	mov	r18,r7
   4e110:	1906b03a 	or	r3,r3,r4
   4e114:	0401ffc4 	movi	r16,2047
   4e118:	003e1906 	br	4d980 <__alt_data_end+0xfffe8180>
   4e11c:	000b883a 	mov	r5,zero
   4e120:	0005883a 	mov	r2,zero
   4e124:	003e2e06 	br	4d9e0 <__alt_data_end+0xfffe81e0>
   4e128:	0401ffc4 	movi	r16,2047
   4e12c:	003e1406 	br	4d980 <__alt_data_end+0xfffe8180>
   4e130:	0005883a 	mov	r2,zero
   4e134:	003f7506 	br	4df0c <__alt_data_end+0xfffe870c>
   4e138:	0005883a 	mov	r2,zero
   4e13c:	0009883a 	mov	r4,zero
   4e140:	003e7806 	br	4db24 <__alt_data_end+0xfffe8324>
   4e144:	123ff804 	addi	r8,r2,-32
   4e148:	01000804 	movi	r4,32
   4e14c:	1a10d83a 	srl	r8,r3,r8
   4e150:	11002526 	beq	r2,r4,4e1e8 <__subdf3+0x8ec>
   4e154:	01001004 	movi	r4,64
   4e158:	2085c83a 	sub	r2,r4,r2
   4e15c:	1884983a 	sll	r2,r3,r2
   4e160:	1444b03a 	or	r2,r2,r17
   4e164:	1004c03a 	cmpne	r2,r2,zero
   4e168:	40a2b03a 	or	r17,r8,r2
   4e16c:	0005883a 	mov	r2,zero
   4e170:	003f1606 	br	4ddcc <__alt_data_end+0xfffe85cc>
   4e174:	02000434 	movhi	r8,16
   4e178:	0009883a 	mov	r4,zero
   4e17c:	423fffc4 	addi	r8,r8,-1
   4e180:	00bfffc4 	movi	r2,-1
   4e184:	0401ffc4 	movi	r16,2047
   4e188:	003e6606 	br	4db24 <__alt_data_end+0xfffe8324>
   4e18c:	1c62b03a 	or	r17,r3,r17
   4e190:	8822c03a 	cmpne	r17,r17,zero
   4e194:	0005883a 	mov	r2,zero
   4e198:	003f9906 	br	4e000 <__alt_data_end+0xfffe8800>
   4e19c:	2807883a 	mov	r3,r5
   4e1a0:	3023883a 	mov	r17,r6
   4e1a4:	0401ffc4 	movi	r16,2047
   4e1a8:	003df506 	br	4d980 <__alt_data_end+0xfffe8180>
   4e1ac:	2807883a 	mov	r3,r5
   4e1b0:	3023883a 	mov	r17,r6
   4e1b4:	003df206 	br	4d980 <__alt_data_end+0xfffe8180>
   4e1b8:	123ff804 	addi	r8,r2,-32
   4e1bc:	01000804 	movi	r4,32
   4e1c0:	1a10d83a 	srl	r8,r3,r8
   4e1c4:	11000a26 	beq	r2,r4,4e1f0 <__subdf3+0x8f4>
   4e1c8:	01001004 	movi	r4,64
   4e1cc:	2085c83a 	sub	r2,r4,r2
   4e1d0:	1884983a 	sll	r2,r3,r2
   4e1d4:	1444b03a 	or	r2,r2,r17
   4e1d8:	1004c03a 	cmpne	r2,r2,zero
   4e1dc:	40a2b03a 	or	r17,r8,r2
   4e1e0:	0005883a 	mov	r2,zero
   4e1e4:	003f8606 	br	4e000 <__alt_data_end+0xfffe8800>
   4e1e8:	0005883a 	mov	r2,zero
   4e1ec:	003fdc06 	br	4e160 <__alt_data_end+0xfffe8960>
   4e1f0:	0005883a 	mov	r2,zero
   4e1f4:	003ff706 	br	4e1d4 <__alt_data_end+0xfffe89d4>

0004e1f8 <__fixdfsi>:
   4e1f8:	280cd53a 	srli	r6,r5,20
   4e1fc:	00c00434 	movhi	r3,16
   4e200:	18ffffc4 	addi	r3,r3,-1
   4e204:	3181ffcc 	andi	r6,r6,2047
   4e208:	01c0ff84 	movi	r7,1022
   4e20c:	28c6703a 	and	r3,r5,r3
   4e210:	280ad7fa 	srli	r5,r5,31
   4e214:	3980120e 	bge	r7,r6,4e260 <__fixdfsi+0x68>
   4e218:	00810744 	movi	r2,1053
   4e21c:	11800c16 	blt	r2,r6,4e250 <__fixdfsi+0x58>
   4e220:	00810cc4 	movi	r2,1075
   4e224:	1185c83a 	sub	r2,r2,r6
   4e228:	01c007c4 	movi	r7,31
   4e22c:	18c00434 	orhi	r3,r3,16
   4e230:	38800d16 	blt	r7,r2,4e268 <__fixdfsi+0x70>
   4e234:	31befb44 	addi	r6,r6,-1043
   4e238:	2084d83a 	srl	r2,r4,r2
   4e23c:	1986983a 	sll	r3,r3,r6
   4e240:	1884b03a 	or	r2,r3,r2
   4e244:	28000726 	beq	r5,zero,4e264 <__fixdfsi+0x6c>
   4e248:	0085c83a 	sub	r2,zero,r2
   4e24c:	f800283a 	ret
   4e250:	00a00034 	movhi	r2,32768
   4e254:	10bfffc4 	addi	r2,r2,-1
   4e258:	2885883a 	add	r2,r5,r2
   4e25c:	f800283a 	ret
   4e260:	0005883a 	mov	r2,zero
   4e264:	f800283a 	ret
   4e268:	008104c4 	movi	r2,1043
   4e26c:	1185c83a 	sub	r2,r2,r6
   4e270:	1884d83a 	srl	r2,r3,r2
   4e274:	003ff306 	br	4e244 <__alt_data_end+0xfffe8a44>

0004e278 <__floatsidf>:
   4e278:	defffd04 	addi	sp,sp,-12
   4e27c:	dfc00215 	stw	ra,8(sp)
   4e280:	dc400115 	stw	r17,4(sp)
   4e284:	dc000015 	stw	r16,0(sp)
   4e288:	20002b26 	beq	r4,zero,4e338 <__floatsidf+0xc0>
   4e28c:	2023883a 	mov	r17,r4
   4e290:	2020d7fa 	srli	r16,r4,31
   4e294:	20002d16 	blt	r4,zero,4e34c <__floatsidf+0xd4>
   4e298:	8809883a 	mov	r4,r17
   4e29c:	00414bc0 	call	414bc <__clzsi2>
   4e2a0:	01410784 	movi	r5,1054
   4e2a4:	288bc83a 	sub	r5,r5,r2
   4e2a8:	01010cc4 	movi	r4,1075
   4e2ac:	2149c83a 	sub	r4,r4,r5
   4e2b0:	00c007c4 	movi	r3,31
   4e2b4:	1900160e 	bge	r3,r4,4e310 <__floatsidf+0x98>
   4e2b8:	00c104c4 	movi	r3,1043
   4e2bc:	1947c83a 	sub	r3,r3,r5
   4e2c0:	88c6983a 	sll	r3,r17,r3
   4e2c4:	00800434 	movhi	r2,16
   4e2c8:	10bfffc4 	addi	r2,r2,-1
   4e2cc:	1886703a 	and	r3,r3,r2
   4e2d0:	2941ffcc 	andi	r5,r5,2047
   4e2d4:	800d883a 	mov	r6,r16
   4e2d8:	0005883a 	mov	r2,zero
   4e2dc:	280a953a 	slli	r5,r5,20
   4e2e0:	31803fcc 	andi	r6,r6,255
   4e2e4:	01000434 	movhi	r4,16
   4e2e8:	300c97fa 	slli	r6,r6,31
   4e2ec:	213fffc4 	addi	r4,r4,-1
   4e2f0:	1906703a 	and	r3,r3,r4
   4e2f4:	1946b03a 	or	r3,r3,r5
   4e2f8:	1986b03a 	or	r3,r3,r6
   4e2fc:	dfc00217 	ldw	ra,8(sp)
   4e300:	dc400117 	ldw	r17,4(sp)
   4e304:	dc000017 	ldw	r16,0(sp)
   4e308:	dec00304 	addi	sp,sp,12
   4e30c:	f800283a 	ret
   4e310:	00c002c4 	movi	r3,11
   4e314:	1887c83a 	sub	r3,r3,r2
   4e318:	88c6d83a 	srl	r3,r17,r3
   4e31c:	8904983a 	sll	r2,r17,r4
   4e320:	01000434 	movhi	r4,16
   4e324:	213fffc4 	addi	r4,r4,-1
   4e328:	2941ffcc 	andi	r5,r5,2047
   4e32c:	1906703a 	and	r3,r3,r4
   4e330:	800d883a 	mov	r6,r16
   4e334:	003fe906 	br	4e2dc <__alt_data_end+0xfffe8adc>
   4e338:	000d883a 	mov	r6,zero
   4e33c:	000b883a 	mov	r5,zero
   4e340:	0007883a 	mov	r3,zero
   4e344:	0005883a 	mov	r2,zero
   4e348:	003fe406 	br	4e2dc <__alt_data_end+0xfffe8adc>
   4e34c:	0123c83a 	sub	r17,zero,r4
   4e350:	003fd106 	br	4e298 <__alt_data_end+0xfffe8a98>

0004e354 <__floatunsidf>:
   4e354:	defffe04 	addi	sp,sp,-8
   4e358:	dc000015 	stw	r16,0(sp)
   4e35c:	dfc00115 	stw	ra,4(sp)
   4e360:	2021883a 	mov	r16,r4
   4e364:	20002226 	beq	r4,zero,4e3f0 <__floatunsidf+0x9c>
   4e368:	00414bc0 	call	414bc <__clzsi2>
   4e36c:	01010784 	movi	r4,1054
   4e370:	2089c83a 	sub	r4,r4,r2
   4e374:	01810cc4 	movi	r6,1075
   4e378:	310dc83a 	sub	r6,r6,r4
   4e37c:	00c007c4 	movi	r3,31
   4e380:	1980120e 	bge	r3,r6,4e3cc <__floatunsidf+0x78>
   4e384:	00c104c4 	movi	r3,1043
   4e388:	1907c83a 	sub	r3,r3,r4
   4e38c:	80ca983a 	sll	r5,r16,r3
   4e390:	00800434 	movhi	r2,16
   4e394:	10bfffc4 	addi	r2,r2,-1
   4e398:	2101ffcc 	andi	r4,r4,2047
   4e39c:	0021883a 	mov	r16,zero
   4e3a0:	288a703a 	and	r5,r5,r2
   4e3a4:	2008953a 	slli	r4,r4,20
   4e3a8:	00c00434 	movhi	r3,16
   4e3ac:	18ffffc4 	addi	r3,r3,-1
   4e3b0:	28c6703a 	and	r3,r5,r3
   4e3b4:	8005883a 	mov	r2,r16
   4e3b8:	1906b03a 	or	r3,r3,r4
   4e3bc:	dfc00117 	ldw	ra,4(sp)
   4e3c0:	dc000017 	ldw	r16,0(sp)
   4e3c4:	dec00204 	addi	sp,sp,8
   4e3c8:	f800283a 	ret
   4e3cc:	00c002c4 	movi	r3,11
   4e3d0:	188bc83a 	sub	r5,r3,r2
   4e3d4:	814ad83a 	srl	r5,r16,r5
   4e3d8:	00c00434 	movhi	r3,16
   4e3dc:	18ffffc4 	addi	r3,r3,-1
   4e3e0:	81a0983a 	sll	r16,r16,r6
   4e3e4:	2101ffcc 	andi	r4,r4,2047
   4e3e8:	28ca703a 	and	r5,r5,r3
   4e3ec:	003fed06 	br	4e3a4 <__alt_data_end+0xfffe8ba4>
   4e3f0:	0009883a 	mov	r4,zero
   4e3f4:	000b883a 	mov	r5,zero
   4e3f8:	003fea06 	br	4e3a4 <__alt_data_end+0xfffe8ba4>

0004e3fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e3fc:	defffe04 	addi	sp,sp,-8
   4e400:	dfc00115 	stw	ra,4(sp)
   4e404:	df000015 	stw	fp,0(sp)
   4e408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e40c:	d0a00b17 	ldw	r2,-32724(gp)
   4e410:	10000326 	beq	r2,zero,4e420 <alt_get_errno+0x24>
   4e414:	d0a00b17 	ldw	r2,-32724(gp)
   4e418:	103ee83a 	callr	r2
   4e41c:	00000106 	br	4e424 <alt_get_errno+0x28>
   4e420:	d0a6d404 	addi	r2,gp,-25776
}
   4e424:	e037883a 	mov	sp,fp
   4e428:	dfc00117 	ldw	ra,4(sp)
   4e42c:	df000017 	ldw	fp,0(sp)
   4e430:	dec00204 	addi	sp,sp,8
   4e434:	f800283a 	ret

0004e438 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4e438:	defffb04 	addi	sp,sp,-20
   4e43c:	dfc00415 	stw	ra,16(sp)
   4e440:	df000315 	stw	fp,12(sp)
   4e444:	df000304 	addi	fp,sp,12
   4e448:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4e44c:	e0bfff17 	ldw	r2,-4(fp)
   4e450:	10000816 	blt	r2,zero,4e474 <close+0x3c>
   4e454:	01400304 	movi	r5,12
   4e458:	e13fff17 	ldw	r4,-4(fp)
   4e45c:	00415200 	call	41520 <__mulsi3>
   4e460:	1007883a 	mov	r3,r2
   4e464:	00800174 	movhi	r2,5
   4e468:	10872004 	addi	r2,r2,7296
   4e46c:	1885883a 	add	r2,r3,r2
   4e470:	00000106 	br	4e478 <close+0x40>
   4e474:	0005883a 	mov	r2,zero
   4e478:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4e47c:	e0bffd17 	ldw	r2,-12(fp)
   4e480:	10001926 	beq	r2,zero,4e4e8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4e484:	e0bffd17 	ldw	r2,-12(fp)
   4e488:	10800017 	ldw	r2,0(r2)
   4e48c:	10800417 	ldw	r2,16(r2)
   4e490:	10000626 	beq	r2,zero,4e4ac <close+0x74>
   4e494:	e0bffd17 	ldw	r2,-12(fp)
   4e498:	10800017 	ldw	r2,0(r2)
   4e49c:	10800417 	ldw	r2,16(r2)
   4e4a0:	e13ffd17 	ldw	r4,-12(fp)
   4e4a4:	103ee83a 	callr	r2
   4e4a8:	00000106 	br	4e4b0 <close+0x78>
   4e4ac:	0005883a 	mov	r2,zero
   4e4b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4e4b4:	e13fff17 	ldw	r4,-4(fp)
   4e4b8:	004edc00 	call	4edc0 <alt_release_fd>
    if (rval < 0)
   4e4bc:	e0bffe17 	ldw	r2,-8(fp)
   4e4c0:	1000070e 	bge	r2,zero,4e4e0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   4e4c4:	004e3fc0 	call	4e3fc <alt_get_errno>
   4e4c8:	1007883a 	mov	r3,r2
   4e4cc:	e0bffe17 	ldw	r2,-8(fp)
   4e4d0:	0085c83a 	sub	r2,zero,r2
   4e4d4:	18800015 	stw	r2,0(r3)
      return -1;
   4e4d8:	00bfffc4 	movi	r2,-1
   4e4dc:	00000706 	br	4e4fc <close+0xc4>
    }
    return 0;
   4e4e0:	0005883a 	mov	r2,zero
   4e4e4:	00000506 	br	4e4fc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e4e8:	004e3fc0 	call	4e3fc <alt_get_errno>
   4e4ec:	1007883a 	mov	r3,r2
   4e4f0:	00801444 	movi	r2,81
   4e4f4:	18800015 	stw	r2,0(r3)
    return -1;
   4e4f8:	00bfffc4 	movi	r2,-1
  }
}
   4e4fc:	e037883a 	mov	sp,fp
   4e500:	dfc00117 	ldw	ra,4(sp)
   4e504:	df000017 	ldw	fp,0(sp)
   4e508:	dec00204 	addi	sp,sp,8
   4e50c:	f800283a 	ret

0004e510 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4e510:	defffc04 	addi	sp,sp,-16
   4e514:	df000315 	stw	fp,12(sp)
   4e518:	df000304 	addi	fp,sp,12
   4e51c:	e13ffd15 	stw	r4,-12(fp)
   4e520:	e17ffe15 	stw	r5,-8(fp)
   4e524:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4e528:	e0bfff17 	ldw	r2,-4(fp)
}
   4e52c:	e037883a 	mov	sp,fp
   4e530:	df000017 	ldw	fp,0(sp)
   4e534:	dec00104 	addi	sp,sp,4
   4e538:	f800283a 	ret

0004e53c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e53c:	defffe04 	addi	sp,sp,-8
   4e540:	dfc00115 	stw	ra,4(sp)
   4e544:	df000015 	stw	fp,0(sp)
   4e548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e54c:	d0a00b17 	ldw	r2,-32724(gp)
   4e550:	10000326 	beq	r2,zero,4e560 <alt_get_errno+0x24>
   4e554:	d0a00b17 	ldw	r2,-32724(gp)
   4e558:	103ee83a 	callr	r2
   4e55c:	00000106 	br	4e564 <alt_get_errno+0x28>
   4e560:	d0a6d404 	addi	r2,gp,-25776
}
   4e564:	e037883a 	mov	sp,fp
   4e568:	dfc00117 	ldw	ra,4(sp)
   4e56c:	df000017 	ldw	fp,0(sp)
   4e570:	dec00204 	addi	sp,sp,8
   4e574:	f800283a 	ret

0004e578 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4e578:	defffb04 	addi	sp,sp,-20
   4e57c:	dfc00415 	stw	ra,16(sp)
   4e580:	df000315 	stw	fp,12(sp)
   4e584:	df000304 	addi	fp,sp,12
   4e588:	e13ffe15 	stw	r4,-8(fp)
   4e58c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e590:	e0bffe17 	ldw	r2,-8(fp)
   4e594:	10000816 	blt	r2,zero,4e5b8 <fstat+0x40>
   4e598:	01400304 	movi	r5,12
   4e59c:	e13ffe17 	ldw	r4,-8(fp)
   4e5a0:	00415200 	call	41520 <__mulsi3>
   4e5a4:	1007883a 	mov	r3,r2
   4e5a8:	00800174 	movhi	r2,5
   4e5ac:	10872004 	addi	r2,r2,7296
   4e5b0:	1885883a 	add	r2,r3,r2
   4e5b4:	00000106 	br	4e5bc <fstat+0x44>
   4e5b8:	0005883a 	mov	r2,zero
   4e5bc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4e5c0:	e0bffd17 	ldw	r2,-12(fp)
   4e5c4:	10001026 	beq	r2,zero,4e608 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4e5c8:	e0bffd17 	ldw	r2,-12(fp)
   4e5cc:	10800017 	ldw	r2,0(r2)
   4e5d0:	10800817 	ldw	r2,32(r2)
   4e5d4:	10000726 	beq	r2,zero,4e5f4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   4e5d8:	e0bffd17 	ldw	r2,-12(fp)
   4e5dc:	10800017 	ldw	r2,0(r2)
   4e5e0:	10800817 	ldw	r2,32(r2)
   4e5e4:	e17fff17 	ldw	r5,-4(fp)
   4e5e8:	e13ffd17 	ldw	r4,-12(fp)
   4e5ec:	103ee83a 	callr	r2
   4e5f0:	00000a06 	br	4e61c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4e5f4:	e0bfff17 	ldw	r2,-4(fp)
   4e5f8:	00c80004 	movi	r3,8192
   4e5fc:	10c00115 	stw	r3,4(r2)
      return 0;
   4e600:	0005883a 	mov	r2,zero
   4e604:	00000506 	br	4e61c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e608:	004e53c0 	call	4e53c <alt_get_errno>
   4e60c:	1007883a 	mov	r3,r2
   4e610:	00801444 	movi	r2,81
   4e614:	18800015 	stw	r2,0(r3)
    return -1;
   4e618:	00bfffc4 	movi	r2,-1
  }
}
   4e61c:	e037883a 	mov	sp,fp
   4e620:	dfc00117 	ldw	ra,4(sp)
   4e624:	df000017 	ldw	fp,0(sp)
   4e628:	dec00204 	addi	sp,sp,8
   4e62c:	f800283a 	ret

0004e630 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4e630:	defff904 	addi	sp,sp,-28
   4e634:	dfc00615 	stw	ra,24(sp)
   4e638:	df000515 	stw	fp,20(sp)
   4e63c:	df000504 	addi	fp,sp,20
   4e640:	e13ffc15 	stw	r4,-16(fp)
   4e644:	e17ffd15 	stw	r5,-12(fp)
   4e648:	e1bffe15 	stw	r6,-8(fp)
   4e64c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4e650:	e0800217 	ldw	r2,8(fp)
   4e654:	d8800015 	stw	r2,0(sp)
   4e658:	e1ffff17 	ldw	r7,-4(fp)
   4e65c:	e1bffe17 	ldw	r6,-8(fp)
   4e660:	e17ffd17 	ldw	r5,-12(fp)
   4e664:	e13ffc17 	ldw	r4,-16(fp)
   4e668:	004e7e00 	call	4e7e0 <alt_iic_isr_register>
}  
   4e66c:	e037883a 	mov	sp,fp
   4e670:	dfc00117 	ldw	ra,4(sp)
   4e674:	df000017 	ldw	fp,0(sp)
   4e678:	dec00204 	addi	sp,sp,8
   4e67c:	f800283a 	ret

0004e680 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4e680:	defff904 	addi	sp,sp,-28
   4e684:	df000615 	stw	fp,24(sp)
   4e688:	df000604 	addi	fp,sp,24
   4e68c:	e13ffe15 	stw	r4,-8(fp)
   4e690:	e17fff15 	stw	r5,-4(fp)
   4e694:	e0bfff17 	ldw	r2,-4(fp)
   4e698:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e69c:	0005303a 	rdctl	r2,status
   4e6a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e6a4:	e0fffb17 	ldw	r3,-20(fp)
   4e6a8:	00bfff84 	movi	r2,-2
   4e6ac:	1884703a 	and	r2,r3,r2
   4e6b0:	1001703a 	wrctl	status,r2
  
  return context;
   4e6b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4e6b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4e6bc:	00c00044 	movi	r3,1
   4e6c0:	e0bffa17 	ldw	r2,-24(fp)
   4e6c4:	1884983a 	sll	r2,r3,r2
   4e6c8:	1007883a 	mov	r3,r2
   4e6cc:	d0a6d517 	ldw	r2,-25772(gp)
   4e6d0:	1884b03a 	or	r2,r3,r2
   4e6d4:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4e6d8:	d0a6d517 	ldw	r2,-25772(gp)
   4e6dc:	100170fa 	wrctl	ienable,r2
   4e6e0:	e0bffc17 	ldw	r2,-16(fp)
   4e6e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e6e8:	e0bffd17 	ldw	r2,-12(fp)
   4e6ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4e6f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4e6f4:	0001883a 	nop
}
   4e6f8:	e037883a 	mov	sp,fp
   4e6fc:	df000017 	ldw	fp,0(sp)
   4e700:	dec00104 	addi	sp,sp,4
   4e704:	f800283a 	ret

0004e708 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4e708:	defff904 	addi	sp,sp,-28
   4e70c:	df000615 	stw	fp,24(sp)
   4e710:	df000604 	addi	fp,sp,24
   4e714:	e13ffe15 	stw	r4,-8(fp)
   4e718:	e17fff15 	stw	r5,-4(fp)
   4e71c:	e0bfff17 	ldw	r2,-4(fp)
   4e720:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e724:	0005303a 	rdctl	r2,status
   4e728:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e72c:	e0fffb17 	ldw	r3,-20(fp)
   4e730:	00bfff84 	movi	r2,-2
   4e734:	1884703a 	and	r2,r3,r2
   4e738:	1001703a 	wrctl	status,r2
  
  return context;
   4e73c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4e740:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4e744:	00c00044 	movi	r3,1
   4e748:	e0bffa17 	ldw	r2,-24(fp)
   4e74c:	1884983a 	sll	r2,r3,r2
   4e750:	0084303a 	nor	r2,zero,r2
   4e754:	1007883a 	mov	r3,r2
   4e758:	d0a6d517 	ldw	r2,-25772(gp)
   4e75c:	1884703a 	and	r2,r3,r2
   4e760:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4e764:	d0a6d517 	ldw	r2,-25772(gp)
   4e768:	100170fa 	wrctl	ienable,r2
   4e76c:	e0bffc17 	ldw	r2,-16(fp)
   4e770:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e774:	e0bffd17 	ldw	r2,-12(fp)
   4e778:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4e77c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4e780:	0001883a 	nop
}
   4e784:	e037883a 	mov	sp,fp
   4e788:	df000017 	ldw	fp,0(sp)
   4e78c:	dec00104 	addi	sp,sp,4
   4e790:	f800283a 	ret

0004e794 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4e794:	defffc04 	addi	sp,sp,-16
   4e798:	df000315 	stw	fp,12(sp)
   4e79c:	df000304 	addi	fp,sp,12
   4e7a0:	e13ffe15 	stw	r4,-8(fp)
   4e7a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4e7a8:	000530fa 	rdctl	r2,ienable
   4e7ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4e7b0:	00c00044 	movi	r3,1
   4e7b4:	e0bfff17 	ldw	r2,-4(fp)
   4e7b8:	1884983a 	sll	r2,r3,r2
   4e7bc:	1007883a 	mov	r3,r2
   4e7c0:	e0bffd17 	ldw	r2,-12(fp)
   4e7c4:	1884703a 	and	r2,r3,r2
   4e7c8:	1004c03a 	cmpne	r2,r2,zero
   4e7cc:	10803fcc 	andi	r2,r2,255
}
   4e7d0:	e037883a 	mov	sp,fp
   4e7d4:	df000017 	ldw	fp,0(sp)
   4e7d8:	dec00104 	addi	sp,sp,4
   4e7dc:	f800283a 	ret

0004e7e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4e7e0:	defff504 	addi	sp,sp,-44
   4e7e4:	dfc00a15 	stw	ra,40(sp)
   4e7e8:	df000915 	stw	fp,36(sp)
   4e7ec:	df000904 	addi	fp,sp,36
   4e7f0:	e13ffc15 	stw	r4,-16(fp)
   4e7f4:	e17ffd15 	stw	r5,-12(fp)
   4e7f8:	e1bffe15 	stw	r6,-8(fp)
   4e7fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4e800:	00bffa84 	movi	r2,-22
   4e804:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4e808:	e0bffd17 	ldw	r2,-12(fp)
   4e80c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4e810:	e0bff817 	ldw	r2,-32(fp)
   4e814:	10800808 	cmpgei	r2,r2,32
   4e818:	1000271e 	bne	r2,zero,4e8b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e81c:	0005303a 	rdctl	r2,status
   4e820:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e824:	e0fffb17 	ldw	r3,-20(fp)
   4e828:	00bfff84 	movi	r2,-2
   4e82c:	1884703a 	and	r2,r3,r2
   4e830:	1001703a 	wrctl	status,r2
  
  return context;
   4e834:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4e838:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   4e83c:	00800174 	movhi	r2,5
   4e840:	10927e04 	addi	r2,r2,18936
   4e844:	e0fff817 	ldw	r3,-32(fp)
   4e848:	180690fa 	slli	r3,r3,3
   4e84c:	10c5883a 	add	r2,r2,r3
   4e850:	e0fffe17 	ldw	r3,-8(fp)
   4e854:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4e858:	00800174 	movhi	r2,5
   4e85c:	10927e04 	addi	r2,r2,18936
   4e860:	e0fff817 	ldw	r3,-32(fp)
   4e864:	180690fa 	slli	r3,r3,3
   4e868:	10c5883a 	add	r2,r2,r3
   4e86c:	10800104 	addi	r2,r2,4
   4e870:	e0ffff17 	ldw	r3,-4(fp)
   4e874:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4e878:	e0bffe17 	ldw	r2,-8(fp)
   4e87c:	10000526 	beq	r2,zero,4e894 <alt_iic_isr_register+0xb4>
   4e880:	e0bff817 	ldw	r2,-32(fp)
   4e884:	100b883a 	mov	r5,r2
   4e888:	e13ffc17 	ldw	r4,-16(fp)
   4e88c:	004e6800 	call	4e680 <alt_ic_irq_enable>
   4e890:	00000406 	br	4e8a4 <alt_iic_isr_register+0xc4>
   4e894:	e0bff817 	ldw	r2,-32(fp)
   4e898:	100b883a 	mov	r5,r2
   4e89c:	e13ffc17 	ldw	r4,-16(fp)
   4e8a0:	004e7080 	call	4e708 <alt_ic_irq_disable>
   4e8a4:	e0bff715 	stw	r2,-36(fp)
   4e8a8:	e0bffa17 	ldw	r2,-24(fp)
   4e8ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e8b0:	e0bff917 	ldw	r2,-28(fp)
   4e8b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4e8b8:	e0bff717 	ldw	r2,-36(fp)
}
   4e8bc:	e037883a 	mov	sp,fp
   4e8c0:	dfc00117 	ldw	ra,4(sp)
   4e8c4:	df000017 	ldw	fp,0(sp)
   4e8c8:	dec00204 	addi	sp,sp,8
   4e8cc:	f800283a 	ret

0004e8d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e8d0:	defffe04 	addi	sp,sp,-8
   4e8d4:	dfc00115 	stw	ra,4(sp)
   4e8d8:	df000015 	stw	fp,0(sp)
   4e8dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e8e0:	d0a00b17 	ldw	r2,-32724(gp)
   4e8e4:	10000326 	beq	r2,zero,4e8f4 <alt_get_errno+0x24>
   4e8e8:	d0a00b17 	ldw	r2,-32724(gp)
   4e8ec:	103ee83a 	callr	r2
   4e8f0:	00000106 	br	4e8f8 <alt_get_errno+0x28>
   4e8f4:	d0a6d404 	addi	r2,gp,-25776
}
   4e8f8:	e037883a 	mov	sp,fp
   4e8fc:	dfc00117 	ldw	ra,4(sp)
   4e900:	df000017 	ldw	fp,0(sp)
   4e904:	dec00204 	addi	sp,sp,8
   4e908:	f800283a 	ret

0004e90c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4e90c:	deffed04 	addi	sp,sp,-76
   4e910:	dfc01215 	stw	ra,72(sp)
   4e914:	df001115 	stw	fp,68(sp)
   4e918:	df001104 	addi	fp,sp,68
   4e91c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e920:	e0bfff17 	ldw	r2,-4(fp)
   4e924:	10000816 	blt	r2,zero,4e948 <isatty+0x3c>
   4e928:	01400304 	movi	r5,12
   4e92c:	e13fff17 	ldw	r4,-4(fp)
   4e930:	00415200 	call	41520 <__mulsi3>
   4e934:	1007883a 	mov	r3,r2
   4e938:	00800174 	movhi	r2,5
   4e93c:	10872004 	addi	r2,r2,7296
   4e940:	1885883a 	add	r2,r3,r2
   4e944:	00000106 	br	4e94c <isatty+0x40>
   4e948:	0005883a 	mov	r2,zero
   4e94c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4e950:	e0bfef17 	ldw	r2,-68(fp)
   4e954:	10000e26 	beq	r2,zero,4e990 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4e958:	e0bfef17 	ldw	r2,-68(fp)
   4e95c:	10800017 	ldw	r2,0(r2)
   4e960:	10800817 	ldw	r2,32(r2)
   4e964:	1000021e 	bne	r2,zero,4e970 <isatty+0x64>
    {
      return 1;
   4e968:	00800044 	movi	r2,1
   4e96c:	00000d06 	br	4e9a4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4e970:	e0bff004 	addi	r2,fp,-64
   4e974:	100b883a 	mov	r5,r2
   4e978:	e13fff17 	ldw	r4,-4(fp)
   4e97c:	004e5780 	call	4e578 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4e980:	e0bff117 	ldw	r2,-60(fp)
   4e984:	10880020 	cmpeqi	r2,r2,8192
   4e988:	10803fcc 	andi	r2,r2,255
   4e98c:	00000506 	br	4e9a4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e990:	004e8d00 	call	4e8d0 <alt_get_errno>
   4e994:	1007883a 	mov	r3,r2
   4e998:	00801444 	movi	r2,81
   4e99c:	18800015 	stw	r2,0(r3)
    return 0;
   4e9a0:	0005883a 	mov	r2,zero
  }
}
   4e9a4:	e037883a 	mov	sp,fp
   4e9a8:	dfc00117 	ldw	ra,4(sp)
   4e9ac:	df000017 	ldw	fp,0(sp)
   4e9b0:	dec00204 	addi	sp,sp,8
   4e9b4:	f800283a 	ret

0004e9b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4e9b8:	defffc04 	addi	sp,sp,-16
   4e9bc:	df000315 	stw	fp,12(sp)
   4e9c0:	df000304 	addi	fp,sp,12
   4e9c4:	e13ffd15 	stw	r4,-12(fp)
   4e9c8:	e17ffe15 	stw	r5,-8(fp)
   4e9cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4e9d0:	e0fffe17 	ldw	r3,-8(fp)
   4e9d4:	e0bffd17 	ldw	r2,-12(fp)
   4e9d8:	18800c26 	beq	r3,r2,4ea0c <alt_load_section+0x54>
  {
    while( to != end )
   4e9dc:	00000806 	br	4ea00 <alt_load_section+0x48>
    {
      *to++ = *from++;
   4e9e0:	e0bffe17 	ldw	r2,-8(fp)
   4e9e4:	10c00104 	addi	r3,r2,4
   4e9e8:	e0fffe15 	stw	r3,-8(fp)
   4e9ec:	e0fffd17 	ldw	r3,-12(fp)
   4e9f0:	19000104 	addi	r4,r3,4
   4e9f4:	e13ffd15 	stw	r4,-12(fp)
   4e9f8:	18c00017 	ldw	r3,0(r3)
   4e9fc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4ea00:	e0fffe17 	ldw	r3,-8(fp)
   4ea04:	e0bfff17 	ldw	r2,-4(fp)
   4ea08:	18bff51e 	bne	r3,r2,4e9e0 <__alt_data_end+0xfffe91e0>
    {
      *to++ = *from++;
    }
  }
}
   4ea0c:	0001883a 	nop
   4ea10:	e037883a 	mov	sp,fp
   4ea14:	df000017 	ldw	fp,0(sp)
   4ea18:	dec00104 	addi	sp,sp,4
   4ea1c:	f800283a 	ret

0004ea20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4ea20:	defffe04 	addi	sp,sp,-8
   4ea24:	dfc00115 	stw	ra,4(sp)
   4ea28:	df000015 	stw	fp,0(sp)
   4ea2c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4ea30:	01800174 	movhi	r6,5
   4ea34:	318ba804 	addi	r6,r6,11936
   4ea38:	01400174 	movhi	r5,5
   4ea3c:	2944ed04 	addi	r5,r5,5044
   4ea40:	01000174 	movhi	r4,5
   4ea44:	210ba804 	addi	r4,r4,11936
   4ea48:	004e9b80 	call	4e9b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4ea4c:	01800134 	movhi	r6,4
   4ea50:	31808c04 	addi	r6,r6,560
   4ea54:	01400134 	movhi	r5,4
   4ea58:	29400804 	addi	r5,r5,32
   4ea5c:	01000134 	movhi	r4,4
   4ea60:	21000804 	addi	r4,r4,32
   4ea64:	004e9b80 	call	4e9b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4ea68:	01800174 	movhi	r6,5
   4ea6c:	3184ed04 	addi	r6,r6,5044
   4ea70:	01400174 	movhi	r5,5
   4ea74:	2943de04 	addi	r5,r5,3960
   4ea78:	01000174 	movhi	r4,5
   4ea7c:	2103de04 	addi	r4,r4,3960
   4ea80:	004e9b80 	call	4e9b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4ea84:	00501600 	call	50160 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4ea88:	00503200 	call	50320 <alt_icache_flush_all>
}
   4ea8c:	0001883a 	nop
   4ea90:	e037883a 	mov	sp,fp
   4ea94:	dfc00117 	ldw	ra,4(sp)
   4ea98:	df000017 	ldw	fp,0(sp)
   4ea9c:	dec00204 	addi	sp,sp,8
   4eaa0:	f800283a 	ret

0004eaa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4eaa4:	defffe04 	addi	sp,sp,-8
   4eaa8:	dfc00115 	stw	ra,4(sp)
   4eaac:	df000015 	stw	fp,0(sp)
   4eab0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4eab4:	d0a00b17 	ldw	r2,-32724(gp)
   4eab8:	10000326 	beq	r2,zero,4eac8 <alt_get_errno+0x24>
   4eabc:	d0a00b17 	ldw	r2,-32724(gp)
   4eac0:	103ee83a 	callr	r2
   4eac4:	00000106 	br	4eacc <alt_get_errno+0x28>
   4eac8:	d0a6d404 	addi	r2,gp,-25776
}
   4eacc:	e037883a 	mov	sp,fp
   4ead0:	dfc00117 	ldw	ra,4(sp)
   4ead4:	df000017 	ldw	fp,0(sp)
   4ead8:	dec00204 	addi	sp,sp,8
   4eadc:	f800283a 	ret

0004eae0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4eae0:	defff904 	addi	sp,sp,-28
   4eae4:	dfc00615 	stw	ra,24(sp)
   4eae8:	df000515 	stw	fp,20(sp)
   4eaec:	df000504 	addi	fp,sp,20
   4eaf0:	e13ffd15 	stw	r4,-12(fp)
   4eaf4:	e17ffe15 	stw	r5,-8(fp)
   4eaf8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4eafc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4eb00:	e0bffd17 	ldw	r2,-12(fp)
   4eb04:	10000816 	blt	r2,zero,4eb28 <lseek+0x48>
   4eb08:	01400304 	movi	r5,12
   4eb0c:	e13ffd17 	ldw	r4,-12(fp)
   4eb10:	00415200 	call	41520 <__mulsi3>
   4eb14:	1007883a 	mov	r3,r2
   4eb18:	00800174 	movhi	r2,5
   4eb1c:	10872004 	addi	r2,r2,7296
   4eb20:	1885883a 	add	r2,r3,r2
   4eb24:	00000106 	br	4eb2c <lseek+0x4c>
   4eb28:	0005883a 	mov	r2,zero
   4eb2c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4eb30:	e0bffc17 	ldw	r2,-16(fp)
   4eb34:	10001026 	beq	r2,zero,4eb78 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4eb38:	e0bffc17 	ldw	r2,-16(fp)
   4eb3c:	10800017 	ldw	r2,0(r2)
   4eb40:	10800717 	ldw	r2,28(r2)
   4eb44:	10000926 	beq	r2,zero,4eb6c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4eb48:	e0bffc17 	ldw	r2,-16(fp)
   4eb4c:	10800017 	ldw	r2,0(r2)
   4eb50:	10800717 	ldw	r2,28(r2)
   4eb54:	e1bfff17 	ldw	r6,-4(fp)
   4eb58:	e17ffe17 	ldw	r5,-8(fp)
   4eb5c:	e13ffc17 	ldw	r4,-16(fp)
   4eb60:	103ee83a 	callr	r2
   4eb64:	e0bffb15 	stw	r2,-20(fp)
   4eb68:	00000506 	br	4eb80 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4eb6c:	00bfde84 	movi	r2,-134
   4eb70:	e0bffb15 	stw	r2,-20(fp)
   4eb74:	00000206 	br	4eb80 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4eb78:	00bfebc4 	movi	r2,-81
   4eb7c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4eb80:	e0bffb17 	ldw	r2,-20(fp)
   4eb84:	1000070e 	bge	r2,zero,4eba4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   4eb88:	004eaa40 	call	4eaa4 <alt_get_errno>
   4eb8c:	1007883a 	mov	r3,r2
   4eb90:	e0bffb17 	ldw	r2,-20(fp)
   4eb94:	0085c83a 	sub	r2,zero,r2
   4eb98:	18800015 	stw	r2,0(r3)
    rc = -1;
   4eb9c:	00bfffc4 	movi	r2,-1
   4eba0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4eba4:	e0bffb17 	ldw	r2,-20(fp)
}
   4eba8:	e037883a 	mov	sp,fp
   4ebac:	dfc00117 	ldw	ra,4(sp)
   4ebb0:	df000017 	ldw	fp,0(sp)
   4ebb4:	dec00204 	addi	sp,sp,8
   4ebb8:	f800283a 	ret

0004ebbc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4ebbc:	defffd04 	addi	sp,sp,-12
   4ebc0:	dfc00215 	stw	ra,8(sp)
   4ebc4:	df000115 	stw	fp,4(sp)
   4ebc8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4ebcc:	0009883a 	mov	r4,zero
   4ebd0:	004f0940 	call	4f094 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4ebd4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4ebd8:	004f0cc0 	call	4f0cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4ebdc:	01800174 	movhi	r6,5
   4ebe0:	3184e504 	addi	r6,r6,5012
   4ebe4:	01400174 	movhi	r5,5
   4ebe8:	2944e504 	addi	r5,r5,5012
   4ebec:	01000174 	movhi	r4,5
   4ebf0:	2104e504 	addi	r4,r4,5012
   4ebf4:	00504c00 	call	504c0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4ebf8:	00502600 	call	50260 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4ebfc:	01000174 	movhi	r4,5
   4ec00:	2100b004 	addi	r4,r4,704
   4ec04:	0050be40 	call	50be4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4ec08:	d0a6d617 	ldw	r2,-25768(gp)
   4ec0c:	d0e6d717 	ldw	r3,-25764(gp)
   4ec10:	d126d817 	ldw	r4,-25760(gp)
   4ec14:	200d883a 	mov	r6,r4
   4ec18:	180b883a 	mov	r5,r3
   4ec1c:	1009883a 	mov	r4,r2
   4ec20:	00407540 	call	40754 <main>
   4ec24:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4ec28:	01000044 	movi	r4,1
   4ec2c:	004e4380 	call	4e438 <close>
  exit (result);
   4ec30:	e13fff17 	ldw	r4,-4(fp)
   4ec34:	0050bf80 	call	50bf8 <exit>

0004ec38 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4ec38:	defffe04 	addi	sp,sp,-8
   4ec3c:	df000115 	stw	fp,4(sp)
   4ec40:	df000104 	addi	fp,sp,4
   4ec44:	e13fff15 	stw	r4,-4(fp)
}
   4ec48:	0001883a 	nop
   4ec4c:	e037883a 	mov	sp,fp
   4ec50:	df000017 	ldw	fp,0(sp)
   4ec54:	dec00104 	addi	sp,sp,4
   4ec58:	f800283a 	ret

0004ec5c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4ec5c:	defffe04 	addi	sp,sp,-8
   4ec60:	df000115 	stw	fp,4(sp)
   4ec64:	df000104 	addi	fp,sp,4
   4ec68:	e13fff15 	stw	r4,-4(fp)
}
   4ec6c:	0001883a 	nop
   4ec70:	e037883a 	mov	sp,fp
   4ec74:	df000017 	ldw	fp,0(sp)
   4ec78:	dec00104 	addi	sp,sp,4
   4ec7c:	f800283a 	ret

0004ec80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ec80:	defffe04 	addi	sp,sp,-8
   4ec84:	dfc00115 	stw	ra,4(sp)
   4ec88:	df000015 	stw	fp,0(sp)
   4ec8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ec90:	d0a00b17 	ldw	r2,-32724(gp)
   4ec94:	10000326 	beq	r2,zero,4eca4 <alt_get_errno+0x24>
   4ec98:	d0a00b17 	ldw	r2,-32724(gp)
   4ec9c:	103ee83a 	callr	r2
   4eca0:	00000106 	br	4eca8 <alt_get_errno+0x28>
   4eca4:	d0a6d404 	addi	r2,gp,-25776
}
   4eca8:	e037883a 	mov	sp,fp
   4ecac:	dfc00117 	ldw	ra,4(sp)
   4ecb0:	df000017 	ldw	fp,0(sp)
   4ecb4:	dec00204 	addi	sp,sp,8
   4ecb8:	f800283a 	ret

0004ecbc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4ecbc:	defff904 	addi	sp,sp,-28
   4ecc0:	dfc00615 	stw	ra,24(sp)
   4ecc4:	df000515 	stw	fp,20(sp)
   4ecc8:	df000504 	addi	fp,sp,20
   4eccc:	e13ffd15 	stw	r4,-12(fp)
   4ecd0:	e17ffe15 	stw	r5,-8(fp)
   4ecd4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ecd8:	e0bffd17 	ldw	r2,-12(fp)
   4ecdc:	10000816 	blt	r2,zero,4ed00 <read+0x44>
   4ece0:	01400304 	movi	r5,12
   4ece4:	e13ffd17 	ldw	r4,-12(fp)
   4ece8:	00415200 	call	41520 <__mulsi3>
   4ecec:	1007883a 	mov	r3,r2
   4ecf0:	00800174 	movhi	r2,5
   4ecf4:	10872004 	addi	r2,r2,7296
   4ecf8:	1885883a 	add	r2,r3,r2
   4ecfc:	00000106 	br	4ed04 <read+0x48>
   4ed00:	0005883a 	mov	r2,zero
   4ed04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4ed08:	e0bffb17 	ldw	r2,-20(fp)
   4ed0c:	10002226 	beq	r2,zero,4ed98 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4ed10:	e0bffb17 	ldw	r2,-20(fp)
   4ed14:	10800217 	ldw	r2,8(r2)
   4ed18:	108000cc 	andi	r2,r2,3
   4ed1c:	10800060 	cmpeqi	r2,r2,1
   4ed20:	1000181e 	bne	r2,zero,4ed84 <read+0xc8>
        (fd->dev->read))
   4ed24:	e0bffb17 	ldw	r2,-20(fp)
   4ed28:	10800017 	ldw	r2,0(r2)
   4ed2c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4ed30:	10001426 	beq	r2,zero,4ed84 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4ed34:	e0bffb17 	ldw	r2,-20(fp)
   4ed38:	10800017 	ldw	r2,0(r2)
   4ed3c:	10800517 	ldw	r2,20(r2)
   4ed40:	e0ffff17 	ldw	r3,-4(fp)
   4ed44:	180d883a 	mov	r6,r3
   4ed48:	e17ffe17 	ldw	r5,-8(fp)
   4ed4c:	e13ffb17 	ldw	r4,-20(fp)
   4ed50:	103ee83a 	callr	r2
   4ed54:	e0bffc15 	stw	r2,-16(fp)
   4ed58:	e0bffc17 	ldw	r2,-16(fp)
   4ed5c:	1000070e 	bge	r2,zero,4ed7c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   4ed60:	004ec800 	call	4ec80 <alt_get_errno>
   4ed64:	1007883a 	mov	r3,r2
   4ed68:	e0bffc17 	ldw	r2,-16(fp)
   4ed6c:	0085c83a 	sub	r2,zero,r2
   4ed70:	18800015 	stw	r2,0(r3)
          return -1;
   4ed74:	00bfffc4 	movi	r2,-1
   4ed78:	00000c06 	br	4edac <read+0xf0>
        }
        return rval;
   4ed7c:	e0bffc17 	ldw	r2,-16(fp)
   4ed80:	00000a06 	br	4edac <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4ed84:	004ec800 	call	4ec80 <alt_get_errno>
   4ed88:	1007883a 	mov	r3,r2
   4ed8c:	00800344 	movi	r2,13
   4ed90:	18800015 	stw	r2,0(r3)
   4ed94:	00000406 	br	4eda8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4ed98:	004ec800 	call	4ec80 <alt_get_errno>
   4ed9c:	1007883a 	mov	r3,r2
   4eda0:	00801444 	movi	r2,81
   4eda4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4eda8:	00bfffc4 	movi	r2,-1
}
   4edac:	e037883a 	mov	sp,fp
   4edb0:	dfc00117 	ldw	ra,4(sp)
   4edb4:	df000017 	ldw	fp,0(sp)
   4edb8:	dec00204 	addi	sp,sp,8
   4edbc:	f800283a 	ret

0004edc0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4edc0:	defffc04 	addi	sp,sp,-16
   4edc4:	dfc00315 	stw	ra,12(sp)
   4edc8:	df000215 	stw	fp,8(sp)
   4edcc:	dc000115 	stw	r16,4(sp)
   4edd0:	df000204 	addi	fp,sp,8
   4edd4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   4edd8:	e0bffe17 	ldw	r2,-8(fp)
   4eddc:	108000d0 	cmplti	r2,r2,3
   4ede0:	1000111e 	bne	r2,zero,4ee28 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4ede4:	04000174 	movhi	r16,5
   4ede8:	84072004 	addi	r16,r16,7296
   4edec:	e0bffe17 	ldw	r2,-8(fp)
   4edf0:	01400304 	movi	r5,12
   4edf4:	1009883a 	mov	r4,r2
   4edf8:	00415200 	call	41520 <__mulsi3>
   4edfc:	8085883a 	add	r2,r16,r2
   4ee00:	10800204 	addi	r2,r2,8
   4ee04:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4ee08:	04000174 	movhi	r16,5
   4ee0c:	84072004 	addi	r16,r16,7296
   4ee10:	e0bffe17 	ldw	r2,-8(fp)
   4ee14:	01400304 	movi	r5,12
   4ee18:	1009883a 	mov	r4,r2
   4ee1c:	00415200 	call	41520 <__mulsi3>
   4ee20:	8085883a 	add	r2,r16,r2
   4ee24:	10000015 	stw	zero,0(r2)
  }
}
   4ee28:	0001883a 	nop
   4ee2c:	e6ffff04 	addi	sp,fp,-4
   4ee30:	dfc00217 	ldw	ra,8(sp)
   4ee34:	df000117 	ldw	fp,4(sp)
   4ee38:	dc000017 	ldw	r16,0(sp)
   4ee3c:	dec00304 	addi	sp,sp,12
   4ee40:	f800283a 	ret

0004ee44 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4ee44:	defff904 	addi	sp,sp,-28
   4ee48:	df000615 	stw	fp,24(sp)
   4ee4c:	df000604 	addi	fp,sp,24
   4ee50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ee54:	0005303a 	rdctl	r2,status
   4ee58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ee5c:	e0fffe17 	ldw	r3,-8(fp)
   4ee60:	00bfff84 	movi	r2,-2
   4ee64:	1884703a 	and	r2,r3,r2
   4ee68:	1001703a 	wrctl	status,r2
  
  return context;
   4ee6c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4ee70:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4ee74:	d0a00d17 	ldw	r2,-32716(gp)
   4ee78:	10c000c4 	addi	r3,r2,3
   4ee7c:	00bfff04 	movi	r2,-4
   4ee80:	1884703a 	and	r2,r3,r2
   4ee84:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4ee88:	d0e00d17 	ldw	r3,-32716(gp)
   4ee8c:	e0bfff17 	ldw	r2,-4(fp)
   4ee90:	1887883a 	add	r3,r3,r2
   4ee94:	008001b4 	movhi	r2,6
   4ee98:	10960004 	addi	r2,r2,22528
   4ee9c:	10c0062e 	bgeu	r2,r3,4eeb8 <sbrk+0x74>
   4eea0:	e0bffb17 	ldw	r2,-20(fp)
   4eea4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4eea8:	e0bffa17 	ldw	r2,-24(fp)
   4eeac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4eeb0:	00bfffc4 	movi	r2,-1
   4eeb4:	00000b06 	br	4eee4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4eeb8:	d0a00d17 	ldw	r2,-32716(gp)
   4eebc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   4eec0:	d0e00d17 	ldw	r3,-32716(gp)
   4eec4:	e0bfff17 	ldw	r2,-4(fp)
   4eec8:	1885883a 	add	r2,r3,r2
   4eecc:	d0a00d15 	stw	r2,-32716(gp)
   4eed0:	e0bffb17 	ldw	r2,-20(fp)
   4eed4:	e0bffc15 	stw	r2,-16(fp)
   4eed8:	e0bffc17 	ldw	r2,-16(fp)
   4eedc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4eee0:	e0bffd17 	ldw	r2,-12(fp)
} 
   4eee4:	e037883a 	mov	sp,fp
   4eee8:	df000017 	ldw	fp,0(sp)
   4eeec:	dec00104 	addi	sp,sp,4
   4eef0:	f800283a 	ret

0004eef4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   4eef4:	defffd04 	addi	sp,sp,-12
   4eef8:	dfc00215 	stw	ra,8(sp)
   4eefc:	df000115 	stw	fp,4(sp)
   4ef00:	df000104 	addi	fp,sp,4
   4ef04:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   4ef08:	e13fff17 	ldw	r4,-4(fp)
   4ef0c:	00500080 	call	50008 <alt_busy_sleep>
}
   4ef10:	e037883a 	mov	sp,fp
   4ef14:	dfc00117 	ldw	ra,4(sp)
   4ef18:	df000017 	ldw	fp,0(sp)
   4ef1c:	dec00204 	addi	sp,sp,8
   4ef20:	f800283a 	ret

0004ef24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ef24:	defffe04 	addi	sp,sp,-8
   4ef28:	dfc00115 	stw	ra,4(sp)
   4ef2c:	df000015 	stw	fp,0(sp)
   4ef30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ef34:	d0a00b17 	ldw	r2,-32724(gp)
   4ef38:	10000326 	beq	r2,zero,4ef48 <alt_get_errno+0x24>
   4ef3c:	d0a00b17 	ldw	r2,-32724(gp)
   4ef40:	103ee83a 	callr	r2
   4ef44:	00000106 	br	4ef4c <alt_get_errno+0x28>
   4ef48:	d0a6d404 	addi	r2,gp,-25776
}
   4ef4c:	e037883a 	mov	sp,fp
   4ef50:	dfc00117 	ldw	ra,4(sp)
   4ef54:	df000017 	ldw	fp,0(sp)
   4ef58:	dec00204 	addi	sp,sp,8
   4ef5c:	f800283a 	ret

0004ef60 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4ef60:	defff904 	addi	sp,sp,-28
   4ef64:	dfc00615 	stw	ra,24(sp)
   4ef68:	df000515 	stw	fp,20(sp)
   4ef6c:	df000504 	addi	fp,sp,20
   4ef70:	e13ffd15 	stw	r4,-12(fp)
   4ef74:	e17ffe15 	stw	r5,-8(fp)
   4ef78:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ef7c:	e0bffd17 	ldw	r2,-12(fp)
   4ef80:	10000816 	blt	r2,zero,4efa4 <write+0x44>
   4ef84:	01400304 	movi	r5,12
   4ef88:	e13ffd17 	ldw	r4,-12(fp)
   4ef8c:	00415200 	call	41520 <__mulsi3>
   4ef90:	1007883a 	mov	r3,r2
   4ef94:	00800174 	movhi	r2,5
   4ef98:	10872004 	addi	r2,r2,7296
   4ef9c:	1885883a 	add	r2,r3,r2
   4efa0:	00000106 	br	4efa8 <write+0x48>
   4efa4:	0005883a 	mov	r2,zero
   4efa8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4efac:	e0bffb17 	ldw	r2,-20(fp)
   4efb0:	10002126 	beq	r2,zero,4f038 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4efb4:	e0bffb17 	ldw	r2,-20(fp)
   4efb8:	10800217 	ldw	r2,8(r2)
   4efbc:	108000cc 	andi	r2,r2,3
   4efc0:	10001826 	beq	r2,zero,4f024 <write+0xc4>
   4efc4:	e0bffb17 	ldw	r2,-20(fp)
   4efc8:	10800017 	ldw	r2,0(r2)
   4efcc:	10800617 	ldw	r2,24(r2)
   4efd0:	10001426 	beq	r2,zero,4f024 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4efd4:	e0bffb17 	ldw	r2,-20(fp)
   4efd8:	10800017 	ldw	r2,0(r2)
   4efdc:	10800617 	ldw	r2,24(r2)
   4efe0:	e0ffff17 	ldw	r3,-4(fp)
   4efe4:	180d883a 	mov	r6,r3
   4efe8:	e17ffe17 	ldw	r5,-8(fp)
   4efec:	e13ffb17 	ldw	r4,-20(fp)
   4eff0:	103ee83a 	callr	r2
   4eff4:	e0bffc15 	stw	r2,-16(fp)
   4eff8:	e0bffc17 	ldw	r2,-16(fp)
   4effc:	1000070e 	bge	r2,zero,4f01c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   4f000:	004ef240 	call	4ef24 <alt_get_errno>
   4f004:	1007883a 	mov	r3,r2
   4f008:	e0bffc17 	ldw	r2,-16(fp)
   4f00c:	0085c83a 	sub	r2,zero,r2
   4f010:	18800015 	stw	r2,0(r3)
        return -1;
   4f014:	00bfffc4 	movi	r2,-1
   4f018:	00000c06 	br	4f04c <write+0xec>
      }
      return rval;
   4f01c:	e0bffc17 	ldw	r2,-16(fp)
   4f020:	00000a06 	br	4f04c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4f024:	004ef240 	call	4ef24 <alt_get_errno>
   4f028:	1007883a 	mov	r3,r2
   4f02c:	00800344 	movi	r2,13
   4f030:	18800015 	stw	r2,0(r3)
   4f034:	00000406 	br	4f048 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4f038:	004ef240 	call	4ef24 <alt_get_errno>
   4f03c:	1007883a 	mov	r3,r2
   4f040:	00801444 	movi	r2,81
   4f044:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4f048:	00bfffc4 	movi	r2,-1
}
   4f04c:	e037883a 	mov	sp,fp
   4f050:	dfc00117 	ldw	ra,4(sp)
   4f054:	df000017 	ldw	fp,0(sp)
   4f058:	dec00204 	addi	sp,sp,8
   4f05c:	f800283a 	ret

0004f060 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4f060:	defffd04 	addi	sp,sp,-12
   4f064:	dfc00215 	stw	ra,8(sp)
   4f068:	df000115 	stw	fp,4(sp)
   4f06c:	df000104 	addi	fp,sp,4
   4f070:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4f074:	d1600804 	addi	r5,gp,-32736
   4f078:	e13fff17 	ldw	r4,-4(fp)
   4f07c:	00501bc0 	call	501bc <alt_dev_llist_insert>
}
   4f080:	e037883a 	mov	sp,fp
   4f084:	dfc00117 	ldw	ra,4(sp)
   4f088:	df000017 	ldw	fp,0(sp)
   4f08c:	dec00204 	addi	sp,sp,8
   4f090:	f800283a 	ret

0004f094 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4f094:	defffd04 	addi	sp,sp,-12
   4f098:	dfc00215 	stw	ra,8(sp)
   4f09c:	df000115 	stw	fp,4(sp)
   4f0a0:	df000104 	addi	fp,sp,4
   4f0a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   4f0a8:	00509640 	call	50964 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4f0ac:	00800044 	movi	r2,1
   4f0b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4f0b4:	0001883a 	nop
   4f0b8:	e037883a 	mov	sp,fp
   4f0bc:	dfc00117 	ldw	ra,4(sp)
   4f0c0:	df000017 	ldw	fp,0(sp)
   4f0c4:	dec00204 	addi	sp,sp,8
   4f0c8:	f800283a 	ret

0004f0cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4f0cc:	defffe04 	addi	sp,sp,-8
   4f0d0:	dfc00115 	stw	ra,4(sp)
   4f0d4:	df000015 	stw	fp,0(sp)
   4f0d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   4f0dc:	01c0fa04 	movi	r7,1000
   4f0e0:	01800044 	movi	r6,1
   4f0e4:	000b883a 	mov	r5,zero
   4f0e8:	01000234 	movhi	r4,8
   4f0ec:	21040004 	addi	r4,r4,4096
   4f0f0:	004fc100 	call	4fc10 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4f0f4:	01800284 	movi	r6,10
   4f0f8:	000b883a 	mov	r5,zero
   4f0fc:	01000174 	movhi	r4,5
   4f100:	21078a04 	addi	r4,r4,7720
   4f104:	004f2940 	call	4f294 <altera_avalon_jtag_uart_init>
   4f108:	01000174 	movhi	r4,5
   4f10c:	21078004 	addi	r4,r4,7680
   4f110:	004f0600 	call	4f060 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
   4f114:	0001883a 	nop
}
   4f118:	0001883a 	nop
   4f11c:	e037883a 	mov	sp,fp
   4f120:	dfc00117 	ldw	ra,4(sp)
   4f124:	df000017 	ldw	fp,0(sp)
   4f128:	dec00204 	addi	sp,sp,8
   4f12c:	f800283a 	ret

0004f130 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4f130:	defffa04 	addi	sp,sp,-24
   4f134:	dfc00515 	stw	ra,20(sp)
   4f138:	df000415 	stw	fp,16(sp)
   4f13c:	df000404 	addi	fp,sp,16
   4f140:	e13ffd15 	stw	r4,-12(fp)
   4f144:	e17ffe15 	stw	r5,-8(fp)
   4f148:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f14c:	e0bffd17 	ldw	r2,-12(fp)
   4f150:	10800017 	ldw	r2,0(r2)
   4f154:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4f158:	e0bffc17 	ldw	r2,-16(fp)
   4f15c:	10c00a04 	addi	r3,r2,40
   4f160:	e0bffd17 	ldw	r2,-12(fp)
   4f164:	10800217 	ldw	r2,8(r2)
   4f168:	100f883a 	mov	r7,r2
   4f16c:	e1bfff17 	ldw	r6,-4(fp)
   4f170:	e17ffe17 	ldw	r5,-8(fp)
   4f174:	1809883a 	mov	r4,r3
   4f178:	004f7580 	call	4f758 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4f17c:	e037883a 	mov	sp,fp
   4f180:	dfc00117 	ldw	ra,4(sp)
   4f184:	df000017 	ldw	fp,0(sp)
   4f188:	dec00204 	addi	sp,sp,8
   4f18c:	f800283a 	ret

0004f190 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4f190:	defffa04 	addi	sp,sp,-24
   4f194:	dfc00515 	stw	ra,20(sp)
   4f198:	df000415 	stw	fp,16(sp)
   4f19c:	df000404 	addi	fp,sp,16
   4f1a0:	e13ffd15 	stw	r4,-12(fp)
   4f1a4:	e17ffe15 	stw	r5,-8(fp)
   4f1a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f1ac:	e0bffd17 	ldw	r2,-12(fp)
   4f1b0:	10800017 	ldw	r2,0(r2)
   4f1b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4f1b8:	e0bffc17 	ldw	r2,-16(fp)
   4f1bc:	10c00a04 	addi	r3,r2,40
   4f1c0:	e0bffd17 	ldw	r2,-12(fp)
   4f1c4:	10800217 	ldw	r2,8(r2)
   4f1c8:	100f883a 	mov	r7,r2
   4f1cc:	e1bfff17 	ldw	r6,-4(fp)
   4f1d0:	e17ffe17 	ldw	r5,-8(fp)
   4f1d4:	1809883a 	mov	r4,r3
   4f1d8:	004f9740 	call	4f974 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4f1dc:	e037883a 	mov	sp,fp
   4f1e0:	dfc00117 	ldw	ra,4(sp)
   4f1e4:	df000017 	ldw	fp,0(sp)
   4f1e8:	dec00204 	addi	sp,sp,8
   4f1ec:	f800283a 	ret

0004f1f0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4f1f0:	defffc04 	addi	sp,sp,-16
   4f1f4:	dfc00315 	stw	ra,12(sp)
   4f1f8:	df000215 	stw	fp,8(sp)
   4f1fc:	df000204 	addi	fp,sp,8
   4f200:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f204:	e0bfff17 	ldw	r2,-4(fp)
   4f208:	10800017 	ldw	r2,0(r2)
   4f20c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4f210:	e0bffe17 	ldw	r2,-8(fp)
   4f214:	10c00a04 	addi	r3,r2,40
   4f218:	e0bfff17 	ldw	r2,-4(fp)
   4f21c:	10800217 	ldw	r2,8(r2)
   4f220:	100b883a 	mov	r5,r2
   4f224:	1809883a 	mov	r4,r3
   4f228:	004f6000 	call	4f600 <altera_avalon_jtag_uart_close>
}
   4f22c:	e037883a 	mov	sp,fp
   4f230:	dfc00117 	ldw	ra,4(sp)
   4f234:	df000017 	ldw	fp,0(sp)
   4f238:	dec00204 	addi	sp,sp,8
   4f23c:	f800283a 	ret

0004f240 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4f240:	defffa04 	addi	sp,sp,-24
   4f244:	dfc00515 	stw	ra,20(sp)
   4f248:	df000415 	stw	fp,16(sp)
   4f24c:	df000404 	addi	fp,sp,16
   4f250:	e13ffd15 	stw	r4,-12(fp)
   4f254:	e17ffe15 	stw	r5,-8(fp)
   4f258:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4f25c:	e0bffd17 	ldw	r2,-12(fp)
   4f260:	10800017 	ldw	r2,0(r2)
   4f264:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4f268:	e0bffc17 	ldw	r2,-16(fp)
   4f26c:	10800a04 	addi	r2,r2,40
   4f270:	e1bfff17 	ldw	r6,-4(fp)
   4f274:	e17ffe17 	ldw	r5,-8(fp)
   4f278:	1009883a 	mov	r4,r2
   4f27c:	004f6680 	call	4f668 <altera_avalon_jtag_uart_ioctl>
}
   4f280:	e037883a 	mov	sp,fp
   4f284:	dfc00117 	ldw	ra,4(sp)
   4f288:	df000017 	ldw	fp,0(sp)
   4f28c:	dec00204 	addi	sp,sp,8
   4f290:	f800283a 	ret

0004f294 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4f294:	defffa04 	addi	sp,sp,-24
   4f298:	dfc00515 	stw	ra,20(sp)
   4f29c:	df000415 	stw	fp,16(sp)
   4f2a0:	df000404 	addi	fp,sp,16
   4f2a4:	e13ffd15 	stw	r4,-12(fp)
   4f2a8:	e17ffe15 	stw	r5,-8(fp)
   4f2ac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4f2b0:	e0bffd17 	ldw	r2,-12(fp)
   4f2b4:	00c00044 	movi	r3,1
   4f2b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4f2bc:	e0bffd17 	ldw	r2,-12(fp)
   4f2c0:	10800017 	ldw	r2,0(r2)
   4f2c4:	10800104 	addi	r2,r2,4
   4f2c8:	1007883a 	mov	r3,r2
   4f2cc:	e0bffd17 	ldw	r2,-12(fp)
   4f2d0:	10800817 	ldw	r2,32(r2)
   4f2d4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4f2d8:	e0bffe17 	ldw	r2,-8(fp)
   4f2dc:	e0ffff17 	ldw	r3,-4(fp)
   4f2e0:	d8000015 	stw	zero,0(sp)
   4f2e4:	e1fffd17 	ldw	r7,-12(fp)
   4f2e8:	01800174 	movhi	r6,5
   4f2ec:	31bcd504 	addi	r6,r6,-3244
   4f2f0:	180b883a 	mov	r5,r3
   4f2f4:	1009883a 	mov	r4,r2
   4f2f8:	004e6300 	call	4e630 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4f2fc:	e0bffd17 	ldw	r2,-12(fp)
   4f300:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4f304:	e0bffd17 	ldw	r2,-12(fp)
   4f308:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4f30c:	d0e6da17 	ldw	r3,-25752(gp)
   4f310:	e1fffd17 	ldw	r7,-12(fp)
   4f314:	01800174 	movhi	r6,5
   4f318:	31bd5804 	addi	r6,r6,-2720
   4f31c:	180b883a 	mov	r5,r3
   4f320:	1009883a 	mov	r4,r2
   4f324:	004fedc0 	call	4fedc <alt_alarm_start>
   4f328:	1000040e 	bge	r2,zero,4f33c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4f32c:	e0fffd17 	ldw	r3,-12(fp)
   4f330:	00a00034 	movhi	r2,32768
   4f334:	10bfffc4 	addi	r2,r2,-1
   4f338:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4f33c:	0001883a 	nop
   4f340:	e037883a 	mov	sp,fp
   4f344:	dfc00117 	ldw	ra,4(sp)
   4f348:	df000017 	ldw	fp,0(sp)
   4f34c:	dec00204 	addi	sp,sp,8
   4f350:	f800283a 	ret

0004f354 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4f354:	defff804 	addi	sp,sp,-32
   4f358:	df000715 	stw	fp,28(sp)
   4f35c:	df000704 	addi	fp,sp,28
   4f360:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4f364:	e0bfff17 	ldw	r2,-4(fp)
   4f368:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4f36c:	e0bffb17 	ldw	r2,-20(fp)
   4f370:	10800017 	ldw	r2,0(r2)
   4f374:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4f378:	e0bffc17 	ldw	r2,-16(fp)
   4f37c:	10800104 	addi	r2,r2,4
   4f380:	10800037 	ldwio	r2,0(r2)
   4f384:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4f388:	e0bffd17 	ldw	r2,-12(fp)
   4f38c:	1080c00c 	andi	r2,r2,768
   4f390:	10006d26 	beq	r2,zero,4f548 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4f394:	e0bffd17 	ldw	r2,-12(fp)
   4f398:	1080400c 	andi	r2,r2,256
   4f39c:	10003526 	beq	r2,zero,4f474 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4f3a0:	00800074 	movhi	r2,1
   4f3a4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f3a8:	e0bffb17 	ldw	r2,-20(fp)
   4f3ac:	10800a17 	ldw	r2,40(r2)
   4f3b0:	10800044 	addi	r2,r2,1
   4f3b4:	1081ffcc 	andi	r2,r2,2047
   4f3b8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4f3bc:	e0bffb17 	ldw	r2,-20(fp)
   4f3c0:	10c00b17 	ldw	r3,44(r2)
   4f3c4:	e0bffe17 	ldw	r2,-8(fp)
   4f3c8:	18801526 	beq	r3,r2,4f420 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4f3cc:	e0bffc17 	ldw	r2,-16(fp)
   4f3d0:	10800037 	ldwio	r2,0(r2)
   4f3d4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4f3d8:	e0bff917 	ldw	r2,-28(fp)
   4f3dc:	10a0000c 	andi	r2,r2,32768
   4f3e0:	10001126 	beq	r2,zero,4f428 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4f3e4:	e0bffb17 	ldw	r2,-20(fp)
   4f3e8:	10800a17 	ldw	r2,40(r2)
   4f3ec:	e0fff917 	ldw	r3,-28(fp)
   4f3f0:	1809883a 	mov	r4,r3
   4f3f4:	e0fffb17 	ldw	r3,-20(fp)
   4f3f8:	1885883a 	add	r2,r3,r2
   4f3fc:	10800e04 	addi	r2,r2,56
   4f400:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f404:	e0bffb17 	ldw	r2,-20(fp)
   4f408:	10800a17 	ldw	r2,40(r2)
   4f40c:	10800044 	addi	r2,r2,1
   4f410:	10c1ffcc 	andi	r3,r2,2047
   4f414:	e0bffb17 	ldw	r2,-20(fp)
   4f418:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4f41c:	003fe206 	br	4f3a8 <__alt_data_end+0xfffe9ba8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4f420:	0001883a 	nop
   4f424:	00000106 	br	4f42c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4f428:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4f42c:	e0bff917 	ldw	r2,-28(fp)
   4f430:	10bfffec 	andhi	r2,r2,65535
   4f434:	10000f26 	beq	r2,zero,4f474 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4f438:	e0bffb17 	ldw	r2,-20(fp)
   4f43c:	10c00817 	ldw	r3,32(r2)
   4f440:	00bfff84 	movi	r2,-2
   4f444:	1886703a 	and	r3,r3,r2
   4f448:	e0bffb17 	ldw	r2,-20(fp)
   4f44c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4f450:	e0bffc17 	ldw	r2,-16(fp)
   4f454:	10800104 	addi	r2,r2,4
   4f458:	1007883a 	mov	r3,r2
   4f45c:	e0bffb17 	ldw	r2,-20(fp)
   4f460:	10800817 	ldw	r2,32(r2)
   4f464:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4f468:	e0bffc17 	ldw	r2,-16(fp)
   4f46c:	10800104 	addi	r2,r2,4
   4f470:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4f474:	e0bffd17 	ldw	r2,-12(fp)
   4f478:	1080800c 	andi	r2,r2,512
   4f47c:	103fbe26 	beq	r2,zero,4f378 <__alt_data_end+0xfffe9b78>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4f480:	e0bffd17 	ldw	r2,-12(fp)
   4f484:	1004d43a 	srli	r2,r2,16
   4f488:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4f48c:	00001406 	br	4f4e0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4f490:	e0bffc17 	ldw	r2,-16(fp)
   4f494:	e0fffb17 	ldw	r3,-20(fp)
   4f498:	18c00d17 	ldw	r3,52(r3)
   4f49c:	e13ffb17 	ldw	r4,-20(fp)
   4f4a0:	20c7883a 	add	r3,r4,r3
   4f4a4:	18c20e04 	addi	r3,r3,2104
   4f4a8:	18c00003 	ldbu	r3,0(r3)
   4f4ac:	18c03fcc 	andi	r3,r3,255
   4f4b0:	18c0201c 	xori	r3,r3,128
   4f4b4:	18ffe004 	addi	r3,r3,-128
   4f4b8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f4bc:	e0bffb17 	ldw	r2,-20(fp)
   4f4c0:	10800d17 	ldw	r2,52(r2)
   4f4c4:	10800044 	addi	r2,r2,1
   4f4c8:	10c1ffcc 	andi	r3,r2,2047
   4f4cc:	e0bffb17 	ldw	r2,-20(fp)
   4f4d0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4f4d4:	e0bffa17 	ldw	r2,-24(fp)
   4f4d8:	10bfffc4 	addi	r2,r2,-1
   4f4dc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4f4e0:	e0bffa17 	ldw	r2,-24(fp)
   4f4e4:	10000526 	beq	r2,zero,4f4fc <altera_avalon_jtag_uart_irq+0x1a8>
   4f4e8:	e0bffb17 	ldw	r2,-20(fp)
   4f4ec:	10c00d17 	ldw	r3,52(r2)
   4f4f0:	e0bffb17 	ldw	r2,-20(fp)
   4f4f4:	10800c17 	ldw	r2,48(r2)
   4f4f8:	18bfe51e 	bne	r3,r2,4f490 <__alt_data_end+0xfffe9c90>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4f4fc:	e0bffa17 	ldw	r2,-24(fp)
   4f500:	103f9d26 	beq	r2,zero,4f378 <__alt_data_end+0xfffe9b78>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4f504:	e0bffb17 	ldw	r2,-20(fp)
   4f508:	10c00817 	ldw	r3,32(r2)
   4f50c:	00bfff44 	movi	r2,-3
   4f510:	1886703a 	and	r3,r3,r2
   4f514:	e0bffb17 	ldw	r2,-20(fp)
   4f518:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4f51c:	e0bffb17 	ldw	r2,-20(fp)
   4f520:	10800017 	ldw	r2,0(r2)
   4f524:	10800104 	addi	r2,r2,4
   4f528:	1007883a 	mov	r3,r2
   4f52c:	e0bffb17 	ldw	r2,-20(fp)
   4f530:	10800817 	ldw	r2,32(r2)
   4f534:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4f538:	e0bffc17 	ldw	r2,-16(fp)
   4f53c:	10800104 	addi	r2,r2,4
   4f540:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4f544:	003f8c06 	br	4f378 <__alt_data_end+0xfffe9b78>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4f548:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4f54c:	0001883a 	nop
   4f550:	e037883a 	mov	sp,fp
   4f554:	df000017 	ldw	fp,0(sp)
   4f558:	dec00104 	addi	sp,sp,4
   4f55c:	f800283a 	ret

0004f560 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4f560:	defff804 	addi	sp,sp,-32
   4f564:	df000715 	stw	fp,28(sp)
   4f568:	df000704 	addi	fp,sp,28
   4f56c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4f570:	e0bffb17 	ldw	r2,-20(fp)
   4f574:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4f578:	e0bff917 	ldw	r2,-28(fp)
   4f57c:	10800017 	ldw	r2,0(r2)
   4f580:	10800104 	addi	r2,r2,4
   4f584:	10800037 	ldwio	r2,0(r2)
   4f588:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4f58c:	e0bffa17 	ldw	r2,-24(fp)
   4f590:	1081000c 	andi	r2,r2,1024
   4f594:	10000b26 	beq	r2,zero,4f5c4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4f598:	e0bff917 	ldw	r2,-28(fp)
   4f59c:	10800017 	ldw	r2,0(r2)
   4f5a0:	10800104 	addi	r2,r2,4
   4f5a4:	1007883a 	mov	r3,r2
   4f5a8:	e0bff917 	ldw	r2,-28(fp)
   4f5ac:	10800817 	ldw	r2,32(r2)
   4f5b0:	10810014 	ori	r2,r2,1024
   4f5b4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4f5b8:	e0bff917 	ldw	r2,-28(fp)
   4f5bc:	10000915 	stw	zero,36(r2)
   4f5c0:	00000a06 	br	4f5ec <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4f5c4:	e0bff917 	ldw	r2,-28(fp)
   4f5c8:	10c00917 	ldw	r3,36(r2)
   4f5cc:	00a00034 	movhi	r2,32768
   4f5d0:	10bfff04 	addi	r2,r2,-4
   4f5d4:	10c00536 	bltu	r2,r3,4f5ec <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4f5d8:	e0bff917 	ldw	r2,-28(fp)
   4f5dc:	10800917 	ldw	r2,36(r2)
   4f5e0:	10c00044 	addi	r3,r2,1
   4f5e4:	e0bff917 	ldw	r2,-28(fp)
   4f5e8:	10c00915 	stw	r3,36(r2)
   4f5ec:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4f5f0:	e037883a 	mov	sp,fp
   4f5f4:	df000017 	ldw	fp,0(sp)
   4f5f8:	dec00104 	addi	sp,sp,4
   4f5fc:	f800283a 	ret

0004f600 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4f600:	defffd04 	addi	sp,sp,-12
   4f604:	df000215 	stw	fp,8(sp)
   4f608:	df000204 	addi	fp,sp,8
   4f60c:	e13ffe15 	stw	r4,-8(fp)
   4f610:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4f614:	00000506 	br	4f62c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4f618:	e0bfff17 	ldw	r2,-4(fp)
   4f61c:	1090000c 	andi	r2,r2,16384
   4f620:	10000226 	beq	r2,zero,4f62c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4f624:	00bffd44 	movi	r2,-11
   4f628:	00000b06 	br	4f658 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4f62c:	e0bffe17 	ldw	r2,-8(fp)
   4f630:	10c00d17 	ldw	r3,52(r2)
   4f634:	e0bffe17 	ldw	r2,-8(fp)
   4f638:	10800c17 	ldw	r2,48(r2)
   4f63c:	18800526 	beq	r3,r2,4f654 <altera_avalon_jtag_uart_close+0x54>
   4f640:	e0bffe17 	ldw	r2,-8(fp)
   4f644:	10c00917 	ldw	r3,36(r2)
   4f648:	e0bffe17 	ldw	r2,-8(fp)
   4f64c:	10800117 	ldw	r2,4(r2)
   4f650:	18bff136 	bltu	r3,r2,4f618 <__alt_data_end+0xfffe9e18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4f654:	0005883a 	mov	r2,zero
}
   4f658:	e037883a 	mov	sp,fp
   4f65c:	df000017 	ldw	fp,0(sp)
   4f660:	dec00104 	addi	sp,sp,4
   4f664:	f800283a 	ret

0004f668 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4f668:	defffa04 	addi	sp,sp,-24
   4f66c:	df000515 	stw	fp,20(sp)
   4f670:	df000504 	addi	fp,sp,20
   4f674:	e13ffd15 	stw	r4,-12(fp)
   4f678:	e17ffe15 	stw	r5,-8(fp)
   4f67c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4f680:	00bff9c4 	movi	r2,-25
   4f684:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4f688:	e0bffe17 	ldw	r2,-8(fp)
   4f68c:	10da8060 	cmpeqi	r3,r2,27137
   4f690:	1800031e 	bne	r3,zero,4f6a0 <altera_avalon_jtag_uart_ioctl+0x38>
   4f694:	109a80a0 	cmpeqi	r2,r2,27138
   4f698:	1000181e 	bne	r2,zero,4f6fc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   4f69c:	00002906 	br	4f744 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4f6a0:	e0bffd17 	ldw	r2,-12(fp)
   4f6a4:	10c00117 	ldw	r3,4(r2)
   4f6a8:	00a00034 	movhi	r2,32768
   4f6ac:	10bfffc4 	addi	r2,r2,-1
   4f6b0:	18802126 	beq	r3,r2,4f738 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   4f6b4:	e0bfff17 	ldw	r2,-4(fp)
   4f6b8:	10800017 	ldw	r2,0(r2)
   4f6bc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4f6c0:	e0bffc17 	ldw	r2,-16(fp)
   4f6c4:	10800090 	cmplti	r2,r2,2
   4f6c8:	1000061e 	bne	r2,zero,4f6e4 <altera_avalon_jtag_uart_ioctl+0x7c>
   4f6cc:	e0fffc17 	ldw	r3,-16(fp)
   4f6d0:	00a00034 	movhi	r2,32768
   4f6d4:	10bfffc4 	addi	r2,r2,-1
   4f6d8:	18800226 	beq	r3,r2,4f6e4 <altera_avalon_jtag_uart_ioctl+0x7c>
   4f6dc:	e0bffc17 	ldw	r2,-16(fp)
   4f6e0:	00000206 	br	4f6ec <altera_avalon_jtag_uart_ioctl+0x84>
   4f6e4:	00a00034 	movhi	r2,32768
   4f6e8:	10bfff84 	addi	r2,r2,-2
   4f6ec:	e0fffd17 	ldw	r3,-12(fp)
   4f6f0:	18800115 	stw	r2,4(r3)
      rc = 0;
   4f6f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4f6f8:	00000f06 	br	4f738 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4f6fc:	e0bffd17 	ldw	r2,-12(fp)
   4f700:	10c00117 	ldw	r3,4(r2)
   4f704:	00a00034 	movhi	r2,32768
   4f708:	10bfffc4 	addi	r2,r2,-1
   4f70c:	18800c26 	beq	r3,r2,4f740 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4f710:	e0bffd17 	ldw	r2,-12(fp)
   4f714:	10c00917 	ldw	r3,36(r2)
   4f718:	e0bffd17 	ldw	r2,-12(fp)
   4f71c:	10800117 	ldw	r2,4(r2)
   4f720:	1885803a 	cmpltu	r2,r3,r2
   4f724:	10c03fcc 	andi	r3,r2,255
   4f728:	e0bfff17 	ldw	r2,-4(fp)
   4f72c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4f730:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4f734:	00000206 	br	4f740 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4f738:	0001883a 	nop
   4f73c:	00000106 	br	4f744 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4f740:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4f744:	e0bffb17 	ldw	r2,-20(fp)
}
   4f748:	e037883a 	mov	sp,fp
   4f74c:	df000017 	ldw	fp,0(sp)
   4f750:	dec00104 	addi	sp,sp,4
   4f754:	f800283a 	ret

0004f758 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4f758:	defff304 	addi	sp,sp,-52
   4f75c:	dfc00c15 	stw	ra,48(sp)
   4f760:	df000b15 	stw	fp,44(sp)
   4f764:	df000b04 	addi	fp,sp,44
   4f768:	e13ffc15 	stw	r4,-16(fp)
   4f76c:	e17ffd15 	stw	r5,-12(fp)
   4f770:	e1bffe15 	stw	r6,-8(fp)
   4f774:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4f778:	e0bffd17 	ldw	r2,-12(fp)
   4f77c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4f780:	00004706 	br	4f8a0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4f784:	e0bffc17 	ldw	r2,-16(fp)
   4f788:	10800a17 	ldw	r2,40(r2)
   4f78c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4f790:	e0bffc17 	ldw	r2,-16(fp)
   4f794:	10800b17 	ldw	r2,44(r2)
   4f798:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4f79c:	e0fff717 	ldw	r3,-36(fp)
   4f7a0:	e0bff817 	ldw	r2,-32(fp)
   4f7a4:	18800536 	bltu	r3,r2,4f7bc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4f7a8:	e0fff717 	ldw	r3,-36(fp)
   4f7ac:	e0bff817 	ldw	r2,-32(fp)
   4f7b0:	1885c83a 	sub	r2,r3,r2
   4f7b4:	e0bff615 	stw	r2,-40(fp)
   4f7b8:	00000406 	br	4f7cc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4f7bc:	00c20004 	movi	r3,2048
   4f7c0:	e0bff817 	ldw	r2,-32(fp)
   4f7c4:	1885c83a 	sub	r2,r3,r2
   4f7c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4f7cc:	e0bff617 	ldw	r2,-40(fp)
   4f7d0:	10001e26 	beq	r2,zero,4f84c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4f7d4:	e0fffe17 	ldw	r3,-8(fp)
   4f7d8:	e0bff617 	ldw	r2,-40(fp)
   4f7dc:	1880022e 	bgeu	r3,r2,4f7e8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4f7e0:	e0bffe17 	ldw	r2,-8(fp)
   4f7e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4f7e8:	e0bffc17 	ldw	r2,-16(fp)
   4f7ec:	10c00e04 	addi	r3,r2,56
   4f7f0:	e0bff817 	ldw	r2,-32(fp)
   4f7f4:	1885883a 	add	r2,r3,r2
   4f7f8:	e1bff617 	ldw	r6,-40(fp)
   4f7fc:	100b883a 	mov	r5,r2
   4f800:	e13ff517 	ldw	r4,-44(fp)
   4f804:	004713c0 	call	4713c <memcpy>
      ptr   += n;
   4f808:	e0fff517 	ldw	r3,-44(fp)
   4f80c:	e0bff617 	ldw	r2,-40(fp)
   4f810:	1885883a 	add	r2,r3,r2
   4f814:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4f818:	e0fffe17 	ldw	r3,-8(fp)
   4f81c:	e0bff617 	ldw	r2,-40(fp)
   4f820:	1885c83a 	sub	r2,r3,r2
   4f824:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f828:	e0fff817 	ldw	r3,-32(fp)
   4f82c:	e0bff617 	ldw	r2,-40(fp)
   4f830:	1885883a 	add	r2,r3,r2
   4f834:	10c1ffcc 	andi	r3,r2,2047
   4f838:	e0bffc17 	ldw	r2,-16(fp)
   4f83c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4f840:	e0bffe17 	ldw	r2,-8(fp)
   4f844:	00bfcf16 	blt	zero,r2,4f784 <__alt_data_end+0xfffe9f84>
   4f848:	00000106 	br	4f850 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4f84c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4f850:	e0fff517 	ldw	r3,-44(fp)
   4f854:	e0bffd17 	ldw	r2,-12(fp)
   4f858:	1880141e 	bne	r3,r2,4f8ac <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4f85c:	e0bfff17 	ldw	r2,-4(fp)
   4f860:	1090000c 	andi	r2,r2,16384
   4f864:	1000131e 	bne	r2,zero,4f8b4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4f868:	0001883a 	nop
   4f86c:	e0bffc17 	ldw	r2,-16(fp)
   4f870:	10c00a17 	ldw	r3,40(r2)
   4f874:	e0bff717 	ldw	r2,-36(fp)
   4f878:	1880051e 	bne	r3,r2,4f890 <altera_avalon_jtag_uart_read+0x138>
   4f87c:	e0bffc17 	ldw	r2,-16(fp)
   4f880:	10c00917 	ldw	r3,36(r2)
   4f884:	e0bffc17 	ldw	r2,-16(fp)
   4f888:	10800117 	ldw	r2,4(r2)
   4f88c:	18bff736 	bltu	r3,r2,4f86c <__alt_data_end+0xfffea06c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4f890:	e0bffc17 	ldw	r2,-16(fp)
   4f894:	10c00a17 	ldw	r3,40(r2)
   4f898:	e0bff717 	ldw	r2,-36(fp)
   4f89c:	18800726 	beq	r3,r2,4f8bc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4f8a0:	e0bffe17 	ldw	r2,-8(fp)
   4f8a4:	00bfb716 	blt	zero,r2,4f784 <__alt_data_end+0xfffe9f84>
   4f8a8:	00000506 	br	4f8c0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4f8ac:	0001883a 	nop
   4f8b0:	00000306 	br	4f8c0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4f8b4:	0001883a 	nop
   4f8b8:	00000106 	br	4f8c0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4f8bc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4f8c0:	e0fff517 	ldw	r3,-44(fp)
   4f8c4:	e0bffd17 	ldw	r2,-12(fp)
   4f8c8:	18801826 	beq	r3,r2,4f92c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f8cc:	0005303a 	rdctl	r2,status
   4f8d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f8d4:	e0fffb17 	ldw	r3,-20(fp)
   4f8d8:	00bfff84 	movi	r2,-2
   4f8dc:	1884703a 	and	r2,r3,r2
   4f8e0:	1001703a 	wrctl	status,r2
  
  return context;
   4f8e4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4f8e8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4f8ec:	e0bffc17 	ldw	r2,-16(fp)
   4f8f0:	10800817 	ldw	r2,32(r2)
   4f8f4:	10c00054 	ori	r3,r2,1
   4f8f8:	e0bffc17 	ldw	r2,-16(fp)
   4f8fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4f900:	e0bffc17 	ldw	r2,-16(fp)
   4f904:	10800017 	ldw	r2,0(r2)
   4f908:	10800104 	addi	r2,r2,4
   4f90c:	1007883a 	mov	r3,r2
   4f910:	e0bffc17 	ldw	r2,-16(fp)
   4f914:	10800817 	ldw	r2,32(r2)
   4f918:	18800035 	stwio	r2,0(r3)
   4f91c:	e0bffa17 	ldw	r2,-24(fp)
   4f920:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f924:	e0bff917 	ldw	r2,-28(fp)
   4f928:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4f92c:	e0fff517 	ldw	r3,-44(fp)
   4f930:	e0bffd17 	ldw	r2,-12(fp)
   4f934:	18800426 	beq	r3,r2,4f948 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   4f938:	e0fff517 	ldw	r3,-44(fp)
   4f93c:	e0bffd17 	ldw	r2,-12(fp)
   4f940:	1885c83a 	sub	r2,r3,r2
   4f944:	00000606 	br	4f960 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   4f948:	e0bfff17 	ldw	r2,-4(fp)
   4f94c:	1090000c 	andi	r2,r2,16384
   4f950:	10000226 	beq	r2,zero,4f95c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4f954:	00bffd44 	movi	r2,-11
   4f958:	00000106 	br	4f960 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   4f95c:	00bffec4 	movi	r2,-5
}
   4f960:	e037883a 	mov	sp,fp
   4f964:	dfc00117 	ldw	ra,4(sp)
   4f968:	df000017 	ldw	fp,0(sp)
   4f96c:	dec00204 	addi	sp,sp,8
   4f970:	f800283a 	ret

0004f974 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4f974:	defff304 	addi	sp,sp,-52
   4f978:	dfc00c15 	stw	ra,48(sp)
   4f97c:	df000b15 	stw	fp,44(sp)
   4f980:	df000b04 	addi	fp,sp,44
   4f984:	e13ffc15 	stw	r4,-16(fp)
   4f988:	e17ffd15 	stw	r5,-12(fp)
   4f98c:	e1bffe15 	stw	r6,-8(fp)
   4f990:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4f994:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4f998:	e0bffd17 	ldw	r2,-12(fp)
   4f99c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4f9a0:	00003706 	br	4fa80 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4f9a4:	e0bffc17 	ldw	r2,-16(fp)
   4f9a8:	10800c17 	ldw	r2,48(r2)
   4f9ac:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   4f9b0:	e0bffc17 	ldw	r2,-16(fp)
   4f9b4:	10800d17 	ldw	r2,52(r2)
   4f9b8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4f9bc:	e0fff917 	ldw	r3,-28(fp)
   4f9c0:	e0bff517 	ldw	r2,-44(fp)
   4f9c4:	1880062e 	bgeu	r3,r2,4f9e0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4f9c8:	e0fff517 	ldw	r3,-44(fp)
   4f9cc:	e0bff917 	ldw	r2,-28(fp)
   4f9d0:	1885c83a 	sub	r2,r3,r2
   4f9d4:	10bfffc4 	addi	r2,r2,-1
   4f9d8:	e0bff615 	stw	r2,-40(fp)
   4f9dc:	00000b06 	br	4fa0c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4f9e0:	e0bff517 	ldw	r2,-44(fp)
   4f9e4:	10000526 	beq	r2,zero,4f9fc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4f9e8:	00c20004 	movi	r3,2048
   4f9ec:	e0bff917 	ldw	r2,-28(fp)
   4f9f0:	1885c83a 	sub	r2,r3,r2
   4f9f4:	e0bff615 	stw	r2,-40(fp)
   4f9f8:	00000406 	br	4fa0c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4f9fc:	00c1ffc4 	movi	r3,2047
   4fa00:	e0bff917 	ldw	r2,-28(fp)
   4fa04:	1885c83a 	sub	r2,r3,r2
   4fa08:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4fa0c:	e0bff617 	ldw	r2,-40(fp)
   4fa10:	10001e26 	beq	r2,zero,4fa8c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4fa14:	e0fffe17 	ldw	r3,-8(fp)
   4fa18:	e0bff617 	ldw	r2,-40(fp)
   4fa1c:	1880022e 	bgeu	r3,r2,4fa28 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4fa20:	e0bffe17 	ldw	r2,-8(fp)
   4fa24:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4fa28:	e0bffc17 	ldw	r2,-16(fp)
   4fa2c:	10c20e04 	addi	r3,r2,2104
   4fa30:	e0bff917 	ldw	r2,-28(fp)
   4fa34:	1885883a 	add	r2,r3,r2
   4fa38:	e1bff617 	ldw	r6,-40(fp)
   4fa3c:	e17ffd17 	ldw	r5,-12(fp)
   4fa40:	1009883a 	mov	r4,r2
   4fa44:	004713c0 	call	4713c <memcpy>
      ptr   += n;
   4fa48:	e0fffd17 	ldw	r3,-12(fp)
   4fa4c:	e0bff617 	ldw	r2,-40(fp)
   4fa50:	1885883a 	add	r2,r3,r2
   4fa54:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4fa58:	e0fffe17 	ldw	r3,-8(fp)
   4fa5c:	e0bff617 	ldw	r2,-40(fp)
   4fa60:	1885c83a 	sub	r2,r3,r2
   4fa64:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4fa68:	e0fff917 	ldw	r3,-28(fp)
   4fa6c:	e0bff617 	ldw	r2,-40(fp)
   4fa70:	1885883a 	add	r2,r3,r2
   4fa74:	10c1ffcc 	andi	r3,r2,2047
   4fa78:	e0bffc17 	ldw	r2,-16(fp)
   4fa7c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4fa80:	e0bffe17 	ldw	r2,-8(fp)
   4fa84:	00bfc716 	blt	zero,r2,4f9a4 <__alt_data_end+0xfffea1a4>
   4fa88:	00000106 	br	4fa90 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4fa8c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fa90:	0005303a 	rdctl	r2,status
   4fa94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fa98:	e0fffb17 	ldw	r3,-20(fp)
   4fa9c:	00bfff84 	movi	r2,-2
   4faa0:	1884703a 	and	r2,r3,r2
   4faa4:	1001703a 	wrctl	status,r2
  
  return context;
   4faa8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4faac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4fab0:	e0bffc17 	ldw	r2,-16(fp)
   4fab4:	10800817 	ldw	r2,32(r2)
   4fab8:	10c00094 	ori	r3,r2,2
   4fabc:	e0bffc17 	ldw	r2,-16(fp)
   4fac0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4fac4:	e0bffc17 	ldw	r2,-16(fp)
   4fac8:	10800017 	ldw	r2,0(r2)
   4facc:	10800104 	addi	r2,r2,4
   4fad0:	1007883a 	mov	r3,r2
   4fad4:	e0bffc17 	ldw	r2,-16(fp)
   4fad8:	10800817 	ldw	r2,32(r2)
   4fadc:	18800035 	stwio	r2,0(r3)
   4fae0:	e0bffa17 	ldw	r2,-24(fp)
   4fae4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fae8:	e0bff817 	ldw	r2,-32(fp)
   4faec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4faf0:	e0bffe17 	ldw	r2,-8(fp)
   4faf4:	0080100e 	bge	zero,r2,4fb38 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4faf8:	e0bfff17 	ldw	r2,-4(fp)
   4fafc:	1090000c 	andi	r2,r2,16384
   4fb00:	1000101e 	bne	r2,zero,4fb44 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4fb04:	0001883a 	nop
   4fb08:	e0bffc17 	ldw	r2,-16(fp)
   4fb0c:	10c00d17 	ldw	r3,52(r2)
   4fb10:	e0bff517 	ldw	r2,-44(fp)
   4fb14:	1880051e 	bne	r3,r2,4fb2c <altera_avalon_jtag_uart_write+0x1b8>
   4fb18:	e0bffc17 	ldw	r2,-16(fp)
   4fb1c:	10c00917 	ldw	r3,36(r2)
   4fb20:	e0bffc17 	ldw	r2,-16(fp)
   4fb24:	10800117 	ldw	r2,4(r2)
   4fb28:	18bff736 	bltu	r3,r2,4fb08 <__alt_data_end+0xfffea308>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4fb2c:	e0bffc17 	ldw	r2,-16(fp)
   4fb30:	10800917 	ldw	r2,36(r2)
   4fb34:	1000051e 	bne	r2,zero,4fb4c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4fb38:	e0bffe17 	ldw	r2,-8(fp)
   4fb3c:	00bfd016 	blt	zero,r2,4fa80 <__alt_data_end+0xfffea280>
   4fb40:	00000306 	br	4fb50 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4fb44:	0001883a 	nop
   4fb48:	00000106 	br	4fb50 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   4fb4c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4fb50:	e0fffd17 	ldw	r3,-12(fp)
   4fb54:	e0bff717 	ldw	r2,-36(fp)
   4fb58:	18800426 	beq	r3,r2,4fb6c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4fb5c:	e0fffd17 	ldw	r3,-12(fp)
   4fb60:	e0bff717 	ldw	r2,-36(fp)
   4fb64:	1885c83a 	sub	r2,r3,r2
   4fb68:	00000606 	br	4fb84 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4fb6c:	e0bfff17 	ldw	r2,-4(fp)
   4fb70:	1090000c 	andi	r2,r2,16384
   4fb74:	10000226 	beq	r2,zero,4fb80 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4fb78:	00bffd44 	movi	r2,-11
   4fb7c:	00000106 	br	4fb84 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4fb80:	00bffec4 	movi	r2,-5
}
   4fb84:	e037883a 	mov	sp,fp
   4fb88:	dfc00117 	ldw	ra,4(sp)
   4fb8c:	df000017 	ldw	fp,0(sp)
   4fb90:	dec00204 	addi	sp,sp,8
   4fb94:	f800283a 	ret

0004fb98 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4fb98:	defffa04 	addi	sp,sp,-24
   4fb9c:	dfc00515 	stw	ra,20(sp)
   4fba0:	df000415 	stw	fp,16(sp)
   4fba4:	df000404 	addi	fp,sp,16
   4fba8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4fbac:	0007883a 	mov	r3,zero
   4fbb0:	e0bfff17 	ldw	r2,-4(fp)
   4fbb4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4fbb8:	e0bfff17 	ldw	r2,-4(fp)
   4fbbc:	10800104 	addi	r2,r2,4
   4fbc0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fbc4:	0005303a 	rdctl	r2,status
   4fbc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fbcc:	e0fffd17 	ldw	r3,-12(fp)
   4fbd0:	00bfff84 	movi	r2,-2
   4fbd4:	1884703a 	and	r2,r3,r2
   4fbd8:	1001703a 	wrctl	status,r2
  
  return context;
   4fbdc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4fbe0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4fbe4:	005085c0 	call	5085c <alt_tick>
   4fbe8:	e0bffc17 	ldw	r2,-16(fp)
   4fbec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fbf0:	e0bffe17 	ldw	r2,-8(fp)
   4fbf4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4fbf8:	0001883a 	nop
   4fbfc:	e037883a 	mov	sp,fp
   4fc00:	dfc00117 	ldw	ra,4(sp)
   4fc04:	df000017 	ldw	fp,0(sp)
   4fc08:	dec00204 	addi	sp,sp,8
   4fc0c:	f800283a 	ret

0004fc10 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4fc10:	defff804 	addi	sp,sp,-32
   4fc14:	dfc00715 	stw	ra,28(sp)
   4fc18:	df000615 	stw	fp,24(sp)
   4fc1c:	df000604 	addi	fp,sp,24
   4fc20:	e13ffc15 	stw	r4,-16(fp)
   4fc24:	e17ffd15 	stw	r5,-12(fp)
   4fc28:	e1bffe15 	stw	r6,-8(fp)
   4fc2c:	e1ffff15 	stw	r7,-4(fp)
   4fc30:	e0bfff17 	ldw	r2,-4(fp)
   4fc34:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4fc38:	d0a6da17 	ldw	r2,-25752(gp)
   4fc3c:	1000021e 	bne	r2,zero,4fc48 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   4fc40:	e0bffb17 	ldw	r2,-20(fp)
   4fc44:	d0a6da15 	stw	r2,-25752(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4fc48:	e0bffc17 	ldw	r2,-16(fp)
   4fc4c:	10800104 	addi	r2,r2,4
   4fc50:	00c001c4 	movi	r3,7
   4fc54:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4fc58:	d8000015 	stw	zero,0(sp)
   4fc5c:	e1fffc17 	ldw	r7,-16(fp)
   4fc60:	01800174 	movhi	r6,5
   4fc64:	31bee604 	addi	r6,r6,-1128
   4fc68:	e17ffe17 	ldw	r5,-8(fp)
   4fc6c:	e13ffd17 	ldw	r4,-12(fp)
   4fc70:	004e6300 	call	4e630 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4fc74:	0001883a 	nop
   4fc78:	e037883a 	mov	sp,fp
   4fc7c:	dfc00117 	ldw	ra,4(sp)
   4fc80:	df000017 	ldw	fp,0(sp)
   4fc84:	dec00204 	addi	sp,sp,8
   4fc88:	f800283a 	ret

0004fc8c <check_mm_if_busy>:
#include "unistd.h" //usleep()

// #define DEBUG

int check_mm_if_busy(void)
{
   4fc8c:	defffe04 	addi	sp,sp,-8
   4fc90:	df000115 	stw	fp,4(sp)
   4fc94:	df000104 	addi	fp,sp,4
    //Read control register of I2C-mm if
    int res = IORD(I2C_AVALON_MM_IF_0_BASE,CTRL_REG);
   4fc98:	0005883a 	mov	r2,zero
   4fc9c:	10800037 	ldwio	r2,0(r2)
   4fca0:	e0bfff15 	stw	r2,-4(fp)
    //check if I2C_AVALON_MM_IF state machine is busy
  #ifdef DEBUG
    printf("CTRL: 0x%x\n",res);
  #endif
    if (check_bit(res,MM_IF_BUSY))
   4fca4:	e0bfff17 	ldw	r2,-4(fp)
   4fca8:	1080200c 	andi	r2,r2,128
   4fcac:	10000226 	beq	r2,zero,4fcb8 <check_mm_if_busy+0x2c>
    {
        return 1;
   4fcb0:	00800044 	movi	r2,1
   4fcb4:	00000106 	br	4fcbc <check_mm_if_busy+0x30>
    }
    else
    {
        return 0;
   4fcb8:	0005883a 	mov	r2,zero
    }
}
   4fcbc:	e037883a 	mov	sp,fp
   4fcc0:	df000017 	ldw	fp,0(sp)
   4fcc4:	dec00104 	addi	sp,sp,4
   4fcc8:	f800283a 	ret

0004fccc <write_to_i2c_device>:

void write_to_i2c_device(alt_u8 i2c_device_addr, alt_u8 i2c_reg_addr,alt_u8 no_bytes,alt_u32 data)
{
   4fccc:	defffa04 	addi	sp,sp,-24
   4fcd0:	dfc00515 	stw	ra,20(sp)
   4fcd4:	df000415 	stw	fp,16(sp)
   4fcd8:	df000404 	addi	fp,sp,16
   4fcdc:	2807883a 	mov	r3,r5
   4fce0:	3005883a 	mov	r2,r6
   4fce4:	e1ffff15 	stw	r7,-4(fp)
   4fce8:	e13ffc05 	stb	r4,-16(fp)
   4fcec:	e0fffd05 	stb	r3,-12(fp)
   4fcf0:	e0bffe05 	stb	r2,-8(fp)
    //write to address register of i2c mm if
    IOWR(I2C_AVALON_MM_IF_0_BASE,ADDR_REG, i2c_reg_addr << 8 | i2c_device_addr);
   4fcf4:	e0bffd03 	ldbu	r2,-12(fp)
   4fcf8:	1006923a 	slli	r3,r2,8
   4fcfc:	e0bffc03 	ldbu	r2,-16(fp)
   4fd00:	1886b03a 	or	r3,r3,r2
   4fd04:	00800104 	movi	r2,4
   4fd08:	10c00035 	stwio	r3,0(r2)
    //write to the data register of the i2c mm if
    IOWR(I2C_AVALON_MM_IF_0_BASE,WRITE_REG,data);
   4fd0c:	e0ffff17 	ldw	r3,-4(fp)
   4fd10:	00800204 	movi	r2,8
   4fd14:	10c00035 	stwio	r3,0(r2)
    //Set the corresponding bits of the ctrl register to enable the i2c communication
    IOWR(I2C_AVALON_MM_IF_0_BASE,CTRL_REG,no_bytes << 2 | CMD_ENA_WR);
   4fd18:	e0bffe03 	ldbu	r2,-8(fp)
   4fd1c:	1085883a 	add	r2,r2,r2
   4fd20:	1085883a 	add	r2,r2,r2
   4fd24:	10800054 	ori	r2,r2,1
   4fd28:	0007883a 	mov	r3,zero
   4fd2c:	18800035 	stwio	r2,0(r3)
    //Check for busy in the ctrl register (i2c busy or mm if busy), and continue when no longer busy
    while(check_mm_if_busy()) continue;
   4fd30:	00000106 	br	4fd38 <write_to_i2c_device+0x6c>
   4fd34:	0001883a 	nop
   4fd38:	004fc8c0 	call	4fc8c <check_mm_if_busy>
   4fd3c:	103ffd1e 	bne	r2,zero,4fd34 <__alt_data_end+0xfffea534>
}
   4fd40:	0001883a 	nop
   4fd44:	e037883a 	mov	sp,fp
   4fd48:	dfc00117 	ldw	ra,4(sp)
   4fd4c:	df000017 	ldw	fp,0(sp)
   4fd50:	dec00204 	addi	sp,sp,8
   4fd54:	f800283a 	ret

0004fd58 <read_from_i2c_device>:

void read_from_i2c_device(alt_u8 i2c_device_addr,alt_u8 i2c_reg_addr,alt_u8 no_bytes, alt_u8* data)
{
   4fd58:	defff404 	addi	sp,sp,-48
   4fd5c:	dfc00b15 	stw	ra,44(sp)
   4fd60:	df000a15 	stw	fp,40(sp)
   4fd64:	df000a04 	addi	fp,sp,40
   4fd68:	2807883a 	mov	r3,r5
   4fd6c:	3005883a 	mov	r2,r6
   4fd70:	e1ffff15 	stw	r7,-4(fp)
   4fd74:	e13ffc05 	stb	r4,-16(fp)
   4fd78:	e0fffd05 	stb	r3,-12(fp)
   4fd7c:	e0bffe05 	stb	r2,-8(fp)
    alt_u32 read_reg[2] = {0};
   4fd80:	0005883a 	mov	r2,zero
   4fd84:	0007883a 	mov	r3,zero
   4fd88:	e0bff815 	stw	r2,-32(fp)
   4fd8c:	e0fff915 	stw	r3,-28(fp)
    alt_u8 data_temp[8] = {0};
   4fd90:	e03ffa15 	stw	zero,-24(fp)
   4fd94:	e03ffb15 	stw	zero,-20(fp)

    //write to address register of i2c mm if
    //6..0: 7-bits i2c device addres
    //15..8: 8 bits register address of i2c device
    IOWR(I2C_AVALON_MM_IF_0_BASE,ADDR_REG, i2c_reg_addr << 8 | i2c_device_addr);
   4fd98:	e0bffd03 	ldbu	r2,-12(fp)
   4fd9c:	1006923a 	slli	r3,r2,8
   4fda0:	e0bffc03 	ldbu	r2,-16(fp)
   4fda4:	1886b03a 	or	r3,r3,r2
   4fda8:	00800104 	movi	r2,4
   4fdac:	10c00035 	stwio	r3,0(r2)
    //Write to i2c mm if ctrl register to enable i2c command
    IOWR(I2C_AVALON_MM_IF_0_BASE,CTRL_REG, CMD_ENA_WR);
   4fdb0:	00800044 	movi	r2,1
   4fdb4:	0007883a 	mov	r3,zero
   4fdb8:	18800035 	stwio	r2,0(r3)
    //Check for busy in the ctrl register (i2c busy or mm if busy), and continue when no longer busy
    while(check_mm_if_busy()) continue;
   4fdbc:	00000106 	br	4fdc4 <read_from_i2c_device+0x6c>
   4fdc0:	0001883a 	nop
   4fdc4:	004fc8c0 	call	4fc8c <check_mm_if_busy>
   4fdc8:	103ffd1e 	bne	r2,zero,4fdc0 <__alt_data_end+0xfffea5c0>

    //no_bytes to be read from the i2c device

    IOWR(I2C_AVALON_MM_IF_0_BASE,CTRL_REG,no_bytes << 2 | CMD_ENA_RD);
   4fdcc:	e0bffe03 	ldbu	r2,-8(fp)
   4fdd0:	1085883a 	add	r2,r2,r2
   4fdd4:	1085883a 	add	r2,r2,r2
   4fdd8:	108000d4 	ori	r2,r2,3
   4fddc:	0007883a 	mov	r3,zero
   4fde0:	18800035 	stwio	r2,0(r3)
    while(check_mm_if_busy()) continue;
   4fde4:	00000106 	br	4fdec <read_from_i2c_device+0x94>
   4fde8:	0001883a 	nop
   4fdec:	004fc8c0 	call	4fc8c <check_mm_if_busy>
   4fdf0:	103ffd1e 	bne	r2,zero,4fde8 <__alt_data_end+0xfffea5e8>

    read_reg[0] = IORD(I2C_AVALON_MM_IF_0_BASE,READ_REG_LOW);
   4fdf4:	00800304 	movi	r2,12
   4fdf8:	10800037 	ldwio	r2,0(r2)
   4fdfc:	e0bff815 	stw	r2,-32(fp)
    read_reg[1] = IORD(I2C_AVALON_MM_IF_0_BASE,READ_REG_HIGH);
   4fe00:	00800404 	movi	r2,16
   4fe04:	10800037 	ldwio	r2,0(r2)
   4fe08:	e0bff915 	stw	r2,-28(fp)

    //Move data in to byte array
    for(int i = 0; i<4; i++) {
   4fe0c:	e03ff615 	stw	zero,-40(fp)
   4fe10:	00001606 	br	4fe6c <read_from_i2c_device+0x114>
        data_temp[i] = (read_reg[0] >> i*8) & 0xff;
   4fe14:	e0fff817 	ldw	r3,-32(fp)
   4fe18:	e0bff617 	ldw	r2,-40(fp)
   4fe1c:	100490fa 	slli	r2,r2,3
   4fe20:	1884d83a 	srl	r2,r3,r2
   4fe24:	1009883a 	mov	r4,r2
   4fe28:	e0fffa04 	addi	r3,fp,-24
   4fe2c:	e0bff617 	ldw	r2,-40(fp)
   4fe30:	1885883a 	add	r2,r3,r2
   4fe34:	11000005 	stb	r4,0(r2)
        data_temp[i+4] = (read_reg[1] >> i*8) & 0xff;
   4fe38:	e0bff617 	ldw	r2,-40(fp)
   4fe3c:	10800104 	addi	r2,r2,4
   4fe40:	e13ff917 	ldw	r4,-28(fp)
   4fe44:	e0fff617 	ldw	r3,-40(fp)
   4fe48:	180690fa 	slli	r3,r3,3
   4fe4c:	20c6d83a 	srl	r3,r4,r3
   4fe50:	1809883a 	mov	r4,r3
   4fe54:	e0fffa04 	addi	r3,fp,-24
   4fe58:	1885883a 	add	r2,r3,r2
   4fe5c:	11000005 	stb	r4,0(r2)

    read_reg[0] = IORD(I2C_AVALON_MM_IF_0_BASE,READ_REG_LOW);
    read_reg[1] = IORD(I2C_AVALON_MM_IF_0_BASE,READ_REG_HIGH);

    //Move data in to byte array
    for(int i = 0; i<4; i++) {
   4fe60:	e0bff617 	ldw	r2,-40(fp)
   4fe64:	10800044 	addi	r2,r2,1
   4fe68:	e0bff615 	stw	r2,-40(fp)
   4fe6c:	e0bff617 	ldw	r2,-40(fp)
   4fe70:	10800110 	cmplti	r2,r2,4
   4fe74:	103fe71e 	bne	r2,zero,4fe14 <__alt_data_end+0xfffea614>
        data_temp[i] = (read_reg[0] >> i*8) & 0xff;
        data_temp[i+4] = (read_reg[1] >> i*8) & 0xff;
    }

    //reverse byte array to have first received byte in the lowest array position
    for(int i = 0; i<no_bytes; i++) {
   4fe78:	e03ff715 	stw	zero,-36(fp)
   4fe7c:	00000e06 	br	4feb8 <read_from_i2c_device+0x160>
        data[i] = data_temp[(no_bytes-1)-i];
   4fe80:	e0bff717 	ldw	r2,-36(fp)
   4fe84:	e0ffff17 	ldw	r3,-4(fp)
   4fe88:	1885883a 	add	r2,r3,r2
   4fe8c:	e0fffe03 	ldbu	r3,-8(fp)
   4fe90:	193fffc4 	addi	r4,r3,-1
   4fe94:	e0fff717 	ldw	r3,-36(fp)
   4fe98:	20c7c83a 	sub	r3,r4,r3
   4fe9c:	e13ffa04 	addi	r4,fp,-24
   4fea0:	20c7883a 	add	r3,r4,r3
   4fea4:	18c00003 	ldbu	r3,0(r3)
   4fea8:	10c00005 	stb	r3,0(r2)
        data_temp[i] = (read_reg[0] >> i*8) & 0xff;
        data_temp[i+4] = (read_reg[1] >> i*8) & 0xff;
    }

    //reverse byte array to have first received byte in the lowest array position
    for(int i = 0; i<no_bytes; i++) {
   4feac:	e0bff717 	ldw	r2,-36(fp)
   4feb0:	10800044 	addi	r2,r2,1
   4feb4:	e0bff715 	stw	r2,-36(fp)
   4feb8:	e0bffe03 	ldbu	r2,-8(fp)
   4febc:	e0fff717 	ldw	r3,-36(fp)
   4fec0:	18bfef16 	blt	r3,r2,4fe80 <__alt_data_end+0xfffea680>
        data[i] = data_temp[(no_bytes-1)-i];
        //printf("i: %d, no_bytes: %d\n" ,i,(no_bytes-1)-i);
    }

}
   4fec4:	0001883a 	nop
   4fec8:	e037883a 	mov	sp,fp
   4fecc:	dfc00117 	ldw	ra,4(sp)
   4fed0:	df000017 	ldw	fp,0(sp)
   4fed4:	dec00204 	addi	sp,sp,8
   4fed8:	f800283a 	ret

0004fedc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4fedc:	defff504 	addi	sp,sp,-44
   4fee0:	df000a15 	stw	fp,40(sp)
   4fee4:	df000a04 	addi	fp,sp,40
   4fee8:	e13ffc15 	stw	r4,-16(fp)
   4feec:	e17ffd15 	stw	r5,-12(fp)
   4fef0:	e1bffe15 	stw	r6,-8(fp)
   4fef4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4fef8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4fefc:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
   4ff00:	10003c26 	beq	r2,zero,4fff4 <alt_alarm_start+0x118>
  {
    if (alarm)
   4ff04:	e0bffc17 	ldw	r2,-16(fp)
   4ff08:	10003826 	beq	r2,zero,4ffec <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   4ff0c:	e0bffc17 	ldw	r2,-16(fp)
   4ff10:	e0fffe17 	ldw	r3,-8(fp)
   4ff14:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4ff18:	e0bffc17 	ldw	r2,-16(fp)
   4ff1c:	e0ffff17 	ldw	r3,-4(fp)
   4ff20:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ff24:	0005303a 	rdctl	r2,status
   4ff28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ff2c:	e0fff917 	ldw	r3,-28(fp)
   4ff30:	00bfff84 	movi	r2,-2
   4ff34:	1884703a 	and	r2,r3,r2
   4ff38:	1001703a 	wrctl	status,r2
  
  return context;
   4ff3c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   4ff40:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4ff44:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
   4ff48:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4ff4c:	e0fffd17 	ldw	r3,-12(fp)
   4ff50:	e0bff617 	ldw	r2,-40(fp)
   4ff54:	1885883a 	add	r2,r3,r2
   4ff58:	10c00044 	addi	r3,r2,1
   4ff5c:	e0bffc17 	ldw	r2,-16(fp)
   4ff60:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4ff64:	e0bffc17 	ldw	r2,-16(fp)
   4ff68:	10c00217 	ldw	r3,8(r2)
   4ff6c:	e0bff617 	ldw	r2,-40(fp)
   4ff70:	1880042e 	bgeu	r3,r2,4ff84 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   4ff74:	e0bffc17 	ldw	r2,-16(fp)
   4ff78:	00c00044 	movi	r3,1
   4ff7c:	10c00405 	stb	r3,16(r2)
   4ff80:	00000206 	br	4ff8c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   4ff84:	e0bffc17 	ldw	r2,-16(fp)
   4ff88:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4ff8c:	e0bffc17 	ldw	r2,-16(fp)
   4ff90:	d0e00e04 	addi	r3,gp,-32712
   4ff94:	e0fffa15 	stw	r3,-24(fp)
   4ff98:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ff9c:	e0bffb17 	ldw	r2,-20(fp)
   4ffa0:	e0fffa17 	ldw	r3,-24(fp)
   4ffa4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4ffa8:	e0bffa17 	ldw	r2,-24(fp)
   4ffac:	10c00017 	ldw	r3,0(r2)
   4ffb0:	e0bffb17 	ldw	r2,-20(fp)
   4ffb4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4ffb8:	e0bffa17 	ldw	r2,-24(fp)
   4ffbc:	10800017 	ldw	r2,0(r2)
   4ffc0:	e0fffb17 	ldw	r3,-20(fp)
   4ffc4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4ffc8:	e0bffa17 	ldw	r2,-24(fp)
   4ffcc:	e0fffb17 	ldw	r3,-20(fp)
   4ffd0:	10c00015 	stw	r3,0(r2)
   4ffd4:	e0bff817 	ldw	r2,-32(fp)
   4ffd8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ffdc:	e0bff717 	ldw	r2,-36(fp)
   4ffe0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4ffe4:	0005883a 	mov	r2,zero
   4ffe8:	00000306 	br	4fff8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   4ffec:	00bffa84 	movi	r2,-22
   4fff0:	00000106 	br	4fff8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   4fff4:	00bfde84 	movi	r2,-134
  }
}
   4fff8:	e037883a 	mov	sp,fp
   4fffc:	df000017 	ldw	fp,0(sp)
   50000:	dec00104 	addi	sp,sp,4
   50004:	f800283a 	ret

00050008 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   50008:	defffa04 	addi	sp,sp,-24
   5000c:	dfc00515 	stw	ra,20(sp)
   50010:	df000415 	stw	fp,16(sp)
   50014:	df000404 	addi	fp,sp,16
   50018:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   5001c:	00800244 	movi	r2,9
   50020:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   50024:	014003f4 	movhi	r5,15
   50028:	29509004 	addi	r5,r5,16960
   5002c:	e13ffd17 	ldw	r4,-12(fp)
   50030:	00415200 	call	41520 <__mulsi3>
   50034:	100b883a 	mov	r5,r2
   50038:	0100bef4 	movhi	r4,763
   5003c:	213c2004 	addi	r4,r4,-3968
   50040:	004bb000 	call	4bb00 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   50044:	100b883a 	mov	r5,r2
   50048:	01200034 	movhi	r4,32768
   5004c:	213fffc4 	addi	r4,r4,-1
   50050:	004bb000 	call	4bb00 <__udivsi3>
   50054:	100b883a 	mov	r5,r2
   50058:	e13fff17 	ldw	r4,-4(fp)
   5005c:	004bb000 	call	4bb00 <__udivsi3>
   50060:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   50064:	e0bffe17 	ldw	r2,-8(fp)
   50068:	10002a26 	beq	r2,zero,50114 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   5006c:	e03ffc15 	stw	zero,-16(fp)
   50070:	00001706 	br	500d0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   50074:	00a00034 	movhi	r2,32768
   50078:	10bfffc4 	addi	r2,r2,-1
   5007c:	10bfffc4 	addi	r2,r2,-1
   50080:	103ffe1e 	bne	r2,zero,5007c <__alt_data_end+0xfffea87c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   50084:	014003f4 	movhi	r5,15
   50088:	29509004 	addi	r5,r5,16960
   5008c:	e13ffd17 	ldw	r4,-12(fp)
   50090:	00415200 	call	41520 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   50094:	100b883a 	mov	r5,r2
   50098:	0100bef4 	movhi	r4,763
   5009c:	213c2004 	addi	r4,r4,-3968
   500a0:	004bb000 	call	4bb00 <__udivsi3>
   500a4:	100b883a 	mov	r5,r2
   500a8:	01200034 	movhi	r4,32768
   500ac:	213fffc4 	addi	r4,r4,-1
   500b0:	004bb000 	call	4bb00 <__udivsi3>
   500b4:	1007883a 	mov	r3,r2
   500b8:	e0bfff17 	ldw	r2,-4(fp)
   500bc:	10c5c83a 	sub	r2,r2,r3
   500c0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   500c4:	e0bffc17 	ldw	r2,-16(fp)
   500c8:	10800044 	addi	r2,r2,1
   500cc:	e0bffc15 	stw	r2,-16(fp)
   500d0:	e0fffc17 	ldw	r3,-16(fp)
   500d4:	e0bffe17 	ldw	r2,-8(fp)
   500d8:	18bfe616 	blt	r3,r2,50074 <__alt_data_end+0xfffea874>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   500dc:	014003f4 	movhi	r5,15
   500e0:	29509004 	addi	r5,r5,16960
   500e4:	e13ffd17 	ldw	r4,-12(fp)
   500e8:	00415200 	call	41520 <__mulsi3>
   500ec:	100b883a 	mov	r5,r2
   500f0:	0100bef4 	movhi	r4,763
   500f4:	213c2004 	addi	r4,r4,-3968
   500f8:	004bb000 	call	4bb00 <__udivsi3>
   500fc:	e17fff17 	ldw	r5,-4(fp)
   50100:	1009883a 	mov	r4,r2
   50104:	00415200 	call	41520 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   50108:	10bfffc4 	addi	r2,r2,-1
   5010c:	103ffe1e 	bne	r2,zero,50108 <__alt_data_end+0xfffea908>
   50110:	00000d06 	br	50148 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   50114:	014003f4 	movhi	r5,15
   50118:	29509004 	addi	r5,r5,16960
   5011c:	e13ffd17 	ldw	r4,-12(fp)
   50120:	00415200 	call	41520 <__mulsi3>
   50124:	100b883a 	mov	r5,r2
   50128:	0100bef4 	movhi	r4,763
   5012c:	213c2004 	addi	r4,r4,-3968
   50130:	004bb000 	call	4bb00 <__udivsi3>
   50134:	e17fff17 	ldw	r5,-4(fp)
   50138:	1009883a 	mov	r4,r2
   5013c:	00415200 	call	41520 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   50140:	10bfffc4 	addi	r2,r2,-1
   50144:	00bffe16 	blt	zero,r2,50140 <__alt_data_end+0xfffea940>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   50148:	0005883a 	mov	r2,zero
}
   5014c:	e037883a 	mov	sp,fp
   50150:	dfc00117 	ldw	ra,4(sp)
   50154:	df000017 	ldw	fp,0(sp)
   50158:	dec00204 	addi	sp,sp,8
   5015c:	f800283a 	ret

00050160 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   50160:	deffff04 	addi	sp,sp,-4
   50164:	df000015 	stw	fp,0(sp)
   50168:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   5016c:	0001883a 	nop
   50170:	e037883a 	mov	sp,fp
   50174:	df000017 	ldw	fp,0(sp)
   50178:	dec00104 	addi	sp,sp,4
   5017c:	f800283a 	ret

00050180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   50180:	defffe04 	addi	sp,sp,-8
   50184:	dfc00115 	stw	ra,4(sp)
   50188:	df000015 	stw	fp,0(sp)
   5018c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   50190:	d0a00b17 	ldw	r2,-32724(gp)
   50194:	10000326 	beq	r2,zero,501a4 <alt_get_errno+0x24>
   50198:	d0a00b17 	ldw	r2,-32724(gp)
   5019c:	103ee83a 	callr	r2
   501a0:	00000106 	br	501a8 <alt_get_errno+0x28>
   501a4:	d0a6d404 	addi	r2,gp,-25776
}
   501a8:	e037883a 	mov	sp,fp
   501ac:	dfc00117 	ldw	ra,4(sp)
   501b0:	df000017 	ldw	fp,0(sp)
   501b4:	dec00204 	addi	sp,sp,8
   501b8:	f800283a 	ret

000501bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   501bc:	defffa04 	addi	sp,sp,-24
   501c0:	dfc00515 	stw	ra,20(sp)
   501c4:	df000415 	stw	fp,16(sp)
   501c8:	df000404 	addi	fp,sp,16
   501cc:	e13ffe15 	stw	r4,-8(fp)
   501d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   501d4:	e0bffe17 	ldw	r2,-8(fp)
   501d8:	10000326 	beq	r2,zero,501e8 <alt_dev_llist_insert+0x2c>
   501dc:	e0bffe17 	ldw	r2,-8(fp)
   501e0:	10800217 	ldw	r2,8(r2)
   501e4:	1000061e 	bne	r2,zero,50200 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   501e8:	00501800 	call	50180 <alt_get_errno>
   501ec:	1007883a 	mov	r3,r2
   501f0:	00800584 	movi	r2,22
   501f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   501f8:	00bffa84 	movi	r2,-22
   501fc:	00001306 	br	5024c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   50200:	e0bffe17 	ldw	r2,-8(fp)
   50204:	e0ffff17 	ldw	r3,-4(fp)
   50208:	e0fffc15 	stw	r3,-16(fp)
   5020c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   50210:	e0bffd17 	ldw	r2,-12(fp)
   50214:	e0fffc17 	ldw	r3,-16(fp)
   50218:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   5021c:	e0bffc17 	ldw	r2,-16(fp)
   50220:	10c00017 	ldw	r3,0(r2)
   50224:	e0bffd17 	ldw	r2,-12(fp)
   50228:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   5022c:	e0bffc17 	ldw	r2,-16(fp)
   50230:	10800017 	ldw	r2,0(r2)
   50234:	e0fffd17 	ldw	r3,-12(fp)
   50238:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5023c:	e0bffc17 	ldw	r2,-16(fp)
   50240:	e0fffd17 	ldw	r3,-12(fp)
   50244:	10c00015 	stw	r3,0(r2)

  return 0;  
   50248:	0005883a 	mov	r2,zero
}
   5024c:	e037883a 	mov	sp,fp
   50250:	dfc00117 	ldw	ra,4(sp)
   50254:	df000017 	ldw	fp,0(sp)
   50258:	dec00204 	addi	sp,sp,8
   5025c:	f800283a 	ret

00050260 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   50260:	defffd04 	addi	sp,sp,-12
   50264:	dfc00215 	stw	ra,8(sp)
   50268:	df000115 	stw	fp,4(sp)
   5026c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   50270:	00800174 	movhi	r2,5
   50274:	1083dd04 	addi	r2,r2,3956
   50278:	e0bfff15 	stw	r2,-4(fp)
   5027c:	00000606 	br	50298 <_do_ctors+0x38>
        (*ctor) (); 
   50280:	e0bfff17 	ldw	r2,-4(fp)
   50284:	10800017 	ldw	r2,0(r2)
   50288:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   5028c:	e0bfff17 	ldw	r2,-4(fp)
   50290:	10bfff04 	addi	r2,r2,-4
   50294:	e0bfff15 	stw	r2,-4(fp)
   50298:	e0ffff17 	ldw	r3,-4(fp)
   5029c:	00800174 	movhi	r2,5
   502a0:	1083de04 	addi	r2,r2,3960
   502a4:	18bff62e 	bgeu	r3,r2,50280 <__alt_data_end+0xfffeaa80>
        (*ctor) (); 
}
   502a8:	0001883a 	nop
   502ac:	e037883a 	mov	sp,fp
   502b0:	dfc00117 	ldw	ra,4(sp)
   502b4:	df000017 	ldw	fp,0(sp)
   502b8:	dec00204 	addi	sp,sp,8
   502bc:	f800283a 	ret

000502c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   502c0:	defffd04 	addi	sp,sp,-12
   502c4:	dfc00215 	stw	ra,8(sp)
   502c8:	df000115 	stw	fp,4(sp)
   502cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   502d0:	00800174 	movhi	r2,5
   502d4:	1083dd04 	addi	r2,r2,3956
   502d8:	e0bfff15 	stw	r2,-4(fp)
   502dc:	00000606 	br	502f8 <_do_dtors+0x38>
        (*dtor) (); 
   502e0:	e0bfff17 	ldw	r2,-4(fp)
   502e4:	10800017 	ldw	r2,0(r2)
   502e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   502ec:	e0bfff17 	ldw	r2,-4(fp)
   502f0:	10bfff04 	addi	r2,r2,-4
   502f4:	e0bfff15 	stw	r2,-4(fp)
   502f8:	e0ffff17 	ldw	r3,-4(fp)
   502fc:	00800174 	movhi	r2,5
   50300:	1083de04 	addi	r2,r2,3960
   50304:	18bff62e 	bgeu	r3,r2,502e0 <__alt_data_end+0xfffeaae0>
        (*dtor) (); 
}
   50308:	0001883a 	nop
   5030c:	e037883a 	mov	sp,fp
   50310:	dfc00117 	ldw	ra,4(sp)
   50314:	df000017 	ldw	fp,0(sp)
   50318:	dec00204 	addi	sp,sp,8
   5031c:	f800283a 	ret

00050320 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   50320:	deffff04 	addi	sp,sp,-4
   50324:	df000015 	stw	fp,0(sp)
   50328:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   5032c:	0001883a 	nop
   50330:	e037883a 	mov	sp,fp
   50334:	df000017 	ldw	fp,0(sp)
   50338:	dec00104 	addi	sp,sp,4
   5033c:	f800283a 	ret

00050340 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   50340:	defffe04 	addi	sp,sp,-8
   50344:	df000115 	stw	fp,4(sp)
   50348:	df000104 	addi	fp,sp,4
   5034c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   50350:	e0bfff17 	ldw	r2,-4(fp)
   50354:	10bffe84 	addi	r2,r2,-6
   50358:	10c00428 	cmpgeui	r3,r2,16
   5035c:	18001a1e 	bne	r3,zero,503c8 <alt_exception_cause_generated_bad_addr+0x88>
   50360:	100690ba 	slli	r3,r2,2
   50364:	00800174 	movhi	r2,5
   50368:	1080de04 	addi	r2,r2,888
   5036c:	1885883a 	add	r2,r3,r2
   50370:	10800017 	ldw	r2,0(r2)
   50374:	1000683a 	jmp	r2
   50378:	000503b8 	rdprs	zero,zero,5134
   5037c:	000503b8 	rdprs	zero,zero,5134
   50380:	000503c8 	cmpgei	zero,zero,5135
   50384:	000503c8 	cmpgei	zero,zero,5135
   50388:	000503c8 	cmpgei	zero,zero,5135
   5038c:	000503b8 	rdprs	zero,zero,5134
   50390:	000503c0 	call	503c <__alt_mem_onchip_mem-0x3afc4>
   50394:	000503c8 	cmpgei	zero,zero,5135
   50398:	000503b8 	rdprs	zero,zero,5134
   5039c:	000503b8 	rdprs	zero,zero,5134
   503a0:	000503c8 	cmpgei	zero,zero,5135
   503a4:	000503b8 	rdprs	zero,zero,5134
   503a8:	000503c0 	call	503c <__alt_mem_onchip_mem-0x3afc4>
   503ac:	000503c8 	cmpgei	zero,zero,5135
   503b0:	000503c8 	cmpgei	zero,zero,5135
   503b4:	000503b8 	rdprs	zero,zero,5134
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   503b8:	00800044 	movi	r2,1
   503bc:	00000306 	br	503cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   503c0:	0005883a 	mov	r2,zero
   503c4:	00000106 	br	503cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   503c8:	0005883a 	mov	r2,zero
  }
}
   503cc:	e037883a 	mov	sp,fp
   503d0:	df000017 	ldw	fp,0(sp)
   503d4:	dec00104 	addi	sp,sp,4
   503d8:	f800283a 	ret

000503dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   503dc:	defff804 	addi	sp,sp,-32
   503e0:	dfc00715 	stw	ra,28(sp)
   503e4:	df000615 	stw	fp,24(sp)
   503e8:	dc000515 	stw	r16,20(sp)
   503ec:	df000604 	addi	fp,sp,24
   503f0:	e13ffb15 	stw	r4,-20(fp)
   503f4:	e17ffc15 	stw	r5,-16(fp)
   503f8:	e1bffd15 	stw	r6,-12(fp)
   503fc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   50400:	e1bffe17 	ldw	r6,-8(fp)
   50404:	e17ffd17 	ldw	r5,-12(fp)
   50408:	e13ffc17 	ldw	r4,-16(fp)
   5040c:	00506640 	call	50664 <open>
   50410:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   50414:	e0bffa17 	ldw	r2,-24(fp)
   50418:	10002216 	blt	r2,zero,504a4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   5041c:	04000174 	movhi	r16,5
   50420:	84072004 	addi	r16,r16,7296
   50424:	e0bffa17 	ldw	r2,-24(fp)
   50428:	01400304 	movi	r5,12
   5042c:	1009883a 	mov	r4,r2
   50430:	00415200 	call	41520 <__mulsi3>
   50434:	8085883a 	add	r2,r16,r2
   50438:	10c00017 	ldw	r3,0(r2)
   5043c:	e0bffb17 	ldw	r2,-20(fp)
   50440:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   50444:	04000174 	movhi	r16,5
   50448:	84072004 	addi	r16,r16,7296
   5044c:	e0bffa17 	ldw	r2,-24(fp)
   50450:	01400304 	movi	r5,12
   50454:	1009883a 	mov	r4,r2
   50458:	00415200 	call	41520 <__mulsi3>
   5045c:	8085883a 	add	r2,r16,r2
   50460:	10800104 	addi	r2,r2,4
   50464:	10c00017 	ldw	r3,0(r2)
   50468:	e0bffb17 	ldw	r2,-20(fp)
   5046c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   50470:	04000174 	movhi	r16,5
   50474:	84072004 	addi	r16,r16,7296
   50478:	e0bffa17 	ldw	r2,-24(fp)
   5047c:	01400304 	movi	r5,12
   50480:	1009883a 	mov	r4,r2
   50484:	00415200 	call	41520 <__mulsi3>
   50488:	8085883a 	add	r2,r16,r2
   5048c:	10800204 	addi	r2,r2,8
   50490:	10c00017 	ldw	r3,0(r2)
   50494:	e0bffb17 	ldw	r2,-20(fp)
   50498:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   5049c:	e13ffa17 	ldw	r4,-24(fp)
   504a0:	004edc00 	call	4edc0 <alt_release_fd>
  }
} 
   504a4:	0001883a 	nop
   504a8:	e6ffff04 	addi	sp,fp,-4
   504ac:	dfc00217 	ldw	ra,8(sp)
   504b0:	df000117 	ldw	fp,4(sp)
   504b4:	dc000017 	ldw	r16,0(sp)
   504b8:	dec00304 	addi	sp,sp,12
   504bc:	f800283a 	ret

000504c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   504c0:	defffb04 	addi	sp,sp,-20
   504c4:	dfc00415 	stw	ra,16(sp)
   504c8:	df000315 	stw	fp,12(sp)
   504cc:	df000304 	addi	fp,sp,12
   504d0:	e13ffd15 	stw	r4,-12(fp)
   504d4:	e17ffe15 	stw	r5,-8(fp)
   504d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   504dc:	01c07fc4 	movi	r7,511
   504e0:	01800044 	movi	r6,1
   504e4:	e17ffd17 	ldw	r5,-12(fp)
   504e8:	01000174 	movhi	r4,5
   504ec:	21072304 	addi	r4,r4,7308
   504f0:	00503dc0 	call	503dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   504f4:	01c07fc4 	movi	r7,511
   504f8:	000d883a 	mov	r6,zero
   504fc:	e17ffe17 	ldw	r5,-8(fp)
   50500:	01000174 	movhi	r4,5
   50504:	21072004 	addi	r4,r4,7296
   50508:	00503dc0 	call	503dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   5050c:	01c07fc4 	movi	r7,511
   50510:	01800044 	movi	r6,1
   50514:	e17fff17 	ldw	r5,-4(fp)
   50518:	01000174 	movhi	r4,5
   5051c:	21072604 	addi	r4,r4,7320
   50520:	00503dc0 	call	503dc <alt_open_fd>
}  
   50524:	0001883a 	nop
   50528:	e037883a 	mov	sp,fp
   5052c:	dfc00117 	ldw	ra,4(sp)
   50530:	df000017 	ldw	fp,0(sp)
   50534:	dec00204 	addi	sp,sp,8
   50538:	f800283a 	ret

0005053c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5053c:	defffe04 	addi	sp,sp,-8
   50540:	dfc00115 	stw	ra,4(sp)
   50544:	df000015 	stw	fp,0(sp)
   50548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5054c:	d0a00b17 	ldw	r2,-32724(gp)
   50550:	10000326 	beq	r2,zero,50560 <alt_get_errno+0x24>
   50554:	d0a00b17 	ldw	r2,-32724(gp)
   50558:	103ee83a 	callr	r2
   5055c:	00000106 	br	50564 <alt_get_errno+0x28>
   50560:	d0a6d404 	addi	r2,gp,-25776
}
   50564:	e037883a 	mov	sp,fp
   50568:	dfc00117 	ldw	ra,4(sp)
   5056c:	df000017 	ldw	fp,0(sp)
   50570:	dec00204 	addi	sp,sp,8
   50574:	f800283a 	ret

00050578 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   50578:	defffb04 	addi	sp,sp,-20
   5057c:	dfc00415 	stw	ra,16(sp)
   50580:	df000315 	stw	fp,12(sp)
   50584:	dc000215 	stw	r16,8(sp)
   50588:	df000304 	addi	fp,sp,12
   5058c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   50590:	e0bffe17 	ldw	r2,-8(fp)
   50594:	10800217 	ldw	r2,8(r2)
   50598:	10d00034 	orhi	r3,r2,16384
   5059c:	e0bffe17 	ldw	r2,-8(fp)
   505a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   505a4:	e03ffd15 	stw	zero,-12(fp)
   505a8:	00002306 	br	50638 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   505ac:	04000174 	movhi	r16,5
   505b0:	84072004 	addi	r16,r16,7296
   505b4:	e0bffd17 	ldw	r2,-12(fp)
   505b8:	01400304 	movi	r5,12
   505bc:	1009883a 	mov	r4,r2
   505c0:	00415200 	call	41520 <__mulsi3>
   505c4:	8085883a 	add	r2,r16,r2
   505c8:	10c00017 	ldw	r3,0(r2)
   505cc:	e0bffe17 	ldw	r2,-8(fp)
   505d0:	10800017 	ldw	r2,0(r2)
   505d4:	1880151e 	bne	r3,r2,5062c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   505d8:	04000174 	movhi	r16,5
   505dc:	84072004 	addi	r16,r16,7296
   505e0:	e0bffd17 	ldw	r2,-12(fp)
   505e4:	01400304 	movi	r5,12
   505e8:	1009883a 	mov	r4,r2
   505ec:	00415200 	call	41520 <__mulsi3>
   505f0:	8085883a 	add	r2,r16,r2
   505f4:	10800204 	addi	r2,r2,8
   505f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   505fc:	10000b0e 	bge	r2,zero,5062c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   50600:	01400304 	movi	r5,12
   50604:	e13ffd17 	ldw	r4,-12(fp)
   50608:	00415200 	call	41520 <__mulsi3>
   5060c:	1007883a 	mov	r3,r2
   50610:	00800174 	movhi	r2,5
   50614:	10872004 	addi	r2,r2,7296
   50618:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   5061c:	e0bffe17 	ldw	r2,-8(fp)
   50620:	18800226 	beq	r3,r2,5062c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   50624:	00bffcc4 	movi	r2,-13
   50628:	00000806 	br	5064c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   5062c:	e0bffd17 	ldw	r2,-12(fp)
   50630:	10800044 	addi	r2,r2,1
   50634:	e0bffd15 	stw	r2,-12(fp)
   50638:	d0a00a17 	ldw	r2,-32728(gp)
   5063c:	1007883a 	mov	r3,r2
   50640:	e0bffd17 	ldw	r2,-12(fp)
   50644:	18bfd92e 	bgeu	r3,r2,505ac <__alt_data_end+0xfffeadac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   50648:	0005883a 	mov	r2,zero
}
   5064c:	e6ffff04 	addi	sp,fp,-4
   50650:	dfc00217 	ldw	ra,8(sp)
   50654:	df000117 	ldw	fp,4(sp)
   50658:	dc000017 	ldw	r16,0(sp)
   5065c:	dec00304 	addi	sp,sp,12
   50660:	f800283a 	ret

00050664 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   50664:	defff604 	addi	sp,sp,-40
   50668:	dfc00915 	stw	ra,36(sp)
   5066c:	df000815 	stw	fp,32(sp)
   50670:	df000804 	addi	fp,sp,32
   50674:	e13ffd15 	stw	r4,-12(fp)
   50678:	e17ffe15 	stw	r5,-8(fp)
   5067c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   50680:	00bfffc4 	movi	r2,-1
   50684:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   50688:	00bffb44 	movi	r2,-19
   5068c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   50690:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   50694:	d1600804 	addi	r5,gp,-32736
   50698:	e13ffd17 	ldw	r4,-12(fp)
   5069c:	00509880 	call	50988 <alt_find_dev>
   506a0:	e0bff815 	stw	r2,-32(fp)
   506a4:	e0bff817 	ldw	r2,-32(fp)
   506a8:	1000051e 	bne	r2,zero,506c0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   506ac:	e13ffd17 	ldw	r4,-12(fp)
   506b0:	0050a180 	call	50a18 <alt_find_file>
   506b4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   506b8:	00800044 	movi	r2,1
   506bc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   506c0:	e0bff817 	ldw	r2,-32(fp)
   506c4:	10002b26 	beq	r2,zero,50774 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   506c8:	e13ff817 	ldw	r4,-32(fp)
   506cc:	0050b200 	call	50b20 <alt_get_fd>
   506d0:	e0bff915 	stw	r2,-28(fp)
   506d4:	e0bff917 	ldw	r2,-28(fp)
   506d8:	1000030e 	bge	r2,zero,506e8 <open+0x84>
    {
      status = index;
   506dc:	e0bff917 	ldw	r2,-28(fp)
   506e0:	e0bffa15 	stw	r2,-24(fp)
   506e4:	00002506 	br	5077c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   506e8:	01400304 	movi	r5,12
   506ec:	e13ff917 	ldw	r4,-28(fp)
   506f0:	00415200 	call	41520 <__mulsi3>
   506f4:	1007883a 	mov	r3,r2
   506f8:	00800174 	movhi	r2,5
   506fc:	10872004 	addi	r2,r2,7296
   50700:	1885883a 	add	r2,r3,r2
   50704:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   50708:	e0fffe17 	ldw	r3,-8(fp)
   5070c:	00900034 	movhi	r2,16384
   50710:	10bfffc4 	addi	r2,r2,-1
   50714:	1886703a 	and	r3,r3,r2
   50718:	e0bffc17 	ldw	r2,-16(fp)
   5071c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   50720:	e0bffb17 	ldw	r2,-20(fp)
   50724:	1000051e 	bne	r2,zero,5073c <open+0xd8>
   50728:	e13ffc17 	ldw	r4,-16(fp)
   5072c:	00505780 	call	50578 <alt_file_locked>
   50730:	e0bffa15 	stw	r2,-24(fp)
   50734:	e0bffa17 	ldw	r2,-24(fp)
   50738:	10001016 	blt	r2,zero,5077c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   5073c:	e0bff817 	ldw	r2,-32(fp)
   50740:	10800317 	ldw	r2,12(r2)
   50744:	10000826 	beq	r2,zero,50768 <open+0x104>
   50748:	e0bff817 	ldw	r2,-32(fp)
   5074c:	10800317 	ldw	r2,12(r2)
   50750:	e1ffff17 	ldw	r7,-4(fp)
   50754:	e1bffe17 	ldw	r6,-8(fp)
   50758:	e17ffd17 	ldw	r5,-12(fp)
   5075c:	e13ffc17 	ldw	r4,-16(fp)
   50760:	103ee83a 	callr	r2
   50764:	00000106 	br	5076c <open+0x108>
   50768:	0005883a 	mov	r2,zero
   5076c:	e0bffa15 	stw	r2,-24(fp)
   50770:	00000206 	br	5077c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   50774:	00bffb44 	movi	r2,-19
   50778:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   5077c:	e0bffa17 	ldw	r2,-24(fp)
   50780:	1000090e 	bge	r2,zero,507a8 <open+0x144>
  {
    alt_release_fd (index);  
   50784:	e13ff917 	ldw	r4,-28(fp)
   50788:	004edc00 	call	4edc0 <alt_release_fd>
    ALT_ERRNO = -status;
   5078c:	005053c0 	call	5053c <alt_get_errno>
   50790:	1007883a 	mov	r3,r2
   50794:	e0bffa17 	ldw	r2,-24(fp)
   50798:	0085c83a 	sub	r2,zero,r2
   5079c:	18800015 	stw	r2,0(r3)
    return -1;
   507a0:	00bfffc4 	movi	r2,-1
   507a4:	00000106 	br	507ac <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   507a8:	e0bff917 	ldw	r2,-28(fp)
}
   507ac:	e037883a 	mov	sp,fp
   507b0:	dfc00117 	ldw	ra,4(sp)
   507b4:	df000017 	ldw	fp,0(sp)
   507b8:	dec00204 	addi	sp,sp,8
   507bc:	f800283a 	ret

000507c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   507c0:	defffa04 	addi	sp,sp,-24
   507c4:	df000515 	stw	fp,20(sp)
   507c8:	df000504 	addi	fp,sp,20
   507cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   507d0:	0005303a 	rdctl	r2,status
   507d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   507d8:	e0fffc17 	ldw	r3,-16(fp)
   507dc:	00bfff84 	movi	r2,-2
   507e0:	1884703a 	and	r2,r3,r2
   507e4:	1001703a 	wrctl	status,r2
  
  return context;
   507e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   507ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   507f0:	e0bfff17 	ldw	r2,-4(fp)
   507f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   507f8:	e0bffd17 	ldw	r2,-12(fp)
   507fc:	10800017 	ldw	r2,0(r2)
   50800:	e0fffd17 	ldw	r3,-12(fp)
   50804:	18c00117 	ldw	r3,4(r3)
   50808:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   5080c:	e0bffd17 	ldw	r2,-12(fp)
   50810:	10800117 	ldw	r2,4(r2)
   50814:	e0fffd17 	ldw	r3,-12(fp)
   50818:	18c00017 	ldw	r3,0(r3)
   5081c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   50820:	e0bffd17 	ldw	r2,-12(fp)
   50824:	e0fffd17 	ldw	r3,-12(fp)
   50828:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   5082c:	e0bffd17 	ldw	r2,-12(fp)
   50830:	e0fffd17 	ldw	r3,-12(fp)
   50834:	10c00015 	stw	r3,0(r2)
   50838:	e0bffb17 	ldw	r2,-20(fp)
   5083c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50840:	e0bffe17 	ldw	r2,-8(fp)
   50844:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   50848:	0001883a 	nop
   5084c:	e037883a 	mov	sp,fp
   50850:	df000017 	ldw	fp,0(sp)
   50854:	dec00104 	addi	sp,sp,4
   50858:	f800283a 	ret

0005085c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   5085c:	defffb04 	addi	sp,sp,-20
   50860:	dfc00415 	stw	ra,16(sp)
   50864:	df000315 	stw	fp,12(sp)
   50868:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   5086c:	d0a00e17 	ldw	r2,-32712(gp)
   50870:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   50874:	d0a6db17 	ldw	r2,-25748(gp)
   50878:	10800044 	addi	r2,r2,1
   5087c:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   50880:	00002e06 	br	5093c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   50884:	e0bffd17 	ldw	r2,-12(fp)
   50888:	10800017 	ldw	r2,0(r2)
   5088c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   50890:	e0bffd17 	ldw	r2,-12(fp)
   50894:	10800403 	ldbu	r2,16(r2)
   50898:	10803fcc 	andi	r2,r2,255
   5089c:	10000426 	beq	r2,zero,508b0 <alt_tick+0x54>
   508a0:	d0a6db17 	ldw	r2,-25748(gp)
   508a4:	1000021e 	bne	r2,zero,508b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   508a8:	e0bffd17 	ldw	r2,-12(fp)
   508ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   508b0:	e0bffd17 	ldw	r2,-12(fp)
   508b4:	10800217 	ldw	r2,8(r2)
   508b8:	d0e6db17 	ldw	r3,-25748(gp)
   508bc:	18801d36 	bltu	r3,r2,50934 <alt_tick+0xd8>
   508c0:	e0bffd17 	ldw	r2,-12(fp)
   508c4:	10800403 	ldbu	r2,16(r2)
   508c8:	10803fcc 	andi	r2,r2,255
   508cc:	1000191e 	bne	r2,zero,50934 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   508d0:	e0bffd17 	ldw	r2,-12(fp)
   508d4:	10800317 	ldw	r2,12(r2)
   508d8:	e0fffd17 	ldw	r3,-12(fp)
   508dc:	18c00517 	ldw	r3,20(r3)
   508e0:	1809883a 	mov	r4,r3
   508e4:	103ee83a 	callr	r2
   508e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   508ec:	e0bfff17 	ldw	r2,-4(fp)
   508f0:	1000031e 	bne	r2,zero,50900 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   508f4:	e13ffd17 	ldw	r4,-12(fp)
   508f8:	00507c00 	call	507c0 <alt_alarm_stop>
   508fc:	00000d06 	br	50934 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   50900:	e0bffd17 	ldw	r2,-12(fp)
   50904:	10c00217 	ldw	r3,8(r2)
   50908:	e0bfff17 	ldw	r2,-4(fp)
   5090c:	1887883a 	add	r3,r3,r2
   50910:	e0bffd17 	ldw	r2,-12(fp)
   50914:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   50918:	e0bffd17 	ldw	r2,-12(fp)
   5091c:	10c00217 	ldw	r3,8(r2)
   50920:	d0a6db17 	ldw	r2,-25748(gp)
   50924:	1880032e 	bgeu	r3,r2,50934 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   50928:	e0bffd17 	ldw	r2,-12(fp)
   5092c:	00c00044 	movi	r3,1
   50930:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   50934:	e0bffe17 	ldw	r2,-8(fp)
   50938:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   5093c:	e0fffd17 	ldw	r3,-12(fp)
   50940:	d0a00e04 	addi	r2,gp,-32712
   50944:	18bfcf1e 	bne	r3,r2,50884 <__alt_data_end+0xfffeb084>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   50948:	0001883a 	nop
}
   5094c:	0001883a 	nop
   50950:	e037883a 	mov	sp,fp
   50954:	dfc00117 	ldw	ra,4(sp)
   50958:	df000017 	ldw	fp,0(sp)
   5095c:	dec00204 	addi	sp,sp,8
   50960:	f800283a 	ret

00050964 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   50964:	deffff04 	addi	sp,sp,-4
   50968:	df000015 	stw	fp,0(sp)
   5096c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   50970:	000170fa 	wrctl	ienable,zero
}
   50974:	0001883a 	nop
   50978:	e037883a 	mov	sp,fp
   5097c:	df000017 	ldw	fp,0(sp)
   50980:	dec00104 	addi	sp,sp,4
   50984:	f800283a 	ret

00050988 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   50988:	defffa04 	addi	sp,sp,-24
   5098c:	dfc00515 	stw	ra,20(sp)
   50990:	df000415 	stw	fp,16(sp)
   50994:	df000404 	addi	fp,sp,16
   50998:	e13ffe15 	stw	r4,-8(fp)
   5099c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   509a0:	e0bfff17 	ldw	r2,-4(fp)
   509a4:	10800017 	ldw	r2,0(r2)
   509a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   509ac:	e13ffe17 	ldw	r4,-8(fp)
   509b0:	00416880 	call	41688 <strlen>
   509b4:	10800044 	addi	r2,r2,1
   509b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   509bc:	00000d06 	br	509f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   509c0:	e0bffc17 	ldw	r2,-16(fp)
   509c4:	10800217 	ldw	r2,8(r2)
   509c8:	e0fffd17 	ldw	r3,-12(fp)
   509cc:	180d883a 	mov	r6,r3
   509d0:	e17ffe17 	ldw	r5,-8(fp)
   509d4:	1009883a 	mov	r4,r2
   509d8:	0050c300 	call	50c30 <memcmp>
   509dc:	1000021e 	bne	r2,zero,509e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   509e0:	e0bffc17 	ldw	r2,-16(fp)
   509e4:	00000706 	br	50a04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   509e8:	e0bffc17 	ldw	r2,-16(fp)
   509ec:	10800017 	ldw	r2,0(r2)
   509f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   509f4:	e0fffc17 	ldw	r3,-16(fp)
   509f8:	e0bfff17 	ldw	r2,-4(fp)
   509fc:	18bff01e 	bne	r3,r2,509c0 <__alt_data_end+0xfffeb1c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   50a00:	0005883a 	mov	r2,zero
}
   50a04:	e037883a 	mov	sp,fp
   50a08:	dfc00117 	ldw	ra,4(sp)
   50a0c:	df000017 	ldw	fp,0(sp)
   50a10:	dec00204 	addi	sp,sp,8
   50a14:	f800283a 	ret

00050a18 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   50a18:	defffb04 	addi	sp,sp,-20
   50a1c:	dfc00415 	stw	ra,16(sp)
   50a20:	df000315 	stw	fp,12(sp)
   50a24:	df000304 	addi	fp,sp,12
   50a28:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   50a2c:	d0a00617 	ldw	r2,-32744(gp)
   50a30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50a34:	00003106 	br	50afc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   50a38:	e0bffd17 	ldw	r2,-12(fp)
   50a3c:	10800217 	ldw	r2,8(r2)
   50a40:	1009883a 	mov	r4,r2
   50a44:	00416880 	call	41688 <strlen>
   50a48:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   50a4c:	e0bffd17 	ldw	r2,-12(fp)
   50a50:	10c00217 	ldw	r3,8(r2)
   50a54:	e0bffe17 	ldw	r2,-8(fp)
   50a58:	10bfffc4 	addi	r2,r2,-1
   50a5c:	1885883a 	add	r2,r3,r2
   50a60:	10800003 	ldbu	r2,0(r2)
   50a64:	10803fcc 	andi	r2,r2,255
   50a68:	1080201c 	xori	r2,r2,128
   50a6c:	10bfe004 	addi	r2,r2,-128
   50a70:	10800bd8 	cmpnei	r2,r2,47
   50a74:	1000031e 	bne	r2,zero,50a84 <alt_find_file+0x6c>
    {
      len -= 1;
   50a78:	e0bffe17 	ldw	r2,-8(fp)
   50a7c:	10bfffc4 	addi	r2,r2,-1
   50a80:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   50a84:	e0bffe17 	ldw	r2,-8(fp)
   50a88:	e0ffff17 	ldw	r3,-4(fp)
   50a8c:	1885883a 	add	r2,r3,r2
   50a90:	10800003 	ldbu	r2,0(r2)
   50a94:	10803fcc 	andi	r2,r2,255
   50a98:	1080201c 	xori	r2,r2,128
   50a9c:	10bfe004 	addi	r2,r2,-128
   50aa0:	10800be0 	cmpeqi	r2,r2,47
   50aa4:	1000081e 	bne	r2,zero,50ac8 <alt_find_file+0xb0>
   50aa8:	e0bffe17 	ldw	r2,-8(fp)
   50aac:	e0ffff17 	ldw	r3,-4(fp)
   50ab0:	1885883a 	add	r2,r3,r2
   50ab4:	10800003 	ldbu	r2,0(r2)
   50ab8:	10803fcc 	andi	r2,r2,255
   50abc:	1080201c 	xori	r2,r2,128
   50ac0:	10bfe004 	addi	r2,r2,-128
   50ac4:	10000a1e 	bne	r2,zero,50af0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   50ac8:	e0bffd17 	ldw	r2,-12(fp)
   50acc:	10800217 	ldw	r2,8(r2)
   50ad0:	e0fffe17 	ldw	r3,-8(fp)
   50ad4:	180d883a 	mov	r6,r3
   50ad8:	e17fff17 	ldw	r5,-4(fp)
   50adc:	1009883a 	mov	r4,r2
   50ae0:	0050c300 	call	50c30 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   50ae4:	1000021e 	bne	r2,zero,50af0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   50ae8:	e0bffd17 	ldw	r2,-12(fp)
   50aec:	00000706 	br	50b0c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   50af0:	e0bffd17 	ldw	r2,-12(fp)
   50af4:	10800017 	ldw	r2,0(r2)
   50af8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50afc:	e0fffd17 	ldw	r3,-12(fp)
   50b00:	d0a00604 	addi	r2,gp,-32744
   50b04:	18bfcc1e 	bne	r3,r2,50a38 <__alt_data_end+0xfffeb238>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   50b08:	0005883a 	mov	r2,zero
}
   50b0c:	e037883a 	mov	sp,fp
   50b10:	dfc00117 	ldw	ra,4(sp)
   50b14:	df000017 	ldw	fp,0(sp)
   50b18:	dec00204 	addi	sp,sp,8
   50b1c:	f800283a 	ret

00050b20 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   50b20:	defffa04 	addi	sp,sp,-24
   50b24:	dfc00515 	stw	ra,20(sp)
   50b28:	df000415 	stw	fp,16(sp)
   50b2c:	dc000315 	stw	r16,12(sp)
   50b30:	df000404 	addi	fp,sp,16
   50b34:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   50b38:	00bffa04 	movi	r2,-24
   50b3c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   50b40:	e03ffc15 	stw	zero,-16(fp)
   50b44:	00001d06 	br	50bbc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   50b48:	04000174 	movhi	r16,5
   50b4c:	84072004 	addi	r16,r16,7296
   50b50:	e0bffc17 	ldw	r2,-16(fp)
   50b54:	01400304 	movi	r5,12
   50b58:	1009883a 	mov	r4,r2
   50b5c:	00415200 	call	41520 <__mulsi3>
   50b60:	8085883a 	add	r2,r16,r2
   50b64:	10800017 	ldw	r2,0(r2)
   50b68:	1000111e 	bne	r2,zero,50bb0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   50b6c:	04000174 	movhi	r16,5
   50b70:	84072004 	addi	r16,r16,7296
   50b74:	e0bffc17 	ldw	r2,-16(fp)
   50b78:	01400304 	movi	r5,12
   50b7c:	1009883a 	mov	r4,r2
   50b80:	00415200 	call	41520 <__mulsi3>
   50b84:	8085883a 	add	r2,r16,r2
   50b88:	e0fffe17 	ldw	r3,-8(fp)
   50b8c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   50b90:	d0e00a17 	ldw	r3,-32728(gp)
   50b94:	e0bffc17 	ldw	r2,-16(fp)
   50b98:	1880020e 	bge	r3,r2,50ba4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   50b9c:	e0bffc17 	ldw	r2,-16(fp)
   50ba0:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   50ba4:	e0bffc17 	ldw	r2,-16(fp)
   50ba8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   50bac:	00000606 	br	50bc8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   50bb0:	e0bffc17 	ldw	r2,-16(fp)
   50bb4:	10800044 	addi	r2,r2,1
   50bb8:	e0bffc15 	stw	r2,-16(fp)
   50bbc:	e0bffc17 	ldw	r2,-16(fp)
   50bc0:	10800810 	cmplti	r2,r2,32
   50bc4:	103fe01e 	bne	r2,zero,50b48 <__alt_data_end+0xfffeb348>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   50bc8:	e0bffd17 	ldw	r2,-12(fp)
}
   50bcc:	e6ffff04 	addi	sp,fp,-4
   50bd0:	dfc00217 	ldw	ra,8(sp)
   50bd4:	df000117 	ldw	fp,4(sp)
   50bd8:	dc000017 	ldw	r16,0(sp)
   50bdc:	dec00304 	addi	sp,sp,12
   50be0:	f800283a 	ret

00050be4 <atexit>:
   50be4:	200b883a 	mov	r5,r4
   50be8:	000f883a 	mov	r7,zero
   50bec:	000d883a 	mov	r6,zero
   50bf0:	0009883a 	mov	r4,zero
   50bf4:	0050cac1 	jmpi	50cac <__register_exitproc>

00050bf8 <exit>:
   50bf8:	defffe04 	addi	sp,sp,-8
   50bfc:	000b883a 	mov	r5,zero
   50c00:	dc000015 	stw	r16,0(sp)
   50c04:	dfc00115 	stw	ra,4(sp)
   50c08:	2021883a 	mov	r16,r4
   50c0c:	0050dc40 	call	50dc4 <__call_exitprocs>
   50c10:	00800174 	movhi	r2,5
   50c14:	108b9804 	addi	r2,r2,11872
   50c18:	11000017 	ldw	r4,0(r2)
   50c1c:	20800f17 	ldw	r2,60(r4)
   50c20:	10000126 	beq	r2,zero,50c28 <exit+0x30>
   50c24:	103ee83a 	callr	r2
   50c28:	8009883a 	mov	r4,r16
   50c2c:	0050f440 	call	50f44 <_exit>

00050c30 <memcmp>:
   50c30:	01c000c4 	movi	r7,3
   50c34:	3980192e 	bgeu	r7,r6,50c9c <memcmp+0x6c>
   50c38:	2144b03a 	or	r2,r4,r5
   50c3c:	11c4703a 	and	r2,r2,r7
   50c40:	10000f26 	beq	r2,zero,50c80 <memcmp+0x50>
   50c44:	20800003 	ldbu	r2,0(r4)
   50c48:	28c00003 	ldbu	r3,0(r5)
   50c4c:	10c0151e 	bne	r2,r3,50ca4 <memcmp+0x74>
   50c50:	31bfff84 	addi	r6,r6,-2
   50c54:	01ffffc4 	movi	r7,-1
   50c58:	00000406 	br	50c6c <memcmp+0x3c>
   50c5c:	20800003 	ldbu	r2,0(r4)
   50c60:	28c00003 	ldbu	r3,0(r5)
   50c64:	31bfffc4 	addi	r6,r6,-1
   50c68:	10c00e1e 	bne	r2,r3,50ca4 <memcmp+0x74>
   50c6c:	21000044 	addi	r4,r4,1
   50c70:	29400044 	addi	r5,r5,1
   50c74:	31fff91e 	bne	r6,r7,50c5c <__alt_data_end+0xfffeb45c>
   50c78:	0005883a 	mov	r2,zero
   50c7c:	f800283a 	ret
   50c80:	20c00017 	ldw	r3,0(r4)
   50c84:	28800017 	ldw	r2,0(r5)
   50c88:	18bfee1e 	bne	r3,r2,50c44 <__alt_data_end+0xfffeb444>
   50c8c:	31bfff04 	addi	r6,r6,-4
   50c90:	21000104 	addi	r4,r4,4
   50c94:	29400104 	addi	r5,r5,4
   50c98:	39bff936 	bltu	r7,r6,50c80 <__alt_data_end+0xfffeb480>
   50c9c:	303fe91e 	bne	r6,zero,50c44 <__alt_data_end+0xfffeb444>
   50ca0:	003ff506 	br	50c78 <__alt_data_end+0xfffeb478>
   50ca4:	10c5c83a 	sub	r2,r2,r3
   50ca8:	f800283a 	ret

00050cac <__register_exitproc>:
   50cac:	defffa04 	addi	sp,sp,-24
   50cb0:	dc000315 	stw	r16,12(sp)
   50cb4:	04000174 	movhi	r16,5
   50cb8:	840b9804 	addi	r16,r16,11872
   50cbc:	80c00017 	ldw	r3,0(r16)
   50cc0:	dc400415 	stw	r17,16(sp)
   50cc4:	dfc00515 	stw	ra,20(sp)
   50cc8:	18805217 	ldw	r2,328(r3)
   50ccc:	2023883a 	mov	r17,r4
   50cd0:	10003726 	beq	r2,zero,50db0 <__register_exitproc+0x104>
   50cd4:	10c00117 	ldw	r3,4(r2)
   50cd8:	010007c4 	movi	r4,31
   50cdc:	20c00e16 	blt	r4,r3,50d18 <__register_exitproc+0x6c>
   50ce0:	1a000044 	addi	r8,r3,1
   50ce4:	8800221e 	bne	r17,zero,50d70 <__register_exitproc+0xc4>
   50ce8:	18c00084 	addi	r3,r3,2
   50cec:	18c7883a 	add	r3,r3,r3
   50cf0:	18c7883a 	add	r3,r3,r3
   50cf4:	12000115 	stw	r8,4(r2)
   50cf8:	10c7883a 	add	r3,r2,r3
   50cfc:	19400015 	stw	r5,0(r3)
   50d00:	0005883a 	mov	r2,zero
   50d04:	dfc00517 	ldw	ra,20(sp)
   50d08:	dc400417 	ldw	r17,16(sp)
   50d0c:	dc000317 	ldw	r16,12(sp)
   50d10:	dec00604 	addi	sp,sp,24
   50d14:	f800283a 	ret
   50d18:	00800034 	movhi	r2,0
   50d1c:	10800004 	addi	r2,r2,0
   50d20:	10002626 	beq	r2,zero,50dbc <__register_exitproc+0x110>
   50d24:	01006404 	movi	r4,400
   50d28:	d9400015 	stw	r5,0(sp)
   50d2c:	d9800115 	stw	r6,4(sp)
   50d30:	d9c00215 	stw	r7,8(sp)
   50d34:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>
   50d38:	d9400017 	ldw	r5,0(sp)
   50d3c:	d9800117 	ldw	r6,4(sp)
   50d40:	d9c00217 	ldw	r7,8(sp)
   50d44:	10001d26 	beq	r2,zero,50dbc <__register_exitproc+0x110>
   50d48:	81000017 	ldw	r4,0(r16)
   50d4c:	10000115 	stw	zero,4(r2)
   50d50:	02000044 	movi	r8,1
   50d54:	22405217 	ldw	r9,328(r4)
   50d58:	0007883a 	mov	r3,zero
   50d5c:	12400015 	stw	r9,0(r2)
   50d60:	20805215 	stw	r2,328(r4)
   50d64:	10006215 	stw	zero,392(r2)
   50d68:	10006315 	stw	zero,396(r2)
   50d6c:	883fde26 	beq	r17,zero,50ce8 <__alt_data_end+0xfffeb4e8>
   50d70:	18c9883a 	add	r4,r3,r3
   50d74:	2109883a 	add	r4,r4,r4
   50d78:	1109883a 	add	r4,r2,r4
   50d7c:	21802215 	stw	r6,136(r4)
   50d80:	01800044 	movi	r6,1
   50d84:	12406217 	ldw	r9,392(r2)
   50d88:	30cc983a 	sll	r6,r6,r3
   50d8c:	4992b03a 	or	r9,r9,r6
   50d90:	12406215 	stw	r9,392(r2)
   50d94:	21c04215 	stw	r7,264(r4)
   50d98:	01000084 	movi	r4,2
   50d9c:	893fd21e 	bne	r17,r4,50ce8 <__alt_data_end+0xfffeb4e8>
   50da0:	11006317 	ldw	r4,396(r2)
   50da4:	218cb03a 	or	r6,r4,r6
   50da8:	11806315 	stw	r6,396(r2)
   50dac:	003fce06 	br	50ce8 <__alt_data_end+0xfffeb4e8>
   50db0:	18805304 	addi	r2,r3,332
   50db4:	18805215 	stw	r2,328(r3)
   50db8:	003fc606 	br	50cd4 <__alt_data_end+0xfffeb4d4>
   50dbc:	00bfffc4 	movi	r2,-1
   50dc0:	003fd006 	br	50d04 <__alt_data_end+0xfffeb504>

00050dc4 <__call_exitprocs>:
   50dc4:	defff504 	addi	sp,sp,-44
   50dc8:	df000915 	stw	fp,36(sp)
   50dcc:	dd400615 	stw	r21,24(sp)
   50dd0:	dc800315 	stw	r18,12(sp)
   50dd4:	dfc00a15 	stw	ra,40(sp)
   50dd8:	ddc00815 	stw	r23,32(sp)
   50ddc:	dd800715 	stw	r22,28(sp)
   50de0:	dd000515 	stw	r20,20(sp)
   50de4:	dcc00415 	stw	r19,16(sp)
   50de8:	dc400215 	stw	r17,8(sp)
   50dec:	dc000115 	stw	r16,4(sp)
   50df0:	d9000015 	stw	r4,0(sp)
   50df4:	2839883a 	mov	fp,r5
   50df8:	04800044 	movi	r18,1
   50dfc:	057fffc4 	movi	r21,-1
   50e00:	00800174 	movhi	r2,5
   50e04:	108b9804 	addi	r2,r2,11872
   50e08:	12000017 	ldw	r8,0(r2)
   50e0c:	45005217 	ldw	r20,328(r8)
   50e10:	44c05204 	addi	r19,r8,328
   50e14:	a0001c26 	beq	r20,zero,50e88 <__call_exitprocs+0xc4>
   50e18:	a0800117 	ldw	r2,4(r20)
   50e1c:	15ffffc4 	addi	r23,r2,-1
   50e20:	b8000d16 	blt	r23,zero,50e58 <__call_exitprocs+0x94>
   50e24:	14000044 	addi	r16,r2,1
   50e28:	8421883a 	add	r16,r16,r16
   50e2c:	8421883a 	add	r16,r16,r16
   50e30:	84402004 	addi	r17,r16,128
   50e34:	a463883a 	add	r17,r20,r17
   50e38:	a421883a 	add	r16,r20,r16
   50e3c:	e0001e26 	beq	fp,zero,50eb8 <__call_exitprocs+0xf4>
   50e40:	80804017 	ldw	r2,256(r16)
   50e44:	e0801c26 	beq	fp,r2,50eb8 <__call_exitprocs+0xf4>
   50e48:	bdffffc4 	addi	r23,r23,-1
   50e4c:	843fff04 	addi	r16,r16,-4
   50e50:	8c7fff04 	addi	r17,r17,-4
   50e54:	bd7ff91e 	bne	r23,r21,50e3c <__alt_data_end+0xfffeb63c>
   50e58:	00800034 	movhi	r2,0
   50e5c:	10800004 	addi	r2,r2,0
   50e60:	10000926 	beq	r2,zero,50e88 <__call_exitprocs+0xc4>
   50e64:	a0800117 	ldw	r2,4(r20)
   50e68:	1000301e 	bne	r2,zero,50f2c <__call_exitprocs+0x168>
   50e6c:	a0800017 	ldw	r2,0(r20)
   50e70:	10003226 	beq	r2,zero,50f3c <__call_exitprocs+0x178>
   50e74:	a009883a 	mov	r4,r20
   50e78:	98800015 	stw	r2,0(r19)
   50e7c:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>
   50e80:	9d000017 	ldw	r20,0(r19)
   50e84:	a03fe41e 	bne	r20,zero,50e18 <__alt_data_end+0xfffeb618>
   50e88:	dfc00a17 	ldw	ra,40(sp)
   50e8c:	df000917 	ldw	fp,36(sp)
   50e90:	ddc00817 	ldw	r23,32(sp)
   50e94:	dd800717 	ldw	r22,28(sp)
   50e98:	dd400617 	ldw	r21,24(sp)
   50e9c:	dd000517 	ldw	r20,20(sp)
   50ea0:	dcc00417 	ldw	r19,16(sp)
   50ea4:	dc800317 	ldw	r18,12(sp)
   50ea8:	dc400217 	ldw	r17,8(sp)
   50eac:	dc000117 	ldw	r16,4(sp)
   50eb0:	dec00b04 	addi	sp,sp,44
   50eb4:	f800283a 	ret
   50eb8:	a0800117 	ldw	r2,4(r20)
   50ebc:	80c00017 	ldw	r3,0(r16)
   50ec0:	10bfffc4 	addi	r2,r2,-1
   50ec4:	15c01426 	beq	r2,r23,50f18 <__call_exitprocs+0x154>
   50ec8:	80000015 	stw	zero,0(r16)
   50ecc:	183fde26 	beq	r3,zero,50e48 <__alt_data_end+0xfffeb648>
   50ed0:	95c8983a 	sll	r4,r18,r23
   50ed4:	a0806217 	ldw	r2,392(r20)
   50ed8:	a5800117 	ldw	r22,4(r20)
   50edc:	2084703a 	and	r2,r4,r2
   50ee0:	10000b26 	beq	r2,zero,50f10 <__call_exitprocs+0x14c>
   50ee4:	a0806317 	ldw	r2,396(r20)
   50ee8:	2088703a 	and	r4,r4,r2
   50eec:	20000c1e 	bne	r4,zero,50f20 <__call_exitprocs+0x15c>
   50ef0:	89400017 	ldw	r5,0(r17)
   50ef4:	d9000017 	ldw	r4,0(sp)
   50ef8:	183ee83a 	callr	r3
   50efc:	a0800117 	ldw	r2,4(r20)
   50f00:	15bfbf1e 	bne	r2,r22,50e00 <__alt_data_end+0xfffeb600>
   50f04:	98800017 	ldw	r2,0(r19)
   50f08:	153fcf26 	beq	r2,r20,50e48 <__alt_data_end+0xfffeb648>
   50f0c:	003fbc06 	br	50e00 <__alt_data_end+0xfffeb600>
   50f10:	183ee83a 	callr	r3
   50f14:	003ff906 	br	50efc <__alt_data_end+0xfffeb6fc>
   50f18:	a5c00115 	stw	r23,4(r20)
   50f1c:	003feb06 	br	50ecc <__alt_data_end+0xfffeb6cc>
   50f20:	89000017 	ldw	r4,0(r17)
   50f24:	183ee83a 	callr	r3
   50f28:	003ff406 	br	50efc <__alt_data_end+0xfffeb6fc>
   50f2c:	a0800017 	ldw	r2,0(r20)
   50f30:	a027883a 	mov	r19,r20
   50f34:	1029883a 	mov	r20,r2
   50f38:	003fb606 	br	50e14 <__alt_data_end+0xfffeb614>
   50f3c:	0005883a 	mov	r2,zero
   50f40:	003ffb06 	br	50f30 <__alt_data_end+0xfffeb730>

00050f44 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   50f44:	defffd04 	addi	sp,sp,-12
   50f48:	df000215 	stw	fp,8(sp)
   50f4c:	df000204 	addi	fp,sp,8
   50f50:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   50f54:	0001883a 	nop
   50f58:	e0bfff17 	ldw	r2,-4(fp)
   50f5c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   50f60:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   50f64:	10000226 	beq	r2,zero,50f70 <_exit+0x2c>
    ALT_SIM_FAIL();
   50f68:	002af070 	cmpltui	zero,zero,43969
   50f6c:	00000106 	br	50f74 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   50f70:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   50f74:	003fff06 	br	50f74 <__alt_data_end+0xfffeb774>
