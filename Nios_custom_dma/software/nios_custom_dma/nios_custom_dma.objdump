
nios_custom_dma.elf:     file format elf32-littlenios2
nios_custom_dma.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00001780 memsz 0x00001780 flags r-x
    LOAD off    0x000027a0 vaddr 0x000217a0 paddr 0x00021898 align 2**12
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x00000990 vaddr 0x00021990 paddr 0x00021990 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00002898  2**0
                  CONTENTS
  2 .text         000015fc  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000184  0002161c  0002161c  0000261c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f8  000217a0  00021898  000027a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  00021990  00021990  00002990  2**2
                  ALLOC, SMALL_DATA
  6 .program      00000000  000219a8  000219a8  00002898  2**0
                  CONTENTS
  7 .src_ram      00000000  00040000  00040000  00002898  2**0
                  CONTENTS
  8 .dst_ram      00000000  00041000  00041000  00002898  2**0
                  CONTENTS
  9 .comment      0000002d  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000003c8  00000000  00000000  000028c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00007134  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002476  00000000  00000000  00009dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00001dde  00000000  00000000  0000c23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  000005b0  00000000  00000000  0000e018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00000dbf  00000000  00000000  0000e5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000030  00000000  00000000  0000f388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  0000f3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 000016be  00000000  00000000  0000f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000023a  00000000  00000000  00010a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000d2f  00000000  00000000  00010cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .thread_model 00000003  00000000  00000000  00012efe  2**0
                  CONTENTS, READONLY
 22 .cpu          0000000c  00000000  00000000  00012f01  2**0
                  CONTENTS, READONLY
 23 .qsys         00000001  00000000  00000000  00012f0d  2**0
                  CONTENTS, READONLY
 24 .simulation_enabled 00000001  00000000  00000000  00012f0e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00012f0f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00012f1a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00012f25  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  00012f30  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002e  00000000  00000000  00012f3f  2**0
                  CONTENTS, READONLY
 30 .jdi          00005687  00000000  00000000  00012f6d  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00061236  00000000  00000000  000185f4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
0002161c l    d  .rodata	00000000 .rodata
000217a0 l    d  .rwdata	00000000 .rwdata
00021990 l    d  .bss	00000000 .bss
000219a8 l    d  .program	00000000 .program
00040000 l    d  .src_ram	00000000 .src_ram
00041000 l    d  .dst_ram	00000000 .dst_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
00020068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
000207c4 l     F .text	0000008c sbrk_aligned
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020b8c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000217a0 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002188c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcpy.c
00020090 g     F .text	00000024 pipelined_dma
0002143c g     F .text	0000002c alt_main
00020a98 g     F .text	00000080 _puts_r
00021898 g       *ABS*	00000000 __flash_rwdata_start
00020148 g     F .text	00000060 print
000219a8 g       *ABS*	00000000 __alt_heap_start
00020a50 g     F .text	00000048 printf
0002146c g     F .text	00000004 __malloc_unlock
00021590 g     F .text	00000008 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00040000 g       *ABS*	00000000 __alt_mem_src_ram
00020020 g       *ABS*	00000000 __flash_exceptions_start
00021998 g     O .bss	00000004 errno
000219a0 g     O .bss	00000004 alt_argv
00029884 g       *ABS*	00000000 _gp
000215f4 g     F .text	00000028 memcpy
00020b18 g     F .text	00000010 puts
00020684 g     F .text	00000010 malloc
00020a14 g     F .text	0000003c _printf_r
000212f8 g     F .text	00000064 .hidden __udivsi3
00021598 g     F .text	0000005c alt_icache_flush
000201a8 g     F .text	0000000c clr_dst
00020b28 g     F .text	00000048 _sbrk_r
00021884 g     O .rwdata	00000004 _global_impure_ptr
000219a8 g       *ABS*	00000000 __bss_end
00041000 g       *ABS*	00000000 __alt_mem_dst_ram
0002006c g     F .text	00000024 burst_dma
0002156c g     F .text	00000018 alt_dcache_flush_all
00021898 g       *ABS*	00000000 __ram_rwdata_end
000214bc g     F .text	0000005c write
000217a0 g       *ABS*	00000000 __ram_rodata_end
00021890 g     O .rwdata	00000004 jtag_uart_0
0002135c g     F .text	0000005c .hidden __umodsi3
000219a8 g       *ABS*	00000000 end
00034000 g       *ABS*	00000000 __alt_stack_pointer
0002153c g     F .text	00000030 altera_avalon_jtag_uart_write
00020bf8 g     F .text	000004fc ___vfprintf_internal_r
000206c4 g     F .text	00000100 _free_r
00020000 g       *ABS*	00000000 __alt_mem_program
00020020 g     F .text	0000004c _start
00021538 g     F .text	00000004 alt_sys_init
000200fc g     F .text	00000020 init_src
000217a0 g       *ABS*	00000000 __ram_rwdata_start
0002161c g       *ABS*	00000000 __ram_rodata_start
000219a8 g       *ABS*	00000000 __alt_stack_base
000200d8 g     F .text	00000024 simple_dma
00021468 g     F .text	00000004 __malloc_lock
00021470 g     F .text	0000004c sbrk
0002110c g     F .text	000000a8 __sfvwrite_small_dev
00021990 g       *ABS*	00000000 __bss_start
000206a4 g     F .text	00000020 memset
000201b4 g     F .text	000004d0 main
0002199c g     O .bss	00000004 alt_envp
000200b4 g     F .text	00000024 block_dma
00034000 g       *ABS*	00000000 __alt_heap_limit
00020850 g     F .text	000001c4 _malloc_r
00021894 g     O .rwdata	00000004 alt_errno
00021204 g     F .text	00000080 .hidden __divsi3
0002161c g       *ABS*	00000000 __flash_rodata_start
00021518 g     F .text	00000020 alt_irq_init
000211b4 g     F .text	00000050 _write_r
00021888 g     O .rwdata	00000004 _impure_ptr
000219a4 g     O .bss	00000004 alt_argc
00020020 g       *ABS*	00000000 __ram_exceptions_start
00021898 g       *ABS*	00000000 _edata
000219a8 g       *ABS*	00000000 _end
0002011c g     F .text	0000002c check_dst
00020020 g       *ABS*	00000000 __ram_exceptions_end
00021284 g     F .text	00000074 .hidden __modsi3
00034000 g       *ABS*	00000000 __alt_data_end
0002001c g       .entry	00000000 _exit
00020b70 g     F .text	0000001c strlen
00021990 g     O .bss	00000004 __malloc_sbrk_start
00021584 g     F .text	0000000c alt_icache_flush_all
00021994 g     O .bss	00000004 __malloc_free_list
000210f4 g     F .text	00000018 __vfprintf_internal
000213b8 g     F .text	00000084 alt_load
00020694 g     F .text	00000010 free



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08400814 	ori	at,at,32
    jmp r1
   20018:	0800683a 	jmp	at

0002001c <_exit>:
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .text:

00020020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   20028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   2002c:	00bffd16 	blt	zero,r2,20024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20030:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20034:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
   20038:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2003c:	d6a62114 	ori	gp,gp,39044
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20040:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20044:	10866414 	ori	r2,r2,6544

    movhi r3, %hi(__bss_end)
   20048:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2004c:	18c66a14 	ori	r3,r3,6568

    beq r2, r3, 1f
   20050:	10c00326 	beq	r2,r3,20060 <_start+0x40>

0:
    stw zero, (r2)
   20054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2005c:	10fffd36 	bltu	r2,r3,20054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20060:	00213b80 	call	213b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20064:	002143c0 	call	2143c <alt_main>

00020068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20068:	003fff06 	br	20068 <alt_after_alt_main>

0002006c <burst_dma>:
#define ram_src (int*)SRC_RAM_BASE
#define ram_dst (int*)DST_RAM_BASE

void burst_dma (int* src_ptr, int* dst_ptr)
{
    IOWR (BURST_DMA_BASE, 2, (int)src_ptr);
   2006c:	00800134 	movhi	r2,4
   20070:	110c0635 	stwio	r4,12312(r2)
    IOWR (BURST_DMA_BASE, 3, (int)dst_ptr);
   20074:	114c0735 	stwio	r5,12316(r2)
    IOWR (BURST_DMA_BASE, 0, 0x1);
   20078:	00c00044 	movi	r3,1
   2007c:	10cc0435 	stwio	r3,12304(r2)
    while (IORD (BURST_DMA_BASE, 1));
   20080:	00800134 	movhi	r2,4
   20084:	108c0537 	ldwio	r2,12308(r2)
   20088:	103ffd1e 	bne	r2,zero,20080 <burst_dma+0x14>
}
   2008c:	f800283a 	ret

00020090 <pipelined_dma>:

void pipelined_dma (int* src_ptr, int* dst_ptr)
{
    IOWR (PIPELINED_DMA_BASE, 2, (int)src_ptr);
   20090:	00800134 	movhi	r2,4
   20094:	110c0a35 	stwio	r4,12328(r2)
    IOWR (PIPELINED_DMA_BASE, 3, (int)dst_ptr);
   20098:	114c0b35 	stwio	r5,12332(r2)
    IOWR (PIPELINED_DMA_BASE, 0, 0x1);
   2009c:	00c00044 	movi	r3,1
   200a0:	10cc0835 	stwio	r3,12320(r2)
    while (IORD (PIPELINED_DMA_BASE, 1));
   200a4:	00800134 	movhi	r2,4
   200a8:	108c0937 	ldwio	r2,12324(r2)
   200ac:	103ffd1e 	bne	r2,zero,200a4 <pipelined_dma+0x14>
}
   200b0:	f800283a 	ret

000200b4 <block_dma>:

void block_dma (int* src_ptr, int* dst_ptr)
{
    IOWR (BLOCK_DMA_BASE, 2, (int)src_ptr);
   200b4:	00800134 	movhi	r2,4
   200b8:	110c0235 	stwio	r4,12296(r2)
    IOWR (BLOCK_DMA_BASE, 3, (int)dst_ptr);
   200bc:	114c0335 	stwio	r5,12300(r2)
    IOWR (BLOCK_DMA_BASE, 0, 0x1);
   200c0:	00c00044 	movi	r3,1
   200c4:	10cc0035 	stwio	r3,12288(r2)
    while (IORD (BLOCK_DMA_BASE, 1));
   200c8:	00800134 	movhi	r2,4
   200cc:	108c0137 	ldwio	r2,12292(r2)
   200d0:	103ffd1e 	bne	r2,zero,200c8 <block_dma+0x14>
}
   200d4:	f800283a 	ret

000200d8 <simple_dma>:

void simple_dma (int* src_ptr, int* dst_ptr)
{
    IOWR (SIMPLE_DMA_BASE, 2, (int)src_ptr);
   200d8:	00800134 	movhi	r2,4
   200dc:	110c0e35 	stwio	r4,12344(r2)
    IOWR (SIMPLE_DMA_BASE, 3, (int)dst_ptr);
   200e0:	114c0f35 	stwio	r5,12348(r2)
    IOWR (SIMPLE_DMA_BASE, 0, 0x1);
   200e4:	00c00044 	movi	r3,1
   200e8:	10cc0c35 	stwio	r3,12336(r2)
    while (IORD (SIMPLE_DMA_BASE, 1));
   200ec:	00800134 	movhi	r2,4
   200f0:	108c0d37 	ldwio	r2,12340(r2)
   200f4:	103ffd1e 	bne	r2,zero,200ec <simple_dma+0x14>
}
   200f8:	f800283a 	ret

000200fc <init_src>:

void init_src (int* ptr)
{
  int i;
  for (i=0; i<0x100; i++)
   200fc:	0005883a 	mov	r2,zero
  {
    *ptr = i;
   20100:	100690ba 	slli	r3,r2,2
   20104:	20c7883a 	add	r3,r4,r3
   20108:	18800015 	stw	r2,0(r3)
  for (i=0; i<0x100; i++)
   2010c:	10800044 	addi	r2,r2,1
   20110:	10c04018 	cmpnei	r3,r2,256
   20114:	183ffa1e 	bne	r3,zero,20100 <init_src+0x4>
    ptr++;
  }
}
   20118:	f800283a 	ret

0002011c <check_dst>:

int check_dst (int* ptr)
{
  int pass = 0;
  int i;
  for (i=0; i<0x100; i++)
   2011c:	0007883a 	mov	r3,zero
  int pass = 0;
   20120:	0005883a 	mov	r2,zero
  {
    if (*ptr != i)
   20124:	180a90ba 	slli	r5,r3,2
   20128:	214b883a 	add	r5,r4,r5
   2012c:	29400017 	ldw	r5,0(r5)
   20130:	28c00126 	beq	r5,r3,20138 <check_dst+0x1c>
        pass++;
   20134:	10800044 	addi	r2,r2,1
  for (i=0; i<0x100; i++)
   20138:	18c00044 	addi	r3,r3,1
   2013c:	19404018 	cmpnei	r5,r3,256
   20140:	283ff81e 	bne	r5,zero,20124 <check_dst+0x8>
    ptr++;
  }
  return pass;
}
   20144:	f800283a 	ret

00020148 <print>:

void print (int* ptr)
{
   20148:	defffc04 	addi	sp,sp,-16
   2014c:	dc400115 	stw	r17,4(sp)
	int i;
    for (i=0; i<0x100; i++)
	{
		printf(" at addr %x data: %d \n", i, ptr[i]);
   20150:	044000b4 	movhi	r17,2
{
   20154:	dc800215 	stw	r18,8(sp)
   20158:	dc000015 	stw	r16,0(sp)
   2015c:	dfc00315 	stw	ra,12(sp)
   20160:	2025883a 	mov	r18,r4
    for (i=0; i<0x100; i++)
   20164:	0021883a 	mov	r16,zero
		printf(" at addr %x data: %d \n", i, ptr[i]);
   20168:	8c458704 	addi	r17,r17,5660
   2016c:	800490fa 	slli	r2,r16,3
   20170:	800b883a 	mov	r5,r16
   20174:	8809883a 	mov	r4,r17
   20178:	9085883a 	add	r2,r18,r2
   2017c:	11800017 	ldw	r6,0(r2)
    for (i=0; i<0x100; i++)
   20180:	84000044 	addi	r16,r16,1
		printf(" at addr %x data: %d \n", i, ptr[i]);
   20184:	0020a500 	call	20a50 <printf>
    for (i=0; i<0x100; i++)
   20188:	80804018 	cmpnei	r2,r16,256
   2018c:	103ff71e 	bne	r2,zero,2016c <print+0x24>
		ptr++;
	}
}
   20190:	dfc00317 	ldw	ra,12(sp)
   20194:	dc800217 	ldw	r18,8(sp)
   20198:	dc400117 	ldw	r17,4(sp)
   2019c:	dc000017 	ldw	r16,0(sp)
   201a0:	dec00404 	addi	sp,sp,16
   201a4:	f800283a 	ret

000201a8 <clr_dst>:
void clr_dst (int* ptr)
{
  int i;
  for (i=0; i<0x100; i++)
  {
    *ptr = 0;
   201a8:	01810004 	movi	r6,1024
   201ac:	000b883a 	mov	r5,zero
   201b0:	00206a41 	jmpi	206a4 <memset>

000201b4 <main>:
    ptr++;
  }
}

int main()
{ 
   201b4:	defffd04 	addi	sp,sp,-12
  int* sdram_dst;
  int* sdram_src;

  // allocate source and destination memory
  sdram_src = malloc (4 * 0x100);
   201b8:	01010004 	movi	r4,1024
{ 
   201bc:	dfc00215 	stw	ra,8(sp)
   201c0:	dc400115 	stw	r17,4(sp)
   201c4:	dc000015 	stw	r16,0(sp)
  sdram_src = malloc (4 * 0x100);
   201c8:	00206840 	call	20684 <malloc>
  sdram_dst = malloc (4 * 0x100);
   201cc:	01010004 	movi	r4,1024
  sdram_src = malloc (4 * 0x100);
   201d0:	1023883a 	mov	r17,r2
  sdram_dst = malloc (4 * 0x100);
   201d4:	00206840 	call	20684 <malloc>

  // initialise memory
  init_src (sdram_src);
   201d8:	8809883a 	mov	r4,r17
  sdram_dst = malloc (4 * 0x100);
   201dc:	1021883a 	mov	r16,r2
  init_src (sdram_src);
   201e0:	00200fc0 	call	200fc <init_src>
  init_src (ram_src);
   201e4:	01000134 	movhi	r4,4
   201e8:	00200fc0 	call	200fc <init_src>

  printf("ram_dst before simple_dma\n");
   201ec:	010000b4 	movhi	r4,2
   201f0:	21058d04 	addi	r4,r4,5684
   201f4:	0020b180 	call	20b18 <puts>
  print(ram_dst);
   201f8:	01000134 	movhi	r4,4
   201fc:	21040004 	addi	r4,r4,4096
   20200:	00201480 	call	20148 <print>

  puts ("Initialisation done\n");
   20204:	010000b4 	movhi	r4,2
   20208:	21059404 	addi	r4,r4,5712
   2020c:	0020b180 	call	20b18 <puts>

  /************************/
  /* simple example tests */
  /************************/
  puts ("");
   20210:	010000b4 	movhi	r4,2
   20214:	21059904 	addi	r4,r4,5732
   20218:	0020b180 	call	20b18 <puts>
  puts ("Simple Master:");
   2021c:	010000b4 	movhi	r4,2
   20220:	21059a04 	addi	r4,r4,5736
   20224:	0020b180 	call	20b18 <puts>

  clr_dst (sdram_dst);
   20228:	8009883a 	mov	r4,r16
   2022c:	00201a80 	call	201a8 <clr_dst>

  simple_dma (sdram_src, sdram_dst);
   20230:	8809883a 	mov	r4,r17
   20234:	800b883a 	mov	r5,r16
   20238:	00200d80 	call	200d8 <simple_dma>

  if (check_dst(sdram_dst))
   2023c:	8009883a 	mov	r4,r16
   20240:	002011c0 	call	2011c <check_dst>
   20244:	1000df26 	beq	r2,zero,205c4 <main+0x410>
    puts ("Balanced slow: Passed");
   20248:	010000b4 	movhi	r4,2
   2024c:	21059e04 	addi	r4,r4,5752
  else
    puts ("Balanced slow: FAILED!");
   20250:	0020b180 	call	20b18 <puts>

  clr_dst (ram_dst);
   20254:	01000134 	movhi	r4,4
   20258:	21040004 	addi	r4,r4,4096
   2025c:	00201a80 	call	201a8 <clr_dst>
  simple_dma (ram_src, ram_dst);
   20260:	01400134 	movhi	r5,4
   20264:	01000134 	movhi	r4,4
   20268:	29440004 	addi	r5,r5,4096
   2026c:	00200d80 	call	200d8 <simple_dma>
  if (check_dst(ram_dst))
   20270:	01000134 	movhi	r4,4
   20274:	21040004 	addi	r4,r4,4096
   20278:	002011c0 	call	2011c <check_dst>
   2027c:	1000d426 	beq	r2,zero,205d0 <main+0x41c>
    puts ("Balanced fast: Passed");
   20280:	010000b4 	movhi	r4,2
   20284:	2105aa04 	addi	r4,r4,5800
  else
    puts ("Balanced fast: FAILED!");
   20288:	0020b180 	call	20b18 <puts>

  printf("ram_dst after simple_dma\n");
   2028c:	010000b4 	movhi	r4,2
   20290:	2105b604 	addi	r4,r4,5848
   20294:	0020b180 	call	20b18 <puts>
   print(ram_dst);
   20298:	01000134 	movhi	r4,4
   2029c:	21040004 	addi	r4,r4,4096
   202a0:	00201480 	call	20148 <print>


  clr_dst (ram_dst);
   202a4:	01000134 	movhi	r4,4
   202a8:	21040004 	addi	r4,r4,4096
   202ac:	00201a80 	call	201a8 <clr_dst>
  simple_dma (sdram_src, ram_dst);
   202b0:	01400134 	movhi	r5,4
   202b4:	8809883a 	mov	r4,r17
   202b8:	29440004 	addi	r5,r5,4096
   202bc:	00200d80 	call	200d8 <simple_dma>
  if (check_dst(ram_dst))
   202c0:	01000134 	movhi	r4,4
   202c4:	21040004 	addi	r4,r4,4096
   202c8:	002011c0 	call	2011c <check_dst>
   202cc:	1000c326 	beq	r2,zero,205dc <main+0x428>
    puts ("Slow to fast: Passed");
   202d0:	010000b4 	movhi	r4,2
   202d4:	2105bd04 	addi	r4,r4,5876
  else
    puts ("Slow to fast: FAILED!");
   202d8:	0020b180 	call	20b18 <puts>

  clr_dst (sdram_dst);
   202dc:	8009883a 	mov	r4,r16
   202e0:	00201a80 	call	201a8 <clr_dst>
  simple_dma (ram_src, sdram_dst);
   202e4:	01000134 	movhi	r4,4
   202e8:	800b883a 	mov	r5,r16
   202ec:	00200d80 	call	200d8 <simple_dma>
  if (check_dst(sdram_dst))
   202f0:	8009883a 	mov	r4,r16
   202f4:	002011c0 	call	2011c <check_dst>
   202f8:	1000bb26 	beq	r2,zero,205e8 <main+0x434>
    puts ("Fast to slow: Passed");
   202fc:	010000b4 	movhi	r4,2
   20300:	2105c904 	addi	r4,r4,5924
  else
    puts ("Fast to slow: FAILED!");
   20304:	0020b180 	call	20b18 <puts>


  /***********************/
  /* block example tests */
  /***********************/
  puts ("");
   20308:	010000b4 	movhi	r4,2
   2030c:	21059904 	addi	r4,r4,5732
   20310:	0020b180 	call	20b18 <puts>
  puts ("Block Based Master:");
   20314:	010000b4 	movhi	r4,2
   20318:	2105d504 	addi	r4,r4,5972
   2031c:	0020b180 	call	20b18 <puts>

  clr_dst (sdram_dst);
   20320:	8009883a 	mov	r4,r16
   20324:	00201a80 	call	201a8 <clr_dst>
  block_dma (sdram_src, sdram_dst);
   20328:	8809883a 	mov	r4,r17
   2032c:	800b883a 	mov	r5,r16
   20330:	00200b40 	call	200b4 <block_dma>
  if (check_dst(sdram_dst))
   20334:	8009883a 	mov	r4,r16
   20338:	002011c0 	call	2011c <check_dst>
   2033c:	1000ad26 	beq	r2,zero,205f4 <main+0x440>
    puts ("Balanced slow: Passed");
   20340:	010000b4 	movhi	r4,2
   20344:	21059e04 	addi	r4,r4,5752
  else
    puts ("Balanced slow: FAILED!");
   20348:	0020b180 	call	20b18 <puts>

  clr_dst (ram_dst);
   2034c:	01000134 	movhi	r4,4
   20350:	21040004 	addi	r4,r4,4096
   20354:	00201a80 	call	201a8 <clr_dst>
  block_dma (ram_src, ram_dst);
   20358:	01400134 	movhi	r5,4
   2035c:	01000134 	movhi	r4,4
   20360:	29440004 	addi	r5,r5,4096
   20364:	00200b40 	call	200b4 <block_dma>
  if (check_dst(ram_dst))
   20368:	01000134 	movhi	r4,4
   2036c:	21040004 	addi	r4,r4,4096
   20370:	002011c0 	call	2011c <check_dst>
   20374:	1000a226 	beq	r2,zero,20600 <main+0x44c>
    puts ("Balanced fast: Passed");
   20378:	010000b4 	movhi	r4,2
   2037c:	2105aa04 	addi	r4,r4,5800
  else
    puts ("Balanced fast: FAILED!");
   20380:	0020b180 	call	20b18 <puts>

  clr_dst (ram_dst);
   20384:	01000134 	movhi	r4,4
   20388:	21040004 	addi	r4,r4,4096
   2038c:	00201a80 	call	201a8 <clr_dst>
  block_dma (sdram_src, ram_dst);
   20390:	01400134 	movhi	r5,4
   20394:	8809883a 	mov	r4,r17
   20398:	29440004 	addi	r5,r5,4096
   2039c:	00200b40 	call	200b4 <block_dma>
  if (check_dst(ram_dst))
   203a0:	01000134 	movhi	r4,4
   203a4:	21040004 	addi	r4,r4,4096
   203a8:	002011c0 	call	2011c <check_dst>
   203ac:	10009726 	beq	r2,zero,2060c <main+0x458>
    puts ("Slow to fast: Passed");
   203b0:	010000b4 	movhi	r4,2
   203b4:	2105bd04 	addi	r4,r4,5876
  else
    puts ("Slow to fast: FAILED!");
   203b8:	0020b180 	call	20b18 <puts>

  clr_dst (sdram_dst);
   203bc:	8009883a 	mov	r4,r16
   203c0:	00201a80 	call	201a8 <clr_dst>
  block_dma (ram_src, sdram_dst);
   203c4:	01000134 	movhi	r4,4
   203c8:	800b883a 	mov	r5,r16
   203cc:	00200b40 	call	200b4 <block_dma>
  if (check_dst(sdram_dst))
   203d0:	8009883a 	mov	r4,r16
   203d4:	002011c0 	call	2011c <check_dst>
   203d8:	10008f26 	beq	r2,zero,20618 <main+0x464>
    puts ("Fast to slow: Passed");
   203dc:	010000b4 	movhi	r4,2
   203e0:	2105c904 	addi	r4,r4,5924
  else
    puts ("Fast to slow: FAILED!");
   203e4:	0020b180 	call	20b18 <puts>


  /***************************/
  /* pipelined example tests */
  /***************************/
  puts ("");
   203e8:	010000b4 	movhi	r4,2
   203ec:	21059904 	addi	r4,r4,5732
   203f0:	0020b180 	call	20b18 <puts>
  puts ("Pipelined Master:");
   203f4:	010000b4 	movhi	r4,2
   203f8:	2105da04 	addi	r4,r4,5992
   203fc:	0020b180 	call	20b18 <puts>

  clr_dst (sdram_dst);
   20400:	8009883a 	mov	r4,r16
   20404:	00201a80 	call	201a8 <clr_dst>
  pipelined_dma (sdram_src, sdram_dst);
   20408:	8809883a 	mov	r4,r17
   2040c:	800b883a 	mov	r5,r16
   20410:	00200900 	call	20090 <pipelined_dma>
  if (check_dst(sdram_dst))
   20414:	8009883a 	mov	r4,r16
   20418:	002011c0 	call	2011c <check_dst>
   2041c:	10008126 	beq	r2,zero,20624 <main+0x470>
    puts ("Balanced slow: Passed");
   20420:	010000b4 	movhi	r4,2
   20424:	21059e04 	addi	r4,r4,5752
  else
    puts ("Balanced slow: FAILED!");
   20428:	0020b180 	call	20b18 <puts>

  clr_dst (ram_dst);
   2042c:	01000134 	movhi	r4,4
   20430:	21040004 	addi	r4,r4,4096
   20434:	00201a80 	call	201a8 <clr_dst>
  pipelined_dma (ram_src, ram_dst);
   20438:	01400134 	movhi	r5,4
   2043c:	01000134 	movhi	r4,4
   20440:	29440004 	addi	r5,r5,4096
   20444:	00200900 	call	20090 <pipelined_dma>
  if (check_dst(ram_dst))
   20448:	01000134 	movhi	r4,4
   2044c:	21040004 	addi	r4,r4,4096
   20450:	002011c0 	call	2011c <check_dst>
   20454:	10007626 	beq	r2,zero,20630 <main+0x47c>
    puts ("Balanced fast: Passed");
   20458:	010000b4 	movhi	r4,2
   2045c:	2105aa04 	addi	r4,r4,5800
  else
    puts ("Balanced fast: FAILED!");
   20460:	0020b180 	call	20b18 <puts>

  clr_dst (ram_dst);
   20464:	01000134 	movhi	r4,4
   20468:	21040004 	addi	r4,r4,4096
   2046c:	00201a80 	call	201a8 <clr_dst>
  pipelined_dma (sdram_src, ram_dst);
   20470:	01400134 	movhi	r5,4
   20474:	8809883a 	mov	r4,r17
   20478:	29440004 	addi	r5,r5,4096
   2047c:	00200900 	call	20090 <pipelined_dma>
  if (check_dst(ram_dst))
   20480:	01000134 	movhi	r4,4
   20484:	21040004 	addi	r4,r4,4096
   20488:	002011c0 	call	2011c <check_dst>
   2048c:	10006b26 	beq	r2,zero,2063c <main+0x488>
    puts ("Slow to fast: Passed");
   20490:	010000b4 	movhi	r4,2
   20494:	2105bd04 	addi	r4,r4,5876
  else
    puts ("Slow to fast: FAILED!");
   20498:	0020b180 	call	20b18 <puts>

  clr_dst (sdram_dst);
   2049c:	8009883a 	mov	r4,r16
   204a0:	00201a80 	call	201a8 <clr_dst>
  pipelined_dma (ram_src, sdram_dst);
   204a4:	01000134 	movhi	r4,4
   204a8:	800b883a 	mov	r5,r16
   204ac:	00200900 	call	20090 <pipelined_dma>
  if (check_dst(sdram_dst))
   204b0:	8009883a 	mov	r4,r16
   204b4:	002011c0 	call	2011c <check_dst>
   204b8:	10006326 	beq	r2,zero,20648 <main+0x494>
    puts ("Fast to slow: Passed");
   204bc:	010000b4 	movhi	r4,2
   204c0:	2105c904 	addi	r4,r4,5924
  else
    puts ("Fast to slow: FAILED!");
   204c4:	0020b180 	call	20b18 <puts>


  /***********************/
  /* Burst example tests */
  /***********************/
  puts ("");
   204c8:	010000b4 	movhi	r4,2
   204cc:	21059904 	addi	r4,r4,5732
   204d0:	0020b180 	call	20b18 <puts>
  puts ("Burst Master:");
   204d4:	010000b4 	movhi	r4,2
   204d8:	2105df04 	addi	r4,r4,6012
   204dc:	0020b180 	call	20b18 <puts>

  clr_dst (sdram_dst);
   204e0:	8009883a 	mov	r4,r16
   204e4:	00201a80 	call	201a8 <clr_dst>
  burst_dma (sdram_src, sdram_dst);
   204e8:	8809883a 	mov	r4,r17
   204ec:	800b883a 	mov	r5,r16
   204f0:	002006c0 	call	2006c <burst_dma>
  if (check_dst(sdram_dst))
   204f4:	8009883a 	mov	r4,r16
   204f8:	002011c0 	call	2011c <check_dst>
   204fc:	10005526 	beq	r2,zero,20654 <main+0x4a0>
    puts ("Balanced slow: Passed");
   20500:	010000b4 	movhi	r4,2
   20504:	21059e04 	addi	r4,r4,5752
  else
    puts ("Balanced slow: FAILED!");
   20508:	0020b180 	call	20b18 <puts>

  clr_dst (ram_dst);
   2050c:	01000134 	movhi	r4,4
   20510:	21040004 	addi	r4,r4,4096
   20514:	00201a80 	call	201a8 <clr_dst>
  burst_dma (ram_src, ram_dst);
   20518:	01400134 	movhi	r5,4
   2051c:	01000134 	movhi	r4,4
   20520:	29440004 	addi	r5,r5,4096
   20524:	002006c0 	call	2006c <burst_dma>
  if (check_dst(ram_dst))
   20528:	01000134 	movhi	r4,4
   2052c:	21040004 	addi	r4,r4,4096
   20530:	002011c0 	call	2011c <check_dst>
   20534:	10004a26 	beq	r2,zero,20660 <main+0x4ac>
    puts ("Balanced fast: Passed");
   20538:	010000b4 	movhi	r4,2
   2053c:	2105aa04 	addi	r4,r4,5800
  else
    puts ("Balanced fast: FAILED!");
   20540:	0020b180 	call	20b18 <puts>

  clr_dst (ram_dst);
   20544:	01000134 	movhi	r4,4
   20548:	21040004 	addi	r4,r4,4096
   2054c:	00201a80 	call	201a8 <clr_dst>
  burst_dma (sdram_src, ram_dst);
   20550:	01400134 	movhi	r5,4
   20554:	8809883a 	mov	r4,r17
   20558:	29440004 	addi	r5,r5,4096
   2055c:	002006c0 	call	2006c <burst_dma>
  if (check_dst(ram_dst))
   20560:	01000134 	movhi	r4,4
   20564:	21040004 	addi	r4,r4,4096
   20568:	002011c0 	call	2011c <check_dst>
   2056c:	10003f26 	beq	r2,zero,2066c <main+0x4b8>
    puts ("Slow to fast: Passed");
   20570:	010000b4 	movhi	r4,2
   20574:	2105bd04 	addi	r4,r4,5876
  else
    puts ("Slow to fast: FAILED!");
   20578:	0020b180 	call	20b18 <puts>

  clr_dst (sdram_dst);
   2057c:	8009883a 	mov	r4,r16
   20580:	00201a80 	call	201a8 <clr_dst>
  burst_dma (ram_src, sdram_dst);
   20584:	01000134 	movhi	r4,4
   20588:	800b883a 	mov	r5,r16
   2058c:	002006c0 	call	2006c <burst_dma>
  if (check_dst(sdram_dst))
   20590:	8009883a 	mov	r4,r16
   20594:	002011c0 	call	2011c <check_dst>
   20598:	10003726 	beq	r2,zero,20678 <main+0x4c4>
    puts ("Fast to slow: Passed");
   2059c:	010000b4 	movhi	r4,2
   205a0:	2105c904 	addi	r4,r4,5924
  else
    puts ("Fast to slow: FAILED!");
   205a4:	0020b180 	call	20b18 <puts>


  puts ("");
   205a8:	010000b4 	movhi	r4,2
   205ac:	21059904 	addi	r4,r4,5732
   205b0:	0020b180 	call	20b18 <puts>
  puts ("Tests Complete!");
   205b4:	010000b4 	movhi	r4,2
   205b8:	2105e304 	addi	r4,r4,6028
   205bc:	0020b180 	call	20b18 <puts>

  /* Event loop never exits. */
  while (1);
   205c0:	003fff06 	br	205c0 <main+0x40c>
    puts ("Balanced slow: FAILED!");
   205c4:	010000b4 	movhi	r4,2
   205c8:	2105a404 	addi	r4,r4,5776
   205cc:	003f2006 	br	20250 <main+0x9c>
    puts ("Balanced fast: FAILED!");
   205d0:	010000b4 	movhi	r4,2
   205d4:	2105b004 	addi	r4,r4,5824
   205d8:	003f2b06 	br	20288 <main+0xd4>
    puts ("Slow to fast: FAILED!");
   205dc:	010000b4 	movhi	r4,2
   205e0:	2105c304 	addi	r4,r4,5900
   205e4:	003f3c06 	br	202d8 <main+0x124>
    puts ("Fast to slow: FAILED!");
   205e8:	010000b4 	movhi	r4,2
   205ec:	2105cf04 	addi	r4,r4,5948
   205f0:	003f4406 	br	20304 <main+0x150>
    puts ("Balanced slow: FAILED!");
   205f4:	010000b4 	movhi	r4,2
   205f8:	2105a404 	addi	r4,r4,5776
   205fc:	003f5206 	br	20348 <main+0x194>
    puts ("Balanced fast: FAILED!");
   20600:	010000b4 	movhi	r4,2
   20604:	2105b004 	addi	r4,r4,5824
   20608:	003f5d06 	br	20380 <main+0x1cc>
    puts ("Slow to fast: FAILED!");
   2060c:	010000b4 	movhi	r4,2
   20610:	2105c304 	addi	r4,r4,5900
   20614:	003f6806 	br	203b8 <main+0x204>
    puts ("Fast to slow: FAILED!");
   20618:	010000b4 	movhi	r4,2
   2061c:	2105cf04 	addi	r4,r4,5948
   20620:	003f7006 	br	203e4 <main+0x230>
    puts ("Balanced slow: FAILED!");
   20624:	010000b4 	movhi	r4,2
   20628:	2105a404 	addi	r4,r4,5776
   2062c:	003f7e06 	br	20428 <main+0x274>
    puts ("Balanced fast: FAILED!");
   20630:	010000b4 	movhi	r4,2
   20634:	2105b004 	addi	r4,r4,5824
   20638:	003f8906 	br	20460 <main+0x2ac>
    puts ("Slow to fast: FAILED!");
   2063c:	010000b4 	movhi	r4,2
   20640:	2105c304 	addi	r4,r4,5900
   20644:	003f9406 	br	20498 <main+0x2e4>
    puts ("Fast to slow: FAILED!");
   20648:	010000b4 	movhi	r4,2
   2064c:	2105cf04 	addi	r4,r4,5948
   20650:	003f9c06 	br	204c4 <main+0x310>
    puts ("Balanced slow: FAILED!");
   20654:	010000b4 	movhi	r4,2
   20658:	2105a404 	addi	r4,r4,5776
   2065c:	003faa06 	br	20508 <main+0x354>
    puts ("Balanced fast: FAILED!");
   20660:	010000b4 	movhi	r4,2
   20664:	2105b004 	addi	r4,r4,5824
   20668:	003fb506 	br	20540 <main+0x38c>
    puts ("Slow to fast: FAILED!");
   2066c:	010000b4 	movhi	r4,2
   20670:	2105c304 	addi	r4,r4,5900
   20674:	003fc006 	br	20578 <main+0x3c4>
    puts ("Fast to slow: FAILED!");
   20678:	010000b4 	movhi	r4,2
   2067c:	2105cf04 	addi	r4,r4,5948
   20680:	003fc806 	br	205a4 <main+0x3f0>

00020684 <malloc>:
   20684:	008000b4 	movhi	r2,2
   20688:	200b883a 	mov	r5,r4
   2068c:	11062217 	ldw	r4,6280(r2)
   20690:	00208501 	jmpi	20850 <_malloc_r>

00020694 <free>:
   20694:	008000b4 	movhi	r2,2
   20698:	200b883a 	mov	r5,r4
   2069c:	11062217 	ldw	r4,6280(r2)
   206a0:	00206c41 	jmpi	206c4 <_free_r>

000206a4 <memset>:
   206a4:	2005883a 	mov	r2,r4
   206a8:	218d883a 	add	r6,r4,r6
   206ac:	2007883a 	mov	r3,r4
   206b0:	1980011e 	bne	r3,r6,206b8 <memset+0x14>
   206b4:	f800283a 	ret
   206b8:	18c00044 	addi	r3,r3,1
   206bc:	197fffc5 	stb	r5,-1(r3)
   206c0:	003ffb06 	br	206b0 <memset+0xc>

000206c4 <_free_r>:
   206c4:	28003e26 	beq	r5,zero,207c0 <_free_r+0xfc>
   206c8:	28bfff17 	ldw	r2,-4(r5)
   206cc:	defffd04 	addi	sp,sp,-12
   206d0:	dc000115 	stw	r16,4(sp)
   206d4:	dfc00215 	stw	ra,8(sp)
   206d8:	2c3fff04 	addi	r16,r5,-4
   206dc:	1000010e 	bge	r2,zero,206e4 <_free_r+0x20>
   206e0:	80a1883a 	add	r16,r16,r2
   206e4:	d9000015 	stw	r4,0(sp)
   206e8:	00214680 	call	21468 <__malloc_lock>
   206ec:	008000b4 	movhi	r2,2
   206f0:	10866517 	ldw	r2,6548(r2)
   206f4:	d9000017 	ldw	r4,0(sp)
   206f8:	1000071e 	bne	r2,zero,20718 <_free_r+0x54>
   206fc:	80000115 	stw	zero,4(r16)
   20700:	008000b4 	movhi	r2,2
   20704:	14066515 	stw	r16,6548(r2)
   20708:	dfc00217 	ldw	ra,8(sp)
   2070c:	dc000117 	ldw	r16,4(sp)
   20710:	dec00304 	addi	sp,sp,12
   20714:	002146c1 	jmpi	2146c <__malloc_unlock>
   20718:	8080092e 	bgeu	r16,r2,20740 <_free_r+0x7c>
   2071c:	81400017 	ldw	r5,0(r16)
   20720:	8147883a 	add	r3,r16,r5
   20724:	10c0041e 	bne	r2,r3,20738 <_free_r+0x74>
   20728:	10c00017 	ldw	r3,0(r2)
   2072c:	10800117 	ldw	r2,4(r2)
   20730:	1947883a 	add	r3,r3,r5
   20734:	80c00015 	stw	r3,0(r16)
   20738:	80800115 	stw	r2,4(r16)
   2073c:	003ff006 	br	20700 <_free_r+0x3c>
   20740:	1007883a 	mov	r3,r2
   20744:	10800117 	ldw	r2,4(r2)
   20748:	10000126 	beq	r2,zero,20750 <_free_r+0x8c>
   2074c:	80bffc2e 	bgeu	r16,r2,20740 <_free_r+0x7c>
   20750:	19400017 	ldw	r5,0(r3)
   20754:	194d883a 	add	r6,r3,r5
   20758:	34000b1e 	bne	r6,r16,20788 <_free_r+0xc4>
   2075c:	81800017 	ldw	r6,0(r16)
   20760:	298b883a 	add	r5,r5,r6
   20764:	19400015 	stw	r5,0(r3)
   20768:	194d883a 	add	r6,r3,r5
   2076c:	11bfe61e 	bne	r2,r6,20708 <_free_r+0x44>
   20770:	11800017 	ldw	r6,0(r2)
   20774:	10800117 	ldw	r2,4(r2)
   20778:	314b883a 	add	r5,r6,r5
   2077c:	19400015 	stw	r5,0(r3)
   20780:	18800115 	stw	r2,4(r3)
   20784:	003fe006 	br	20708 <_free_r+0x44>
   20788:	8180032e 	bgeu	r16,r6,20798 <_free_r+0xd4>
   2078c:	00800304 	movi	r2,12
   20790:	20800015 	stw	r2,0(r4)
   20794:	003fdc06 	br	20708 <_free_r+0x44>
   20798:	81800017 	ldw	r6,0(r16)
   2079c:	818b883a 	add	r5,r16,r6
   207a0:	1140041e 	bne	r2,r5,207b4 <_free_r+0xf0>
   207a4:	11400017 	ldw	r5,0(r2)
   207a8:	10800117 	ldw	r2,4(r2)
   207ac:	298b883a 	add	r5,r5,r6
   207b0:	81400015 	stw	r5,0(r16)
   207b4:	80800115 	stw	r2,4(r16)
   207b8:	1c000115 	stw	r16,4(r3)
   207bc:	003fd206 	br	20708 <_free_r+0x44>
   207c0:	f800283a 	ret

000207c4 <sbrk_aligned>:
   207c4:	008000b4 	movhi	r2,2
   207c8:	10866417 	ldw	r2,6544(r2)
   207cc:	defffd04 	addi	sp,sp,-12
   207d0:	dc400115 	stw	r17,4(sp)
   207d4:	dc000015 	stw	r16,0(sp)
   207d8:	dfc00215 	stw	ra,8(sp)
   207dc:	2023883a 	mov	r17,r4
   207e0:	2821883a 	mov	r16,r5
   207e4:	1000041e 	bne	r2,zero,207f8 <sbrk_aligned+0x34>
   207e8:	000b883a 	mov	r5,zero
   207ec:	0020b280 	call	20b28 <_sbrk_r>
   207f0:	00c000b4 	movhi	r3,2
   207f4:	18866415 	stw	r2,6544(r3)
   207f8:	800b883a 	mov	r5,r16
   207fc:	8809883a 	mov	r4,r17
   20800:	0020b280 	call	20b28 <_sbrk_r>
   20804:	10ffffd8 	cmpnei	r3,r2,-1
   20808:	1800071e 	bne	r3,zero,20828 <sbrk_aligned+0x64>
   2080c:	043fffc4 	movi	r16,-1
   20810:	8005883a 	mov	r2,r16
   20814:	dfc00217 	ldw	ra,8(sp)
   20818:	dc400117 	ldw	r17,4(sp)
   2081c:	dc000017 	ldw	r16,0(sp)
   20820:	dec00304 	addi	sp,sp,12
   20824:	f800283a 	ret
   20828:	140000c4 	addi	r16,r2,3
   2082c:	00ffff04 	movi	r3,-4
   20830:	80e0703a 	and	r16,r16,r3
   20834:	143ff626 	beq	r2,r16,20810 <sbrk_aligned+0x4c>
   20838:	808bc83a 	sub	r5,r16,r2
   2083c:	8809883a 	mov	r4,r17
   20840:	0020b280 	call	20b28 <_sbrk_r>
   20844:	10bfffe0 	cmpeqi	r2,r2,-1
   20848:	103ff126 	beq	r2,zero,20810 <sbrk_aligned+0x4c>
   2084c:	003fef06 	br	2080c <sbrk_aligned+0x48>

00020850 <_malloc_r>:
   20850:	defffb04 	addi	sp,sp,-20
   20854:	00bfff04 	movi	r2,-4
   20858:	dc400115 	stw	r17,4(sp)
   2085c:	2c4000c4 	addi	r17,r5,3
   20860:	88a2703a 	and	r17,r17,r2
   20864:	8c400204 	addi	r17,r17,8
   20868:	dc800215 	stw	r18,8(sp)
   2086c:	dfc00415 	stw	ra,16(sp)
   20870:	dcc00315 	stw	r19,12(sp)
   20874:	dc000015 	stw	r16,0(sp)
   20878:	88800328 	cmpgeui	r2,r17,12
   2087c:	2025883a 	mov	r18,r4
   20880:	10002a1e 	bne	r2,zero,2092c <_malloc_r+0xdc>
   20884:	04400304 	movi	r17,12
   20888:	89402936 	bltu	r17,r5,20930 <_malloc_r+0xe0>
   2088c:	9009883a 	mov	r4,r18
   20890:	00214680 	call	21468 <__malloc_lock>
   20894:	008000b4 	movhi	r2,2
   20898:	10866517 	ldw	r2,6548(r2)
   2089c:	1021883a 	mov	r16,r2
   208a0:	80002d1e 	bne	r16,zero,20958 <_malloc_r+0x108>
   208a4:	880b883a 	mov	r5,r17
   208a8:	9009883a 	mov	r4,r18
   208ac:	00207c40 	call	207c4 <sbrk_aligned>
   208b0:	1021883a 	mov	r16,r2
   208b4:	10bfffd8 	cmpnei	r2,r2,-1
   208b8:	1000541e 	bne	r2,zero,20a0c <_malloc_r+0x1bc>
   208bc:	008000b4 	movhi	r2,2
   208c0:	14066517 	ldw	r16,6548(r2)
   208c4:	8005883a 	mov	r2,r16
   208c8:	1000481e 	bne	r2,zero,209ec <_malloc_r+0x19c>
   208cc:	84c00017 	ldw	r19,0(r16)
   208d0:	000b883a 	mov	r5,zero
   208d4:	9009883a 	mov	r4,r18
   208d8:	84e7883a 	add	r19,r16,r19
   208dc:	0020b280 	call	20b28 <_sbrk_r>
   208e0:	9880451e 	bne	r19,r2,209f8 <_malloc_r+0x1a8>
   208e4:	80800017 	ldw	r2,0(r16)
   208e8:	8c4000c4 	addi	r17,r17,3
   208ec:	88a3c83a 	sub	r17,r17,r2
   208f0:	00bfff04 	movi	r2,-4
   208f4:	88a2703a 	and	r17,r17,r2
   208f8:	8c400204 	addi	r17,r17,8
   208fc:	88800328 	cmpgeui	r2,r17,12
   20900:	1000011e 	bne	r2,zero,20908 <_malloc_r+0xb8>
   20904:	04400304 	movi	r17,12
   20908:	880b883a 	mov	r5,r17
   2090c:	9009883a 	mov	r4,r18
   20910:	00207c40 	call	207c4 <sbrk_aligned>
   20914:	10bfffe0 	cmpeqi	r2,r2,-1
   20918:	1000371e 	bne	r2,zero,209f8 <_malloc_r+0x1a8>
   2091c:	80800017 	ldw	r2,0(r16)
   20920:	1445883a 	add	r2,r2,r17
   20924:	80800015 	stw	r2,0(r16)
   20928:	00001806 	br	2098c <_malloc_r+0x13c>
   2092c:	883fd60e 	bge	r17,zero,20888 <_malloc_r+0x38>
   20930:	00800304 	movi	r2,12
   20934:	90800015 	stw	r2,0(r18)
   20938:	0005883a 	mov	r2,zero
   2093c:	dfc00417 	ldw	ra,16(sp)
   20940:	dcc00317 	ldw	r19,12(sp)
   20944:	dc800217 	ldw	r18,8(sp)
   20948:	dc400117 	ldw	r17,4(sp)
   2094c:	dc000017 	ldw	r16,0(sp)
   20950:	dec00504 	addi	sp,sp,20
   20954:	f800283a 	ret
   20958:	81000017 	ldw	r4,0(r16)
   2095c:	2449c83a 	sub	r4,r4,r17
   20960:	20001f16 	blt	r4,zero,209e0 <_malloc_r+0x190>
   20964:	20c00330 	cmpltui	r3,r4,12
   20968:	1800161e 	bne	r3,zero,209c4 <_malloc_r+0x174>
   2096c:	84400015 	stw	r17,0(r16)
   20970:	8447883a 	add	r3,r16,r17
   20974:	1400111e 	bne	r2,r16,209bc <_malloc_r+0x16c>
   20978:	008000b4 	movhi	r2,2
   2097c:	10c66515 	stw	r3,6548(r2)
   20980:	80800117 	ldw	r2,4(r16)
   20984:	19000015 	stw	r4,0(r3)
   20988:	18800115 	stw	r2,4(r3)
   2098c:	9009883a 	mov	r4,r18
   20990:	002146c0 	call	2146c <__malloc_unlock>
   20994:	013ffe04 	movi	r4,-8
   20998:	808002c4 	addi	r2,r16,11
   2099c:	80c00104 	addi	r3,r16,4
   209a0:	1104703a 	and	r2,r2,r4
   209a4:	10c9c83a 	sub	r4,r2,r3
   209a8:	10ffe426 	beq	r2,r3,2093c <_malloc_r+0xec>
   209ac:	8121883a 	add	r16,r16,r4
   209b0:	1887c83a 	sub	r3,r3,r2
   209b4:	80c00015 	stw	r3,0(r16)
   209b8:	003fe006 	br	2093c <_malloc_r+0xec>
   209bc:	10c00115 	stw	r3,4(r2)
   209c0:	003fef06 	br	20980 <_malloc_r+0x130>
   209c4:	80c00117 	ldw	r3,4(r16)
   209c8:	1400031e 	bne	r2,r16,209d8 <_malloc_r+0x188>
   209cc:	008000b4 	movhi	r2,2
   209d0:	10c66515 	stw	r3,6548(r2)
   209d4:	003fed06 	br	2098c <_malloc_r+0x13c>
   209d8:	10c00115 	stw	r3,4(r2)
   209dc:	003feb06 	br	2098c <_malloc_r+0x13c>
   209e0:	8005883a 	mov	r2,r16
   209e4:	84000117 	ldw	r16,4(r16)
   209e8:	003fad06 	br	208a0 <_malloc_r+0x50>
   209ec:	1021883a 	mov	r16,r2
   209f0:	10800117 	ldw	r2,4(r2)
   209f4:	003fb406 	br	208c8 <_malloc_r+0x78>
   209f8:	00800304 	movi	r2,12
   209fc:	90800015 	stw	r2,0(r18)
   20a00:	9009883a 	mov	r4,r18
   20a04:	002146c0 	call	2146c <__malloc_unlock>
   20a08:	003fcb06 	br	20938 <_malloc_r+0xe8>
   20a0c:	84400015 	stw	r17,0(r16)
   20a10:	003fde06 	br	2098c <_malloc_r+0x13c>

00020a14 <_printf_r>:
   20a14:	defffd04 	addi	sp,sp,-12
   20a18:	dfc00015 	stw	ra,0(sp)
   20a1c:	d9800115 	stw	r6,4(sp)
   20a20:	d9c00215 	stw	r7,8(sp)
   20a24:	21800217 	ldw	r6,8(r4)
   20a28:	00c000b4 	movhi	r3,2
   20a2c:	18c44304 	addi	r3,r3,4364
   20a30:	30c00115 	stw	r3,4(r6)
   20a34:	280d883a 	mov	r6,r5
   20a38:	21400217 	ldw	r5,8(r4)
   20a3c:	d9c00104 	addi	r7,sp,4
   20a40:	0020bf80 	call	20bf8 <___vfprintf_internal_r>
   20a44:	dfc00017 	ldw	ra,0(sp)
   20a48:	dec00304 	addi	sp,sp,12
   20a4c:	f800283a 	ret

00020a50 <printf>:
   20a50:	defffc04 	addi	sp,sp,-16
   20a54:	dfc00015 	stw	ra,0(sp)
   20a58:	d9400115 	stw	r5,4(sp)
   20a5c:	d9800215 	stw	r6,8(sp)
   20a60:	d9c00315 	stw	r7,12(sp)
   20a64:	008000b4 	movhi	r2,2
   20a68:	10c62217 	ldw	r3,6280(r2)
   20a6c:	008000b4 	movhi	r2,2
   20a70:	10844304 	addi	r2,r2,4364
   20a74:	19400217 	ldw	r5,8(r3)
   20a78:	d9800104 	addi	r6,sp,4
   20a7c:	28800115 	stw	r2,4(r5)
   20a80:	200b883a 	mov	r5,r4
   20a84:	19000217 	ldw	r4,8(r3)
   20a88:	00210f40 	call	210f4 <__vfprintf_internal>
   20a8c:	dfc00017 	ldw	ra,0(sp)
   20a90:	dec00404 	addi	sp,sp,16
   20a94:	f800283a 	ret

00020a98 <_puts_r>:
   20a98:	defffd04 	addi	sp,sp,-12
   20a9c:	dc000015 	stw	r16,0(sp)
   20aa0:	2021883a 	mov	r16,r4
   20aa4:	2809883a 	mov	r4,r5
   20aa8:	dfc00215 	stw	ra,8(sp)
   20aac:	dc400115 	stw	r17,4(sp)
   20ab0:	2823883a 	mov	r17,r5
   20ab4:	0020b700 	call	20b70 <strlen>
   20ab8:	81400217 	ldw	r5,8(r16)
   20abc:	00c000b4 	movhi	r3,2
   20ac0:	18c44304 	addi	r3,r3,4364
   20ac4:	28c00115 	stw	r3,4(r5)
   20ac8:	100f883a 	mov	r7,r2
   20acc:	880d883a 	mov	r6,r17
   20ad0:	8009883a 	mov	r4,r16
   20ad4:	002110c0 	call	2110c <__sfvwrite_small_dev>
   20ad8:	10ffffe0 	cmpeqi	r3,r2,-1
   20adc:	1800091e 	bne	r3,zero,20b04 <_puts_r+0x6c>
   20ae0:	81400217 	ldw	r5,8(r16)
   20ae4:	018000b4 	movhi	r6,2
   20ae8:	01c00044 	movi	r7,1
   20aec:	28800117 	ldw	r2,4(r5)
   20af0:	3185e704 	addi	r6,r6,6044
   20af4:	8009883a 	mov	r4,r16
   20af8:	103ee83a 	callr	r2
   20afc:	10bfffe0 	cmpeqi	r2,r2,-1
   20b00:	0085c83a 	sub	r2,zero,r2
   20b04:	dfc00217 	ldw	ra,8(sp)
   20b08:	dc400117 	ldw	r17,4(sp)
   20b0c:	dc000017 	ldw	r16,0(sp)
   20b10:	dec00304 	addi	sp,sp,12
   20b14:	f800283a 	ret

00020b18 <puts>:
   20b18:	008000b4 	movhi	r2,2
   20b1c:	200b883a 	mov	r5,r4
   20b20:	11062217 	ldw	r4,6280(r2)
   20b24:	0020a981 	jmpi	20a98 <_puts_r>

00020b28 <_sbrk_r>:
   20b28:	defffe04 	addi	sp,sp,-8
   20b2c:	dc000015 	stw	r16,0(sp)
   20b30:	008000b4 	movhi	r2,2
   20b34:	2021883a 	mov	r16,r4
   20b38:	2809883a 	mov	r4,r5
   20b3c:	dfc00115 	stw	ra,4(sp)
   20b40:	10066615 	stw	zero,6552(r2)
   20b44:	00214700 	call	21470 <sbrk>
   20b48:	10ffffd8 	cmpnei	r3,r2,-1
   20b4c:	1800041e 	bne	r3,zero,20b60 <_sbrk_r+0x38>
   20b50:	00c000b4 	movhi	r3,2
   20b54:	18c66617 	ldw	r3,6552(r3)
   20b58:	18000126 	beq	r3,zero,20b60 <_sbrk_r+0x38>
   20b5c:	80c00015 	stw	r3,0(r16)
   20b60:	dfc00117 	ldw	ra,4(sp)
   20b64:	dc000017 	ldw	r16,0(sp)
   20b68:	dec00204 	addi	sp,sp,8
   20b6c:	f800283a 	ret

00020b70 <strlen>:
   20b70:	2005883a 	mov	r2,r4
   20b74:	10c00007 	ldb	r3,0(r2)
   20b78:	1800021e 	bne	r3,zero,20b84 <strlen+0x14>
   20b7c:	1105c83a 	sub	r2,r2,r4
   20b80:	f800283a 	ret
   20b84:	10800044 	addi	r2,r2,1
   20b88:	003ffa06 	br	20b74 <strlen+0x4>

00020b8c <print_repeat>:
   20b8c:	defffb04 	addi	sp,sp,-20
   20b90:	dc800315 	stw	r18,12(sp)
   20b94:	dc400215 	stw	r17,8(sp)
   20b98:	dc000115 	stw	r16,4(sp)
   20b9c:	dfc00415 	stw	ra,16(sp)
   20ba0:	2025883a 	mov	r18,r4
   20ba4:	2823883a 	mov	r17,r5
   20ba8:	d9800005 	stb	r6,0(sp)
   20bac:	3821883a 	mov	r16,r7
   20bb0:	04000716 	blt	zero,r16,20bd0 <print_repeat+0x44>
   20bb4:	0005883a 	mov	r2,zero
   20bb8:	dfc00417 	ldw	ra,16(sp)
   20bbc:	dc800317 	ldw	r18,12(sp)
   20bc0:	dc400217 	ldw	r17,8(sp)
   20bc4:	dc000117 	ldw	r16,4(sp)
   20bc8:	dec00504 	addi	sp,sp,20
   20bcc:	f800283a 	ret
   20bd0:	88800117 	ldw	r2,4(r17)
   20bd4:	01c00044 	movi	r7,1
   20bd8:	d80d883a 	mov	r6,sp
   20bdc:	880b883a 	mov	r5,r17
   20be0:	9009883a 	mov	r4,r18
   20be4:	103ee83a 	callr	r2
   20be8:	843fffc4 	addi	r16,r16,-1
   20bec:	103ff026 	beq	r2,zero,20bb0 <print_repeat+0x24>
   20bf0:	00bfffc4 	movi	r2,-1
   20bf4:	003ff006 	br	20bb8 <print_repeat+0x2c>

00020bf8 <___vfprintf_internal_r>:
   20bf8:	deffe604 	addi	sp,sp,-104
   20bfc:	ddc01715 	stw	r23,92(sp)
   20c00:	dd801615 	stw	r22,88(sp)
   20c04:	dd401515 	stw	r21,84(sp)
   20c08:	dd001415 	stw	r20,80(sp)
   20c0c:	dcc01315 	stw	r19,76(sp)
   20c10:	dc801215 	stw	r18,72(sp)
   20c14:	dc401115 	stw	r17,68(sp)
   20c18:	dc001015 	stw	r16,64(sp)
   20c1c:	dfc01915 	stw	ra,100(sp)
   20c20:	df001815 	stw	fp,96(sp)
   20c24:	2025883a 	mov	r18,r4
   20c28:	2823883a 	mov	r17,r5
   20c2c:	d9800515 	stw	r6,20(sp)
   20c30:	382f883a 	mov	r23,r7
   20c34:	0021883a 	mov	r16,zero
   20c38:	d8000215 	stw	zero,8(sp)
   20c3c:	d8000015 	stw	zero,0(sp)
   20c40:	002b883a 	mov	r21,zero
   20c44:	0029883a 	mov	r20,zero
   20c48:	0027883a 	mov	r19,zero
   20c4c:	002d883a 	mov	r22,zero
   20c50:	d8000115 	stw	zero,4(sp)
   20c54:	0005883a 	mov	r2,zero
   20c58:	00000206 	br	20c64 <___vfprintf_internal_r+0x6c>
   20c5c:	114000e0 	cmpeqi	r5,r2,3
   20c60:	28004c1e 	bne	r5,zero,20d94 <___vfprintf_internal_r+0x19c>
   20c64:	d8c00517 	ldw	r3,20(sp)
   20c68:	19000003 	ldbu	r4,0(r3)
   20c6c:	18c00044 	addi	r3,r3,1
   20c70:	d8c00515 	stw	r3,20(sp)
   20c74:	20c03fcc 	andi	r3,r4,255
   20c78:	18c0201c 	xori	r3,r3,128
   20c7c:	18ffe004 	addi	r3,r3,-128
   20c80:	18001026 	beq	r3,zero,20cc4 <___vfprintf_internal_r+0xcc>
   20c84:	114000a0 	cmpeqi	r5,r2,2
   20c88:	28001f1e 	bne	r5,zero,20d08 <___vfprintf_internal_r+0x110>
   20c8c:	114000c8 	cmpgei	r5,r2,3
   20c90:	283ff21e 	bne	r5,zero,20c5c <___vfprintf_internal_r+0x64>
   20c94:	1000181e 	bne	r2,zero,20cf8 <___vfprintf_internal_r+0x100>
   20c98:	18c00960 	cmpeqi	r3,r3,37
   20c9c:	1801061e 	bne	r3,zero,210b8 <___vfprintf_internal_r+0x4c0>
   20ca0:	88800117 	ldw	r2,4(r17)
   20ca4:	d9000805 	stb	r4,32(sp)
   20ca8:	01c00044 	movi	r7,1
   20cac:	d9800804 	addi	r6,sp,32
   20cb0:	880b883a 	mov	r5,r17
   20cb4:	9009883a 	mov	r4,r18
   20cb8:	103ee83a 	callr	r2
   20cbc:	10001c26 	beq	r2,zero,20d30 <___vfprintf_internal_r+0x138>
   20cc0:	043fffc4 	movi	r16,-1
   20cc4:	8005883a 	mov	r2,r16
   20cc8:	dfc01917 	ldw	ra,100(sp)
   20ccc:	df001817 	ldw	fp,96(sp)
   20cd0:	ddc01717 	ldw	r23,92(sp)
   20cd4:	dd801617 	ldw	r22,88(sp)
   20cd8:	dd401517 	ldw	r21,84(sp)
   20cdc:	dd001417 	ldw	r20,80(sp)
   20ce0:	dcc01317 	ldw	r19,76(sp)
   20ce4:	dc801217 	ldw	r18,72(sp)
   20ce8:	dc401117 	ldw	r17,68(sp)
   20cec:	dc001017 	ldw	r16,64(sp)
   20cf0:	dec01a04 	addi	sp,sp,104
   20cf4:	f800283a 	ret
   20cf8:	18800c20 	cmpeqi	r2,r3,48
   20cfc:	1000f71e 	bne	r2,zero,210dc <___vfprintf_internal_r+0x4e4>
   20d00:	18800958 	cmpnei	r2,r3,37
   20d04:	103fe626 	beq	r2,zero,20ca0 <___vfprintf_internal_r+0xa8>
   20d08:	213ff404 	addi	r4,r4,-48
   20d0c:	21003fcc 	andi	r4,r4,255
   20d10:	208002a8 	cmpgeui	r2,r4,10
   20d14:	10000a1e 	bne	r2,zero,20d40 <___vfprintf_internal_r+0x148>
   20d18:	98bfffe0 	cmpeqi	r2,r19,-1
   20d1c:	1000061e 	bne	r2,zero,20d38 <___vfprintf_internal_r+0x140>
   20d20:	9cc002a4 	muli	r19,r19,10
   20d24:	24e7883a 	add	r19,r4,r19
   20d28:	00800084 	movi	r2,2
   20d2c:	003fcd06 	br	20c64 <___vfprintf_internal_r+0x6c>
   20d30:	84000044 	addi	r16,r16,1
   20d34:	003fcb06 	br	20c64 <___vfprintf_internal_r+0x6c>
   20d38:	0027883a 	mov	r19,zero
   20d3c:	003ff906 	br	20d24 <___vfprintf_internal_r+0x12c>
   20d40:	18800ba0 	cmpeqi	r2,r3,46
   20d44:	1000e91e 	bne	r2,zero,210ec <___vfprintf_internal_r+0x4f4>
   20d48:	18801b20 	cmpeqi	r2,r3,108
   20d4c:	1000e61e 	bne	r2,zero,210e8 <___vfprintf_internal_r+0x4f0>
   20d50:	a0bfffe0 	cmpeqi	r2,r20,-1
   20d54:	10001a1e 	bne	r2,zero,20dc0 <___vfprintf_internal_r+0x1c8>
   20d58:	d8000115 	stw	zero,4(sp)
   20d5c:	18801be0 	cmpeqi	r2,r3,111
   20d60:	1000b41e 	bne	r2,zero,21034 <___vfprintf_internal_r+0x43c>
   20d64:	18801c08 	cmpgei	r2,r3,112
   20d68:	1000561e 	bne	r2,zero,20ec4 <___vfprintf_internal_r+0x2cc>
   20d6c:	188018e0 	cmpeqi	r2,r3,99
   20d70:	1000b71e 	bne	r2,zero,21050 <___vfprintf_internal_r+0x458>
   20d74:	18801908 	cmpgei	r2,r3,100
   20d78:	1000131e 	bne	r2,zero,20dc8 <___vfprintf_internal_r+0x1d0>
   20d7c:	18c01620 	cmpeqi	r3,r3,88
   20d80:	183fb426 	beq	r3,zero,20c54 <___vfprintf_internal_r+0x5c>
   20d84:	b000701e 	bne	r22,zero,20f48 <___vfprintf_internal_r+0x350>
   20d88:	00800044 	movi	r2,1
   20d8c:	d8800215 	stw	r2,8(sp)
   20d90:	00006e06 	br	20f4c <___vfprintf_internal_r+0x354>
   20d94:	213ff404 	addi	r4,r4,-48
   20d98:	21003fcc 	andi	r4,r4,255
   20d9c:	214002a8 	cmpgeui	r5,r4,10
   20da0:	283fe91e 	bne	r5,zero,20d48 <___vfprintf_internal_r+0x150>
   20da4:	a0ffffe0 	cmpeqi	r3,r20,-1
   20da8:	1800031e 	bne	r3,zero,20db8 <___vfprintf_internal_r+0x1c0>
   20dac:	a50002a4 	muli	r20,r20,10
   20db0:	2529883a 	add	r20,r4,r20
   20db4:	003fab06 	br	20c64 <___vfprintf_internal_r+0x6c>
   20db8:	0029883a 	mov	r20,zero
   20dbc:	003ffc06 	br	20db0 <___vfprintf_internal_r+0x1b8>
   20dc0:	05000044 	movi	r20,1
   20dc4:	003fe506 	br	20d5c <___vfprintf_internal_r+0x164>
   20dc8:	18801920 	cmpeqi	r2,r3,100
   20dcc:	1000021e 	bne	r2,zero,20dd8 <___vfprintf_internal_r+0x1e0>
   20dd0:	18c01a60 	cmpeqi	r3,r3,105
   20dd4:	183f9f26 	beq	r3,zero,20c54 <___vfprintf_internal_r+0x5c>
   20dd8:	b8800104 	addi	r2,r23,4
   20ddc:	d8800415 	stw	r2,16(sp)
   20de0:	d8800017 	ldw	r2,0(sp)
   20de4:	10009426 	beq	r2,zero,21038 <___vfprintf_internal_r+0x440>
   20de8:	bdc00017 	ldw	r23,0(r23)
   20dec:	b800960e 	bge	r23,zero,21048 <___vfprintf_internal_r+0x450>
   20df0:	05efc83a 	sub	r23,zero,r23
   20df4:	02400044 	movi	r9,1
   20df8:	df000804 	addi	fp,sp,32
   20dfc:	e00d883a 	mov	r6,fp
   20e00:	b800541e 	bne	r23,zero,20f54 <___vfprintf_internal_r+0x35c>
   20e04:	e185c83a 	sub	r2,fp,r6
   20e08:	d8800315 	stw	r2,12(sp)
   20e0c:	a085c83a 	sub	r2,r20,r2
   20e10:	00800b0e 	bge	zero,r2,20e40 <___vfprintf_internal_r+0x248>
   20e14:	d8c01004 	addi	r3,sp,64
   20e18:	e0c0072e 	bgeu	fp,r3,20e38 <___vfprintf_internal_r+0x240>
   20e1c:	e085883a 	add	r2,fp,r2
   20e20:	01000c04 	movi	r4,48
   20e24:	e7000044 	addi	fp,fp,1
   20e28:	e13fffc5 	stb	r4,-1(fp)
   20e2c:	17000226 	beq	r2,fp,20e38 <___vfprintf_internal_r+0x240>
   20e30:	d8c01004 	addi	r3,sp,64
   20e34:	e0fffb36 	bltu	fp,r3,20e24 <___vfprintf_internal_r+0x22c>
   20e38:	e185c83a 	sub	r2,fp,r6
   20e3c:	d8800315 	stw	r2,12(sp)
   20e40:	d8800317 	ldw	r2,12(sp)
   20e44:	4891883a 	add	r8,r9,r2
   20e48:	d8800117 	ldw	r2,4(sp)
   20e4c:	9a2fc83a 	sub	r23,r19,r8
   20e50:	10005526 	beq	r2,zero,20fa8 <___vfprintf_internal_r+0x3b0>
   20e54:	48000a26 	beq	r9,zero,20e80 <___vfprintf_internal_r+0x288>
   20e58:	00800b44 	movi	r2,45
   20e5c:	d88007c5 	stb	r2,31(sp)
   20e60:	88800117 	ldw	r2,4(r17)
   20e64:	01c00044 	movi	r7,1
   20e68:	d98007c4 	addi	r6,sp,31
   20e6c:	880b883a 	mov	r5,r17
   20e70:	9009883a 	mov	r4,r18
   20e74:	103ee83a 	callr	r2
   20e78:	103f911e 	bne	r2,zero,20cc0 <___vfprintf_internal_r+0xc8>
   20e7c:	84000044 	addi	r16,r16,1
   20e80:	05c0070e 	bge	zero,r23,20ea0 <___vfprintf_internal_r+0x2a8>
   20e84:	b80f883a 	mov	r7,r23
   20e88:	01800c04 	movi	r6,48
   20e8c:	880b883a 	mov	r5,r17
   20e90:	9009883a 	mov	r4,r18
   20e94:	0020b8c0 	call	20b8c <print_repeat>
   20e98:	103f891e 	bne	r2,zero,20cc0 <___vfprintf_internal_r+0xc8>
   20e9c:	85e1883a 	add	r16,r16,r23
   20ea0:	d8800317 	ldw	r2,12(sp)
   20ea4:	e011883a 	mov	r8,fp
   20ea8:	172fc83a 	sub	r23,r2,fp
   20eac:	ba05883a 	add	r2,r23,r8
   20eb0:	00805316 	blt	zero,r2,21000 <___vfprintf_internal_r+0x408>
   20eb4:	8707883a 	add	r3,r16,fp
   20eb8:	ddc00417 	ldw	r23,16(sp)
   20ebc:	1a21c83a 	sub	r16,r3,r8
   20ec0:	003f6406 	br	20c54 <___vfprintf_internal_r+0x5c>
   20ec4:	18801d60 	cmpeqi	r2,r3,117
   20ec8:	10005b1e 	bne	r2,zero,21038 <___vfprintf_internal_r+0x440>
   20ecc:	18801e20 	cmpeqi	r2,r3,120
   20ed0:	10001e1e 	bne	r2,zero,20f4c <___vfprintf_internal_r+0x354>
   20ed4:	18c01ce0 	cmpeqi	r3,r3,115
   20ed8:	183f5e26 	beq	r3,zero,20c54 <___vfprintf_internal_r+0x5c>
   20edc:	b8800104 	addi	r2,r23,4
   20ee0:	d8800315 	stw	r2,12(sp)
   20ee4:	b8800017 	ldw	r2,0(r23)
   20ee8:	1009883a 	mov	r4,r2
   20eec:	1039883a 	mov	fp,r2
   20ef0:	0020b700 	call	20b70 <strlen>
   20ef4:	988fc83a 	sub	r7,r19,r2
   20ef8:	102f883a 	mov	r23,r2
   20efc:	01c0080e 	bge	zero,r7,20f20 <___vfprintf_internal_r+0x328>
   20f00:	01800804 	movi	r6,32
   20f04:	880b883a 	mov	r5,r17
   20f08:	9009883a 	mov	r4,r18
   20f0c:	d9c00415 	stw	r7,16(sp)
   20f10:	0020b8c0 	call	20b8c <print_repeat>
   20f14:	103f6a1e 	bne	r2,zero,20cc0 <___vfprintf_internal_r+0xc8>
   20f18:	d9c00417 	ldw	r7,16(sp)
   20f1c:	81e1883a 	add	r16,r16,r7
   20f20:	88800117 	ldw	r2,4(r17)
   20f24:	b80f883a 	mov	r7,r23
   20f28:	e00d883a 	mov	r6,fp
   20f2c:	880b883a 	mov	r5,r17
   20f30:	9009883a 	mov	r4,r18
   20f34:	103ee83a 	callr	r2
   20f38:	103f611e 	bne	r2,zero,20cc0 <___vfprintf_internal_r+0xc8>
   20f3c:	85e1883a 	add	r16,r16,r23
   20f40:	ddc00317 	ldw	r23,12(sp)
   20f44:	003f4706 	br	20c64 <___vfprintf_internal_r+0x6c>
   20f48:	dd800215 	stw	r22,8(sp)
   20f4c:	05400404 	movi	r21,16
   20f50:	00003906 	br	21038 <___vfprintf_internal_r+0x440>
   20f54:	b809883a 	mov	r4,r23
   20f58:	a80b883a 	mov	r5,r21
   20f5c:	da400315 	stw	r9,12(sp)
   20f60:	00212f80 	call	212f8 <__udivsi3>
   20f64:	1549383a 	mul	r4,r2,r21
   20f68:	da400317 	ldw	r9,12(sp)
   20f6c:	d9800804 	addi	r6,sp,32
   20f70:	b92fc83a 	sub	r23,r23,r4
   20f74:	b9000288 	cmpgei	r4,r23,10
   20f78:	2000051e 	bne	r4,zero,20f90 <___vfprintf_internal_r+0x398>
   20f7c:	bdc00c04 	addi	r23,r23,48
   20f80:	e7000044 	addi	fp,fp,1
   20f84:	e5ffffc5 	stb	r23,-1(fp)
   20f88:	102f883a 	mov	r23,r2
   20f8c:	003f9c06 	br	20e00 <___vfprintf_internal_r+0x208>
   20f90:	d8c00217 	ldw	r3,8(sp)
   20f94:	18000226 	beq	r3,zero,20fa0 <___vfprintf_internal_r+0x3a8>
   20f98:	bdc00dc4 	addi	r23,r23,55
   20f9c:	003ff806 	br	20f80 <___vfprintf_internal_r+0x388>
   20fa0:	bdc015c4 	addi	r23,r23,87
   20fa4:	003ff606 	br	20f80 <___vfprintf_internal_r+0x388>
   20fa8:	05c0090e 	bge	zero,r23,20fd0 <___vfprintf_internal_r+0x3d8>
   20fac:	b80f883a 	mov	r7,r23
   20fb0:	01800804 	movi	r6,32
   20fb4:	880b883a 	mov	r5,r17
   20fb8:	9009883a 	mov	r4,r18
   20fbc:	da400615 	stw	r9,24(sp)
   20fc0:	0020b8c0 	call	20b8c <print_repeat>
   20fc4:	103f3e1e 	bne	r2,zero,20cc0 <___vfprintf_internal_r+0xc8>
   20fc8:	da400617 	ldw	r9,24(sp)
   20fcc:	85e1883a 	add	r16,r16,r23
   20fd0:	483fb326 	beq	r9,zero,20ea0 <___vfprintf_internal_r+0x2a8>
   20fd4:	00800b44 	movi	r2,45
   20fd8:	d88007c5 	stb	r2,31(sp)
   20fdc:	88800117 	ldw	r2,4(r17)
   20fe0:	01c00044 	movi	r7,1
   20fe4:	d98007c4 	addi	r6,sp,31
   20fe8:	880b883a 	mov	r5,r17
   20fec:	9009883a 	mov	r4,r18
   20ff0:	103ee83a 	callr	r2
   20ff4:	103f321e 	bne	r2,zero,20cc0 <___vfprintf_internal_r+0xc8>
   20ff8:	84000044 	addi	r16,r16,1
   20ffc:	003fa806 	br	20ea0 <___vfprintf_internal_r+0x2a8>
   21000:	40bfffc3 	ldbu	r2,-1(r8)
   21004:	01c00044 	movi	r7,1
   21008:	423fffc4 	addi	r8,r8,-1
   2100c:	d88007c5 	stb	r2,31(sp)
   21010:	88800117 	ldw	r2,4(r17)
   21014:	d98007c4 	addi	r6,sp,31
   21018:	880b883a 	mov	r5,r17
   2101c:	9009883a 	mov	r4,r18
   21020:	da000315 	stw	r8,12(sp)
   21024:	103ee83a 	callr	r2
   21028:	da000317 	ldw	r8,12(sp)
   2102c:	103f9f26 	beq	r2,zero,20eac <___vfprintf_internal_r+0x2b4>
   21030:	003f2306 	br	20cc0 <___vfprintf_internal_r+0xc8>
   21034:	05400204 	movi	r21,8
   21038:	b8800104 	addi	r2,r23,4
   2103c:	d8800415 	stw	r2,16(sp)
   21040:	bdc00017 	ldw	r23,0(r23)
   21044:	d8000015 	stw	zero,0(sp)
   21048:	0013883a 	mov	r9,zero
   2104c:	003f6a06 	br	20df8 <___vfprintf_internal_r+0x200>
   21050:	98800090 	cmplti	r2,r19,2
   21054:	1000091e 	bne	r2,zero,2107c <___vfprintf_internal_r+0x484>
   21058:	99ffffc4 	addi	r7,r19,-1
   2105c:	01800804 	movi	r6,32
   21060:	880b883a 	mov	r5,r17
   21064:	9009883a 	mov	r4,r18
   21068:	d9c00315 	stw	r7,12(sp)
   2106c:	0020b8c0 	call	20b8c <print_repeat>
   21070:	103f131e 	bne	r2,zero,20cc0 <___vfprintf_internal_r+0xc8>
   21074:	d9c00317 	ldw	r7,12(sp)
   21078:	81e1883a 	add	r16,r16,r7
   2107c:	b8800017 	ldw	r2,0(r23)
   21080:	b8c00104 	addi	r3,r23,4
   21084:	01c00044 	movi	r7,1
   21088:	d8800805 	stb	r2,32(sp)
   2108c:	88800117 	ldw	r2,4(r17)
   21090:	d9800804 	addi	r6,sp,32
   21094:	880b883a 	mov	r5,r17
   21098:	9009883a 	mov	r4,r18
   2109c:	d8c00315 	stw	r3,12(sp)
   210a0:	103ee83a 	callr	r2
   210a4:	103f061e 	bne	r2,zero,20cc0 <___vfprintf_internal_r+0xc8>
   210a8:	d8c00317 	ldw	r3,12(sp)
   210ac:	84000044 	addi	r16,r16,1
   210b0:	182f883a 	mov	r23,r3
   210b4:	003eeb06 	br	20c64 <___vfprintf_internal_r+0x6c>
   210b8:	00800044 	movi	r2,1
   210bc:	d8000215 	stw	zero,8(sp)
   210c0:	002d883a 	mov	r22,zero
   210c4:	d8000115 	stw	zero,4(sp)
   210c8:	d8800015 	stw	r2,0(sp)
   210cc:	05400284 	movi	r21,10
   210d0:	053fffc4 	movi	r20,-1
   210d4:	04ffffc4 	movi	r19,-1
   210d8:	003ee206 	br	20c64 <___vfprintf_internal_r+0x6c>
   210dc:	00800044 	movi	r2,1
   210e0:	d8800115 	stw	r2,4(sp)
   210e4:	003f1006 	br	20d28 <___vfprintf_internal_r+0x130>
   210e8:	05800044 	movi	r22,1
   210ec:	008000c4 	movi	r2,3
   210f0:	003edc06 	br	20c64 <___vfprintf_internal_r+0x6c>

000210f4 <__vfprintf_internal>:
   210f4:	008000b4 	movhi	r2,2
   210f8:	300f883a 	mov	r7,r6
   210fc:	280d883a 	mov	r6,r5
   21100:	200b883a 	mov	r5,r4
   21104:	11062217 	ldw	r4,6280(r2)
   21108:	0020bf81 	jmpi	20bf8 <___vfprintf_internal_r>

0002110c <__sfvwrite_small_dev>:
   2110c:	2880000b 	ldhu	r2,0(r5)
   21110:	1080020c 	andi	r2,r2,8
   21114:	10002526 	beq	r2,zero,211ac <__sfvwrite_small_dev+0xa0>
   21118:	2880008f 	ldh	r2,2(r5)
   2111c:	defffb04 	addi	sp,sp,-20
   21120:	dcc00315 	stw	r19,12(sp)
   21124:	dc800215 	stw	r18,8(sp)
   21128:	dc400115 	stw	r17,4(sp)
   2112c:	dc000015 	stw	r16,0(sp)
   21130:	dfc00415 	stw	ra,16(sp)
   21134:	2027883a 	mov	r19,r4
   21138:	2821883a 	mov	r16,r5
   2113c:	3025883a 	mov	r18,r6
   21140:	3823883a 	mov	r17,r7
   21144:	1000100e 	bge	r2,zero,21188 <__sfvwrite_small_dev+0x7c>
   21148:	8080000b 	ldhu	r2,0(r16)
   2114c:	10801014 	ori	r2,r2,64
   21150:	8080000d 	sth	r2,0(r16)
   21154:	00bfffc4 	movi	r2,-1
   21158:	00000d06 	br	21190 <__sfvwrite_small_dev+0x84>
   2115c:	88810050 	cmplti	r2,r17,1025
   21160:	880f883a 	mov	r7,r17
   21164:	1000011e 	bne	r2,zero,2116c <__sfvwrite_small_dev+0x60>
   21168:	01c10004 	movi	r7,1024
   2116c:	8140008f 	ldh	r5,2(r16)
   21170:	900d883a 	mov	r6,r18
   21174:	9809883a 	mov	r4,r19
   21178:	00211b40 	call	211b4 <_write_r>
   2117c:	00bff20e 	bge	zero,r2,21148 <__sfvwrite_small_dev+0x3c>
   21180:	88a3c83a 	sub	r17,r17,r2
   21184:	90a5883a 	add	r18,r18,r2
   21188:	047ff416 	blt	zero,r17,2115c <__sfvwrite_small_dev+0x50>
   2118c:	0005883a 	mov	r2,zero
   21190:	dfc00417 	ldw	ra,16(sp)
   21194:	dcc00317 	ldw	r19,12(sp)
   21198:	dc800217 	ldw	r18,8(sp)
   2119c:	dc400117 	ldw	r17,4(sp)
   211a0:	dc000017 	ldw	r16,0(sp)
   211a4:	dec00504 	addi	sp,sp,20
   211a8:	f800283a 	ret
   211ac:	00bfffc4 	movi	r2,-1
   211b0:	f800283a 	ret

000211b4 <_write_r>:
   211b4:	defffe04 	addi	sp,sp,-8
   211b8:	dc000015 	stw	r16,0(sp)
   211bc:	008000b4 	movhi	r2,2
   211c0:	2021883a 	mov	r16,r4
   211c4:	2809883a 	mov	r4,r5
   211c8:	300b883a 	mov	r5,r6
   211cc:	380d883a 	mov	r6,r7
   211d0:	dfc00115 	stw	ra,4(sp)
   211d4:	10066615 	stw	zero,6552(r2)
   211d8:	00214bc0 	call	214bc <write>
   211dc:	10ffffd8 	cmpnei	r3,r2,-1
   211e0:	1800041e 	bne	r3,zero,211f4 <_write_r+0x40>
   211e4:	00c000b4 	movhi	r3,2
   211e8:	18c66617 	ldw	r3,6552(r3)
   211ec:	18000126 	beq	r3,zero,211f4 <_write_r+0x40>
   211f0:	80c00015 	stw	r3,0(r16)
   211f4:	dfc00117 	ldw	ra,4(sp)
   211f8:	dc000017 	ldw	r16,0(sp)
   211fc:	dec00204 	addi	sp,sp,8
   21200:	f800283a 	ret

00021204 <__divsi3>:
   21204:	20001a16 	blt	r4,zero,21270 <__divsi3+0x6c>
   21208:	000f883a 	mov	r7,zero
   2120c:	2800020e 	bge	r5,zero,21218 <__divsi3+0x14>
   21210:	014bc83a 	sub	r5,zero,r5
   21214:	39c0005c 	xori	r7,r7,1
   21218:	200d883a 	mov	r6,r4
   2121c:	00c00044 	movi	r3,1
   21220:	2900092e 	bgeu	r5,r4,21248 <__divsi3+0x44>
   21224:	00800804 	movi	r2,32
   21228:	00c00044 	movi	r3,1
   2122c:	00000106 	br	21234 <__divsi3+0x30>
   21230:	10001226 	beq	r2,zero,2127c <__divsi3+0x78>
   21234:	294b883a 	add	r5,r5,r5
   21238:	10bfffc4 	addi	r2,r2,-1
   2123c:	18c7883a 	add	r3,r3,r3
   21240:	293ffb36 	bltu	r5,r4,21230 <__divsi3+0x2c>
   21244:	18000d26 	beq	r3,zero,2127c <__divsi3+0x78>
   21248:	0005883a 	mov	r2,zero
   2124c:	31400236 	bltu	r6,r5,21258 <__divsi3+0x54>
   21250:	314dc83a 	sub	r6,r6,r5
   21254:	10c4b03a 	or	r2,r2,r3
   21258:	1806d07a 	srli	r3,r3,1
   2125c:	280ad07a 	srli	r5,r5,1
   21260:	183ffa1e 	bne	r3,zero,2124c <__divsi3+0x48>
   21264:	38000126 	beq	r7,zero,2126c <__divsi3+0x68>
   21268:	0085c83a 	sub	r2,zero,r2
   2126c:	f800283a 	ret
   21270:	0109c83a 	sub	r4,zero,r4
   21274:	01c00044 	movi	r7,1
   21278:	003fe406 	br	2120c <__divsi3+0x8>
   2127c:	0005883a 	mov	r2,zero
   21280:	003ff806 	br	21264 <__divsi3+0x60>

00021284 <__modsi3>:
   21284:	20001716 	blt	r4,zero,212e4 <__modsi3+0x60>
   21288:	000f883a 	mov	r7,zero
   2128c:	2005883a 	mov	r2,r4
   21290:	2800010e 	bge	r5,zero,21298 <__modsi3+0x14>
   21294:	014bc83a 	sub	r5,zero,r5
   21298:	00c00044 	movi	r3,1
   2129c:	2900092e 	bgeu	r5,r4,212c4 <__modsi3+0x40>
   212a0:	01800804 	movi	r6,32
   212a4:	00c00044 	movi	r3,1
   212a8:	00000106 	br	212b0 <__modsi3+0x2c>
   212ac:	30001026 	beq	r6,zero,212f0 <__modsi3+0x6c>
   212b0:	294b883a 	add	r5,r5,r5
   212b4:	31bfffc4 	addi	r6,r6,-1
   212b8:	18c7883a 	add	r3,r3,r3
   212bc:	293ffb36 	bltu	r5,r4,212ac <__modsi3+0x28>
   212c0:	18000b26 	beq	r3,zero,212f0 <__modsi3+0x6c>
   212c4:	1806d07a 	srli	r3,r3,1
   212c8:	11400136 	bltu	r2,r5,212d0 <__modsi3+0x4c>
   212cc:	1145c83a 	sub	r2,r2,r5
   212d0:	280ad07a 	srli	r5,r5,1
   212d4:	183ffb1e 	bne	r3,zero,212c4 <__modsi3+0x40>
   212d8:	38000126 	beq	r7,zero,212e0 <__modsi3+0x5c>
   212dc:	0085c83a 	sub	r2,zero,r2
   212e0:	f800283a 	ret
   212e4:	0109c83a 	sub	r4,zero,r4
   212e8:	01c00044 	movi	r7,1
   212ec:	003fe706 	br	2128c <__modsi3+0x8>
   212f0:	2005883a 	mov	r2,r4
   212f4:	003ff806 	br	212d8 <__modsi3+0x54>

000212f8 <__udivsi3>:
   212f8:	200d883a 	mov	r6,r4
   212fc:	2900152e 	bgeu	r5,r4,21354 <__udivsi3+0x5c>
   21300:	28001416 	blt	r5,zero,21354 <__udivsi3+0x5c>
   21304:	00800804 	movi	r2,32
   21308:	00c00044 	movi	r3,1
   2130c:	00000206 	br	21318 <__udivsi3+0x20>
   21310:	10000e26 	beq	r2,zero,2134c <__udivsi3+0x54>
   21314:	28000416 	blt	r5,zero,21328 <__udivsi3+0x30>
   21318:	294b883a 	add	r5,r5,r5
   2131c:	10bfffc4 	addi	r2,r2,-1
   21320:	18c7883a 	add	r3,r3,r3
   21324:	293ffa36 	bltu	r5,r4,21310 <__udivsi3+0x18>
   21328:	18000826 	beq	r3,zero,2134c <__udivsi3+0x54>
   2132c:	0005883a 	mov	r2,zero
   21330:	31400236 	bltu	r6,r5,2133c <__udivsi3+0x44>
   21334:	314dc83a 	sub	r6,r6,r5
   21338:	10c4b03a 	or	r2,r2,r3
   2133c:	1806d07a 	srli	r3,r3,1
   21340:	280ad07a 	srli	r5,r5,1
   21344:	183ffa1e 	bne	r3,zero,21330 <__udivsi3+0x38>
   21348:	f800283a 	ret
   2134c:	0005883a 	mov	r2,zero
   21350:	f800283a 	ret
   21354:	00c00044 	movi	r3,1
   21358:	003ff406 	br	2132c <__udivsi3+0x34>

0002135c <__umodsi3>:
   2135c:	2005883a 	mov	r2,r4
   21360:	2900132e 	bgeu	r5,r4,213b0 <__umodsi3+0x54>
   21364:	28001216 	blt	r5,zero,213b0 <__umodsi3+0x54>
   21368:	01800804 	movi	r6,32
   2136c:	00c00044 	movi	r3,1
   21370:	00000206 	br	2137c <__umodsi3+0x20>
   21374:	30000c26 	beq	r6,zero,213a8 <__umodsi3+0x4c>
   21378:	28000416 	blt	r5,zero,2138c <__umodsi3+0x30>
   2137c:	294b883a 	add	r5,r5,r5
   21380:	31bfffc4 	addi	r6,r6,-1
   21384:	18c7883a 	add	r3,r3,r3
   21388:	293ffa36 	bltu	r5,r4,21374 <__umodsi3+0x18>
   2138c:	18000626 	beq	r3,zero,213a8 <__umodsi3+0x4c>
   21390:	1806d07a 	srli	r3,r3,1
   21394:	11400136 	bltu	r2,r5,2139c <__umodsi3+0x40>
   21398:	1145c83a 	sub	r2,r2,r5
   2139c:	280ad07a 	srli	r5,r5,1
   213a0:	183ffb1e 	bne	r3,zero,21390 <__umodsi3+0x34>
   213a4:	f800283a 	ret
   213a8:	2005883a 	mov	r2,r4
   213ac:	f800283a 	ret
   213b0:	00c00044 	movi	r3,1
   213b4:	003ff606 	br	21390 <__umodsi3+0x34>

000213b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   213b8:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   213bc:	010000b4 	movhi	r4,2
   213c0:	014000b4 	movhi	r5,2
   213c4:	dfc00015 	stw	ra,0(sp)
   213c8:	2105e804 	addi	r4,r4,6048
   213cc:	29462604 	addi	r5,r5,6296
   213d0:	21400426 	beq	r4,r5,213e4 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
   213d4:	018000b4 	movhi	r6,2
   213d8:	31862604 	addi	r6,r6,6296
   213dc:	310dc83a 	sub	r6,r6,r4
   213e0:	00215f40 	call	215f4 <memcpy>
  if (to != from)
   213e4:	010000b4 	movhi	r4,2
   213e8:	014000b4 	movhi	r5,2
   213ec:	21000804 	addi	r4,r4,32
   213f0:	29400804 	addi	r5,r5,32
   213f4:	21400426 	beq	r4,r5,21408 <alt_load+0x50>
      *to++ = *from++;
   213f8:	018000b4 	movhi	r6,2
   213fc:	31800804 	addi	r6,r6,32
   21400:	310dc83a 	sub	r6,r6,r4
   21404:	00215f40 	call	215f4 <memcpy>
  if (to != from)
   21408:	010000b4 	movhi	r4,2
   2140c:	014000b4 	movhi	r5,2
   21410:	21058704 	addi	r4,r4,5660
   21414:	29458704 	addi	r5,r5,5660
   21418:	21400426 	beq	r4,r5,2142c <alt_load+0x74>
      *to++ = *from++;
   2141c:	018000b4 	movhi	r6,2
   21420:	3185e804 	addi	r6,r6,6048
   21424:	310dc83a 	sub	r6,r6,r4
   21428:	00215f40 	call	215f4 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2142c:	002156c0 	call	2156c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   21430:	dfc00017 	ldw	ra,0(sp)
   21434:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   21438:	00215841 	jmpi	21584 <alt_icache_flush_all>

0002143c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2143c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   21440:	0009883a 	mov	r4,zero
{
   21444:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   21448:	00215180 	call	21518 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2144c:	00215380 	call	21538 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   21450:	d1a04617 	ldw	r6,-32488(gp)
   21454:	d1604717 	ldw	r5,-32484(gp)
   21458:	d1204817 	ldw	r4,-32480(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   2145c:	dfc00017 	ldw	ra,0(sp)
   21460:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   21464:	00201b41 	jmpi	201b4 <main>

00021468 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
   21468:	f800283a 	ret

0002146c <__malloc_unlock>:

/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
   2146c:	f800283a 	ret

00021470 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21470:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21474:	00bfff84 	movi	r2,-2
   21478:	1884703a 	and	r2,r3,r2
   2147c:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   21480:	d0a00217 	ldw	r2,-32760(gp)
   21484:	017fff04 	movi	r5,-4
   21488:	108000c4 	addi	r2,r2,3
   2148c:	1144703a 	and	r2,r2,r5
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   21490:	014000f4 	movhi	r5,3
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   21494:	d0a00215 	stw	r2,-32760(gp)
  if ((heap_end + incr) > __alt_heap_limit) {
   21498:	1109883a 	add	r4,r2,r4
   2149c:	29500004 	addi	r5,r5,16384
   214a0:	2900032e 	bgeu	r5,r4,214b0 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   214a4:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   214a8:	00bfffc4 	movi	r2,-1
   214ac:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   214b0:	d1200215 	stw	r4,-32760(gp)
   214b4:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   214b8:	f800283a 	ret

000214bc <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   214bc:	213fffc4 	addi	r4,r4,-1
   214c0:	210000a8 	cmpgeui	r4,r4,2
   214c4:	2000041e 	bne	r4,zero,214d8 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   214c8:	010000b4 	movhi	r4,2
   214cc:	000f883a 	mov	r7,zero
   214d0:	21062404 	addi	r4,r4,6288
   214d4:	002153c1 	jmpi	2153c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   214d8:	d0a00417 	ldw	r2,-32752(gp)
   214dc:	10000926 	beq	r2,zero,21504 <write+0x48>
{
   214e0:	deffff04 	addi	sp,sp,-4
   214e4:	dfc00015 	stw	ra,0(sp)
   214e8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   214ec:	00c01444 	movi	r3,81
   214f0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   214f4:	00bfffc4 	movi	r2,-1
   214f8:	dfc00017 	ldw	ra,0(sp)
   214fc:	dec00104 	addi	sp,sp,4
   21500:	f800283a 	ret
   21504:	d0a04504 	addi	r2,gp,-32492
        ALT_ERRNO = EBADFD;
   21508:	00c01444 	movi	r3,81
   2150c:	10c00015 	stw	r3,0(r2)
}
   21510:	00bfffc4 	movi	r2,-1
   21514:	f800283a 	ret

00021518 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   21518:	deffff04 	addi	sp,sp,-4
   2151c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   21520:	00215900 	call	21590 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   21524:	00800044 	movi	r2,1
   21528:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2152c:	dfc00017 	ldw	ra,0(sp)
   21530:	dec00104 	addi	sp,sp,4
   21534:	f800283a 	ret

00021538 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
   21538:	f800283a 	ret

0002153c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   2153c:	20c00017 	ldw	r3,0(r4)
{
   21540:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   21544:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21548:	01bfffd4 	movui	r6,65535
  while (ptr < end)
   2154c:	29000136 	bltu	r5,r4,21554 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   21550:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21554:	19c00137 	ldwio	r7,4(r3)
   21558:	31fffc2e 	bgeu	r6,r7,2154c <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   2155c:	29c00007 	ldb	r7,0(r5)
   21560:	29400044 	addi	r5,r5,1
   21564:	19c00035 	stwio	r7,0(r3)
   21568:	003ff806 	br	2154c <altera_avalon_jtag_uart_write+0x10>

0002156c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2156c:	0005883a 	mov	r2,zero
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   21570:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   21574:	10800804 	addi	r2,r2,32
   21578:	10c20018 	cmpnei	r3,r2,2048
   2157c:	183ffc1e 	bne	r3,zero,21570 <alt_dcache_flush_all+0x4>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   21580:	f800283a 	ret

00021584 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   21584:	01440004 	movi	r5,4096
   21588:	0009883a 	mov	r4,zero
   2158c:	00215981 	jmpi	21598 <alt_icache_flush>

00021590 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   21590:	000170fa 	wrctl	ienable,zero
}
   21594:	f800283a 	ret

00021598 <alt_icache_flush>:

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   21598:	28840070 	cmpltui	r2,r5,4097
   2159c:	1000011e 	bne	r2,zero,215a4 <alt_icache_flush+0xc>
   215a0:	01440004 	movi	r5,4096
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   215a4:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   215a8:	2005883a 	mov	r2,r4
   215ac:	11400c36 	bltu	r2,r5,215e0 <alt_icache_flush+0x48>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   215b0:	208007cc 	andi	r2,r4,31
   215b4:	10000826 	beq	r2,zero,215d8 <alt_icache_flush+0x40>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   215b8:	20bff844 	addi	r2,r4,-31
   215bc:	28800b36 	bltu	r5,r2,215ec <alt_icache_flush+0x54>
   215c0:	290bc83a 	sub	r5,r5,r4
   215c4:	294007c4 	addi	r5,r5,31
   215c8:	280ad17a 	srli	r5,r5,5
   215cc:	280a917a 	slli	r5,r5,5
   215d0:	2149883a 	add	r4,r4,r5
   215d4:	2000603a 	flushi	r4
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   215d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   215dc:	f800283a 	ret
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   215e0:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   215e4:	10800804 	addi	r2,r2,32
   215e8:	003ff006 	br	215ac <alt_icache_flush+0x14>
    __asm__ volatile ("flushi %0" :: "r" (i));
   215ec:	000b883a 	mov	r5,zero
   215f0:	003ff706 	br	215d0 <alt_icache_flush+0x38>

000215f4 <memcpy>:
   215f4:	2005883a 	mov	r2,r4
   215f8:	0007883a 	mov	r3,zero
   215fc:	30c0011e 	bne	r6,r3,21604 <memcpy+0x10>
   21600:	f800283a 	ret
   21604:	28cf883a 	add	r7,r5,r3
   21608:	39c00003 	ldbu	r7,0(r7)
   2160c:	10c9883a 	add	r4,r2,r3
   21610:	18c00044 	addi	r3,r3,1
   21614:	21c00005 	stb	r7,0(r4)
   21618:	003ff806 	br	215fc <memcpy+0x8>
