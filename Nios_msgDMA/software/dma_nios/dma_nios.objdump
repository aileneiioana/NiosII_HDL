
dma_nios.elf:     file format elf32-littlenios2
dma_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020188

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00001d3c memsz 0x00001d3c flags r-x
    LOAD off    0x00002d5c vaddr 0x00021d5c paddr 0x00021ebc align 2**12
         filesz 0x00000160 memsz 0x00000160 flags rw-
    LOAD off    0x0000001c vaddr 0x0002201c paddr 0x0002201c align 2**12
         filesz 0x00000000 memsz 0x00000134 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000168  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000019c0  00020188  00020188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000214  00021b48  00021b48  00002b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000160  00021d5c  00021ebc  00002d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000134  0002201c  0002201c  0000301c  2**2
                  ALLOC, SMALL_DATA
  6 .data_destination 00000000  00000000  00000000  00002ebc  2**0
                  CONTENTS
  7 .ocram        00000000  00022150  00022150  00002ebc  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000478  00000000  00000000  00002ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00006b33  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000024d1  00000000  00000000  00009e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0000293c  00000000  00000000  0000c36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  000007fc  00000000  00000000  0000eca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0000199e  00000000  00000000  0000f4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000060  00000000  00000000  00010e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  00010ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000020f  00000000  00000000  00010f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000cde  00000000  00000000  00011127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000021d8  00000000  00000000  00011e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .thread_model 00000003  00000000  00000000  00015cf6  2**0
                  CONTENTS, READONLY
 21 .cpu          0000000c  00000000  00000000  00015cf9  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  00015d05  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  00015d06  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00015d07  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00015d12  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00015d1d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  00015d28  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002a  00000000  00000000  00015d2b  2**0
                  CONTENTS, READONLY
 29 .jdi          00007ebf  00000000  00000000  00015d55  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004a9f7  00000000  00000000  0001dc14  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020188 l    d  .text	00000000 .text
00021b48 l    d  .rodata	00000000 .rodata
00021d5c l    d  .rwdata	00000000 .rwdata
0002201c l    d  .bss	00000000 .bss
00000000 l    d  .data_destination	00000000 .data_destination
00022150 l    d  .ocram	00000000 .ocram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.o
000201d0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00021d5c l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00021e40 l     O .rwdata	00000060 msgdma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_msgdma.c
00020554 l     F .text	000000c4 alt_msgdma_irq
00020618 l     F .text	00000068 alt_msgdma_write_extended_descriptor
00020680 l     F .text	000001a0 alt_msgdma_descriptor_async_transfer
00020820 l     F .text	00000228 alt_msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00022038 g     O .bss	00000004 alt_instruction_exception_handler
00021444 g     F .text	00000008 alt_msgdma_standard_descriptor_async_transfer
00020468 g     F .text	0000002c alt_main
00020240 g     F .text	00000080 _puts_r
00022050 g     O .bss	00000100 alt_irq
00021ebc g       *ABS*	00000000 __flash_rwdata_start
00020ab8 g     F .text	0000003c alt_msgdma_construct_standard_mm_to_mm_descriptor
00020a48 g     F .text	00000038 alt_msgdma_construct_standard_st_to_mm_descriptor
000218b4 g     F .text	00000008 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022024 g     O .bss	00000004 errno
0002202c g     O .bss	00000004 alt_argv
00029ea0 g       *ABS*	00000000 _gp
00000000 g       *ABS*	00000000 __alt_mem_data_destination
00021058 g     F .text	00000094 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
000215b8 g     F .text	00000070 alt_find_dev
0002196c g     F .text	00000028 memcpy
00020000 g       *ABS*	00000000 __alt_mem_ocram
00021284 g     F .text	00000090 alt_msgdma_start_prefetcher_with_extd_desc_list
0002144c g     F .text	0000000c alt_msgdma_extended_descriptor_async_transfer
00021434 g     F .text	00000010 alt_msgdma_register_callback
000202c0 g     F .text	00000010 puts
00021918 g     F .text	00000024 alt_exception_cause_generated_bad_addr
00020f1c g     F .text	00000050 alt_msgdma_prefetcher_add_standard_desc_to_list
00021a88 g     F .text	00000064 .hidden __udivsi3
000218bc g     F .text	0000005c alt_icache_flush
000214f0 g     F .text	00000048 alt_dcache_flush
00020cc0 g     F .text	00000048 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
00021ea0 g     O .rwdata	00000004 _global_impure_ptr
00022150 g       *ABS*	00000000 __bss_end
000216c0 g     F .text	00000068 alt_iic_isr_register
00021360 g     F .text	000000d4 alt_msgdma_init
00021460 g     F .text	0000000c alt_msgdma_extended_descriptor_sync_transfer
000216a8 g     F .text	00000018 alt_ic_irq_enabled
00022034 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	00000060 alt_irq_handler
00020b6c g     F .text	00000078 alt_msgdma_construct_extended_mm_to_st_descriptor
000211f4 g     F .text	00000090 alt_msgdma_start_prefetcher_with_std_desc_list
00021538 g     F .text	00000018 alt_dcache_flush_all
00021ebc g       *ABS*	00000000 __ram_rwdata_end
00020494 g     F .text	0000005c write
00021d5c g       *ABS*	00000000 __ram_rodata_end
00021ea8 g     O .rwdata	00000004 jtag_uart_0
00021aec g     F .text	0000005c .hidden __umodsi3
00020d08 g     F .text	00000048 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
00022150 g       *ABS*	00000000 end
0002015c g     F .exceptions	0000002c alt_instruction_exception_entry
0002a000 g       *ABS*	00000000 __alt_stack_pointer
00020524 g     F .text	00000030 altera_avalon_jtag_uart_write
00021728 g     F .text	00000144 alt_printf
00020188 g     F .text	0000004c _start
00022040 g     O .bss	00000010 STDATA_MSGDMA_DESC
00020a80 g     F .text	00000038 alt_msgdma_construct_standard_mm_to_st_descriptor
00020510 g     F .text	00000014 alt_sys_init
00021d5c g       *ABS*	00000000 __ram_rwdata_start
00021b48 g       *ABS*	00000000 __ram_rodata_start
0002146c g     F .text	00000084 alt_busy_sleep
00020c74 g     F .text	0000004c alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
0002193c g     F .text	00000030 memcmp
00022150 g       *ABS*	00000000 __alt_stack_base
00020d50 g     F .text	00000090 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
00021550 g     F .text	00000068 alt_dev_llist_insert
00022020 g     O .bss	00000004 STDATA_MSGDMA
000202ec g     F .text	000000a8 __sfvwrite_small_dev
0002201c g       *ABS*	00000000 __bss_start
00021314 g     F .text	0000004c alt_msgdma_open
000201d4 g     F .text	0000006c main
00022028 g     O .bss	00000004 alt_envp
00020f6c g     F .text	00000068 alt_msgdma_prefetcher_add_extended_desc_to_list
000210ec g     F .text	00000108 alt_msgdma_start_prefetcher_with_list_addr
00021eb4 g     O .rwdata	00000004 alt_errno
00020e70 g     F .text	000000ac alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
00021994 g     F .text	00000080 .hidden __divsi3
00021b48 g       *ABS*	00000000 __flash_rodata_start
000204f0 g     F .text	00000020 alt_irq_init
00021458 g     F .text	00000008 alt_msgdma_standard_descriptor_sync_transfer
00020394 g     F .text	00000050 _write_r
00020de0 g     F .text	00000090 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
00021ea4 g     O .rwdata	00000004 _impure_ptr
0002201c g     O .bss	00000004 WRITE_ADDRESS
00022030 g     O .bss	00000004 alt_argc
00020020 g       .exceptions	00000000 alt_irq_entry
00020020 g       *ABS*	00000000 __ram_exceptions_start
00021634 g     F .text	00000004 alt_ic_isr_register
00021ebc g       *ABS*	00000000 _edata
00022150 g       *ABS*	00000000 _end
00020188 g       *ABS*	00000000 __ram_exceptions_end
00021670 g     F .text	00000038 alt_ic_irq_disable
00020fd4 g     F .text	00000084 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
00021a14 g     F .text	00000074 .hidden __modsi3
0002a000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020be4 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_mm_descriptor
00020af4 g     F .text	00000078 alt_msgdma_construct_extended_st_to_mm_descriptor
0002001c g       .entry	00000000 _exit
00021eac g     O .rwdata	00000008 alt_msgdma_list
000202d0 g     F .text	0000001c strlen
0002186c g     F .text	00000048 alt_putchar
00021628 g     F .text	0000000c alt_icache_flush_all
00021eb8 g     O .rwdata	00000004 alt_priority_mask
00021638 g     F .text	00000038 alt_ic_irq_enable
000203e4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08406214 	ori	at,at,392
    jmp r1
   20018:	0800683a 	jmp	at

0002001c <_exit>:
   2001c:	00000000 	call	0 <__alt_mem_data_destination>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
   20094:	e93fff04 	addi	r4,ea,-4
   20098:	002015c0 	call	2015c <alt_instruction_exception_entry>
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>
   200a0:	ebffff04 	addi	r15,ea,-4
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defffe04 	addi	sp,sp,-8
   20100:	dfc00115 	stw	ra,4(sp)
   20104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2010c:	040000b4 	movhi	r16,2
   20110:	84081404 	addi	r16,r16,8272
    i = 0;
   20114:	0005883a 	mov	r2,zero
    mask = 1;
   20118:	00c00044 	movi	r3,1
      if (active & mask)
   2011c:	20ca703a 	and	r5,r4,r3
   20120:	28000b26 	beq	r5,zero,20150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
   20124:	100490fa 	slli	r2,r2,3
   20128:	8085883a 	add	r2,r16,r2
   2012c:	10c00017 	ldw	r3,0(r2)
   20130:	11000117 	ldw	r4,4(r2)
   20134:	183ee83a 	callr	r3
   20138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   2013c:	203ff51e 	bne	r4,zero,20114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   20140:	dfc00117 	ldw	ra,4(sp)
   20144:	dc000017 	ldw	r16,0(sp)
   20148:	dec00204 	addi	sp,sp,8
   2014c:	f800283a 	ret
      mask <<= 1;
   20150:	1806907a 	slli	r3,r3,1
      i++;
   20154:	10800044 	addi	r2,r2,1
      if (active & mask)
   20158:	003ff006 	br	2011c <alt_irq_handler+0x20>

0002015c <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   2015c:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   20160:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   20164:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20168:	d0e06617 	ldw	r3,-32360(gp)
   2016c:	18000326 	beq	r3,zero,2017c <alt_instruction_exception_entry+0x20>
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   20170:	1004d0ba 	srli	r2,r2,2
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20174:	110007cc 	andi	r4,r2,31
   20178:	1800683a 	jmp	r3
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   2017c:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   20180:	0005883a 	mov	r2,zero
   20184:	f800283a 	ret

Disassembly of section .text:

00020188 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20188:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   2018c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   20190:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20194:	00bffd16 	blt	zero,r2,2018c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20198:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   2019c:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   201a0:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   201a4:	d6a7a814 	ori	gp,gp,40608
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201a8:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   201ac:	10880714 	ori	r2,r2,8220

    movhi r3, %hi(__bss_end)
   201b0:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   201b4:	18c85414 	ori	r3,r3,8528

    beq r2, r3, 1f
   201b8:	10c00326 	beq	r2,r3,201c8 <_start+0x40>

0:
    stw zero, (r2)
   201bc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201c0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201c4:	10fffd36 	bltu	r2,r3,201bc <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201c8:	00203e40 	call	203e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201cc:	00204680 	call	20468 <alt_main>

000201d0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201d0:	003fff06 	br	201d0 <alt_after_alt_main>

000201d4 <main>:
#define LEN 100

alt_u32 *WRITE_ADDRESS = DATA_DESTINATION_BASE;

int main()
{ 
   201d4:	defffe04 	addi	sp,sp,-8
   201d8:	dfc00115 	stw	ra,4(sp)
  //alt_putstr("Hello from Nios II!\n");
  // 1- Initialize the Data Pattern Generator, by defining the pattern required for testing.
  IOWR(DATA_SOURCE_BASE, 1, 0x2); //to choose the preferred data pattern
   201dc:	00800084 	movi	r2,2
   201e0:	00880135 	stwio	r2,8196(zero)

  IOWR(DATA_SOURCE_BASE, 0, 1); //to Enable the Pattern Generator
   201e4:	00800044 	movi	r2,1
   201e8:	00880035 	stwio	r2,8192(zero)

  //2- Open the msgdma
  STDATA_MSGDMA = alt_msgdma_open(MSGDMA_0_CSR_NAME);
   201ec:	010000b4 	movhi	r4,2
   201f0:	2106d204 	addi	r4,r4,6984
   201f4:	00213140 	call	21314 <alt_msgdma_open>
   201f8:	d0a06015 	stw	r2,-32384(gp)
  if(STDATA_MSGDMA == NULL)
   201fc:	1000031e 	bne	r2,zero,2020c <main+0x38>
	  printf("Could not open the msgDMA\n");
   20200:	010000b4 	movhi	r4,2
   20204:	2106d704 	addi	r4,r4,7004
   20208:	00202c00 	call	202c0 <puts>

  //3- Construct the DMA desc
  alt_msgdma_construct_standard_st_to_mm_descriptor(
   2020c:	d1206017 	ldw	r4,-32384(gp)
   20210:	d1a05f17 	ldw	r6,-32388(gp)
   20214:	00820004 	movi	r2,2048
   20218:	014000b4 	movhi	r5,2
   2021c:	29481004 	addi	r5,r5,8256
   20220:	d8800015 	stw	r2,0(sp)
   20224:	01c01904 	movi	r7,100
   20228:	0020a480 	call	20a48 <alt_msgdma_construct_standard_st_to_mm_descriptor>
		  WRITE_ADDRESS,
		  LEN,
		  ALTERA_MSGDMA_DESCRIPTOR_CONTROL_PARK_WRITES_MASK);

  //4- Run the msgdma
  alt_msgdma_standard_descriptor_async_transfer(STDATA_MSGDMA, &STDATA_MSGDMA_DESC);
   2022c:	d1206017 	ldw	r4,-32384(gp)
   20230:	014000b4 	movhi	r5,2
   20234:	29481004 	addi	r5,r5,8256
   20238:	00214440 	call	21444 <alt_msgdma_standard_descriptor_async_transfer>
  /* Event loop never exits. */
  while (1);
   2023c:	003fff06 	br	2023c <main+0x68>

00020240 <_puts_r>:
   20240:	defffd04 	addi	sp,sp,-12
   20244:	dc000015 	stw	r16,0(sp)
   20248:	2021883a 	mov	r16,r4
   2024c:	2809883a 	mov	r4,r5
   20250:	dfc00215 	stw	ra,8(sp)
   20254:	dc400115 	stw	r17,4(sp)
   20258:	2823883a 	mov	r17,r5
   2025c:	00202d00 	call	202d0 <strlen>
   20260:	81400217 	ldw	r5,8(r16)
   20264:	00c000b4 	movhi	r3,2
   20268:	18c0bb04 	addi	r3,r3,748
   2026c:	28c00115 	stw	r3,4(r5)
   20270:	100f883a 	mov	r7,r2
   20274:	880d883a 	mov	r6,r17
   20278:	8009883a 	mov	r4,r16
   2027c:	00202ec0 	call	202ec <__sfvwrite_small_dev>
   20280:	10ffffe0 	cmpeqi	r3,r2,-1
   20284:	1800091e 	bne	r3,zero,202ac <_puts_r+0x6c>
   20288:	81400217 	ldw	r5,8(r16)
   2028c:	018000b4 	movhi	r6,2
   20290:	01c00044 	movi	r7,1
   20294:	28800117 	ldw	r2,4(r5)
   20298:	31870e04 	addi	r6,r6,7224
   2029c:	8009883a 	mov	r4,r16
   202a0:	103ee83a 	callr	r2
   202a4:	10bfffe0 	cmpeqi	r2,r2,-1
   202a8:	0085c83a 	sub	r2,zero,r2
   202ac:	dfc00217 	ldw	ra,8(sp)
   202b0:	dc400117 	ldw	r17,4(sp)
   202b4:	dc000017 	ldw	r16,0(sp)
   202b8:	dec00304 	addi	sp,sp,12
   202bc:	f800283a 	ret

000202c0 <puts>:
   202c0:	008000b4 	movhi	r2,2
   202c4:	200b883a 	mov	r5,r4
   202c8:	1107a917 	ldw	r4,7844(r2)
   202cc:	00202401 	jmpi	20240 <_puts_r>

000202d0 <strlen>:
   202d0:	2005883a 	mov	r2,r4
   202d4:	10c00007 	ldb	r3,0(r2)
   202d8:	1800021e 	bne	r3,zero,202e4 <strlen+0x14>
   202dc:	1105c83a 	sub	r2,r2,r4
   202e0:	f800283a 	ret
   202e4:	10800044 	addi	r2,r2,1
   202e8:	003ffa06 	br	202d4 <strlen+0x4>

000202ec <__sfvwrite_small_dev>:
   202ec:	2880000b 	ldhu	r2,0(r5)
   202f0:	1080020c 	andi	r2,r2,8
   202f4:	10002526 	beq	r2,zero,2038c <__sfvwrite_small_dev+0xa0>
   202f8:	2880008f 	ldh	r2,2(r5)
   202fc:	defffb04 	addi	sp,sp,-20
   20300:	dcc00315 	stw	r19,12(sp)
   20304:	dc800215 	stw	r18,8(sp)
   20308:	dc400115 	stw	r17,4(sp)
   2030c:	dc000015 	stw	r16,0(sp)
   20310:	dfc00415 	stw	ra,16(sp)
   20314:	2027883a 	mov	r19,r4
   20318:	2821883a 	mov	r16,r5
   2031c:	3025883a 	mov	r18,r6
   20320:	3823883a 	mov	r17,r7
   20324:	1000100e 	bge	r2,zero,20368 <__sfvwrite_small_dev+0x7c>
   20328:	8080000b 	ldhu	r2,0(r16)
   2032c:	10801014 	ori	r2,r2,64
   20330:	8080000d 	sth	r2,0(r16)
   20334:	00bfffc4 	movi	r2,-1
   20338:	00000d06 	br	20370 <__sfvwrite_small_dev+0x84>
   2033c:	88810050 	cmplti	r2,r17,1025
   20340:	880f883a 	mov	r7,r17
   20344:	1000011e 	bne	r2,zero,2034c <__sfvwrite_small_dev+0x60>
   20348:	01c10004 	movi	r7,1024
   2034c:	8140008f 	ldh	r5,2(r16)
   20350:	900d883a 	mov	r6,r18
   20354:	9809883a 	mov	r4,r19
   20358:	00203940 	call	20394 <_write_r>
   2035c:	00bff20e 	bge	zero,r2,20328 <__sfvwrite_small_dev+0x3c>
   20360:	88a3c83a 	sub	r17,r17,r2
   20364:	90a5883a 	add	r18,r18,r2
   20368:	047ff416 	blt	zero,r17,2033c <__sfvwrite_small_dev+0x50>
   2036c:	0005883a 	mov	r2,zero
   20370:	dfc00417 	ldw	ra,16(sp)
   20374:	dcc00317 	ldw	r19,12(sp)
   20378:	dc800217 	ldw	r18,8(sp)
   2037c:	dc400117 	ldw	r17,4(sp)
   20380:	dc000017 	ldw	r16,0(sp)
   20384:	dec00504 	addi	sp,sp,20
   20388:	f800283a 	ret
   2038c:	00bfffc4 	movi	r2,-1
   20390:	f800283a 	ret

00020394 <_write_r>:
   20394:	defffe04 	addi	sp,sp,-8
   20398:	dc000015 	stw	r16,0(sp)
   2039c:	008000b4 	movhi	r2,2
   203a0:	2021883a 	mov	r16,r4
   203a4:	2809883a 	mov	r4,r5
   203a8:	300b883a 	mov	r5,r6
   203ac:	380d883a 	mov	r6,r7
   203b0:	dfc00115 	stw	ra,4(sp)
   203b4:	10080915 	stw	zero,8228(r2)
   203b8:	00204940 	call	20494 <write>
   203bc:	10ffffd8 	cmpnei	r3,r2,-1
   203c0:	1800041e 	bne	r3,zero,203d4 <_write_r+0x40>
   203c4:	00c000b4 	movhi	r3,2
   203c8:	18c80917 	ldw	r3,8228(r3)
   203cc:	18000126 	beq	r3,zero,203d4 <_write_r+0x40>
   203d0:	80c00015 	stw	r3,0(r16)
   203d4:	dfc00117 	ldw	ra,4(sp)
   203d8:	dc000017 	ldw	r16,0(sp)
   203dc:	dec00204 	addi	sp,sp,8
   203e0:	f800283a 	ret

000203e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   203e4:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   203e8:	010000b4 	movhi	r4,2
   203ec:	014000b4 	movhi	r5,2
   203f0:	dfc00015 	stw	ra,0(sp)
   203f4:	21075704 	addi	r4,r4,7516
   203f8:	2947af04 	addi	r5,r5,7868
   203fc:	21400426 	beq	r4,r5,20410 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
   20400:	018000b4 	movhi	r6,2
   20404:	3187af04 	addi	r6,r6,7868
   20408:	310dc83a 	sub	r6,r6,r4
   2040c:	002196c0 	call	2196c <memcpy>
  if (to != from)
   20410:	010000b4 	movhi	r4,2
   20414:	014000b4 	movhi	r5,2
   20418:	21000804 	addi	r4,r4,32
   2041c:	29400804 	addi	r5,r5,32
   20420:	21400426 	beq	r4,r5,20434 <alt_load+0x50>
      *to++ = *from++;
   20424:	018000b4 	movhi	r6,2
   20428:	31806204 	addi	r6,r6,392
   2042c:	310dc83a 	sub	r6,r6,r4
   20430:	002196c0 	call	2196c <memcpy>
  if (to != from)
   20434:	010000b4 	movhi	r4,2
   20438:	014000b4 	movhi	r5,2
   2043c:	2106d204 	addi	r4,r4,6984
   20440:	2946d204 	addi	r5,r5,6984
   20444:	21400426 	beq	r4,r5,20458 <alt_load+0x74>
      *to++ = *from++;
   20448:	018000b4 	movhi	r6,2
   2044c:	31875704 	addi	r6,r6,7516
   20450:	310dc83a 	sub	r6,r6,r4
   20454:	002196c0 	call	2196c <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20458:	00215380 	call	21538 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   2045c:	dfc00017 	ldw	ra,0(sp)
   20460:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   20464:	00216281 	jmpi	21628 <alt_icache_flush_all>

00020468 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20468:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2046c:	0009883a 	mov	r4,zero
{
   20470:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   20474:	00204f00 	call	204f0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20478:	00205100 	call	20510 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   2047c:	d1a06217 	ldw	r6,-32376(gp)
   20480:	d1606317 	ldw	r5,-32372(gp)
   20484:	d1206417 	ldw	r4,-32368(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   20488:	dfc00017 	ldw	ra,0(sp)
   2048c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   20490:	00201d41 	jmpi	201d4 <main>

00020494 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   20494:	213fffc4 	addi	r4,r4,-1
   20498:	210000a8 	cmpgeui	r4,r4,2
   2049c:	2000041e 	bne	r4,zero,204b0 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   204a0:	010000b4 	movhi	r4,2
   204a4:	000f883a 	mov	r7,zero
   204a8:	2107aa04 	addi	r4,r4,7848
   204ac:	00205241 	jmpi	20524 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   204b0:	d0a00517 	ldw	r2,-32748(gp)
   204b4:	10000926 	beq	r2,zero,204dc <write+0x48>
{
   204b8:	deffff04 	addi	sp,sp,-4
   204bc:	dfc00015 	stw	ra,0(sp)
   204c0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   204c4:	00c01444 	movi	r3,81
   204c8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   204cc:	00bfffc4 	movi	r2,-1
   204d0:	dfc00017 	ldw	ra,0(sp)
   204d4:	dec00104 	addi	sp,sp,4
   204d8:	f800283a 	ret
   204dc:	d0a06104 	addi	r2,gp,-32380
        ALT_ERRNO = EBADFD;
   204e0:	00c01444 	movi	r3,81
   204e4:	10c00015 	stw	r3,0(r2)
}
   204e8:	00bfffc4 	movi	r2,-1
   204ec:	f800283a 	ret

000204f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   204f0:	deffff04 	addi	sp,sp,-4
   204f4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   204f8:	00218b40 	call	218b4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   204fc:	00800044 	movi	r2,1
   20500:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20504:	dfc00017 	ldw	ra,0(sp)
   20508:	dec00104 	addi	sp,sp,4
   2050c:	f800283a 	ret

00020510 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_MSGDMA_INIT ( MSGDMA_0, msgdma_0);
   20510:	010000b4 	movhi	r4,2
   20514:	21079004 	addi	r4,r4,7744
   20518:	21800817 	ldw	r6,32(r4)
   2051c:	21400717 	ldw	r5,28(r4)
   20520:	00213601 	jmpi	21360 <alt_msgdma_init>

00020524 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   20524:	20c00017 	ldw	r3,0(r4)
{
   20528:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   2052c:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   20530:	01bfffd4 	movui	r6,65535
  while (ptr < end)
   20534:	29000136 	bltu	r5,r4,2053c <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   20538:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   2053c:	19c00137 	ldwio	r7,4(r3)
   20540:	31fffc2e 	bgeu	r6,r7,20534 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   20544:	29c00007 	ldb	r7,0(r5)
   20548:	29400044 	addi	r5,r5,1
   2054c:	19c00035 	stwio	r7,0(r3)
   20550:	003ff806 	br	20534 <altera_avalon_jtag_uart_write+0x10>

00020554 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
   20554:	defffd04 	addi	sp,sp,-12
   20558:	dc000015 	stw	r16,0(sp)
   2055c:	dfc00215 	stw	ra,8(sp)
   20560:	dc400115 	stw	r17,4(sp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
   20564:	20801783 	ldbu	r2,94(r4)
{
   20568:	2021883a 	mov	r16,r4
    if (dev->prefetcher_enable)
   2056c:	10001c26 	beq	r2,zero,205e0 <alt_msgdma_irq+0x8c>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
   20570:	20c00617 	ldw	r3,24(r4)
   20574:	18800037 	ldwio	r2,0(r3)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
   20578:	013ffdc4 	movi	r4,-9
   2057c:	1104703a 	and	r2,r2,r4
   20580:	18800035 	stwio	r2,0(r3)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
   20584:	80800617 	ldw	r2,24(r16)
   20588:	00c00044 	movi	r3,1
   2058c:	10c00435 	stwio	r3,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   20590:	80c00b17 	ldw	r3,44(r16)
   20594:	18000726 	beq	r3,zero,205b4 <alt_msgdma_irq+0x60>
  NIOS2_READ_STATUS (context);
   20598:	0023303a 	rdctl	r17,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2059c:	00bfff84 	movi	r2,-2
   205a0:	8884703a 	and	r2,r17,r2
   205a4:	1001703a 	wrctl	status,r2
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback (dev->callback_context);
   205a8:	81000c17 	ldw	r4,48(r16)
   205ac:	183ee83a 	callr	r3
  NIOS2_WRITE_STATUS (context);
   205b0:	8801703a 	wrctl	status,r17
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
   205b4:	80801783 	ldbu	r2,94(r16)
   205b8:	10001226 	beq	r2,zero,20604 <alt_msgdma_irq+0xb0>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
   205bc:	80c00617 	ldw	r3,24(r16)
   205c0:	18800037 	ldwio	r2,0(r3)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
   205c4:	10800214 	ori	r2,r2,8
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
   205c8:	18800035 	stwio	r2,0(r3)
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
}
   205cc:	dfc00217 	ldw	ra,8(sp)
   205d0:	dc400117 	ldw	r17,4(sp)
   205d4:	dc000017 	ldw	r16,0(sp)
   205d8:	dec00304 	addi	sp,sp,12
   205dc:	f800283a 	ret
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
   205e0:	20c00317 	ldw	r3,12(r4)
   205e4:	18800137 	ldwio	r2,4(r3)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
   205e8:	013ffbc4 	movi	r4,-17
   205ec:	1104703a 	and	r2,r2,r4
   205f0:	18800135 	stwio	r2,4(r3)
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
   205f4:	80800317 	ldw	r2,12(r16)
   205f8:	00c08004 	movi	r3,512
   205fc:	10c00035 	stwio	r3,0(r2)
   20600:	003fe306 	br	20590 <alt_msgdma_irq+0x3c>
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
   20604:	80c00317 	ldw	r3,12(r16)
   20608:	18800137 	ldwio	r2,4(r3)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
   2060c:	10800414 	ori	r2,r2,16
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
   20610:	18800135 	stwio	r2,4(r3)
    return;
   20614:	003fed06 	br	205cc <alt_msgdma_irq+0x78>

00020618 <alt_msgdma_write_extended_descriptor>:
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
   20618:	20800037 	ldwio	r2,0(r4)
   2061c:	1080010c 	andi	r2,r2,4
   20620:	1000151e 	bne	r2,zero,20678 <alt_msgdma_write_extended_descriptor+0x60>
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
   20624:	30c00017 	ldw	r3,0(r6)
   20628:	28c00035 	stwio	r3,0(r5)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
   2062c:	30c00117 	ldw	r3,4(r6)
   20630:	28c00135 	stwio	r3,4(r5)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
   20634:	30c00217 	ldw	r3,8(r6)
   20638:	28c00235 	stwio	r3,8(r5)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
   2063c:	30c0030b 	ldhu	r3,12(r6)
   20640:	28c0032d 	sthio	r3,12(r5)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
   20644:	30c00383 	ldbu	r3,14(r6)
   20648:	28c003a5 	stbio	r3,14(r5)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
   2064c:	30c003c3 	ldbu	r3,15(r6)
   20650:	28c003e5 	stbio	r3,15(r5)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
   20654:	30c0040b 	ldhu	r3,16(r6)
   20658:	28c0042d 	sthio	r3,16(r5)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
   2065c:	30c0048b 	ldhu	r3,18(r6)
   20660:	28c004ad 	sthio	r3,18(r5)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
   20664:	28000535 	stwio	zero,20(r5)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
   20668:	28000635 	stwio	zero,24(r5)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
   2066c:	30c00717 	ldw	r3,28(r6)
   20670:	28c00735 	stwio	r3,28(r5)
    return 0;
   20674:	f800283a 	ret
        return -ENOSPC;
   20678:	00bff904 	movi	r2,-28
}
   2067c:	f800283a 	ret

00020680 <alt_msgdma_descriptor_async_transfer>:
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   20680:	20800317 	ldw	r2,12(r4)
{
   20684:	defffb04 	addi	sp,sp,-20
   20688:	dc400115 	stw	r17,4(sp)
   2068c:	dc000015 	stw	r16,0(sp)
   20690:	2823883a 	mov	r17,r5
   20694:	2021883a 	mov	r16,r4
   20698:	dfc00415 	stw	ra,16(sp)
   2069c:	dcc00315 	stw	r19,12(sp)
   206a0:	dc800215 	stw	r18,8(sp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   206a4:	10c00237 	ldwio	r3,8(r2)
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   206a8:	11000237 	ldwio	r4,8(r2)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   206ac:	81400917 	ldw	r5,36(r16)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
   206b0:	2008d43a 	srli	r4,r4,16
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   206b4:	2140582e 	bgeu	r4,r5,20818 <alt_msgdma_descriptor_async_transfer+0x198>
   206b8:	18ffffcc 	andi	r3,r3,65535
   206bc:	1940562e 	bgeu	r3,r5,20818 <alt_msgdma_descriptor_async_transfer+0x198>
   206c0:	3025883a 	mov	r18,r6
  NIOS2_READ_STATUS (context);
   206c4:	0009303a 	rdctl	r4,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   206c8:	00ffff84 	movi	r3,-2
   206cc:	20c6703a 	and	r3,r4,r3
   206d0:	1801703a 	wrctl	status,r3
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   206d4:	00c00804 	movi	r3,32
   206d8:	10c00135 	stwio	r3,4(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
   206dc:	80800317 	ldw	r2,12(r16)
   206e0:	10c00037 	ldwio	r3,0(r2)
   206e4:	10c00035 	stwio	r3,0(r2)
  NIOS2_WRITE_STATUS (context);
   206e8:	2001703a 	wrctl	status,r4
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
   206ec:	88003126 	beq	r17,zero,207b4 <alt_msgdma_descriptor_async_transfer+0x134>
   206f0:	04c4e244 	movi	r19,5001
   206f4:	30000226 	beq	r6,zero,20700 <alt_msgdma_descriptor_async_transfer+0x80>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
   206f8:	00bfffc4 	movi	r2,-1
   206fc:	00000f06 	br	2073c <alt_msgdma_descriptor_async_transfer+0xbc>
        while(0 != alt_msgdma_write_standard_descriptor (
   20700:	80800417 	ldw	r2,16(r16)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
   20704:	80c00317 	ldw	r3,12(r16)
   20708:	18c00037 	ldwio	r3,0(r3)
   2070c:	18c0010c 	andi	r3,r3,4
   20710:	18001126 	beq	r3,zero,20758 <alt_msgdma_descriptor_async_transfer+0xd8>
            alt_busy_sleep(1); /* delay 1us */
   20714:	01000044 	movi	r4,1
   20718:	002146c0 	call	2146c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   2071c:	98bfffc4 	addi	r2,r19,-1
   20720:	1027883a 	mov	r19,r2
   20724:	10bfffcc 	andi	r2,r2,65535
   20728:	103ff51e 	bne	r2,zero,20700 <alt_msgdma_descriptor_async_transfer+0x80>
                alt_printf("time out after 5 msec while waiting" 
   2072c:	010000b4 	movhi	r4,2
   20730:	2106e304 	addi	r4,r4,7052
   20734:	00217280 	call	21728 <alt_printf>
                return -ETIME;
   20738:	00bff084 	movi	r2,-62
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
}
   2073c:	dfc00417 	ldw	ra,16(sp)
   20740:	dcc00317 	ldw	r19,12(sp)
   20744:	dc800217 	ldw	r18,8(sp)
   20748:	dc400117 	ldw	r17,4(sp)
   2074c:	dc000017 	ldw	r16,0(sp)
   20750:	dec00504 	addi	sp,sp,20
   20754:	f800283a 	ret
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
   20758:	88c00017 	ldw	r3,0(r17)
   2075c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
   20760:	88c00117 	ldw	r3,4(r17)
   20764:	10c00135 	stwio	r3,4(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
   20768:	88c00217 	ldw	r3,8(r17)
   2076c:	10c00235 	stwio	r3,8(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
   20770:	88c00317 	ldw	r3,12(r17)
   20774:	10c00335 	stwio	r3,12(r2)
    if(dev->callback)
   20778:	80c00b17 	ldw	r3,44(r16)
        control |= (dev->control |
   2077c:	80800d17 	ldw	r2,52(r16)
    if(dev->callback)
   20780:	18001c26 	beq	r3,zero,207f4 <alt_msgdma_descriptor_async_transfer+0x174>
  NIOS2_READ_STATUS (context);
   20784:	0009303a 	rdctl	r4,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20788:	00ffff84 	movi	r3,-2
   2078c:	20c6703a 	and	r3,r4,r3
   20790:	1801703a 	wrctl	status,r3
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
   20794:	017ff7c4 	movi	r5,-33
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   20798:	80c00317 	ldw	r3,12(r16)
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
   2079c:	1144703a 	and	r2,r2,r5
   207a0:	10800514 	ori	r2,r2,20
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   207a4:	18800135 	stwio	r2,4(r3)
  NIOS2_WRITE_STATUS (context);
   207a8:	2001703a 	wrctl	status,r4
    return 0;
   207ac:	0005883a 	mov	r2,zero
   207b0:	003fe206 	br	2073c <alt_msgdma_descriptor_async_transfer+0xbc>
   207b4:	0444e244 	movi	r17,5001
    else if (NULL == standard_desc && NULL != extended_desc)
   207b8:	303fcf26 	beq	r6,zero,206f8 <alt_msgdma_descriptor_async_transfer+0x78>
        while(0 != alt_msgdma_write_extended_descriptor (
   207bc:	81400417 	ldw	r5,16(r16)
   207c0:	81000317 	ldw	r4,12(r16)
   207c4:	900d883a 	mov	r6,r18
   207c8:	00206180 	call	20618 <alt_msgdma_write_extended_descriptor>
   207cc:	103fea26 	beq	r2,zero,20778 <alt_msgdma_descriptor_async_transfer+0xf8>
            alt_busy_sleep(1); /* delay 1us */
   207d0:	01000044 	movi	r4,1
   207d4:	002146c0 	call	2146c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   207d8:	88bfffc4 	addi	r2,r17,-1
   207dc:	1023883a 	mov	r17,r2
   207e0:	10bfffcc 	andi	r2,r2,65535
   207e4:	103ff51e 	bne	r2,zero,207bc <alt_msgdma_descriptor_async_transfer+0x13c>
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
   207e8:	010000b4 	movhi	r4,2
   207ec:	2106f904 	addi	r4,r4,7140
   207f0:	003fd006 	br	20734 <alt_msgdma_descriptor_async_transfer+0xb4>
  NIOS2_READ_STATUS (context);
   207f4:	0009303a 	rdctl	r4,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   207f8:	00ffff84 	movi	r3,-2
   207fc:	20c6703a 	and	r3,r4,r3
   20800:	1801703a 	wrctl	status,r3
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
   20804:	017ff3c4 	movi	r5,-49
   20808:	1144703a 	and	r2,r2,r5
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   2080c:	80c00317 	ldw	r3,12(r16)
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
   20810:	10800114 	ori	r2,r2,4
   20814:	003fe306 	br	207a4 <alt_msgdma_descriptor_async_transfer+0x124>
        return -ENOSPC;
   20818:	00bff904 	movi	r2,-28
   2081c:	003fc706 	br	2073c <alt_msgdma_descriptor_async_transfer+0xbc>

00020820 <alt_msgdma_descriptor_sync_transfer>:
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   20820:	20c00317 	ldw	r3,12(r4)
{
   20824:	defffa04 	addi	sp,sp,-24
   20828:	dc800215 	stw	r18,8(sp)
   2082c:	dc400115 	stw	r17,4(sp)
   20830:	dc000015 	stw	r16,0(sp)
   20834:	2823883a 	mov	r17,r5
   20838:	2021883a 	mov	r16,r4
   2083c:	3025883a 	mov	r18,r6
   20840:	dfc00515 	stw	ra,20(sp)
   20844:	dd000415 	stw	r20,16(sp)
   20848:	dcc00315 	stw	r19,12(sp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   2084c:	18800237 	ldwio	r2,8(r3)
    alt_u32 fifo_read_fill_level = (
   20850:	10bfffcc 	andi	r2,r2,65535
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   20854:	18c00237 	ldwio	r3,8(r3)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   20858:	04c4e244 	movi	r19,5001
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
   2085c:	1806d43a 	srli	r3,r3,16
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   20860:	81000917 	ldw	r4,36(r16)
   20864:	1900102e 	bgeu	r3,r4,208a8 <alt_msgdma_descriptor_sync_transfer+0x88>
   20868:	11000f2e 	bgeu	r2,r4,208a8 <alt_msgdma_descriptor_sync_transfer+0x88>
  NIOS2_READ_STATUS (context);
   2086c:	0027303a 	rdctl	r19,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20870:	00bfff84 	movi	r2,-2
   20874:	9884703a 	and	r2,r19,r2
   20878:	1001703a 	wrctl	status,r2
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
   2087c:	80800317 	ldw	r2,12(r16)
   20880:	00c00804 	movi	r3,32
   20884:	10c00135 	stwio	r3,4(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
   20888:	80800317 	ldw	r2,12(r16)
   2088c:	10c00037 	ldwio	r3,0(r2)
   20890:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
   20894:	88004e26 	beq	r17,zero,209d0 <alt_msgdma_descriptor_sync_transfer+0x1b0>
   20898:	0504e244 	movi	r20,5001
   2089c:	90001a26 	beq	r18,zero,20908 <alt_msgdma_descriptor_sync_transfer+0xe8>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
   208a0:	00bfffc4 	movi	r2,-1
   208a4:	00000a06 	br	208d0 <alt_msgdma_descriptor_sync_transfer+0xb0>
        alt_busy_sleep(1); /* delay 1us */
   208a8:	01000044 	movi	r4,1
   208ac:	002146c0 	call	2146c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   208b0:	98bfffc4 	addi	r2,r19,-1
   208b4:	1027883a 	mov	r19,r2
   208b8:	10bfffcc 	andi	r2,r2,65535
   208bc:	10000c1e 	bne	r2,zero,208f0 <alt_msgdma_descriptor_sync_transfer+0xd0>
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
   208c0:	010000b4 	movhi	r4,2
   208c4:	21070f04 	addi	r4,r4,7228
                alt_printf("time out after 5 msec while writing standard" 
   208c8:	00217280 	call	21728 <alt_printf>
            return -ETIME;
   208cc:	00bff084 	movi	r2,-62
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;

}
   208d0:	dfc00517 	ldw	ra,20(sp)
   208d4:	dd000417 	ldw	r20,16(sp)
   208d8:	dcc00317 	ldw	r19,12(sp)
   208dc:	dc800217 	ldw	r18,8(sp)
   208e0:	dc400117 	ldw	r17,4(sp)
   208e4:	dc000017 	ldw	r16,0(sp)
   208e8:	dec00604 	addi	sp,sp,24
   208ec:	f800283a 	ret
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   208f0:	80c00317 	ldw	r3,12(r16)
   208f4:	18800237 	ldwio	r2,8(r3)
        fifo_read_fill_level = (
   208f8:	10bfffcc 	andi	r2,r2,65535
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   208fc:	18c00237 	ldwio	r3,8(r3)
            ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
   20900:	1806d43a 	srli	r3,r3,16
   20904:	003fd606 	br	20860 <alt_msgdma_descriptor_sync_transfer+0x40>
        while(0 != alt_msgdma_write_standard_descriptor (
   20908:	80800417 	ldw	r2,16(r16)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
   2090c:	80c00317 	ldw	r3,12(r16)
   20910:	18c00037 	ldwio	r3,0(r3)
   20914:	18c0010c 	andi	r3,r3,4
   20918:	18000926 	beq	r3,zero,20940 <alt_msgdma_descriptor_sync_transfer+0x120>
            alt_busy_sleep(1); /* delay 1us */
   2091c:	01000044 	movi	r4,1
   20920:	002146c0 	call	2146c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   20924:	a0bfffc4 	addi	r2,r20,-1
   20928:	1029883a 	mov	r20,r2
   2092c:	10bfffcc 	andi	r2,r2,65535
   20930:	103ff51e 	bne	r2,zero,20908 <alt_msgdma_descriptor_sync_transfer+0xe8>
                alt_printf("time out after 5 msec while writing standard" 
   20934:	010000b4 	movhi	r4,2
   20938:	21072304 	addi	r4,r4,7308
   2093c:	003fe206 	br	208c8 <alt_msgdma_descriptor_sync_transfer+0xa8>
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
   20940:	88c00017 	ldw	r3,0(r17)
   20944:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
   20948:	88c00117 	ldw	r3,4(r17)
   2094c:	10c00135 	stwio	r3,4(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
   20950:	88c00217 	ldw	r3,8(r17)
   20954:	10c00235 	stwio	r3,8(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
   20958:	88c00317 	ldw	r3,12(r17)
   2095c:	10c00335 	stwio	r3,12(r2)
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
   20960:	80800d17 	ldw	r2,52(r16)
   20964:	013ff2c4 	movi	r4,-53
   20968:	80c00317 	ldw	r3,12(r16)
   2096c:	1104703a 	and	r2,r2,r4
   20970:	10800114 	ori	r2,r2,4
   20974:	18800135 	stwio	r2,4(r3)
  NIOS2_WRITE_STATUS (context);
   20978:	9801703a 	wrctl	status,r19
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
   2097c:	80800317 	ldw	r2,12(r16)
   20980:	10800037 	ldwio	r2,0(r2)
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
   20984:	0444e244 	movi	r17,5001
   20988:	10c0780c 	andi	r3,r2,480
   2098c:	18002c1e 	bne	r3,zero,20a40 <alt_msgdma_descriptor_sync_transfer+0x220>
   20990:	1080004c 	andi	r2,r2,1
   20994:	10001e1e 	bne	r2,zero,20a10 <alt_msgdma_descriptor_sync_transfer+0x1f0>
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
   20998:	81400317 	ldw	r5,12(r16)
   2099c:	28800137 	ldwio	r2,4(r5)
  NIOS2_READ_STATUS (context);
   209a0:	0009303a 	rdctl	r4,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   209a4:	00ffff84 	movi	r3,-2
   209a8:	20c6703a 	and	r3,r4,r3
   209ac:	1801703a 	wrctl	status,r3
   209b0:	10800814 	ori	r2,r2,32
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   209b4:	28800135 	stwio	r2,4(r5)
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
   209b8:	80800317 	ldw	r2,12(r16)
   209bc:	10c00037 	ldwio	r3,0(r2)
   209c0:	10c00035 	stwio	r3,0(r2)
  NIOS2_WRITE_STATUS (context);
   209c4:	2001703a 	wrctl	status,r4
    return 0;
   209c8:	0005883a 	mov	r2,zero
   209cc:	003fc006 	br	208d0 <alt_msgdma_descriptor_sync_transfer+0xb0>
   209d0:	0444e244 	movi	r17,5001
    else if (NULL == standard_desc && NULL != extended_desc)
   209d4:	903fb226 	beq	r18,zero,208a0 <alt_msgdma_descriptor_sync_transfer+0x80>
        while(0 != alt_msgdma_write_extended_descriptor (
   209d8:	81400417 	ldw	r5,16(r16)
   209dc:	81000317 	ldw	r4,12(r16)
   209e0:	900d883a 	mov	r6,r18
   209e4:	00206180 	call	20618 <alt_msgdma_write_extended_descriptor>
   209e8:	103fdd26 	beq	r2,zero,20960 <alt_msgdma_descriptor_sync_transfer+0x140>
            alt_busy_sleep(1); /* delay 1us */
   209ec:	01000044 	movi	r4,1
   209f0:	002146c0 	call	2146c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   209f4:	88bfffc4 	addi	r2,r17,-1
   209f8:	1023883a 	mov	r17,r2
   209fc:	10bfffcc 	andi	r2,r2,65535
   20a00:	103ff51e 	bne	r2,zero,209d8 <alt_msgdma_descriptor_sync_transfer+0x1b8>
                alt_printf("time out after 5 msec while writing extended" 
   20a04:	010000b4 	movhi	r4,2
   20a08:	21073404 	addi	r4,r4,7376
   20a0c:	003fae06 	br	208c8 <alt_msgdma_descriptor_sync_transfer+0xa8>
        alt_busy_sleep(1); /* delay 1us */
   20a10:	01000044 	movi	r4,1
   20a14:	002146c0 	call	2146c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   20a18:	88bfffc4 	addi	r2,r17,-1
   20a1c:	1023883a 	mov	r17,r2
   20a20:	10bfffcc 	andi	r2,r2,65535
   20a24:	1000031e 	bne	r2,zero,20a34 <alt_msgdma_descriptor_sync_transfer+0x214>
            alt_printf("time out after 5 msec while waiting for any pending" 
   20a28:	010000b4 	movhi	r4,2
   20a2c:	21074504 	addi	r4,r4,7444
   20a30:	003fa506 	br	208c8 <alt_msgdma_descriptor_sync_transfer+0xa8>
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
   20a34:	80800317 	ldw	r2,12(r16)
   20a38:	10800037 	ldwio	r2,0(r2)
   20a3c:	003fd206 	br	20988 <alt_msgdma_descriptor_sync_transfer+0x168>
        return error;
   20a40:	00807804 	movi	r2,480
   20a44:	003fa206 	br	208d0 <alt_msgdma_descriptor_sync_transfer+0xb0>

00020a48 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
    if(dev->max_byte < length ||
   20a48:	20801217 	ldw	r2,72(r4)
   20a4c:	11c00a36 	bltu	r2,r7,20a78 <alt_msgdma_construct_standard_st_to_mm_descriptor+0x30>
   20a50:	20801703 	ldbu	r2,92(r4)
   20a54:	1000081e 	bne	r2,zero,20a78 <alt_msgdma_construct_standard_st_to_mm_descriptor+0x30>
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20a58:	d8800017 	ldw	r2,0(sp)
    descriptor->read_address = read_address;
   20a5c:	28000015 	stw	zero,0(r5)
    descriptor->write_address = write_address;
   20a60:	29800115 	stw	r6,4(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20a64:	10a00034 	orhi	r2,r2,32768
   20a68:	28800315 	stw	r2,12(r5)
    descriptor->transfer_length = length;
   20a6c:	29c00215 	stw	r7,8(r5)
    return 0;
   20a70:	0005883a 	mov	r2,zero
   20a74:	f800283a 	ret
        return -EINVAL;
   20a78:	00bffa84 	movi	r2,-22
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
            write_address, length, control);
}
   20a7c:	f800283a 	ret

00020a80 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    if(dev->max_byte < length ||
   20a80:	20801217 	ldw	r2,72(r4)
   20a84:	11c00a36 	bltu	r2,r7,20ab0 <alt_msgdma_construct_standard_mm_to_st_descriptor+0x30>
   20a88:	20801703 	ldbu	r2,92(r4)
   20a8c:	1000081e 	bne	r2,zero,20ab0 <alt_msgdma_construct_standard_mm_to_st_descriptor+0x30>
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20a90:	d8800017 	ldw	r2,0(sp)
    descriptor->read_address = read_address;
   20a94:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
   20a98:	28000115 	stw	zero,4(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20a9c:	10a00034 	orhi	r2,r2,32768
   20aa0:	28800315 	stw	r2,12(r5)
    descriptor->transfer_length = length;
   20aa4:	29c00215 	stw	r7,8(r5)
    return 0;
   20aa8:	0005883a 	mov	r2,zero
   20aac:	f800283a 	ret
        return -EINVAL;
   20ab0:	00bffa84 	movi	r2,-22
    alt_u32 control)
{
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
            NULL, length, control);

}
   20ab4:	f800283a 	ret

00020ab8 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
   20ab8:	d8800017 	ldw	r2,0(sp)
    if(dev->max_byte < length ||
   20abc:	20c01217 	ldw	r3,72(r4)
   20ac0:	18800a36 	bltu	r3,r2,20aec <alt_msgdma_construct_standard_mm_to_mm_descriptor+0x34>
   20ac4:	20c01703 	ldbu	r3,92(r4)
   20ac8:	1800081e 	bne	r3,zero,20aec <alt_msgdma_construct_standard_mm_to_mm_descriptor+0x34>
    descriptor->transfer_length = length;
   20acc:	28800215 	stw	r2,8(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20ad0:	d8800117 	ldw	r2,4(sp)
    descriptor->read_address = read_address;
   20ad4:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
   20ad8:	29c00115 	stw	r7,4(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20adc:	10a00034 	orhi	r2,r2,32768
   20ae0:	28800315 	stw	r2,12(r5)
    return 0;
   20ae4:	0005883a 	mov	r2,zero
   20ae8:	f800283a 	ret
        return -EINVAL;
   20aec:	00bffa84 	movi	r2,-22
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
            write_address, length, control);
}
   20af0:	f800283a 	ret

00020af4 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    if(dev->max_byte < length ||
   20af4:	20801217 	ldw	r2,72(r4)
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
   20af8:	da40010b 	ldhu	r9,4(sp)
   20afc:	da000203 	ldbu	r8,8(sp)
   20b00:	d8c0030b 	ldhu	r3,12(sp)
    if(dev->max_byte < length ||
   20b04:	11c01736 	bltu	r2,r7,20b64 <alt_msgdma_construct_extended_st_to_mm_descriptor+0x70>
       dev->max_stride < read_stride ||
   20b08:	22801417 	ldw	r10,80(r4)
       dev->max_stride < write_stride ||
   20b0c:	18bfffcc 	andi	r2,r3,65535
       dev->max_stride < read_stride ||
   20b10:	5000021e 	bne	r10,zero,20b1c <alt_msgdma_construct_extended_st_to_mm_descriptor+0x28>
   20b14:	22801317 	ldw	r10,76(r4)
   20b18:	50801236 	bltu	r10,r2,20b64 <alt_msgdma_construct_extended_st_to_mm_descriptor+0x70>
       dev->max_stride < write_stride ||
   20b1c:	20801703 	ldbu	r2,92(r4)
   20b20:	10800058 	cmpnei	r2,r2,1
   20b24:	10000f1e 	bne	r2,zero,20b64 <alt_msgdma_construct_extended_st_to_mm_descriptor+0x70>
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20b28:	d8800017 	ldw	r2,0(sp)
    descriptor->read_address_low = read_address;
   20b2c:	28000015 	stw	zero,0(r5)
    descriptor->write_address_low = write_address;
   20b30:	29800115 	stw	r6,4(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20b34:	10a00034 	orhi	r2,r2,32768
   20b38:	28800715 	stw	r2,28(r5)
    descriptor->transfer_length = length;
   20b3c:	29c00215 	stw	r7,8(r5)
    descriptor->sequence_number = sequence_number;
   20b40:	2a40030d 	sth	r9,12(r5)
    descriptor->read_burst_count = read_burst_count;
   20b44:	28000385 	stb	zero,14(r5)
    descriptor->write_burst_count = write_burst_count;
   20b48:	2a0003c5 	stb	r8,15(r5)
    descriptor->read_stride = read_stride;
   20b4c:	2800040d 	sth	zero,16(r5)
    descriptor->write_stride = write_stride;
   20b50:	28c0048d 	sth	r3,18(r5)
    descriptor->read_address_high = NULL;
   20b54:	28000515 	stw	zero,20(r5)
    descriptor->write_address_high = NULL;
   20b58:	28000615 	stw	zero,24(r5)
  return 0 ;
   20b5c:	0005883a 	mov	r2,zero
   20b60:	f800283a 	ret
        return -EINVAL;
   20b64:	00bffa84 	movi	r2,-22
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
   20b68:	f800283a 	ret

00020b6c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    if(dev->max_byte < length ||
   20b6c:	20801217 	ldw	r2,72(r4)
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
   20b70:	da40010b 	ldhu	r9,4(sp)
   20b74:	da000203 	ldbu	r8,8(sp)
   20b78:	d8c0030b 	ldhu	r3,12(sp)
    if(dev->max_byte < length ||
   20b7c:	11c01736 	bltu	r2,r7,20bdc <alt_msgdma_construct_extended_mm_to_st_descriptor+0x70>
   20b80:	22801417 	ldw	r10,80(r4)
       dev->max_stride < read_stride ||
   20b84:	18bfffcc 	andi	r2,r3,65535
    if(dev->max_byte < length ||
   20b88:	5000021e 	bne	r10,zero,20b94 <alt_msgdma_construct_extended_mm_to_st_descriptor+0x28>
   20b8c:	22801317 	ldw	r10,76(r4)
   20b90:	50801236 	bltu	r10,r2,20bdc <alt_msgdma_construct_extended_mm_to_st_descriptor+0x70>
       dev->max_stride < write_stride ||
   20b94:	20801703 	ldbu	r2,92(r4)
   20b98:	10800058 	cmpnei	r2,r2,1
   20b9c:	10000f1e 	bne	r2,zero,20bdc <alt_msgdma_construct_extended_mm_to_st_descriptor+0x70>
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20ba0:	d8800017 	ldw	r2,0(sp)
    descriptor->read_address_low = read_address;
   20ba4:	29800015 	stw	r6,0(r5)
    descriptor->write_address_low = write_address;
   20ba8:	28000115 	stw	zero,4(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20bac:	10a00034 	orhi	r2,r2,32768
   20bb0:	28800715 	stw	r2,28(r5)
    descriptor->transfer_length = length;
   20bb4:	29c00215 	stw	r7,8(r5)
    descriptor->sequence_number = sequence_number;
   20bb8:	2a40030d 	sth	r9,12(r5)
    descriptor->read_burst_count = read_burst_count;
   20bbc:	2a000385 	stb	r8,14(r5)
    descriptor->write_burst_count = write_burst_count;
   20bc0:	280003c5 	stb	zero,15(r5)
    descriptor->read_stride = read_stride;
   20bc4:	28c0040d 	sth	r3,16(r5)
    descriptor->write_stride = write_stride;
   20bc8:	2800048d 	sth	zero,18(r5)
    descriptor->read_address_high = NULL;
   20bcc:	28000515 	stw	zero,20(r5)
    descriptor->write_address_high = NULL;
   20bd0:	28000615 	stw	zero,24(r5)
  return 0 ;
   20bd4:	0005883a 	mov	r2,zero
   20bd8:	f800283a 	ret
        return -EINVAL;
   20bdc:	00bffa84 	movi	r2,-22
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
   20be0:	f800283a 	ret

00020be4 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
   20be4:	da400017 	ldw	r9,0(sp)
    if(dev->max_byte < length ||
   20be8:	20801217 	ldw	r2,72(r4)
{
   20bec:	db40020b 	ldhu	r13,8(sp)
   20bf0:	db000303 	ldbu	r12,12(sp)
   20bf4:	dac00403 	ldbu	r11,16(sp)
   20bf8:	da00050b 	ldhu	r8,20(sp)
   20bfc:	d8c0060b 	ldhu	r3,24(sp)
    if(dev->max_byte < length ||
   20c00:	12401a36 	bltu	r2,r9,20c6c <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x88>
       dev->max_stride < read_stride ||
   20c04:	22801417 	ldw	r10,80(r4)
   20c08:	20801317 	ldw	r2,76(r4)
   20c0c:	43bfffcc 	andi	r14,r8,65535
    if(dev->max_byte < length ||
   20c10:	5000011e 	bne	r10,zero,20c18 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x34>
   20c14:	13801536 	bltu	r2,r14,20c6c <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x88>
       dev->max_stride < write_stride ||
   20c18:	1bbfffcc 	andi	r14,r3,65535
       dev->max_stride < read_stride ||
   20c1c:	5000011e 	bne	r10,zero,20c24 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x40>
   20c20:	13801236 	bltu	r2,r14,20c6c <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x88>
       dev->max_stride < write_stride ||
   20c24:	20801703 	ldbu	r2,92(r4)
   20c28:	10800058 	cmpnei	r2,r2,1
   20c2c:	10000f1e 	bne	r2,zero,20c6c <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x88>
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20c30:	d8800117 	ldw	r2,4(sp)
    descriptor->read_address_low = read_address;
   20c34:	29800015 	stw	r6,0(r5)
    descriptor->write_address_low = write_address;
   20c38:	29c00115 	stw	r7,4(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20c3c:	10a00034 	orhi	r2,r2,32768
   20c40:	28800715 	stw	r2,28(r5)
    descriptor->transfer_length = length;
   20c44:	2a400215 	stw	r9,8(r5)
    descriptor->sequence_number = sequence_number;
   20c48:	2b40030d 	sth	r13,12(r5)
    descriptor->read_burst_count = read_burst_count;
   20c4c:	2b000385 	stb	r12,14(r5)
    descriptor->write_burst_count = write_burst_count;
   20c50:	2ac003c5 	stb	r11,15(r5)
    descriptor->read_stride = read_stride;
   20c54:	2a00040d 	sth	r8,16(r5)
    descriptor->write_stride = write_stride;
   20c58:	28c0048d 	sth	r3,18(r5)
    descriptor->read_address_high = NULL;
   20c5c:	28000515 	stw	zero,20(r5)
    descriptor->write_address_high = NULL;
   20c60:	28000615 	stw	zero,24(r5)
  return 0 ;
   20c64:	0005883a 	mov	r2,zero
   20c68:	f800283a 	ret
        return -EINVAL;
   20c6c:	00bffa84 	movi	r2,-22
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
   20c70:	f800283a 	ret

00020c74 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
   20c74:	d8800017 	ldw	r2,0(sp)
    if(dev->max_byte < length ||
   20c78:	20c01217 	ldw	r3,72(r4)
   20c7c:	18800e36 	bltu	r3,r2,20cb8 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0x44>
   20c80:	20c01703 	ldbu	r3,92(r4)
   20c84:	18000c1e 	bne	r3,zero,20cb8 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0x44>
    descriptor->transfer_length = length;
   20c88:	28800215 	stw	r2,8(r5)
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20c8c:	d8800117 	ldw	r2,4(sp)
   20c90:	00d00034 	movhi	r3,16384
   20c94:	18ffffc4 	addi	r3,r3,-1
   20c98:	10c4703a 	and	r2,r2,r3
   20c9c:	10a00034 	orhi	r2,r2,32768
    descriptor->control = (control 
   20ca0:	28800715 	stw	r2,28(r5)
    descriptor->read_address = read_address;
   20ca4:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
   20ca8:	29c00115 	stw	r7,4(r5)
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
   20cac:	29400315 	stw	r5,12(r5)
    return 0;
   20cb0:	0005883a 	mov	r2,zero
   20cb4:	f800283a 	ret
        return -EINVAL;
   20cb8:	00bffa84 	movi	r2,-22
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
            read_address, write_address, length, control);
}
   20cbc:	f800283a 	ret

00020cc0 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    if(dev->max_byte < length ||
   20cc0:	20801217 	ldw	r2,72(r4)
   20cc4:	11c00e36 	bltu	r2,r7,20d00 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0x40>
   20cc8:	20801703 	ldbu	r2,92(r4)
   20ccc:	10000c1e 	bne	r2,zero,20d00 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0x40>
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20cd0:	d8800017 	ldw	r2,0(sp)
   20cd4:	00d00034 	movhi	r3,16384
   20cd8:	18ffffc4 	addi	r3,r3,-1
   20cdc:	10c4703a 	and	r2,r2,r3
   20ce0:	10a00034 	orhi	r2,r2,32768
    descriptor->control = (control 
   20ce4:	28800715 	stw	r2,28(r5)
    descriptor->read_address = read_address;
   20ce8:	28000015 	stw	zero,0(r5)
    descriptor->write_address = write_address;
   20cec:	29800115 	stw	r6,4(r5)
    descriptor->transfer_length = length;
   20cf0:	29c00215 	stw	r7,8(r5)
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
   20cf4:	29400315 	stw	r5,12(r5)
    return 0;
   20cf8:	0005883a 	mov	r2,zero
   20cfc:	f800283a 	ret
        return -EINVAL;
   20d00:	00bffa84 	movi	r2,-22
    alt_u32 length, 
    alt_u32 control)
{
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
            0, write_address, length, control);
}
   20d04:	f800283a 	ret

00020d08 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    if(dev->max_byte < length ||
   20d08:	20801217 	ldw	r2,72(r4)
   20d0c:	11c00e36 	bltu	r2,r7,20d48 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0x40>
   20d10:	20801703 	ldbu	r2,92(r4)
   20d14:	10000c1e 	bne	r2,zero,20d48 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0x40>
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20d18:	d8800017 	ldw	r2,0(sp)
   20d1c:	00d00034 	movhi	r3,16384
   20d20:	18ffffc4 	addi	r3,r3,-1
   20d24:	10c4703a 	and	r2,r2,r3
   20d28:	10a00034 	orhi	r2,r2,32768
    descriptor->control = (control 
   20d2c:	28800715 	stw	r2,28(r5)
    descriptor->read_address = read_address;
   20d30:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
   20d34:	28000115 	stw	zero,4(r5)
    descriptor->transfer_length = length;
   20d38:	29c00215 	stw	r7,8(r5)
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
   20d3c:	29400315 	stw	r5,12(r5)
    return 0;
   20d40:	0005883a 	mov	r2,zero
   20d44:	f800283a 	ret
        return -EINVAL;
   20d48:	00bffa84 	movi	r2,-22
    alt_u32 length, 
    alt_u32 control)
{
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
            read_address, 0, length, control);
}
   20d4c:	f800283a 	ret

00020d50 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
   20d50:	da000017 	ldw	r8,0(sp)
    if(dev->max_byte < length ||
   20d54:	20801217 	ldw	r2,72(r4)
{
   20d58:	da80020b 	ldhu	r10,8(sp)
   20d5c:	da400303 	ldbu	r9,12(sp)
   20d60:	d8c0040b 	ldhu	r3,16(sp)
    if(dev->max_byte < length ||
   20d64:	12001c36 	bltu	r2,r8,20dd8 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x88>
       dev->max_stride < read_stride ||
   20d68:	22c01417 	ldw	r11,80(r4)
       dev->max_stride < write_stride ||
   20d6c:	18bfffcc 	andi	r2,r3,65535
       dev->max_stride < read_stride ||
   20d70:	5800021e 	bne	r11,zero,20d7c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x2c>
   20d74:	22c01317 	ldw	r11,76(r4)
   20d78:	58801736 	bltu	r11,r2,20dd8 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x88>
       dev->max_stride < write_stride ||
   20d7c:	20801703 	ldbu	r2,92(r4)
   20d80:	10800058 	cmpnei	r2,r2,1
   20d84:	1000141e 	bne	r2,zero,20dd8 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x88>
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20d88:	d8800117 	ldw	r2,4(sp)
    descriptor->write_stride = write_stride;
   20d8c:	28c0088d 	sth	r3,34(r5)
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20d90:	00d00034 	movhi	r3,16384
   20d94:	18ffffc4 	addi	r3,r3,-1
   20d98:	10c4703a 	and	r2,r2,r3
   20d9c:	10a00034 	orhi	r2,r2,32768
    descriptor->control = (control 
   20da0:	28800f15 	stw	r2,60(r5)
    descriptor->read_address_high = read_address_high;
   20da4:	28000915 	stw	zero,36(r5)
    descriptor->read_address_low = read_address_low;
   20da8:	28000015 	stw	zero,0(r5)
    descriptor->write_address_high = write_address_high;
   20dac:	29800a15 	stw	r6,40(r5)
    descriptor->write_address_low = write_address_low;
   20db0:	29c00115 	stw	r7,4(r5)
    descriptor->transfer_length = length;
   20db4:	2a000215 	stw	r8,8(r5)
    descriptor->sequence_number = sequence_number;
   20db8:	2a80070d 	sth	r10,28(r5)
    descriptor->read_burst_count = read_burst_count;
   20dbc:	28000785 	stb	zero,30(r5)
    descriptor->write_burst_count = write_burst_count;
   20dc0:	2a4007c5 	stb	r9,31(r5)
    descriptor->read_stride = read_stride;
   20dc4:	2800080d 	sth	zero,32(r5)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
   20dc8:	29400315 	stw	r5,12(r5)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
   20dcc:	28000b15 	stw	zero,44(r5)
  return 0 ;
   20dd0:	0005883a 	mov	r2,zero
   20dd4:	f800283a 	ret
        return -EINVAL;
   20dd8:	00bffa84 	movi	r2,-22
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
   20ddc:	f800283a 	ret

00020de0 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
   20de0:	da000017 	ldw	r8,0(sp)
    if(dev->max_byte < length ||
   20de4:	20801217 	ldw	r2,72(r4)
{
   20de8:	da80020b 	ldhu	r10,8(sp)
   20dec:	da400303 	ldbu	r9,12(sp)
   20df0:	d8c0040b 	ldhu	r3,16(sp)
    if(dev->max_byte < length ||
   20df4:	12001c36 	bltu	r2,r8,20e68 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x88>
   20df8:	22c01417 	ldw	r11,80(r4)
       dev->max_stride < read_stride ||
   20dfc:	18bfffcc 	andi	r2,r3,65535
    if(dev->max_byte < length ||
   20e00:	5800021e 	bne	r11,zero,20e0c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x2c>
   20e04:	22c01317 	ldw	r11,76(r4)
   20e08:	58801736 	bltu	r11,r2,20e68 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x88>
       dev->max_stride < write_stride ||
   20e0c:	20801703 	ldbu	r2,92(r4)
   20e10:	10800058 	cmpnei	r2,r2,1
   20e14:	1000141e 	bne	r2,zero,20e68 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x88>
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20e18:	d8800117 	ldw	r2,4(sp)
    descriptor->read_stride = read_stride;
   20e1c:	28c0080d 	sth	r3,32(r5)
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20e20:	00d00034 	movhi	r3,16384
   20e24:	18ffffc4 	addi	r3,r3,-1
   20e28:	10c4703a 	and	r2,r2,r3
   20e2c:	10a00034 	orhi	r2,r2,32768
    descriptor->control = (control 
   20e30:	28800f15 	stw	r2,60(r5)
    descriptor->read_address_high = read_address_high;
   20e34:	29800915 	stw	r6,36(r5)
    descriptor->read_address_low = read_address_low;
   20e38:	29c00015 	stw	r7,0(r5)
    descriptor->write_address_high = write_address_high;
   20e3c:	28000a15 	stw	zero,40(r5)
    descriptor->write_address_low = write_address_low;
   20e40:	28000115 	stw	zero,4(r5)
    descriptor->transfer_length = length;
   20e44:	2a000215 	stw	r8,8(r5)
    descriptor->sequence_number = sequence_number;
   20e48:	2a80070d 	sth	r10,28(r5)
    descriptor->read_burst_count = read_burst_count;
   20e4c:	2a400785 	stb	r9,30(r5)
    descriptor->write_burst_count = write_burst_count;
   20e50:	280007c5 	stb	zero,31(r5)
    descriptor->write_stride = write_stride;
   20e54:	2800088d 	sth	zero,34(r5)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
   20e58:	29400315 	stw	r5,12(r5)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
   20e5c:	28000b15 	stw	zero,44(r5)
  return 0 ;
   20e60:	0005883a 	mov	r2,zero
   20e64:	f800283a 	ret
        return -EINVAL;
   20e68:	00bffa84 	movi	r2,-22
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
   20e6c:	f800283a 	ret

00020e70 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
   20e70:	da400217 	ldw	r9,8(sp)
    if(dev->max_byte < length ||
   20e74:	20801217 	ldw	r2,72(r4)
{
   20e78:	db40040b 	ldhu	r13,16(sp)
   20e7c:	db000503 	ldbu	r12,20(sp)
   20e80:	dac00603 	ldbu	r11,24(sp)
   20e84:	da00070b 	ldhu	r8,28(sp)
   20e88:	d8c0080b 	ldhu	r3,32(sp)
    if(dev->max_byte < length ||
   20e8c:	12402136 	bltu	r2,r9,20f14 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa4>
       dev->max_stride < read_stride ||
   20e90:	22801417 	ldw	r10,80(r4)
   20e94:	20801317 	ldw	r2,76(r4)
   20e98:	43bfffcc 	andi	r14,r8,65535
    if(dev->max_byte < length ||
   20e9c:	5000011e 	bne	r10,zero,20ea4 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0x34>
   20ea0:	13801c36 	bltu	r2,r14,20f14 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa4>
       dev->max_stride < write_stride ||
   20ea4:	1bbfffcc 	andi	r14,r3,65535
       dev->max_stride < read_stride ||
   20ea8:	5000011e 	bne	r10,zero,20eb0 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0x40>
   20eac:	13801936 	bltu	r2,r14,20f14 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa4>
       dev->max_stride < write_stride ||
   20eb0:	20801703 	ldbu	r2,92(r4)
   20eb4:	10800058 	cmpnei	r2,r2,1
   20eb8:	1000161e 	bne	r2,zero,20f14 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa4>
    descriptor->write_address_high = write_address_high;
   20ebc:	d8800017 	ldw	r2,0(sp)
    descriptor->write_stride = write_stride;
   20ec0:	28c0088d 	sth	r3,34(r5)
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20ec4:	00d00034 	movhi	r3,16384
    descriptor->write_address_high = write_address_high;
   20ec8:	28800a15 	stw	r2,40(r5)
    descriptor->write_address_low = write_address_low;
   20ecc:	d8800117 	ldw	r2,4(sp)
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20ed0:	18ffffc4 	addi	r3,r3,-1
    descriptor->read_address_high = read_address_high;
   20ed4:	29800915 	stw	r6,36(r5)
    descriptor->write_address_low = write_address_low;
   20ed8:	28800115 	stw	r2,4(r5)
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20edc:	d8800317 	ldw	r2,12(sp)
    descriptor->read_address_low = read_address_low;
   20ee0:	29c00015 	stw	r7,0(r5)
    descriptor->transfer_length = length;
   20ee4:	2a400215 	stw	r9,8(r5)
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   20ee8:	10c4703a 	and	r2,r2,r3
   20eec:	10a00034 	orhi	r2,r2,32768
    descriptor->control = (control 
   20ef0:	28800f15 	stw	r2,60(r5)
    descriptor->sequence_number = sequence_number;
   20ef4:	2b40070d 	sth	r13,28(r5)
    descriptor->read_burst_count = read_burst_count;
   20ef8:	2b000785 	stb	r12,30(r5)
    descriptor->write_burst_count = write_burst_count;
   20efc:	2ac007c5 	stb	r11,31(r5)
    descriptor->read_stride = read_stride;
   20f00:	2a00080d 	sth	r8,32(r5)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
   20f04:	29400315 	stw	r5,12(r5)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
   20f08:	28000b15 	stw	zero,44(r5)
  return 0 ;
   20f0c:	0005883a 	mov	r2,zero
   20f10:	f800283a 	ret
        return -EINVAL;
   20f14:	00bffa84 	movi	r2,-22
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
   20f18:	f800283a 	ret

00020f1c <alt_msgdma_prefetcher_add_standard_desc_to_list>:
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
   20f1c:	28001126 	beq	r5,zero,20f64 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x48>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
   20f20:	28c00317 	ldw	r3,12(r5)
   20f24:	19400f1e 	bne	r3,r5,20f64 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x48>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
    }
    if (*list == NULL)
   20f28:	20800017 	ldw	r2,0(r4)
   20f2c:	1000031e 	bne	r2,zero,20f3c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x20>
    {
        *list = descriptor;  /* make this root-node if list is empty */
   20f30:	20c00015 	stw	r3,0(r4)
        return 0;  /* successfully added */
   20f34:	0005883a 	mov	r2,zero
   20f38:	f800283a 	ret
    }
    if (*list == descriptor)
   20f3c:	11400926 	beq	r2,r5,20f64 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x48>
   20f40:	1007883a 	mov	r3,r2
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
   20f44:	19000317 	ldw	r4,12(r3)
   20f48:	2080031e 	bne	r4,r2,20f58 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
   20f4c:	19400315 	stw	r5,12(r3)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
   20f50:	28800315 	stw	r2,12(r5)
    return 0; /* successfully added */
   20f54:	003ff706 	br	20f34 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x18>
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
   20f58:	29000226 	beq	r5,r4,20f64 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x48>
        last_descr_ptr = 
   20f5c:	2007883a 	mov	r3,r4
   20f60:	003ff806 	br	20f44 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x28>
        return -EINVAL;  /* this descriptor cannot be NULL */
   20f64:	00bffa84 	movi	r2,-22
}
   20f68:	f800283a 	ret

00020f6c <alt_msgdma_prefetcher_add_extended_desc_to_list>:
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
   20f6c:	2800021e 	bne	r5,zero,20f78 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
   20f70:	00bffa84 	movi	r2,-22
   20f74:	f800283a 	ret
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
   20f78:	28800317 	ldw	r2,12(r5)
   20f7c:	28bffc1e 	bne	r5,r2,20f70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x4>
   20f80:	28800b17 	ldw	r2,44(r5)
   20f84:	103ffa1e 	bne	r2,zero,20f70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x4>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
    }
    
    if (*list == NULL)
   20f88:	20800017 	ldw	r2,0(r4)
   20f8c:	1000031e 	bne	r2,zero,20f9c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x30>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
   20f90:	21400015 	stw	r5,0(r4)
        return 0;
   20f94:	0005883a 	mov	r2,zero
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
    return 0;
}
   20f98:	f800283a 	ret
    if (*list == descriptor)
   20f9c:	117ff426 	beq	r2,r5,20f70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x4>
    root_node_addr.u64 = (uintptr_t)*list;
   20fa0:	1009883a 	mov	r4,r2
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
   20fa4:	10c00317 	ldw	r3,12(r2)
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
   20fa8:	11800b17 	ldw	r6,44(r2)
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
   20fac:	20c0051e 	bne	r4,r3,20fc4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
   20fb0:	3000041e 	bne	r6,zero,20fc4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
   20fb4:	11400315 	stw	r5,12(r2)
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
   20fb8:	29000315 	stw	r4,12(r5)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
   20fbc:	28000b15 	stw	zero,44(r5)
    return 0;
   20fc0:	003ff406 	br	20f94 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x28>
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
   20fc4:	28c0011e 	bne	r5,r3,20fcc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
   20fc8:	303fe926 	beq	r6,zero,20f70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x4>
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
   20fcc:	1805883a 	mov	r2,r3
   20fd0:	003ff406 	br	20fa4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x38>

00020fd4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
{
    alt_u32 descriptor_control_field = 0;
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
    
    if (list == NULL)
   20fd4:	20001c26 	beq	r4,zero,21048 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x74>
   20fd8:	2007883a 	mov	r3,r4
    alt_u32 descriptor_count = 0;
   20fdc:	000f883a 	mov	r7,zero
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
   20fe0:	1a000317 	ldw	r8,12(r3)
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
   20fe4:	18800717 	ldw	r2,28(r3)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
   20fe8:	39c00044 	addi	r7,r7,1
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
   20fec:	2200101e 	bne	r4,r8,21030 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x5c>
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
   20ff0:	29403fcc 	andi	r5,r5,255
   20ff4:	28001226 	beq	r5,zero,21040 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x6c>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
   20ff8:	01700034 	movhi	r5,49152
   20ffc:	297fffc4 	addi	r5,r5,-1
   21000:	1144703a 	and	r2,r2,r5
        last_descr_ptr->control = descriptor_control_field 
   21004:	18800715 	stw	r2,28(r3)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
    
    if (dcache_flush_desc_list)
   21008:	31803fcc 	andi	r6,r6,255
   2100c:	30001026 	beq	r6,zero,21050 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x7c>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
   21010:	380a917a 	slli	r5,r7,5
{
   21014:	deffff04 	addi	sp,sp,-4
   21018:	dfc00015 	stw	ra,0(sp)
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
   2101c:	00214f00 	call	214f0 <alt_dcache_flush>
        return -EINVAL;  /* this list cannot be empty */
   21020:	0005883a 	mov	r2,zero
    }
    
    return 0;
}
   21024:	dfc00017 	ldw	ra,0(sp)
   21028:	dec00104 	addi	sp,sp,4
   2102c:	f800283a 	ret
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
   21030:	10900034 	orhi	r2,r2,16384
        last_descr_ptr->control = descriptor_control_field 
   21034:	18800715 	stw	r2,28(r3)
        last_descr_ptr = 
   21038:	4007883a 	mov	r3,r8
        descriptor_count++;
   2103c:	003fe806 	br	20fe0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc>
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
   21040:	10900034 	orhi	r2,r2,16384
   21044:	003fef06 	br	21004 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x30>
        return -EINVAL;  /* this list cannot be empty */
   21048:	00bffa84 	movi	r2,-22
   2104c:	f800283a 	ret
   21050:	0005883a 	mov	r2,zero
}
   21054:	f800283a 	ret

00021058 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
    alt_u32 descriptor_control_field = 0;
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
    
    if (list == NULL)
   21058:	20002026 	beq	r4,zero,210dc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
    last_descr_ptr = list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
   2105c:	2005883a 	mov	r2,r4
    alt_u32 descriptor_count = 0;
   21060:	0007883a 	mov	r3,zero
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
   21064:	12000317 	ldw	r8,12(r2)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
   21068:	11c00b17 	ldw	r7,44(r2)
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
   2106c:	2200131e 	bne	r4,r8,210bc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x64>
   21070:	3800121e 	bne	r7,zero,210bc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x64>
        descriptor_count++;            
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
   21074:	29403fcc 	andi	r5,r5,255
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
   21078:	11c00f17 	ldw	r7,60(r2)
    if (last_desc_owned_by_sw)
   2107c:	28001526 	beq	r5,zero,210d4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x7c>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
   21080:	01700034 	movhi	r5,49152
   21084:	297fffc4 	addi	r5,r5,-1
   21088:	394a703a 	and	r5,r7,r5
        last_descr_ptr->control = descriptor_control_field 
   2108c:	11400f15 	stw	r5,60(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
    
    if (dcache_flush_desc_list)
   21090:	31803fcc 	andi	r6,r6,255
   21094:	30001326 	beq	r6,zero,210e4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x8c>
    descriptor_count++;
   21098:	19400044 	addi	r5,r3,1
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
   2109c:	280a91ba 	slli	r5,r5,6
{    
   210a0:	deffff04 	addi	sp,sp,-4
   210a4:	dfc00015 	stw	ra,0(sp)
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
   210a8:	00214f00 	call	214f0 <alt_dcache_flush>
    }
    
    return 0;
   210ac:	0005883a 	mov	r2,zero
}
   210b0:	dfc00017 	ldw	ra,0(sp)
   210b4:	dec00104 	addi	sp,sp,4
   210b8:	f800283a 	ret
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
   210bc:	11c00f17 	ldw	r7,60(r2)
        descriptor_count++;            
   210c0:	18c00044 	addi	r3,r3,1
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
   210c4:	39d00034 	orhi	r7,r7,16384
        last_descr_ptr->control = descriptor_control_field 
   210c8:	11c00f15 	stw	r7,60(r2)
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
   210cc:	4005883a 	mov	r2,r8
        descriptor_count++;            
   210d0:	003fe406 	br	21064 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc>
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
   210d4:	39500034 	orhi	r5,r7,16384
   210d8:	003fec06 	br	2108c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x34>
        return -EINVAL;  /* this list cannot be empty */
   210dc:	00bffa84 	movi	r2,-22
   210e0:	f800283a 	ret
    return 0;
   210e4:	0005883a 	mov	r2,zero
}
   210e8:	f800283a 	ret

000210ec <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
   210ec:	da800003 	ldbu	r10,0(sp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
   210f0:	20800617 	ldw	r2,24(r4)
   210f4:	10c00037 	ldwio	r3,0(r2)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
   210f8:	1880004c 	andi	r2,r3,1
   210fc:	10003b1e 	bne	r2,zero,211ec <alt_msgdma_start_prefetcher_with_list_addr+0x100>
  NIOS2_READ_STATUS (context);
   21100:	0013303a 	rdctl	r9,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21104:	023fff84 	movi	r8,-2
   21108:	4a16703a 	and	r11,r9,r8
   2110c:	5801703a 	wrctl	status,r11
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
   21110:	22c00317 	ldw	r11,12(r4)
   21114:	03000804 	movi	r12,32
   21118:	5b000135 	stwio	r12,4(r11)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
   2111c:	22c00317 	ldw	r11,12(r4)
   21120:	5b000037 	ldwio	r12,0(r11)
   21124:	5b000035 	stwio	r12,0(r11)
  NIOS2_WRITE_STATUS (context);
   21128:	4801703a 	wrctl	status,r9
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
   2112c:	22400b17 	ldw	r9,44(r4)
   21130:	48001e26 	beq	r9,zero,211ac <alt_msgdma_start_prefetcher_with_list_addr+0xc0>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
   21134:	22400d17 	ldw	r9,52(r4)
   21138:	02fff7c4 	movi	r11,-33
   2113c:	18c00214 	ori	r3,r3,8
   21140:	4ad2703a 	and	r9,r9,r11
   21144:	4a400514 	ori	r9,r9,20
  NIOS2_READ_STATUS (context);
   21148:	0017303a 	rdctl	r11,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2114c:	5a10703a 	and	r8,r11,r8
   21150:	4001703a 	wrctl	status,r8
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
   21154:	22000317 	ldw	r8,12(r4)
   21158:	42400135 	stwio	r9,4(r8)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
   2115c:	22000617 	ldw	r8,24(r4)
   21160:	40c00035 	stwio	r3,0(r8)
  NIOS2_WRITE_STATUS (context);
   21164:	5801703a 	wrctl	status,r11
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
   21168:	22000617 	ldw	r8,24(r4)
   2116c:	41400135 	stwio	r5,4(r8)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
   21170:	21400617 	ldw	r5,24(r4)
   21174:	29800235 	stwio	r6,8(r5)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
   21178:	39c03fcc 	andi	r7,r7,255
   2117c:	38001226 	beq	r7,zero,211c8 <alt_msgdma_start_prefetcher_with_list_addr+0xdc>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
   21180:	18c00414 	ori	r3,r3,16
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
     }
     
     /* set poll-en */
     if (poll_en){
   21184:	51403fcc 	andi	r5,r10,255
   21188:	28001526 	beq	r5,zero,211e0 <alt_msgdma_start_prefetcher_with_list_addr+0xf4>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
   2118c:	21400617 	ldw	r5,24(r4)
   21190:	29800337 	ldwio	r6,12(r5)
   21194:	30000f26 	beq	r6,zero,211d4 <alt_msgdma_start_prefetcher_with_list_addr+0xe8>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
   21198:	18c00094 	ori	r3,r3,2
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
   2119c:	21000617 	ldw	r4,24(r4)
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
   211a0:	18c00054 	ori	r3,r3,1
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
   211a4:	20c00035 	stwio	r3,0(r4)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
   211a8:	f800283a 	ret
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
   211ac:	22400d17 	ldw	r9,52(r4)
   211b0:	02fff3c4 	movi	r11,-49
   211b4:	4ad2703a 	and	r9,r9,r11
   211b8:	02fffdc4 	movi	r11,-9
   211bc:	4a400114 	ori	r9,r9,4
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
   211c0:	1ac6703a 	and	r3,r3,r11
   211c4:	003fe006 	br	21148 <alt_msgdma_start_prefetcher_with_list_addr+0x5c>
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
   211c8:	017ffbc4 	movi	r5,-17
   211cc:	1946703a 	and	r3,r3,r5
   211d0:	003fec06 	br	21184 <alt_msgdma_start_prefetcher_with_list_addr+0x98>
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
   211d4:	01803fc4 	movi	r6,255
   211d8:	29800335 	stwio	r6,12(r5)
   211dc:	003fee06 	br	21198 <alt_msgdma_start_prefetcher_with_list_addr+0xac>
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
   211e0:	017fff44 	movi	r5,-3
   211e4:	1946703a 	and	r3,r3,r5
   211e8:	003fec06 	br	2119c <alt_msgdma_start_prefetcher_with_list_addr+0xb0>
        return -EBUSY;
   211ec:	00bffc04 	movi	r2,-16
}
   211f0:	f800283a 	ret

000211f4 <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
   211f4:	defffb04 	addi	sp,sp,-20
   211f8:	dcc00315 	stw	r19,12(sp)
   211fc:	dc400115 	stw	r17,4(sp)
   21200:	3027883a 	mov	r19,r6
   21204:	2823883a 	mov	r17,r5
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
   21208:	d9800603 	ldbu	r6,24(sp)
   2120c:	d9400503 	ldbu	r5,20(sp)
{    
   21210:	dc800215 	stw	r18,8(sp)
   21214:	2025883a 	mov	r18,r4
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
   21218:	8809883a 	mov	r4,r17
{    
   2121c:	dc000015 	stw	r16,0(sp)
   21220:	dfc00415 	stw	ra,16(sp)
   21224:	3821883a 	mov	r16,r7
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
   21228:	0020fd40 	call	20fd4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
   2122c:	10000d1e 	bne	r2,zero,21264 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
    {
        return -EINVAL;
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
   21230:	84003fcc 	andi	r16,r16,255
   21234:	99c03fcc 	andi	r7,r19,255
   21238:	880b883a 	mov	r5,r17
   2123c:	000d883a 	mov	r6,zero
   21240:	9009883a 	mov	r4,r18
   21244:	dc000515 	stw	r16,20(sp)
            park_mode_en, poll_en);
}
   21248:	dfc00417 	ldw	ra,16(sp)
   2124c:	dcc00317 	ldw	r19,12(sp)
   21250:	dc800217 	ldw	r18,8(sp)
   21254:	dc400117 	ldw	r17,4(sp)
   21258:	dc000017 	ldw	r16,0(sp)
   2125c:	dec00504 	addi	sp,sp,20
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
   21260:	00210ec1 	jmpi	210ec <alt_msgdma_start_prefetcher_with_list_addr>
}
   21264:	00bffa84 	movi	r2,-22
   21268:	dfc00417 	ldw	ra,16(sp)
   2126c:	dcc00317 	ldw	r19,12(sp)
   21270:	dc800217 	ldw	r18,8(sp)
   21274:	dc400117 	ldw	r17,4(sp)
   21278:	dc000017 	ldw	r16,0(sp)
   2127c:	dec00504 	addi	sp,sp,20
   21280:	f800283a 	ret

00021284 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
   21284:	defffb04 	addi	sp,sp,-20
   21288:	dcc00315 	stw	r19,12(sp)
   2128c:	dc400115 	stw	r17,4(sp)
   21290:	3027883a 	mov	r19,r6
   21294:	2823883a 	mov	r17,r5
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
   21298:	d9800603 	ldbu	r6,24(sp)
   2129c:	d9400503 	ldbu	r5,20(sp)
{
   212a0:	dc800215 	stw	r18,8(sp)
   212a4:	2025883a 	mov	r18,r4
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
   212a8:	8809883a 	mov	r4,r17
{
   212ac:	dc000015 	stw	r16,0(sp)
   212b0:	dfc00415 	stw	ra,16(sp)
   212b4:	3821883a 	mov	r16,r7
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
   212b8:	00210580 	call	21058 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
   212bc:	10000d1e 	bne	r2,zero,212f4 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
    {
        return -EINVAL;
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
   212c0:	84003fcc 	andi	r16,r16,255
   212c4:	99c03fcc 	andi	r7,r19,255
   212c8:	880b883a 	mov	r5,r17
   212cc:	000d883a 	mov	r6,zero
   212d0:	9009883a 	mov	r4,r18
   212d4:	dc000515 	stw	r16,20(sp)
            park_mode_en, poll_en);
}
   212d8:	dfc00417 	ldw	ra,16(sp)
   212dc:	dcc00317 	ldw	r19,12(sp)
   212e0:	dc800217 	ldw	r18,8(sp)
   212e4:	dc400117 	ldw	r17,4(sp)
   212e8:	dc000017 	ldw	r16,0(sp)
   212ec:	dec00504 	addi	sp,sp,20
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
   212f0:	00210ec1 	jmpi	210ec <alt_msgdma_start_prefetcher_with_list_addr>
}
   212f4:	00bffa84 	movi	r2,-22
   212f8:	dfc00417 	ldw	ra,16(sp)
   212fc:	dcc00317 	ldw	r19,12(sp)
   21300:	dc800217 	ldw	r18,8(sp)
   21304:	dc400117 	ldw	r17,4(sp)
   21308:	dc000017 	ldw	r16,0(sp)
   2130c:	dec00504 	addi	sp,sp,20
   21310:	f800283a 	ret

00021314 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
   21314:	defffe04 	addi	sp,sp,-8
    alt_msgdma_dev* dev = NULL;

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
   21318:	d1600304 	addi	r5,gp,-32756
{
   2131c:	dc000015 	stw	r16,0(sp)
   21320:	dfc00115 	stw	ra,4(sp)
    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
   21324:	00215b80 	call	215b8 <alt_find_dev>
   21328:	1021883a 	mov	r16,r2

    if (NULL == dev)
   2132c:	1000051e 	bne	r2,zero,21344 <alt_msgdma_open+0x30>
   21330:	d0a00517 	ldw	r2,-32748(gp)
   21334:	10000826 	beq	r2,zero,21358 <alt_msgdma_open+0x44>
   21338:	103ee83a 	callr	r2
    {
        ALT_ERRNO = ENODEV;
   2133c:	00c004c4 	movi	r3,19
   21340:	10c00015 	stw	r3,0(r2)
    }

    return dev;
}
   21344:	8005883a 	mov	r2,r16
   21348:	dfc00117 	ldw	ra,4(sp)
   2134c:	dc000017 	ldw	r16,0(sp)
   21350:	dec00204 	addi	sp,sp,8
   21354:	f800283a 	ret
   21358:	d0a06104 	addi	r2,gp,-32380
   2135c:	003ff706 	br	2133c <alt_msgdma_open+0x28>

00021360 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   21360:	defffb04 	addi	sp,sp,-20
   21364:	dc800315 	stw	r18,12(sp)
   21368:	dc400215 	stw	r17,8(sp)
   2136c:	dc000115 	stw	r16,4(sp)
   21370:	dfc00415 	stw	ra,16(sp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
   21374:	20801783 	ldbu	r2,94(r4)
{
   21378:	2021883a 	mov	r16,r4
   2137c:	2823883a 	mov	r17,r5
   21380:	3025883a 	mov	r18,r6
    if (dev->prefetcher_enable)
   21384:	10000726 	beq	r2,zero,213a4 <alt_msgdma_init+0x44>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
   21388:	20800617 	ldw	r2,24(r4)
   2138c:	00c00104 	movi	r3,4
   21390:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
   21394:	80800617 	ldw	r2,24(r16)
   21398:	10800037 	ldwio	r2,0(r2)
   2139c:	1080010c 	andi	r2,r2,4
   213a0:	103ffc1e 	bne	r2,zero,21394 <alt_msgdma_init+0x34>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
   213a4:	80800317 	ldw	r2,12(r16)
   213a8:	00c00084 	movi	r3,2
   213ac:	10c00135 	stwio	r3,4(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
   213b0:	80c00317 	ldw	r3,12(r16)
   213b4:	18800037 	ldwio	r2,0(r3)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
   213b8:	1080100c 	andi	r2,r2,64
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
   213bc:	103ffc1e 	bne	r2,zero,213b0 <alt_msgdma_init+0x50>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
   213c0:	18800137 	ldwio	r2,4(r3)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
   213c4:	013ffbc4 	movi	r4,-17
   213c8:	1104703a 	and	r2,r2,r4
   213cc:	10800814 	ori	r2,r2,32
   213d0:	18800135 	stwio	r2,4(r3)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
   213d4:	80800317 	ldw	r2,12(r16)
   213d8:	10c00037 	ldwio	r3,0(r2)
   213dc:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
   213e0:	80801783 	ldbu	r2,94(r16)
   213e4:	10000326 	beq	r2,zero,213f4 <alt_msgdma_init+0x94>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
   213e8:	80800617 	ldw	r2,24(r16)
   213ec:	10c00437 	ldwio	r3,16(r2)
   213f0:	10c00435 	stwio	r3,16(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
   213f4:	8009883a 	mov	r4,r16
   213f8:	d1600304 	addi	r5,gp,-32756
   213fc:	00215500 	call	21550 <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
            
    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
   21400:	018000b4 	movhi	r6,2
   21404:	d8000015 	stw	zero,0(sp)
   21408:	800f883a 	mov	r7,r16
   2140c:	31815504 	addi	r6,r6,1364
   21410:	900b883a 	mov	r5,r18
   21414:	8809883a 	mov	r4,r17
   21418:	00216340 	call	21634 <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }
    
    return;

}
   2141c:	dfc00417 	ldw	ra,16(sp)
   21420:	dc800317 	ldw	r18,12(sp)
   21424:	dc400217 	ldw	r17,8(sp)
   21428:	dc000117 	ldw	r16,4(sp)
   2142c:	dec00504 	addi	sp,sp,20
   21430:	f800283a 	ret

00021434 <alt_msgdma_register_callback>:
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
   21434:	21400b15 	stw	r5,44(r4)
    dev->callback_context = context;
   21438:	21c00c15 	stw	r7,48(r4)
    dev->control          = control;
   2143c:	21800d15 	stw	r6,52(r4)

    return ;
}
   21440:	f800283a 	ret

00021444 <alt_msgdma_standard_descriptor_async_transfer>:
{
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
   21444:	000d883a 	mov	r6,zero
   21448:	00206801 	jmpi	20680 <alt_msgdma_descriptor_async_transfer>

0002144c <alt_msgdma_extended_descriptor_async_transfer>:
{
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
   2144c:	280d883a 	mov	r6,r5
   21450:	000b883a 	mov	r5,zero
   21454:	00206801 	jmpi	20680 <alt_msgdma_descriptor_async_transfer>

00021458 <alt_msgdma_standard_descriptor_sync_transfer>:
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
   21458:	000d883a 	mov	r6,zero
   2145c:	00208201 	jmpi	20820 <alt_msgdma_descriptor_sync_transfer>

00021460 <alt_msgdma_extended_descriptor_sync_transfer>:
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
   21460:	280d883a 	mov	r6,r5
   21464:	000b883a 	mov	r5,zero
   21468:	00208201 	jmpi	20820 <alt_msgdma_descriptor_sync_transfer>

0002146c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2146c:	defffe04 	addi	sp,sp,-8
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   21470:	00820034 	movhi	r2,2048
{
   21474:	dc000015 	stw	r16,0(sp)
   21478:	dfc00115 	stw	ra,4(sp)
  if (big_loops)
   2147c:	10bfff84 	addi	r2,r2,-2
{
   21480:	2021883a 	mov	r16,r4
  if (big_loops)
   21484:	1100162e 	bgeu	r2,r4,214e0 <alt_busy_sleep+0x74>
  big_loops = us / (INT_MAX/
   21488:	01420034 	movhi	r5,2048
   2148c:	297fffc4 	addi	r5,r5,-1
   21490:	0021a880 	call	21a88 <__udivsi3>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   21494:	01200034 	movhi	r4,32768
    for(i=0;i<big_loops;i++)
   21498:	0007883a 	mov	r3,zero
      __asm__ volatile (
   2149c:	213fffc4 	addi	r4,r4,-1
   214a0:	213fffc4 	addi	r4,r4,-1
   214a4:	203ffe1e 	bne	r4,zero,214a0 <alt_busy_sleep+0x34>
    for(i=0;i<big_loops;i++)
   214a8:	18c00044 	addi	r3,r3,1
   214ac:	18bffc16 	blt	r3,r2,214a0 <alt_busy_sleep+0x34>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   214b0:	00fe0034 	movhi	r3,63488
   214b4:	18c00044 	addi	r3,r3,1
   214b8:	10c5383a 	mul	r2,r2,r3
   214bc:	1405883a 	add	r2,r2,r16
   214c0:	1004913a 	slli	r2,r2,4
    __asm__ volatile (
   214c4:	10bfffc4 	addi	r2,r2,-1
   214c8:	103ffe1e 	bne	r2,zero,214c4 <alt_busy_sleep+0x58>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   214cc:	0005883a 	mov	r2,zero
   214d0:	dfc00117 	ldw	ra,4(sp)
   214d4:	dc000017 	ldw	r16,0(sp)
   214d8:	dec00204 	addi	sp,sp,8
   214dc:	f800283a 	ret
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   214e0:	2020913a 	slli	r16,r4,4
    __asm__ volatile (
   214e4:	843fffc4 	addi	r16,r16,-1
   214e8:	043ffe16 	blt	zero,r16,214e4 <alt_busy_sleep+0x78>
   214ec:	003ff706 	br	214cc <alt_busy_sleep+0x60>

000214f0 <alt_dcache_flush>:
void alt_dcache_flush (void* start, alt_u32 len)
{
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   214f0:	2147883a 	add	r3,r4,r5

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   214f4:	2005883a 	mov	r2,r4
   214f8:	10c00a36 	bltu	r2,r3,21524 <alt_dcache_flush+0x34>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   214fc:	208007cc 	andi	r2,r4,31
   21500:	10000726 	beq	r2,zero,21520 <alt_dcache_flush+0x30>
  {
    ALT_FLUSH_DATA(i);
   21504:	20bff844 	addi	r2,r4,-31
   21508:	18800936 	bltu	r3,r2,21530 <alt_dcache_flush+0x40>
   2150c:	288007c4 	addi	r2,r5,31
   21510:	1004d17a 	srli	r2,r2,5
   21514:	1004917a 	slli	r2,r2,5
   21518:	2089883a 	add	r4,r4,r2
   2151c:	2000001b 	flushda	0(r4)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   21520:	f800283a 	ret
    ALT_FLUSH_DATA(i); 
   21524:	1000001b 	flushda	0(r2)
  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   21528:	10800804 	addi	r2,r2,32
   2152c:	003ff206 	br	214f8 <alt_dcache_flush+0x8>
    ALT_FLUSH_DATA(i);
   21530:	0005883a 	mov	r2,zero
   21534:	003ff806 	br	21518 <alt_dcache_flush+0x28>

00021538 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   21538:	0005883a 	mov	r2,zero
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   2153c:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   21540:	10800804 	addi	r2,r2,32
   21544:	10c20018 	cmpnei	r3,r2,2048
   21548:	183ffc1e 	bne	r3,zero,2153c <alt_dcache_flush_all+0x4>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2154c:	f800283a 	ret

00021550 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   21550:	20000226 	beq	r4,zero,2155c <alt_dev_llist_insert+0xc>
   21554:	20800217 	ldw	r2,8(r4)
   21558:	10000b1e 	bne	r2,zero,21588 <alt_dev_llist_insert+0x38>
   2155c:	d0a00517 	ldw	r2,-32748(gp)
   21560:	10001026 	beq	r2,zero,215a4 <alt_dev_llist_insert+0x54>
{
   21564:	deffff04 	addi	sp,sp,-4
   21568:	dfc00015 	stw	ra,0(sp)
   2156c:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
   21570:	00c00584 	movi	r3,22
   21574:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   21578:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   2157c:	dfc00017 	ldw	ra,0(sp)
   21580:	dec00104 	addi	sp,sp,4
   21584:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   21588:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
   2158c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   21590:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   21594:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   21598:	29000015 	stw	r4,0(r5)
  return 0;  
   2159c:	0005883a 	mov	r2,zero
   215a0:	f800283a 	ret
   215a4:	d0a06104 	addi	r2,gp,-32380
    ALT_ERRNO = EINVAL;
   215a8:	00c00584 	movi	r3,22
   215ac:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   215b0:	00bffa84 	movi	r2,-22
}
   215b4:	f800283a 	ret

000215b8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   215b8:	defffb04 	addi	sp,sp,-20
   215bc:	dcc00315 	stw	r19,12(sp)
   215c0:	dc800215 	stw	r18,8(sp)
   215c4:	dc400115 	stw	r17,4(sp)
   215c8:	dc000015 	stw	r16,0(sp)
   215cc:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
   215d0:	2c000017 	ldw	r16,0(r5)
{
   215d4:	2027883a 	mov	r19,r4
   215d8:	2823883a 	mov	r17,r5
  alt_32 len;

  len  = strlen(name) + 1;
   215dc:	00202d00 	call	202d0 <strlen>
   215e0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   215e4:	8440091e 	bne	r16,r17,2160c <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   215e8:	0021883a 	mov	r16,zero
}
   215ec:	8005883a 	mov	r2,r16
   215f0:	dfc00417 	ldw	ra,16(sp)
   215f4:	dcc00317 	ldw	r19,12(sp)
   215f8:	dc800217 	ldw	r18,8(sp)
   215fc:	dc400117 	ldw	r17,4(sp)
   21600:	dc000017 	ldw	r16,0(sp)
   21604:	dec00504 	addi	sp,sp,20
   21608:	f800283a 	ret
    if (!memcmp (next->name, name, len))
   2160c:	81000217 	ldw	r4,8(r16)
   21610:	900d883a 	mov	r6,r18
   21614:	980b883a 	mov	r5,r19
   21618:	002193c0 	call	2193c <memcmp>
   2161c:	103ff326 	beq	r2,zero,215ec <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
   21620:	84000017 	ldw	r16,0(r16)
   21624:	003fef06 	br	215e4 <alt_find_dev+0x2c>

00021628 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   21628:	01440004 	movi	r5,4096
   2162c:	0009883a 	mov	r4,zero
   21630:	00218bc1 	jmpi	218bc <alt_icache_flush>

00021634 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   21634:	00216c01 	jmpi	216c0 <alt_iic_isr_register>

00021638 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
   21638:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2163c:	00bfff84 	movi	r2,-2
   21640:	1884703a 	and	r2,r3,r2
   21644:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   21648:	00800044 	movi	r2,1
   2164c:	d1206517 	ldw	r4,-32364(gp)
   21650:	114a983a 	sll	r5,r2,r5
   21654:	290ab03a 	or	r5,r5,r4
   21658:	d1606515 	stw	r5,-32364(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2165c:	d0a06517 	ldw	r2,-32364(gp)
   21660:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
   21664:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   21668:	0005883a 	mov	r2,zero
   2166c:	f800283a 	ret

00021670 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
   21670:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21674:	00bfff84 	movi	r2,-2
   21678:	1884703a 	and	r2,r3,r2
   2167c:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
   21680:	00bfff84 	movi	r2,-2
   21684:	d1206517 	ldw	r4,-32364(gp)
   21688:	114a183a 	rol	r5,r2,r5
   2168c:	290a703a 	and	r5,r5,r4
   21690:	d1606515 	stw	r5,-32364(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21694:	d0a06517 	ldw	r2,-32364(gp)
   21698:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
   2169c:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   216a0:	0005883a 	mov	r2,zero
   216a4:	f800283a 	ret

000216a8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   216a8:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   216ac:	00800044 	movi	r2,1
   216b0:	1144983a 	sll	r2,r2,r5
   216b4:	10c4703a 	and	r2,r2,r3
}
   216b8:	1004c03a 	cmpne	r2,r2,zero
   216bc:	f800283a 	ret

000216c0 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   216c0:	28800808 	cmpgei	r2,r5,32
   216c4:	1000161e 	bne	r2,zero,21720 <alt_iic_isr_register+0x60>
{
   216c8:	defffe04 	addi	sp,sp,-8
   216cc:	dfc00115 	stw	ra,4(sp)
   216d0:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
   216d4:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   216d8:	00bfff84 	movi	r2,-2
   216dc:	8084703a 	and	r2,r16,r2
   216e0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   216e4:	280690fa 	slli	r3,r5,3
   216e8:	008000b4 	movhi	r2,2
   216ec:	10881404 	addi	r2,r2,8272
   216f0:	10c5883a 	add	r2,r2,r3
   216f4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   216f8:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   216fc:	30000626 	beq	r6,zero,21718 <alt_iic_isr_register+0x58>
   21700:	00216380 	call	21638 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
   21704:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   21708:	dfc00117 	ldw	ra,4(sp)
   2170c:	dc000017 	ldw	r16,0(sp)
   21710:	dec00204 	addi	sp,sp,8
   21714:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   21718:	00216700 	call	21670 <alt_ic_irq_disable>
   2171c:	003ff906 	br	21704 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
   21720:	00bffa84 	movi	r2,-22
}
   21724:	f800283a 	ret

00021728 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   21728:	defff704 	addi	sp,sp,-36
   2172c:	dc400115 	stw	r17,4(sp)
   21730:	2023883a 	mov	r17,r4
   21734:	dfc00515 	stw	ra,20(sp)
   21738:	dd000415 	stw	r20,16(sp)
   2173c:	dcc00315 	stw	r19,12(sp)
   21740:	dc800215 	stw	r18,8(sp)
   21744:	dc000015 	stw	r16,0(sp)
   21748:	d9400615 	stw	r5,24(sp)
   2174c:	d9800715 	stw	r6,28(sp)
   21750:	d9c00815 	stw	r7,32(sp)
	va_list args;
	va_start(args, fmt);
   21754:	dc000604 	addi	r16,sp,24
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   21758:	89000007 	ldb	r4,0(r17)
   2175c:	2000081e 	bne	r4,zero,21780 <alt_printf+0x58>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   21760:	dfc00517 	ldw	ra,20(sp)
   21764:	dd000417 	ldw	r20,16(sp)
   21768:	dcc00317 	ldw	r19,12(sp)
   2176c:	dc800217 	ldw	r18,8(sp)
   21770:	dc400117 	ldw	r17,4(sp)
   21774:	dc000017 	ldw	r16,0(sp)
   21778:	dec00904 	addi	sp,sp,36
   2177c:	f800283a 	ret
        if (c != '%')
   21780:	20800960 	cmpeqi	r2,r4,37
   21784:	1000031e 	bne	r2,zero,21794 <alt_printf+0x6c>
    while ((c = *w++) != 0)
   21788:	8c400044 	addi	r17,r17,1
            alt_putchar(c);
   2178c:	002186c0 	call	2186c <alt_putchar>
   21790:	003ff106 	br	21758 <alt_printf+0x30>
            if ((c = *w++) != 0)
   21794:	88800047 	ldb	r2,1(r17)
   21798:	103ff126 	beq	r2,zero,21760 <alt_printf+0x38>
                if (c == '%')
   2179c:	10c00958 	cmpnei	r3,r2,37
   217a0:	1800031e 	bne	r3,zero,217b0 <alt_printf+0x88>
                    alt_putchar(c);
   217a4:	01000944 	movi	r4,37
                        alt_putchar('0');
   217a8:	002186c0 	call	2186c <alt_putchar>
                        continue;
   217ac:	00000606 	br	217c8 <alt_printf+0xa0>
                else if (c == 'c')
   217b0:	10c018d8 	cmpnei	r3,r2,99
   217b4:	1800061e 	bne	r3,zero,217d0 <alt_printf+0xa8>
                    alt_putchar(v);
   217b8:	81000017 	ldw	r4,0(r16)
                    int v = va_arg(args, int);
   217bc:	84800104 	addi	r18,r16,4
   217c0:	9021883a 	mov	r16,r18
                    alt_putchar(v);
   217c4:	002186c0 	call	2186c <alt_putchar>
            if ((c = *w++) != 0)
   217c8:	8c400084 	addi	r17,r17,2
   217cc:	003fe206 	br	21758 <alt_printf+0x30>
                else if (c == 'x')
   217d0:	10c01e18 	cmpnei	r3,r2,120
   217d4:	18001c1e 	bne	r3,zero,21848 <alt_printf+0x120>
                    unsigned long v = va_arg(args, unsigned long);
   217d8:	84c00017 	ldw	r19,0(r16)
   217dc:	84000104 	addi	r16,r16,4
                    if (v == 0)
   217e0:	9800141e 	bne	r19,zero,21834 <alt_printf+0x10c>
                        alt_putchar('0');
   217e4:	01000c04 	movi	r4,48
   217e8:	003fef06 	br	217a8 <alt_printf+0x80>
                        digit_shift -= 4;
   217ec:	94bfff04 	addi	r18,r18,-4
                    while (!(v & (0xF << digit_shift)))
   217f0:	1c84983a 	sll	r2,r3,r18
   217f4:	14c4703a 	and	r2,r2,r19
   217f8:	103ffc26 	beq	r2,zero,217ec <alt_printf+0xc4>
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   217fc:	050003c4 	movi	r20,15
                    for (; digit_shift >= 0; digit_shift -= 4)
   21800:	903ff116 	blt	r18,zero,217c8 <alt_printf+0xa0>
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   21804:	a484983a 	sll	r2,r20,r18
   21808:	14c4703a 	and	r2,r2,r19
   2180c:	1484d83a 	srl	r2,r2,r18
                        if (digit <= 9)
   21810:	10c002a8 	cmpgeui	r3,r2,10
   21814:	18000a1e 	bne	r3,zero,21840 <alt_printf+0x118>
                            c = '0' + digit;
   21818:	10800c04 	addi	r2,r2,48
                        alt_putchar(c);
   2181c:	11003fcc 	andi	r4,r2,255
   21820:	2100201c 	xori	r4,r4,128
   21824:	213fe004 	addi	r4,r4,-128
   21828:	002186c0 	call	2186c <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   2182c:	94bfff04 	addi	r18,r18,-4
   21830:	003ff306 	br	21800 <alt_printf+0xd8>
                    digit_shift = 28;
   21834:	04800704 	movi	r18,28
                    while (!(v & (0xF << digit_shift)))
   21838:	00c003c4 	movi	r3,15
   2183c:	003fec06 	br	217f0 <alt_printf+0xc8>
                            c = 'a' + digit - 10;
   21840:	108015c4 	addi	r2,r2,87
   21844:	003ff506 	br	2181c <alt_printf+0xf4>
                else if (c == 's')
   21848:	10801ce0 	cmpeqi	r2,r2,115
   2184c:	103fde26 	beq	r2,zero,217c8 <alt_printf+0xa0>
                    char *s = va_arg(args, char *);
   21850:	84800017 	ldw	r18,0(r16)
   21854:	84000104 	addi	r16,r16,4
                    while(*s)
   21858:	91000007 	ldb	r4,0(r18)
   2185c:	203fda26 	beq	r4,zero,217c8 <alt_printf+0xa0>
                      alt_putchar(*s++);
   21860:	94800044 	addi	r18,r18,1
   21864:	002186c0 	call	2186c <alt_putchar>
   21868:	003ffb06 	br	21858 <alt_printf+0x130>

0002186c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   2186c:	defffd04 	addi	sp,sp,-12
   21870:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   21874:	d90000c5 	stb	r4,3(sp)
{
   21878:	2021883a 	mov	r16,r4

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   2187c:	010000b4 	movhi	r4,2
   21880:	000f883a 	mov	r7,zero
   21884:	01800044 	movi	r6,1
   21888:	d94000c4 	addi	r5,sp,3
   2188c:	2107aa04 	addi	r4,r4,7848
{
   21890:	dfc00215 	stw	ra,8(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   21894:	00205240 	call	20524 <altera_avalon_jtag_uart_write>
   21898:	10ffffe0 	cmpeqi	r3,r2,-1
   2189c:	1800011e 	bne	r3,zero,218a4 <alt_putchar+0x38>
        return -1;
    }
    return c;
   218a0:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   218a4:	dfc00217 	ldw	ra,8(sp)
   218a8:	dc000117 	ldw	r16,4(sp)
   218ac:	dec00304 	addi	sp,sp,12
   218b0:	f800283a 	ret

000218b4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   218b4:	000170fa 	wrctl	ienable,zero
}
   218b8:	f800283a 	ret

000218bc <alt_icache_flush>:

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   218bc:	28840070 	cmpltui	r2,r5,4097
   218c0:	1000011e 	bne	r2,zero,218c8 <alt_icache_flush+0xc>
   218c4:	01440004 	movi	r5,4096
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   218c8:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   218cc:	2005883a 	mov	r2,r4
   218d0:	11400c36 	bltu	r2,r5,21904 <alt_icache_flush+0x48>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   218d4:	208007cc 	andi	r2,r4,31
   218d8:	10000826 	beq	r2,zero,218fc <alt_icache_flush+0x40>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   218dc:	20bff844 	addi	r2,r4,-31
   218e0:	28800b36 	bltu	r5,r2,21910 <alt_icache_flush+0x54>
   218e4:	290bc83a 	sub	r5,r5,r4
   218e8:	294007c4 	addi	r5,r5,31
   218ec:	280ad17a 	srli	r5,r5,5
   218f0:	280a917a 	slli	r5,r5,5
   218f4:	2149883a 	add	r4,r4,r5
   218f8:	2000603a 	flushi	r4
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   218fc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   21900:	f800283a 	ret
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   21904:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   21908:	10800804 	addi	r2,r2,32
   2190c:	003ff006 	br	218d0 <alt_icache_flush+0x14>
    __asm__ volatile ("flushi %0" :: "r" (i));
   21910:	000b883a 	mov	r5,zero
   21914:	003ff706 	br	218f4 <alt_icache_flush+0x38>

00021918 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   21918:	213ffe84 	addi	r4,r4,-6
   2191c:	20800428 	cmpgeui	r2,r4,16
   21920:	1000041e 	bne	r2,zero,21934 <alt_exception_cause_generated_bad_addr+0x1c>
   21924:	00a2c8d4 	movui	r2,35619
   21928:	1104d83a 	srl	r2,r2,r4
   2192c:	1080004c 	andi	r2,r2,1
   21930:	f800283a 	ret
   21934:	0005883a 	mov	r2,zero
    return 0;

  default:
    return 0;
  }
}
   21938:	f800283a 	ret

0002193c <memcmp>:
   2193c:	0007883a 	mov	r3,zero
   21940:	30c0021e 	bne	r6,r3,2194c <memcmp+0x10>
   21944:	0005883a 	mov	r2,zero
   21948:	f800283a 	ret
   2194c:	20c5883a 	add	r2,r4,r3
   21950:	18c00044 	addi	r3,r3,1
   21954:	28cf883a 	add	r7,r5,r3
   21958:	10800003 	ldbu	r2,0(r2)
   2195c:	39ffffc3 	ldbu	r7,-1(r7)
   21960:	11fff726 	beq	r2,r7,21940 <memcmp+0x4>
   21964:	11c5c83a 	sub	r2,r2,r7
   21968:	f800283a 	ret

0002196c <memcpy>:
   2196c:	2005883a 	mov	r2,r4
   21970:	0007883a 	mov	r3,zero
   21974:	30c0011e 	bne	r6,r3,2197c <memcpy+0x10>
   21978:	f800283a 	ret
   2197c:	28cf883a 	add	r7,r5,r3
   21980:	39c00003 	ldbu	r7,0(r7)
   21984:	10c9883a 	add	r4,r2,r3
   21988:	18c00044 	addi	r3,r3,1
   2198c:	21c00005 	stb	r7,0(r4)
   21990:	003ff806 	br	21974 <memcpy+0x8>

00021994 <__divsi3>:
   21994:	20001a16 	blt	r4,zero,21a00 <__divsi3+0x6c>
   21998:	000f883a 	mov	r7,zero
   2199c:	2800020e 	bge	r5,zero,219a8 <__divsi3+0x14>
   219a0:	014bc83a 	sub	r5,zero,r5
   219a4:	39c0005c 	xori	r7,r7,1
   219a8:	200d883a 	mov	r6,r4
   219ac:	00c00044 	movi	r3,1
   219b0:	2900092e 	bgeu	r5,r4,219d8 <__divsi3+0x44>
   219b4:	00800804 	movi	r2,32
   219b8:	00c00044 	movi	r3,1
   219bc:	00000106 	br	219c4 <__divsi3+0x30>
   219c0:	10001226 	beq	r2,zero,21a0c <__divsi3+0x78>
   219c4:	294b883a 	add	r5,r5,r5
   219c8:	10bfffc4 	addi	r2,r2,-1
   219cc:	18c7883a 	add	r3,r3,r3
   219d0:	293ffb36 	bltu	r5,r4,219c0 <__divsi3+0x2c>
   219d4:	18000d26 	beq	r3,zero,21a0c <__divsi3+0x78>
   219d8:	0005883a 	mov	r2,zero
   219dc:	31400236 	bltu	r6,r5,219e8 <__divsi3+0x54>
   219e0:	314dc83a 	sub	r6,r6,r5
   219e4:	10c4b03a 	or	r2,r2,r3
   219e8:	1806d07a 	srli	r3,r3,1
   219ec:	280ad07a 	srli	r5,r5,1
   219f0:	183ffa1e 	bne	r3,zero,219dc <__divsi3+0x48>
   219f4:	38000126 	beq	r7,zero,219fc <__divsi3+0x68>
   219f8:	0085c83a 	sub	r2,zero,r2
   219fc:	f800283a 	ret
   21a00:	0109c83a 	sub	r4,zero,r4
   21a04:	01c00044 	movi	r7,1
   21a08:	003fe406 	br	2199c <__divsi3+0x8>
   21a0c:	0005883a 	mov	r2,zero
   21a10:	003ff806 	br	219f4 <__divsi3+0x60>

00021a14 <__modsi3>:
   21a14:	20001716 	blt	r4,zero,21a74 <__modsi3+0x60>
   21a18:	000f883a 	mov	r7,zero
   21a1c:	2005883a 	mov	r2,r4
   21a20:	2800010e 	bge	r5,zero,21a28 <__modsi3+0x14>
   21a24:	014bc83a 	sub	r5,zero,r5
   21a28:	00c00044 	movi	r3,1
   21a2c:	2900092e 	bgeu	r5,r4,21a54 <__modsi3+0x40>
   21a30:	01800804 	movi	r6,32
   21a34:	00c00044 	movi	r3,1
   21a38:	00000106 	br	21a40 <__modsi3+0x2c>
   21a3c:	30001026 	beq	r6,zero,21a80 <__modsi3+0x6c>
   21a40:	294b883a 	add	r5,r5,r5
   21a44:	31bfffc4 	addi	r6,r6,-1
   21a48:	18c7883a 	add	r3,r3,r3
   21a4c:	293ffb36 	bltu	r5,r4,21a3c <__modsi3+0x28>
   21a50:	18000b26 	beq	r3,zero,21a80 <__modsi3+0x6c>
   21a54:	1806d07a 	srli	r3,r3,1
   21a58:	11400136 	bltu	r2,r5,21a60 <__modsi3+0x4c>
   21a5c:	1145c83a 	sub	r2,r2,r5
   21a60:	280ad07a 	srli	r5,r5,1
   21a64:	183ffb1e 	bne	r3,zero,21a54 <__modsi3+0x40>
   21a68:	38000126 	beq	r7,zero,21a70 <__modsi3+0x5c>
   21a6c:	0085c83a 	sub	r2,zero,r2
   21a70:	f800283a 	ret
   21a74:	0109c83a 	sub	r4,zero,r4
   21a78:	01c00044 	movi	r7,1
   21a7c:	003fe706 	br	21a1c <__modsi3+0x8>
   21a80:	2005883a 	mov	r2,r4
   21a84:	003ff806 	br	21a68 <__modsi3+0x54>

00021a88 <__udivsi3>:
   21a88:	200d883a 	mov	r6,r4
   21a8c:	2900152e 	bgeu	r5,r4,21ae4 <__udivsi3+0x5c>
   21a90:	28001416 	blt	r5,zero,21ae4 <__udivsi3+0x5c>
   21a94:	00800804 	movi	r2,32
   21a98:	00c00044 	movi	r3,1
   21a9c:	00000206 	br	21aa8 <__udivsi3+0x20>
   21aa0:	10000e26 	beq	r2,zero,21adc <__udivsi3+0x54>
   21aa4:	28000416 	blt	r5,zero,21ab8 <__udivsi3+0x30>
   21aa8:	294b883a 	add	r5,r5,r5
   21aac:	10bfffc4 	addi	r2,r2,-1
   21ab0:	18c7883a 	add	r3,r3,r3
   21ab4:	293ffa36 	bltu	r5,r4,21aa0 <__udivsi3+0x18>
   21ab8:	18000826 	beq	r3,zero,21adc <__udivsi3+0x54>
   21abc:	0005883a 	mov	r2,zero
   21ac0:	31400236 	bltu	r6,r5,21acc <__udivsi3+0x44>
   21ac4:	314dc83a 	sub	r6,r6,r5
   21ac8:	10c4b03a 	or	r2,r2,r3
   21acc:	1806d07a 	srli	r3,r3,1
   21ad0:	280ad07a 	srli	r5,r5,1
   21ad4:	183ffa1e 	bne	r3,zero,21ac0 <__udivsi3+0x38>
   21ad8:	f800283a 	ret
   21adc:	0005883a 	mov	r2,zero
   21ae0:	f800283a 	ret
   21ae4:	00c00044 	movi	r3,1
   21ae8:	003ff406 	br	21abc <__udivsi3+0x34>

00021aec <__umodsi3>:
   21aec:	2005883a 	mov	r2,r4
   21af0:	2900132e 	bgeu	r5,r4,21b40 <__umodsi3+0x54>
   21af4:	28001216 	blt	r5,zero,21b40 <__umodsi3+0x54>
   21af8:	01800804 	movi	r6,32
   21afc:	00c00044 	movi	r3,1
   21b00:	00000206 	br	21b0c <__umodsi3+0x20>
   21b04:	30000c26 	beq	r6,zero,21b38 <__umodsi3+0x4c>
   21b08:	28000416 	blt	r5,zero,21b1c <__umodsi3+0x30>
   21b0c:	294b883a 	add	r5,r5,r5
   21b10:	31bfffc4 	addi	r6,r6,-1
   21b14:	18c7883a 	add	r3,r3,r3
   21b18:	293ffa36 	bltu	r5,r4,21b04 <__umodsi3+0x18>
   21b1c:	18000626 	beq	r3,zero,21b38 <__umodsi3+0x4c>
   21b20:	1806d07a 	srli	r3,r3,1
   21b24:	11400136 	bltu	r2,r5,21b2c <__umodsi3+0x40>
   21b28:	1145c83a 	sub	r2,r2,r5
   21b2c:	280ad07a 	srli	r5,r5,1
   21b30:	183ffb1e 	bne	r3,zero,21b20 <__umodsi3+0x34>
   21b34:	f800283a 	ret
   21b38:	2005883a 	mov	r2,r4
   21b3c:	f800283a 	ret
   21b40:	00c00044 	movi	r3,1
   21b44:	003ff606 	br	21b20 <__umodsi3+0x34>
