
pedo.elf:     file format elf32-littlenios2
pedo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00004460 memsz 0x00004460 flags r-x
    LOAD off    0x00005480 vaddr 0x00014480 paddr 0x0001461c align 2**12
         filesz 0x0000019c memsz 0x0000019c flags rw-
    LOAD off    0x000007b8 vaddr 0x000147b8 paddr 0x000147b8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  0000561c  2**0
                  CONTENTS
  2 .text         00003d08  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000758  00013d28  00013d28  00004d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000019c  00014480  0001461c  00005480  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000147b8  000147b8  000057b8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000147c8  000147c8  0000561c  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  0000561c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004e8  00000000  00000000  00005650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000089ae  00000000  00000000  00005b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002ced  00000000  00000000  0000e4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000055a6  00000000  00000000  000111d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000008a0  00000000  00000000  0001677c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000157a  00000000  00000000  0001701c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00018598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  000185a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000073e0  00000000  00000000  000185c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b37  00000000  00000000  0001f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00001247  00000000  00000000  000204df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00022f05  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  00022f08  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00022f0b  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00022f0c  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00022f0d  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00022f16  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00022f1f  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  00022f28  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000036  00000000  00000000  00022f3a  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003e1f6  00000000  00000000  00022f70  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00013d28 l    d  .rodata	00000000 .rodata
00014480 l    d  .rwdata	00000000 .rwdata
000147b8 l    d  .bss	00000000 .bss
000147c8 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
000145f0 l     O .rwdata	00000008 one
000145e8 l     O .rwdata	00000008 tiny
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00014480 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00013288 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014564 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00013c0c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
000139c0 g     F .text	0000002c alt_main
00010590 g     F .text	000000ac sqrt
0001461c g       *ABS*	00000000 __flash_rwdata_start
00010150 g     F .text	00000020 userA
00013240 g     F .text	00000048 printf
00014600 g     O .rwdata	00000004 jtag_uart
00013cf0 g     F .text	00000008 altera_nios2_gen2_irq_init
000131d0 g     F .text	0000000c __errno
00010000 g     F .entry	0000000c __reset
00013b00 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
000147b8 g     O .bss	00000004 errno
000147c0 g     O .bss	00000004 alt_argv
0001c5e8 g       *ABS*	00000000 _gp
00014590 g     O .rwdata	00000030 alt_fd_list
00013c7c g     F .text	00000070 alt_find_dev
000131dc g     F .text	00000028 memcpy
000130c8 g     F .text	000000b8 .hidden __floatsidf
00011d58 g     F .text	000000f8 .hidden __ltdf2
00013204 g     F .text	0000003c _printf_r
00010a80 g     F .text	00000064 .hidden __udivsi3
00010178 g     F .text	00000030 insertA
00014604 g     O .rwdata	00000004 alt_max_fd
00010b68 g     F .text	00000904 .hidden __adddf3
000145f8 g     O .rwdata	00000004 _global_impure_ptr
000147c8 g       *ABS*	00000000 __bss_end
000145c0 g     O .rwdata	00000028 alt_dev_null
00013c08 g     F .text	00000004 alt_dcache_flush_all
00013048 g     F .text	00000080 .hidden __fixdfsi
0001461c g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00014608 g     O .rwdata	00000008 alt_dev_list
000139ec g     F .text	0000005c write
00014480 g       *ABS*	00000000 __ram_rodata_end
000102b0 g     F .text	00000098 firAccelerometer
00011d58 g     F .text	000000f8 .hidden __ledf2
00010ae4 g     F .text	0000005c .hidden __umodsi3
000147c8 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
00013180 g     F .text	00000050 .hidden __clzsi2
000101a8 g     F .text	00000060 insertAccelerometer
00013a78 g     F .text	00000030 altera_avalon_jtag_uart_write
000132f4 g     F .text	0000051c ___vfprintf_internal_r
00010020 g     F .text	0000003c _start
00013a68 g     F .text	00000010 alt_sys_init
00013ab0 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00010348 g     F .text	00000040 filter
00010208 g     F .text	000000a8 userAccelerationGravitationalDirection
00010b40 g     F .text	00000028 .hidden __mulsi3
00014480 g       *ABS*	00000000 __ram_rwdata_start
00013d28 g       *ABS*	00000000 __ram_rodata_start
00010170 g     F .text	00000008 gravitationalA
00013b58 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00013cf8 g     F .text	00000030 memcmp
000147c8 g       *ABS*	00000000 __alt_stack_base
0001146c g     F .text	000008ec .hidden __divdf3
00011e50 g     F .text	00000808 .hidden __muldf3
00013c14 g     F .text	00000068 alt_dev_llist_insert
00013828 g     F .text	000000a8 __sfvwrite_small_dev
000147b8 g       *ABS*	00000000 __bss_start
000103b0 g     F .text	000001e0 main
000147bc g     O .bss	00000004 alt_envp
00014618 g     O .rwdata	00000004 alt_errno
00010388 g     F .text	00000028 run_filter
0001098c g     F .text	00000080 .hidden __divsi3
00013d28 g       *ABS*	00000000 __flash_rodata_start
00013a48 g     F .text	00000020 alt_irq_init
00014374 g     O .rodata	00000100 .hidden __clz_tab
000138ec g     F .text	00000050 _write_r
000145fc g     O .rwdata	00000004 _impure_ptr
000147c4 g     O .bss	00000004 alt_argc
00014610 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00013aa8 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
0001063c g     F .text	00000350 __ieee754_sqrt
0001461c g       *ABS*	00000000 _edata
000147c8 g       *ABS*	00000000 _end
0001008c g     F .text	00000094 filterProduct
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010a0c g     F .text	00000074 .hidden __modsi3
00013bb0 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00012ff4 g     F .text	00000054 .hidden __unorddf2
0001005c g     F .text	00000030 insert
0001000c g       .entry	00000000 _exit
00013ac4 g     F .text	00000020 alt_up_accelerometer_spi_read
00013ae4 g     F .text	0000001c alt_up_accelerometer_spi_write
000138d0 g     F .text	0000001c strlen
00013cec g     F .text	00000004 alt_icache_flush_all
00013810 g     F .text	00000018 __vfprintf_internal
00012658 g     F .text	0000099c .hidden __subdf3
0001393c g     F .text	00000084 alt_load
00010120 g     F .text	00000030 fir



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6b17a14 	ori	gp,gp,50664
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1091ee14 	ori	r2,r2,18360

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18d1f214 	ori	r3,r3,18376

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	001393c0 	call	1393c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00139c00 	call	139c0 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <insert>:
struct ListConstants{
    long int data[137];
};

void insert(struct ListAxis* list, long int data){
    list->cursor--;
   1005c:	20808917 	ldw	r2,548(r4)
   10060:	10bfffc4 	addi	r2,r2,-1
   10064:	20808915 	stw	r2,548(r4)
    if(list->cursor < 0){
   10068:	1000030e 	bge	r2,zero,10078 <insert+0x1c>
        list->cursor += list->length;
   1006c:	20c08a17 	ldw	r3,552(r4)
   10070:	1885883a 	add	r2,r3,r2
   10074:	20808915 	stw	r2,548(r4)
    }
    list->data[list->cursor] = data;
   10078:	20808917 	ldw	r2,548(r4)
   1007c:	100490ba 	slli	r2,r2,2
   10080:	2089883a 	add	r4,r4,r2
   10084:	21400015 	stw	r5,0(r4)
}
   10088:	f800283a 	ret

0001008c <filterProduct>:

long int filterProduct(struct ListAxis* a, struct ListConstants* alpha){
   1008c:	defffa04 	addi	sp,sp,-24
   10090:	dd000415 	stw	r20,16(sp)
    long int total = 0;
    int cursor;
    long int data;
    for(int i = 0; i < a->length; i++){
   10094:	25008a17 	ldw	r20,552(r4)
long int filterProduct(struct ListAxis* a, struct ListConstants* alpha){
   10098:	dcc00315 	stw	r19,12(sp)
   1009c:	dc800215 	stw	r18,8(sp)
   100a0:	dc400115 	stw	r17,4(sp)
   100a4:	dc000015 	stw	r16,0(sp)
   100a8:	dfc00515 	stw	ra,20(sp)
   100ac:	2023883a 	mov	r17,r4
   100b0:	2827883a 	mov	r19,r5
    for(int i = 0; i < a->length; i++){
   100b4:	0021883a 	mov	r16,zero
    long int total = 0;
   100b8:	0025883a 	mov	r18,zero
    for(int i = 0; i < a->length; i++){
   100bc:	85000916 	blt	r16,r20,100e4 <filterProduct+0x58>
        data = ((a->data[cursor])*(alpha->data[i]));
        data >>= 19;
        total += data;
    }
    return total;
}
   100c0:	9005883a 	mov	r2,r18
   100c4:	dfc00517 	ldw	ra,20(sp)
   100c8:	dd000417 	ldw	r20,16(sp)
   100cc:	dcc00317 	ldw	r19,12(sp)
   100d0:	dc800217 	ldw	r18,8(sp)
   100d4:	dc400117 	ldw	r17,4(sp)
   100d8:	dc000017 	ldw	r16,0(sp)
   100dc:	dec00604 	addi	sp,sp,24
   100e0:	f800283a 	ret
        cursor = (i + a->cursor) % a->length;
   100e4:	89008917 	ldw	r4,548(r17)
   100e8:	a00b883a 	mov	r5,r20
   100ec:	8109883a 	add	r4,r16,r4
   100f0:	0010a0c0 	call	10a0c <__modsi3>
        data = ((a->data[cursor])*(alpha->data[i]));
   100f4:	800690ba 	slli	r3,r16,2
   100f8:	100490ba 	slli	r2,r2,2
    for(int i = 0; i < a->length; i++){
   100fc:	84000044 	addi	r16,r16,1
        data = ((a->data[cursor])*(alpha->data[i]));
   10100:	98c7883a 	add	r3,r19,r3
   10104:	8885883a 	add	r2,r17,r2
   10108:	19400017 	ldw	r5,0(r3)
   1010c:	11000017 	ldw	r4,0(r2)
   10110:	0010b400 	call	10b40 <__mulsi3>
        data >>= 19;
   10114:	1005d4fa 	srai	r2,r2,19
        total += data;
   10118:	90a5883a 	add	r18,r18,r2
    for(int i = 0; i < a->length; i++){
   1011c:	003fe706 	br	100bc <filterProduct+0x30>

00010120 <fir>:
    struct ListAxis* a;
    struct ListConstants* alpha;
    long int firA;
};

void fir(struct Acceleration* acceleration){
   10120:	defffe04 	addi	sp,sp,-8
   10124:	dc000015 	stw	r16,0(sp)
    acceleration->firA = filterProduct(acceleration->a,acceleration->alpha);
   10128:	21400117 	ldw	r5,4(r4)
void fir(struct Acceleration* acceleration){
   1012c:	2021883a 	mov	r16,r4
    acceleration->firA = filterProduct(acceleration->a,acceleration->alpha);
   10130:	21000017 	ldw	r4,0(r4)
void fir(struct Acceleration* acceleration){
   10134:	dfc00115 	stw	ra,4(sp)
    acceleration->firA = filterProduct(acceleration->a,acceleration->alpha);
   10138:	001008c0 	call	1008c <filterProduct>
   1013c:	80800215 	stw	r2,8(r16)
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret

00010150 <userA>:

long int userA(struct Acceleration* acceleration){
    return (acceleration->a->data[acceleration->a->cursor] - acceleration->firA);
   10150:	20800017 	ldw	r2,0(r4)
   10154:	10c08917 	ldw	r3,548(r2)
   10158:	180690ba 	slli	r3,r3,2
   1015c:	10c5883a 	add	r2,r2,r3
   10160:	10c00017 	ldw	r3,0(r2)
   10164:	20800217 	ldw	r2,8(r4)
}
   10168:	1885c83a 	sub	r2,r3,r2
   1016c:	f800283a 	ret

00010170 <gravitationalA>:

long int gravitationalA(struct Acceleration* acceleration){
    return (acceleration->firA);
}
   10170:	20800217 	ldw	r2,8(r4)
   10174:	f800283a 	ret

00010178 <insertA>:
    struct ListAccelerometer* a;
    struct ListConstantsAccelerometer* alpha;
};

void insertA(struct ListAccelerometer* list, long int data){
    list->cursor--;
   10178:	20810217 	ldw	r2,1032(r4)
   1017c:	10bfffc4 	addi	r2,r2,-1
   10180:	20810215 	stw	r2,1032(r4)
    if(list->cursor < 0){
   10184:	1000030e 	bge	r2,zero,10194 <insertA+0x1c>
        list->cursor += list->length;
   10188:	20c10317 	ldw	r3,1036(r4)
   1018c:	1885883a 	add	r2,r3,r2
   10190:	20810215 	stw	r2,1032(r4)
    }
    list->data[list->cursor] = data;
   10194:	20810217 	ldw	r2,1032(r4)
   10198:	100490ba 	slli	r2,r2,2
   1019c:	2089883a 	add	r4,r4,r2
   101a0:	21400015 	stw	r5,0(r4)
}
   101a4:	f800283a 	ret

000101a8 <insertAccelerometer>:

void insertAccelerometer(struct Accelerometer* accelerometer, long int x, long int y, long int z){
    insert(accelerometer->x->a,x);
   101a8:	20800017 	ldw	r2,0(r4)
void insertAccelerometer(struct Accelerometer* accelerometer, long int x, long int y, long int z){
   101ac:	defffc04 	addi	sp,sp,-16
   101b0:	dc000015 	stw	r16,0(sp)
   101b4:	2021883a 	mov	r16,r4
    insert(accelerometer->x->a,x);
   101b8:	11000017 	ldw	r4,0(r2)
void insertAccelerometer(struct Accelerometer* accelerometer, long int x, long int y, long int z){
   101bc:	dfc00315 	stw	ra,12(sp)
   101c0:	dc800215 	stw	r18,8(sp)
   101c4:	dc400115 	stw	r17,4(sp)
   101c8:	3025883a 	mov	r18,r6
   101cc:	3823883a 	mov	r17,r7
    insert(accelerometer->x->a,x);
   101d0:	001005c0 	call	1005c <insert>
    insert(accelerometer->y->a,y);
   101d4:	80800117 	ldw	r2,4(r16)
   101d8:	900b883a 	mov	r5,r18
   101dc:	11000017 	ldw	r4,0(r2)
   101e0:	001005c0 	call	1005c <insert>
    insert(accelerometer->z->a,z);
   101e4:	80800217 	ldw	r2,8(r16)
   101e8:	880b883a 	mov	r5,r17
   101ec:	11000017 	ldw	r4,0(r2)
}
   101f0:	dfc00317 	ldw	ra,12(sp)
   101f4:	dc800217 	ldw	r18,8(sp)
   101f8:	dc400117 	ldw	r17,4(sp)
   101fc:	dc000017 	ldw	r16,0(sp)
   10200:	dec00404 	addi	sp,sp,16
    insert(accelerometer->z->a,z);
   10204:	001005c1 	jmpi	1005c <insert>

00010208 <userAccelerationGravitationalDirection>:

long int userAccelerationGravitationalDirection(struct Accelerometer* accelerometer){
   10208:	defffb04 	addi	sp,sp,-20
   1020c:	dcc00315 	stw	r19,12(sp)
    fir(accelerometer->x);
   10210:	24c00017 	ldw	r19,0(r4)
long int userAccelerationGravitationalDirection(struct Accelerometer* accelerometer){
   10214:	dc000015 	stw	r16,0(sp)
   10218:	2021883a 	mov	r16,r4
    fir(accelerometer->x);
   1021c:	9809883a 	mov	r4,r19
long int userAccelerationGravitationalDirection(struct Accelerometer* accelerometer){
   10220:	dfc00415 	stw	ra,16(sp)
   10224:	dc800215 	stw	r18,8(sp)
   10228:	dc400115 	stw	r17,4(sp)
    fir(accelerometer->x);
   1022c:	00101200 	call	10120 <fir>
    fir(accelerometer->y);
   10230:	84400117 	ldw	r17,4(r16)
   10234:	8809883a 	mov	r4,r17
   10238:	00101200 	call	10120 <fir>
    fir(accelerometer->z);
   1023c:	84800217 	ldw	r18,8(r16)
   10240:	9009883a 	mov	r4,r18
   10244:	00101200 	call	10120 <fir>
    long int x_sum = userA(accelerometer->x) * gravitationalA(accelerometer->x);
   10248:	9809883a 	mov	r4,r19
   1024c:	00101500 	call	10150 <userA>
   10250:	99400217 	ldw	r5,8(r19)
   10254:	1009883a 	mov	r4,r2
   10258:	0010b400 	call	10b40 <__mulsi3>
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
   1025c:	8809883a 	mov	r4,r17
    long int x_sum = userA(accelerometer->x) * gravitationalA(accelerometer->x);
   10260:	1021883a 	mov	r16,r2
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
   10264:	00101500 	call	10150 <userA>
   10268:	89400217 	ldw	r5,8(r17)
   1026c:	1009883a 	mov	r4,r2
   10270:	0010b400 	call	10b40 <__mulsi3>
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
   10274:	9009883a 	mov	r4,r18
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
   10278:	1023883a 	mov	r17,r2
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
   1027c:	00101500 	call	10150 <userA>
   10280:	91400217 	ldw	r5,8(r18)
   10284:	1009883a 	mov	r4,r2
    return (x_sum + y_sum + z_sum);
   10288:	8461883a 	add	r16,r16,r17
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
   1028c:	0010b400 	call	10b40 <__mulsi3>
}
   10290:	1405883a 	add	r2,r2,r16
   10294:	dfc00417 	ldw	ra,16(sp)
   10298:	dcc00317 	ldw	r19,12(sp)
   1029c:	dc800217 	ldw	r18,8(sp)
   102a0:	dc400117 	ldw	r17,4(sp)
   102a4:	dc000017 	ldw	r16,0(sp)
   102a8:	dec00504 	addi	sp,sp,20
   102ac:	f800283a 	ret

000102b0 <firAccelerometer>:

long int firAccelerometer(struct Accelerometer* accelerometer){
   102b0:	defffa04 	addi	sp,sp,-24
   102b4:	dcc00315 	stw	r19,12(sp)
    long int total = 0;
    long int data;
    int cursor;
    for(int i = 0; i < accelerometer->a->length; i++){
   102b8:	24c00317 	ldw	r19,12(r4)
long int firAccelerometer(struct Accelerometer* accelerometer){
   102bc:	dd000415 	stw	r20,16(sp)
   102c0:	dc800215 	stw	r18,8(sp)
    for(int i = 0; i < accelerometer->a->length; i++){
   102c4:	9d010317 	ldw	r20,1036(r19)
long int firAccelerometer(struct Accelerometer* accelerometer){
   102c8:	dc400115 	stw	r17,4(sp)
   102cc:	dc000015 	stw	r16,0(sp)
   102d0:	dfc00515 	stw	ra,20(sp)
   102d4:	2023883a 	mov	r17,r4
    for(int i = 0; i < accelerometer->a->length; i++){
   102d8:	0021883a 	mov	r16,zero
    long int total = 0;
   102dc:	0025883a 	mov	r18,zero
    for(int i = 0; i < accelerometer->a->length; i++){
   102e0:	85000916 	blt	r16,r20,10308 <firAccelerometer+0x58>
        long int data = ((accelerometer->a->data[cursor])*(accelerometer->alpha->data[i]));
        data >>= 18;
        total += data;
    }
    return total;
}
   102e4:	9005883a 	mov	r2,r18
   102e8:	dfc00517 	ldw	ra,20(sp)
   102ec:	dd000417 	ldw	r20,16(sp)
   102f0:	dcc00317 	ldw	r19,12(sp)
   102f4:	dc800217 	ldw	r18,8(sp)
   102f8:	dc400117 	ldw	r17,4(sp)
   102fc:	dc000017 	ldw	r16,0(sp)
   10300:	dec00604 	addi	sp,sp,24
   10304:	f800283a 	ret
        cursor = (i + accelerometer->a->cursor) % accelerometer->a->length;
   10308:	99010217 	ldw	r4,1032(r19)
   1030c:	a00b883a 	mov	r5,r20
   10310:	8109883a 	add	r4,r16,r4
   10314:	0010a0c0 	call	10a0c <__modsi3>
        long int data = ((accelerometer->a->data[cursor])*(accelerometer->alpha->data[i]));
   10318:	800890ba 	slli	r4,r16,2
   1031c:	100490ba 	slli	r2,r2,2
   10320:	88c00417 	ldw	r3,16(r17)
    for(int i = 0; i < accelerometer->a->length; i++){
   10324:	84000044 	addi	r16,r16,1
        long int data = ((accelerometer->a->data[cursor])*(accelerometer->alpha->data[i]));
   10328:	9885883a 	add	r2,r19,r2
   1032c:	1907883a 	add	r3,r3,r4
   10330:	19400017 	ldw	r5,0(r3)
   10334:	11000017 	ldw	r4,0(r2)
   10338:	0010b400 	call	10b40 <__mulsi3>
        data >>= 18;
   1033c:	1005d4ba 	srai	r2,r2,18
        total += data;
   10340:	90a5883a 	add	r18,r18,r2
    for(int i = 0; i < accelerometer->a->length; i++){
   10344:	003fe606 	br	102e0 <firAccelerometer+0x30>

00010348 <filter>:

long int filter(struct Accelerometer* accelerometer){
   10348:	defffd04 	addi	sp,sp,-12
   1034c:	dc400115 	stw	r17,4(sp)
    insertA(accelerometer->a,userAccelerationGravitationalDirection(accelerometer));
   10350:	24400317 	ldw	r17,12(r4)
long int filter(struct Accelerometer* accelerometer){
   10354:	dfc00215 	stw	ra,8(sp)
   10358:	dc000015 	stw	r16,0(sp)
   1035c:	2021883a 	mov	r16,r4
    insertA(accelerometer->a,userAccelerationGravitationalDirection(accelerometer));
   10360:	00102080 	call	10208 <userAccelerationGravitationalDirection>
   10364:	8809883a 	mov	r4,r17
   10368:	100b883a 	mov	r5,r2
   1036c:	00101780 	call	10178 <insertA>
    return firAccelerometer(accelerometer);
   10370:	8009883a 	mov	r4,r16
}
   10374:	dfc00217 	ldw	ra,8(sp)
   10378:	dc400117 	ldw	r17,4(sp)
   1037c:	dc000017 	ldw	r16,0(sp)
   10380:	dec00304 	addi	sp,sp,12
    return firAccelerometer(accelerometer);
   10384:	00102b01 	jmpi	102b0 <firAccelerometer>

00010388 <run_filter>:

//StepDetection
long int run_filter(struct Accelerometer* accelerometer, long int x, long int y, long int z){
   10388:	defffe04 	addi	sp,sp,-8
   1038c:	dc000015 	stw	r16,0(sp)
   10390:	dfc00115 	stw	ra,4(sp)
   10394:	2021883a 	mov	r16,r4
    insertAccelerometer(accelerometer,x,y,z);
   10398:	00101a80 	call	101a8 <insertAccelerometer>
    return filter(accelerometer);
   1039c:	8009883a 	mov	r4,r16
}
   103a0:	dfc00117 	ldw	ra,4(sp)
   103a4:	dc000017 	ldw	r16,0(sp)
   103a8:	dec00204 	addi	sp,sp,8
    return filter(accelerometer);
   103ac:	00103481 	jmpi	10348 <filter>

000103b0 <main>:

int main(){
   103b0:	defbb904 	addi	sp,sp,-4380
    //first initialise the three acceleration axis;
    struct ListAxis x; x.cursor = 137; x.length = 137;
    struct ListAxis y; y.cursor = 137; y.length = 137;
    struct ListAxis z; z.cursor = 137; z.length = 137;
    struct ListConstants alphaAxis = {.data = {  389 ,  167 ,  202 ,  241 ,  284 ,  333 ,  386 ,  444 ,  508 ,  578 ,  654 ,  735 ,  823 ,  918 ,  1019 ,  1127 ,  1242 ,  1363 ,  1492 ,  1627 ,  1770 ,  1920 ,  2076 ,  2239 ,  2409 ,  2586 ,  2769 ,  2957 ,  3153 ,  3353 ,  3559 ,  3769 ,  3984 ,  4204 ,  4426 ,  4652 ,  4881 ,  5112 ,  5344 ,  5577 ,  5811 ,  6044 ,  6277 ,  6508 ,  6737 ,  6963 ,  7185 ,  7404 ,  7617 ,  7826 ,  8028 ,  8223 ,  8411 ,  8591 ,  8762 ,  8924 ,  9077 ,  9219 ,  9350 ,  9471 ,  9580 ,  9677 ,  9762 ,  9834 ,  9893 ,  9940 ,  9973 ,  9993 ,  10000 ,  9993 ,  9973 ,  9940 ,  9893 ,  9834 ,  9762 ,  9677 ,  9580 ,  9471 ,  9350 ,  9219 ,  9077 ,  8924 ,  8762 ,  8591 ,  8411 ,  8223 ,  8028 ,  7826 ,  7617 ,  7404 ,  7185 ,  6963 ,  6737 ,  6508 ,  6277 ,  6044 ,  5811 ,  5577 ,  5344 ,  5112 ,  4881 ,  4652 ,  4426 ,  4204 ,  3984 ,  3769 ,  3559 ,  3353 ,  3153 ,  2957 ,  2769 ,  2586 ,  2409 ,  2239 ,  2076 ,  1920 ,  1770 ,  1627 ,  1492 ,  1363 ,  1242 ,  1127 ,  1019 ,  918 ,  823 ,  735 ,  654 ,  578 ,  508 ,  444 ,  386 ,  333 ,  284 ,  241 ,  202 ,  167 ,  389}};
   103b4:	01400074 	movhi	r5,1
    struct ListAxis x; x.cursor = 137; x.length = 137;
   103b8:	00802244 	movi	r2,137
    struct ListConstants alphaAxis = {.data = {  389 ,  167 ,  202 ,  241 ,  284 ,  333 ,  386 ,  444 ,  508 ,  578 ,  654 ,  735 ,  823 ,  918 ,  1019 ,  1127 ,  1242 ,  1363 ,  1492 ,  1627 ,  1770 ,  1920 ,  2076 ,  2239 ,  2409 ,  2586 ,  2769 ,  2957 ,  3153 ,  3353 ,  3559 ,  3769 ,  3984 ,  4204 ,  4426 ,  4652 ,  4881 ,  5112 ,  5344 ,  5577 ,  5811 ,  6044 ,  6277 ,  6508 ,  6737 ,  6963 ,  7185 ,  7404 ,  7617 ,  7826 ,  8028 ,  8223 ,  8411 ,  8591 ,  8762 ,  8924 ,  9077 ,  9219 ,  9350 ,  9471 ,  9580 ,  9677 ,  9762 ,  9834 ,  9893 ,  9940 ,  9973 ,  9993 ,  10000 ,  9993 ,  9973 ,  9940 ,  9893 ,  9834 ,  9762 ,  9677 ,  9580 ,  9471 ,  9350 ,  9219 ,  9077 ,  8924 ,  8762 ,  8591 ,  8411 ,  8223 ,  8028 ,  7826 ,  7617 ,  7404 ,  7185 ,  6963 ,  6737 ,  6508 ,  6277 ,  6044 ,  5811 ,  5577 ,  5344 ,  5112 ,  4881 ,  4652 ,  4426 ,  4204 ,  3984 ,  3769 ,  3559 ,  3353 ,  3153 ,  2957 ,  2769 ,  2586 ,  2409 ,  2239 ,  2076 ,  1920 ,  1770 ,  1627 ,  1492 ,  1363 ,  1242 ,  1127 ,  1019 ,  918 ,  823 ,  735 ,  654 ,  578 ,  508 ,  444 ,  386 ,  333 ,  284 ,  241 ,  202 ,  167 ,  389}};
   103bc:	d9001104 	addi	r4,sp,68
   103c0:	01808904 	movi	r6,548
   103c4:	294f5204 	addi	r5,r5,15688
int main(){
   103c8:	dfc44615 	stw	ra,4376(sp)
   103cc:	dd044515 	stw	r20,4372(sp)
   103d0:	dcc44415 	stw	r19,4368(sp)
   103d4:	dc844315 	stw	r18,4364(sp)
   103d8:	dc444215 	stw	r17,4360(sp)
   103dc:	dc044115 	stw	r16,4356(sp)
    struct ListAxis x; x.cursor = 137; x.length = 137;
   103e0:	d8812315 	stw	r2,1164(sp)
   103e4:	d8812415 	stw	r2,1168(sp)
    struct ListAxis y; y.cursor = 137; y.length = 137;
   103e8:	d881ae15 	stw	r2,1720(sp)
   103ec:	d881af15 	stw	r2,1724(sp)
    struct ListAxis z; z.cursor = 137; z.length = 137;
   103f0:	d8823915 	stw	r2,2276(sp)
   103f4:	d8823a15 	stw	r2,2280(sp)
    struct ListConstants alphaAxis = {.data = {  389 ,  167 ,  202 ,  241 ,  284 ,  333 ,  386 ,  444 ,  508 ,  578 ,  654 ,  735 ,  823 ,  918 ,  1019 ,  1127 ,  1242 ,  1363 ,  1492 ,  1627 ,  1770 ,  1920 ,  2076 ,  2239 ,  2409 ,  2586 ,  2769 ,  2957 ,  3153 ,  3353 ,  3559 ,  3769 ,  3984 ,  4204 ,  4426 ,  4652 ,  4881 ,  5112 ,  5344 ,  5577 ,  5811 ,  6044 ,  6277 ,  6508 ,  6737 ,  6963 ,  7185 ,  7404 ,  7617 ,  7826 ,  8028 ,  8223 ,  8411 ,  8591 ,  8762 ,  8924 ,  9077 ,  9219 ,  9350 ,  9471 ,  9580 ,  9677 ,  9762 ,  9834 ,  9893 ,  9940 ,  9973 ,  9993 ,  10000 ,  9993 ,  9973 ,  9940 ,  9893 ,  9834 ,  9762 ,  9677 ,  9580 ,  9471 ,  9350 ,  9219 ,  9077 ,  8924 ,  8762 ,  8591 ,  8411 ,  8223 ,  8028 ,  7826 ,  7617 ,  7404 ,  7185 ,  6963 ,  6737 ,  6508 ,  6277 ,  6044 ,  5811 ,  5577 ,  5344 ,  5112 ,  4881 ,  4652 ,  4426 ,  4204 ,  3984 ,  3769 ,  3559 ,  3353 ,  3153 ,  2957 ,  2769 ,  2586 ,  2409 ,  2239 ,  2076 ,  1920 ,  1770 ,  1627 ,  1492 ,  1363 ,  1242 ,  1127 ,  1019 ,  918 ,  823 ,  735 ,  654 ,  578 ,  508 ,  444 ,  386 ,  333 ,  284 ,  241 ,  202 ,  167 ,  389}};
   103f8:	00131dc0 	call	131dc <memcpy>
   103fc:	1009883a 	mov	r4,r2
    struct Acceleration accelerationX; accelerationX.a = &x; accelerationX.alpha = &alphaAxis; accelerationX.firA = 0;
   10400:	d8809a04 	addi	r2,sp,616
   10404:	d8800315 	stw	r2,12(sp)
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
   10408:	d8812504 	addi	r2,sp,1172
   1040c:	d8800615 	stw	r2,24(sp)
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
    struct ListAccelerometer a; a.cursor = 0; a.length = 258;
    struct ListConstantsAccelerometer alphaA = {.data = {  -131 ,  -63 ,  -72 ,  -76 ,  -75 ,  -66 ,  -50 ,  -26 ,  4 ,  41 ,  83 ,  126 ,  168 ,  206 ,  236 ,  256 ,  262 ,  254 ,  231 ,  193 ,  141 ,  79 ,  9 ,  -62 ,  -132 ,  -196 ,  -248 ,  -286 ,  -307 ,  -310 ,  -295 ,  -265 ,  -222 ,  -172 ,  -120 ,  -72 ,  -33 ,  -7 ,  0 ,  -8 ,  -35 ,  -76 ,  -127 ,  -180 ,  -228 ,  -263 ,  -275 ,  -257 ,  -205 ,  -116 ,  9 ,  168 ,  352 ,  551 ,  751 ,  936 ,  1092 ,  1203 ,  1256 ,  1241 ,  1152 ,  988 ,  754 ,  460 ,  121 ,  -242 ,  -611 ,  -959 ,  -1265 ,  -1508 ,  -1672 ,  -1744 ,  -1722 ,  -1607 ,  -1408 ,  -1142 ,  -831 ,  -499 ,  -173 ,  119 ,  358 ,  523 ,  605 ,  600 ,  513 ,  361 ,  164 ,  -48 ,  -244 ,  -392 ,  -461 ,  -426 ,  -269 ,  15 ,  423 ,  936 ,  1523 ,  2145 ,  2752 ,  3290 ,  3704 ,  3941 ,  3958 ,  3722 ,  3218 ,  2445 ,  1426 ,  198 ,  -1177 ,  -2631 ,  -4078 ,  -5427 ,  -6591 ,  -7484 ,  -8036 ,  -8193 ,  -7921 ,  -7214 ,  -6092 ,  -4598 ,  -2804 ,  -799 ,  1310 ,  3410 ,  5383 ,  7118 ,  8516 ,  9496 ,  10000 ,  10000 ,  9496 ,  8516 ,  7118 ,  5383 ,  3410 ,  1310 ,  -799 ,  -2804 ,  -4598 ,  -6092 ,  -7214 ,  -7921 ,  -8193 ,  -8036 ,  -7484 ,  -6591 ,  -5427 ,  -4078 ,  -2631 ,  -1177 ,  198 ,  1426 ,  2445 ,  3218 ,  3722 ,  3958 ,  3941 ,  3704 ,  3290 ,  2752 ,  2145 ,  1523 ,  936 ,  423 ,  15 ,  -269 ,  -426 ,  -461 ,  -392 ,  -244 ,  -48 ,  164 ,  361 ,  513 ,  600 ,  605 ,  523 ,  358 ,  119 ,  -173 ,  -499 ,  -831 ,  -1142 ,  -1408 ,  -1607 ,  -1722 ,  -1744 ,  -1672 ,  -1508 ,  -1265 ,  -959 ,  -611 ,  -242 ,  121 ,  460 ,  754 ,  988 ,  1152 ,  1241 ,  1256 ,  1203 ,  1092 ,  936 ,  751 ,  551 ,  352 ,  168 ,  9 ,  -116 ,  -205 ,  -257 ,  -275 ,  -263 ,  -228 ,  -180 ,  -127 ,  -76 ,  -35 ,  -8 ,  0 ,  -7 ,  -33 ,  -72 ,  -120 ,  -172 ,  -222 ,  -265 ,  -295 ,  -310 ,  -307 ,  -286 ,  -248 ,  -196 ,  -132 ,  -62 ,  9 ,  79 ,  141 ,  193 ,  231 ,  254 ,  262 ,  256 ,  236 ,  206 ,  168 ,  126 ,  83 ,  41 ,  4 ,  -26 ,  -50 ,  -66 ,  -75 ,  -76 ,  -72 ,  -63 ,  -131}};
   10410:	01400074 	movhi	r5,1
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
   10414:	d881b004 	addi	r2,sp,1728
    struct Acceleration accelerationX; accelerationX.a = &x; accelerationX.alpha = &alphaAxis; accelerationX.firA = 0;
   10418:	d9000415 	stw	r4,16(sp)
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
   1041c:	d9000715 	stw	r4,28(sp)
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
   10420:	d8800915 	stw	r2,36(sp)
   10424:	d9000a15 	stw	r4,40(sp)
    struct ListAccelerometer a; a.cursor = 0; a.length = 258;
   10428:	00804084 	movi	r2,258
    struct ListConstantsAccelerometer alphaA = {.data = {  -131 ,  -63 ,  -72 ,  -76 ,  -75 ,  -66 ,  -50 ,  -26 ,  4 ,  41 ,  83 ,  126 ,  168 ,  206 ,  236 ,  256 ,  262 ,  254 ,  231 ,  193 ,  141 ,  79 ,  9 ,  -62 ,  -132 ,  -196 ,  -248 ,  -286 ,  -307 ,  -310 ,  -295 ,  -265 ,  -222 ,  -172 ,  -120 ,  -72 ,  -33 ,  -7 ,  0 ,  -8 ,  -35 ,  -76 ,  -127 ,  -180 ,  -228 ,  -263 ,  -275 ,  -257 ,  -205 ,  -116 ,  9 ,  168 ,  352 ,  551 ,  751 ,  936 ,  1092 ,  1203 ,  1256 ,  1241 ,  1152 ,  988 ,  754 ,  460 ,  121 ,  -242 ,  -611 ,  -959 ,  -1265 ,  -1508 ,  -1672 ,  -1744 ,  -1722 ,  -1607 ,  -1408 ,  -1142 ,  -831 ,  -499 ,  -173 ,  119 ,  358 ,  523 ,  605 ,  600 ,  513 ,  361 ,  164 ,  -48 ,  -244 ,  -392 ,  -461 ,  -426 ,  -269 ,  15 ,  423 ,  936 ,  1523 ,  2145 ,  2752 ,  3290 ,  3704 ,  3941 ,  3958 ,  3722 ,  3218 ,  2445 ,  1426 ,  198 ,  -1177 ,  -2631 ,  -4078 ,  -5427 ,  -6591 ,  -7484 ,  -8036 ,  -8193 ,  -7921 ,  -7214 ,  -6092 ,  -4598 ,  -2804 ,  -799 ,  1310 ,  3410 ,  5383 ,  7118 ,  8516 ,  9496 ,  10000 ,  10000 ,  9496 ,  8516 ,  7118 ,  5383 ,  3410 ,  1310 ,  -799 ,  -2804 ,  -4598 ,  -6092 ,  -7214 ,  -7921 ,  -8193 ,  -8036 ,  -7484 ,  -6591 ,  -5427 ,  -4078 ,  -2631 ,  -1177 ,  198 ,  1426 ,  2445 ,  3218 ,  3722 ,  3958 ,  3941 ,  3704 ,  3290 ,  2752 ,  2145 ,  1523 ,  936 ,  423 ,  15 ,  -269 ,  -426 ,  -461 ,  -392 ,  -244 ,  -48 ,  164 ,  361 ,  513 ,  600 ,  605 ,  523 ,  358 ,  119 ,  -173 ,  -499 ,  -831 ,  -1142 ,  -1408 ,  -1607 ,  -1722 ,  -1744 ,  -1672 ,  -1508 ,  -1265 ,  -959 ,  -611 ,  -242 ,  121 ,  460 ,  754 ,  988 ,  1152 ,  1241 ,  1256 ,  1203 ,  1092 ,  936 ,  751 ,  551 ,  352 ,  168 ,  9 ,  -116 ,  -205 ,  -257 ,  -275 ,  -263 ,  -228 ,  -180 ,  -127 ,  -76 ,  -35 ,  -8 ,  0 ,  -7 ,  -33 ,  -72 ,  -120 ,  -172 ,  -222 ,  -265 ,  -295 ,  -310 ,  -307 ,  -286 ,  -248 ,  -196 ,  -132 ,  -62 ,  9 ,  79 ,  141 ,  193 ,  231 ,  254 ,  262 ,  256 ,  236 ,  206 ,  168 ,  126 ,  83 ,  41 ,  4 ,  -26 ,  -50 ,  -66 ,  -75 ,  -76 ,  -72 ,  -63 ,  -131}};
   1042c:	d9023b04 	addi	r4,sp,2284
   10430:	01810204 	movi	r6,1032
   10434:	294fdb04 	addi	r5,r5,16236
    struct Acceleration accelerationX; accelerationX.a = &x; accelerationX.alpha = &alphaAxis; accelerationX.firA = 0;
   10438:	d8000515 	stw	zero,20(sp)
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
   1043c:	d8000815 	stw	zero,32(sp)
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
   10440:	d8000b15 	stw	zero,44(sp)
    struct ListAccelerometer a; a.cursor = 0; a.length = 258;
   10444:	d8043f15 	stw	zero,4348(sp)
   10448:	d8844015 	stw	r2,4352(sp)
    struct ListConstantsAccelerometer alphaA = {.data = {  -131 ,  -63 ,  -72 ,  -76 ,  -75 ,  -66 ,  -50 ,  -26 ,  4 ,  41 ,  83 ,  126 ,  168 ,  206 ,  236 ,  256 ,  262 ,  254 ,  231 ,  193 ,  141 ,  79 ,  9 ,  -62 ,  -132 ,  -196 ,  -248 ,  -286 ,  -307 ,  -310 ,  -295 ,  -265 ,  -222 ,  -172 ,  -120 ,  -72 ,  -33 ,  -7 ,  0 ,  -8 ,  -35 ,  -76 ,  -127 ,  -180 ,  -228 ,  -263 ,  -275 ,  -257 ,  -205 ,  -116 ,  9 ,  168 ,  352 ,  551 ,  751 ,  936 ,  1092 ,  1203 ,  1256 ,  1241 ,  1152 ,  988 ,  754 ,  460 ,  121 ,  -242 ,  -611 ,  -959 ,  -1265 ,  -1508 ,  -1672 ,  -1744 ,  -1722 ,  -1607 ,  -1408 ,  -1142 ,  -831 ,  -499 ,  -173 ,  119 ,  358 ,  523 ,  605 ,  600 ,  513 ,  361 ,  164 ,  -48 ,  -244 ,  -392 ,  -461 ,  -426 ,  -269 ,  15 ,  423 ,  936 ,  1523 ,  2145 ,  2752 ,  3290 ,  3704 ,  3941 ,  3958 ,  3722 ,  3218 ,  2445 ,  1426 ,  198 ,  -1177 ,  -2631 ,  -4078 ,  -5427 ,  -6591 ,  -7484 ,  -8036 ,  -8193 ,  -7921 ,  -7214 ,  -6092 ,  -4598 ,  -2804 ,  -799 ,  1310 ,  3410 ,  5383 ,  7118 ,  8516 ,  9496 ,  10000 ,  10000 ,  9496 ,  8516 ,  7118 ,  5383 ,  3410 ,  1310 ,  -799 ,  -2804 ,  -4598 ,  -6092 ,  -7214 ,  -7921 ,  -8193 ,  -8036 ,  -7484 ,  -6591 ,  -5427 ,  -4078 ,  -2631 ,  -1177 ,  198 ,  1426 ,  2445 ,  3218 ,  3722 ,  3958 ,  3941 ,  3704 ,  3290 ,  2752 ,  2145 ,  1523 ,  936 ,  423 ,  15 ,  -269 ,  -426 ,  -461 ,  -392 ,  -244 ,  -48 ,  164 ,  361 ,  513 ,  600 ,  605 ,  523 ,  358 ,  119 ,  -173 ,  -499 ,  -831 ,  -1142 ,  -1408 ,  -1607 ,  -1722 ,  -1744 ,  -1672 ,  -1508 ,  -1265 ,  -959 ,  -611 ,  -242 ,  121 ,  460 ,  754 ,  988 ,  1152 ,  1241 ,  1256 ,  1203 ,  1092 ,  936 ,  751 ,  551 ,  352 ,  168 ,  9 ,  -116 ,  -205 ,  -257 ,  -275 ,  -263 ,  -228 ,  -180 ,  -127 ,  -76 ,  -35 ,  -8 ,  0 ,  -7 ,  -33 ,  -72 ,  -120 ,  -172 ,  -222 ,  -265 ,  -295 ,  -310 ,  -307 ,  -286 ,  -248 ,  -196 ,  -132 ,  -62 ,  9 ,  79 ,  141 ,  193 ,  231 ,  254 ,  262 ,  256 ,  236 ,  206 ,  168 ,  126 ,  83 ,  41 ,  4 ,  -26 ,  -50 ,  -66 ,  -75 ,  -76 ,  -72 ,  -63 ,  -131}};
   1044c:	00131dc0 	call	131dc <memcpy>
   10450:	1009883a 	mov	r4,r2
    struct Accelerometer accelerometer;
    accelerometer.x = &accelerationX; accelerometer.y = &accelerationY; accelerometer.z = &accelerationZ;
   10454:	d8800304 	addi	r2,sp,12
   10458:	d8800c15 	stw	r2,48(sp)
   1045c:	d8800604 	addi	r2,sp,24
   10460:	d8800d15 	stw	r2,52(sp)
    accelerometer.a = &a;
    accelerometer.alpha = &alphaA;
   10464:	d9001015 	stw	r4,64(sp)
    accelerometer.x = &accelerationX; accelerometer.y = &accelerationY; accelerometer.z = &accelerationZ;
   10468:	d8800904 	addi	r2,sp,36

    alt_32 x_read;
    alt_32 y_read;
    alt_32 z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1046c:	01000074 	movhi	r4,1
    accelerometer.x = &accelerationX; accelerometer.y = &accelerationY; accelerometer.z = &accelerationZ;
   10470:	d8800e15 	stw	r2,56(sp)
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10474:	210f4a04 	addi	r4,r4,15656
    accelerometer.a = &a;
   10478:	d8833d04 	addi	r2,sp,3316
   1047c:	d8800f15 	stw	r2,60(sp)
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10480:	0013aa80 	call	13aa8 <alt_up_accelerometer_spi_open_dev>
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10484:	10003926 	beq	r2,zero,1056c <main+0x1bc>
   10488:	1025883a 	mov	r18,r2
    int below = TRUE;
   1048c:	05000044 	movi	r20,1
    int count = 0;
   10490:	0027883a 	mov	r19,zero
    }

    int test_count = 0;
    while (1) {

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10494:	d80b883a 	mov	r5,sp
   10498:	9009883a 	mov	r4,r18
   1049c:	0013b000 	call	13b00 <alt_up_accelerometer_spi_read_x_axis>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   104a0:	d9400104 	addi	r5,sp,4
   104a4:	9009883a 	mov	r4,r18
   104a8:	0013b580 	call	13b58 <alt_up_accelerometer_spi_read_y_axis>
        alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
   104ac:	d9400204 	addi	r5,sp,8
   104b0:	9009883a 	mov	r4,r18
   104b4:	0013bb00 	call	13bb0 <alt_up_accelerometer_spi_read_z_axis>
        //fprintf(fp," %ld ",x_read);

        data = run_filter(&accelerometer,x_read,y_read,z_read);
   104b8:	d9c00217 	ldw	r7,8(sp)
   104bc:	d9800117 	ldw	r6,4(sp)
   104c0:	d9400017 	ldw	r5,0(sp)
   104c4:	d9000c04 	addi	r4,sp,48
   104c8:	00103880 	call	10388 <run_filter>
        gravX = gravitationalA(accelerometer.x);
        gravY = gravitationalA(accelerometer.y);
        gravZ = gravitationalA(accelerometer.z);
        gravTotal = sqrt((gravX*gravX+gravY*gravY+gravZ*gravZ));
   104cc:	d9400517 	ldw	r5,20(sp)
        data = run_filter(&accelerometer,x_read,y_read,z_read);
   104d0:	1023883a 	mov	r17,r2
        gravTotal = sqrt((gravX*gravX+gravY*gravY+gravZ*gravZ));
   104d4:	2809883a 	mov	r4,r5
   104d8:	0010b400 	call	10b40 <__mulsi3>
   104dc:	d9400817 	ldw	r5,32(sp)
   104e0:	1021883a 	mov	r16,r2
   104e4:	2809883a 	mov	r4,r5
   104e8:	0010b400 	call	10b40 <__mulsi3>
   104ec:	d9400b17 	ldw	r5,44(sp)
   104f0:	80a1883a 	add	r16,r16,r2
   104f4:	2809883a 	mov	r4,r5
   104f8:	0010b400 	call	10b40 <__mulsi3>
   104fc:	8089883a 	add	r4,r16,r2
   10500:	00130c80 	call	130c8 <__floatsidf>
   10504:	1009883a 	mov	r4,r2
   10508:	180b883a 	mov	r5,r3
   1050c:	00105900 	call	10590 <sqrt>
   10510:	180b883a 	mov	r5,r3
   10514:	1009883a 	mov	r4,r2
   10518:	00130480 	call	13048 <__fixdfsi>
   1051c:	1021883a 	mov	r16,r2
        correctGrav = (gravTotal < 450) & (gravTotal > 350);
        printf("%ld\n",gravTotal);
   10520:	01000074 	movhi	r4,1
        correctGrav = (gravTotal < 450) & (gravTotal > 350);
   10524:	843fa844 	addi	r16,r16,-351
        printf("%ld\n",gravTotal);
   10528:	100b883a 	mov	r5,r2
   1052c:	210f5004 	addi	r4,r4,15680
        if(correctGrav){
   10530:	840018e8 	cmpgeui	r16,r16,99
        printf("%ld\n",gravTotal);
   10534:	00132400 	call	13240 <printf>
        if(correctGrav){
   10538:	803fd61e 	bne	r16,zero,10494 <main+0xe4>
            if(below){
   1053c:	a0000926 	beq	r20,zero,10564 <main+0x1b4>
                if(data > peakMag){
   10540:	8c455f50 	cmplti	r17,r17,5501
   10544:	883fd31e 	bne	r17,zero,10494 <main+0xe4>
                    count += 1;
   10548:	9cc00044 	addi	r19,r19,1
                    printf("%ld\n",count);
   1054c:	01000074 	movhi	r4,1
   10550:	980b883a 	mov	r5,r19
   10554:	210f5004 	addi	r4,r4,15680
   10558:	00132400 	call	13240 <printf>
                    below = FALSE;
   1055c:	0029883a 	mov	r20,zero
   10560:	003fcc06 	br	10494 <main+0xe4>
                }
            }else{
                if(data < lowMag){
   10564:	8828d7fa 	srli	r20,r17,31
   10568:	003fca06 	br	10494 <main+0xe4>
        }


    }
    printf("%d ",count);
}
   1056c:	00800044 	movi	r2,1
   10570:	dfc44617 	ldw	ra,4376(sp)
   10574:	dd044517 	ldw	r20,4372(sp)
   10578:	dcc44417 	ldw	r19,4368(sp)
   1057c:	dc844317 	ldw	r18,4364(sp)
   10580:	dc444217 	ldw	r17,4360(sp)
   10584:	dc044117 	ldw	r16,4356(sp)
   10588:	dec44704 	addi	sp,sp,4380
   1058c:	f800283a 	ret

00010590 <sqrt>:
   10590:	defffb04 	addi	sp,sp,-20
   10594:	dcc00315 	stw	r19,12(sp)
   10598:	dc800215 	stw	r18,8(sp)
   1059c:	dc400115 	stw	r17,4(sp)
   105a0:	dc000015 	stw	r16,0(sp)
   105a4:	2023883a 	mov	r17,r4
   105a8:	2821883a 	mov	r16,r5
   105ac:	dfc00415 	stw	ra,16(sp)
   105b0:	001063c0 	call	1063c <__ieee754_sqrt>
   105b4:	880d883a 	mov	r6,r17
   105b8:	800f883a 	mov	r7,r16
   105bc:	8809883a 	mov	r4,r17
   105c0:	800b883a 	mov	r5,r16
   105c4:	1027883a 	mov	r19,r2
   105c8:	1825883a 	mov	r18,r3
   105cc:	0012ff40 	call	12ff4 <__unorddf2>
   105d0:	1000061e 	bne	r2,zero,105ec <sqrt+0x5c>
   105d4:	000d883a 	mov	r6,zero
   105d8:	000f883a 	mov	r7,zero
   105dc:	8809883a 	mov	r4,r17
   105e0:	800b883a 	mov	r5,r16
   105e4:	0011d580 	call	11d58 <__ledf2>
   105e8:	10000916 	blt	r2,zero,10610 <sqrt+0x80>
   105ec:	9805883a 	mov	r2,r19
   105f0:	9007883a 	mov	r3,r18
   105f4:	dfc00417 	ldw	ra,16(sp)
   105f8:	dcc00317 	ldw	r19,12(sp)
   105fc:	dc800217 	ldw	r18,8(sp)
   10600:	dc400117 	ldw	r17,4(sp)
   10604:	dc000017 	ldw	r16,0(sp)
   10608:	dec00504 	addi	sp,sp,20
   1060c:	f800283a 	ret
   10610:	00131d00 	call	131d0 <__errno>
   10614:	00c00844 	movi	r3,33
   10618:	10c00015 	stw	r3,0(r2)
   1061c:	000d883a 	mov	r6,zero
   10620:	000f883a 	mov	r7,zero
   10624:	0009883a 	mov	r4,zero
   10628:	000b883a 	mov	r5,zero
   1062c:	001146c0 	call	1146c <__divdf3>
   10630:	1027883a 	mov	r19,r2
   10634:	1825883a 	mov	r18,r3
   10638:	003fec06 	br	105ec <sqrt+0x5c>

0001063c <__ieee754_sqrt>:
   1063c:	defff904 	addi	sp,sp,-28
   10640:	dc400115 	stw	r17,4(sp)
   10644:	dc000015 	stw	r16,0(sp)
   10648:	dfc00615 	stw	ra,24(sp)
   1064c:	dd400515 	stw	r21,20(sp)
   10650:	dd000415 	stw	r20,16(sp)
   10654:	dcc00315 	stw	r19,12(sp)
   10658:	dc800215 	stw	r18,8(sp)
   1065c:	28dffc2c 	andhi	r3,r5,32752
   10660:	009ffc34 	movhi	r2,32752
   10664:	2021883a 	mov	r16,r4
   10668:	2823883a 	mov	r17,r5
   1066c:	18809226 	beq	r3,r2,108b8 <__ieee754_sqrt+0x27c>
   10670:	2011883a 	mov	r8,r4
   10674:	01403d0e 	bge	zero,r5,1076c <__ieee754_sqrt+0x130>
   10678:	280bd53a 	srai	r5,r5,20
   1067c:	28008126 	beq	r5,zero,10884 <__ieee754_sqrt+0x248>
   10680:	00800434 	movhi	r2,16
   10684:	297f0044 	addi	r5,r5,-1023
   10688:	10bfffc4 	addi	r2,r2,-1
   1068c:	8884703a 	and	r2,r17,r2
   10690:	28c0004c 	andi	r3,r5,1
   10694:	10800434 	orhi	r2,r2,16
   10698:	18000426 	beq	r3,zero,106ac <__ieee754_sqrt+0x70>
   1069c:	4006d7fa 	srli	r3,r8,31
   106a0:	1085883a 	add	r2,r2,r2
   106a4:	4211883a 	add	r8,r8,r8
   106a8:	10c5883a 	add	r2,r2,r3
   106ac:	4006d7fa 	srli	r3,r8,31
   106b0:	1085883a 	add	r2,r2,r2
   106b4:	2823d07a 	srai	r17,r5,1
   106b8:	1887883a 	add	r3,r3,r2
   106bc:	4209883a 	add	r4,r8,r8
   106c0:	01800584 	movi	r6,22
   106c4:	0025883a 	mov	r18,zero
   106c8:	000b883a 	mov	r5,zero
   106cc:	00800834 	movhi	r2,32
   106d0:	288f883a 	add	r7,r5,r2
   106d4:	2010d7fa 	srli	r8,r4,31
   106d8:	31bfffc4 	addi	r6,r6,-1
   106dc:	19c00316 	blt	r3,r7,106ec <__ieee754_sqrt+0xb0>
   106e0:	19c7c83a 	sub	r3,r3,r7
   106e4:	11cb883a 	add	r5,r2,r7
   106e8:	90a5883a 	add	r18,r18,r2
   106ec:	18c7883a 	add	r3,r3,r3
   106f0:	1004d07a 	srli	r2,r2,1
   106f4:	40c7883a 	add	r3,r8,r3
   106f8:	2109883a 	add	r4,r4,r4
   106fc:	303ff41e 	bne	r6,zero,106d0 <__ieee754_sqrt+0x94>
   10700:	0027883a 	mov	r19,zero
   10704:	0011883a 	mov	r8,zero
   10708:	04000804 	movi	r16,32
   1070c:	01a00034 	movhi	r6,32768
   10710:	00000906 	br	10738 <__ieee754_sqrt+0xfc>
   10714:	28c02a26 	beq	r5,r3,107c0 <__ieee754_sqrt+0x184>
   10718:	18c7883a 	add	r3,r3,r3
   1071c:	200ed7fa 	srli	r7,r4,31
   10720:	843fffc4 	addi	r16,r16,-1
   10724:	300cd07a 	srli	r6,r6,1
   10728:	38cf883a 	add	r7,r7,r3
   1072c:	3807883a 	mov	r3,r7
   10730:	2109883a 	add	r4,r4,r4
   10734:	80002b26 	beq	r16,zero,107e4 <__ieee754_sqrt+0x1a8>
   10738:	4185883a 	add	r2,r8,r6
   1073c:	28fff50e 	bge	r5,r3,10714 <__ieee754_sqrt+0xd8>
   10740:	1191883a 	add	r8,r2,r6
   10744:	10001b16 	blt	r2,zero,107b4 <__ieee754_sqrt+0x178>
   10748:	280f883a 	mov	r7,r5
   1074c:	1947c83a 	sub	r3,r3,r5
   10750:	2080012e 	bgeu	r4,r2,10758 <__ieee754_sqrt+0x11c>
   10754:	18ffffc4 	addi	r3,r3,-1
   10758:	18c7883a 	add	r3,r3,r3
   1075c:	380b883a 	mov	r5,r7
   10760:	2089c83a 	sub	r4,r4,r2
   10764:	99a7883a 	add	r19,r19,r6
   10768:	003fec06 	br	1071c <__ieee754_sqrt+0xe0>
   1076c:	00a00034 	movhi	r2,32768
   10770:	10bfffc4 	addi	r2,r2,-1
   10774:	2884703a 	and	r2,r5,r2
   10778:	1104b03a 	or	r2,r2,r4
   1077c:	10007a26 	beq	r2,zero,10968 <__ieee754_sqrt+0x32c>
   10780:	2800701e 	bne	r5,zero,10944 <__ieee754_sqrt+0x308>
   10784:	4004d2fa 	srli	r2,r8,11
   10788:	8c7ffac4 	addi	r17,r17,-21
   1078c:	4010957a 	slli	r8,r8,21
   10790:	103ffc26 	beq	r2,zero,10784 <__ieee754_sqrt+0x148>
   10794:	10c0042c 	andhi	r3,r2,16
   10798:	880b883a 	mov	r5,r17
   1079c:	4021883a 	mov	r16,r8
   107a0:	1023883a 	mov	r17,r2
   107a4:	18003726 	beq	r3,zero,10884 <__ieee754_sqrt+0x248>
   107a8:	00800804 	movi	r2,32
   107ac:	00ffffc4 	movi	r3,-1
   107b0:	00003d06 	br	108a8 <__ieee754_sqrt+0x26c>
   107b4:	403fe416 	blt	r8,zero,10748 <__ieee754_sqrt+0x10c>
   107b8:	29c00044 	addi	r7,r5,1
   107bc:	003fe306 	br	1074c <__ieee754_sqrt+0x110>
   107c0:	2080022e 	bgeu	r4,r2,107cc <__ieee754_sqrt+0x190>
   107c4:	2947883a 	add	r3,r5,r5
   107c8:	003fd406 	br	1071c <__ieee754_sqrt+0xe0>
   107cc:	1191883a 	add	r8,r2,r6
   107d0:	10000216 	blt	r2,zero,107dc <__ieee754_sqrt+0x1a0>
   107d4:	0007883a 	mov	r3,zero
   107d8:	003fe106 	br	10760 <__ieee754_sqrt+0x124>
   107dc:	403ff60e 	bge	r8,zero,107b8 <__ieee754_sqrt+0x17c>
   107e0:	003ffc06 	br	107d4 <__ieee754_sqrt+0x198>
   107e4:	21c8b03a 	or	r4,r4,r7
   107e8:	20001326 	beq	r4,zero,10838 <__ieee754_sqrt+0x1fc>
   107ec:	00800074 	movhi	r2,1
   107f0:	11117c17 	ldw	r4,17904(r2)
   107f4:	00800074 	movhi	r2,1
   107f8:	11517d17 	ldw	r5,17908(r2)
   107fc:	00800074 	movhi	r2,1
   10800:	11917a17 	ldw	r6,17896(r2)
   10804:	00800074 	movhi	r2,1
   10808:	11d17b17 	ldw	r7,17900(r2)
   1080c:	00800074 	movhi	r2,1
   10810:	15517c17 	ldw	r21,17904(r2)
   10814:	00800074 	movhi	r2,1
   10818:	15117d17 	ldw	r20,17908(r2)
   1081c:	00126580 	call	12658 <__subdf3>
   10820:	100d883a 	mov	r6,r2
   10824:	180f883a 	mov	r7,r3
   10828:	a809883a 	mov	r4,r21
   1082c:	a00b883a 	mov	r5,r20
   10830:	0011d580 	call	11d58 <__ledf2>
   10834:	0080290e 	bge	zero,r2,108dc <__ieee754_sqrt+0x2a0>
   10838:	9820d07a 	srli	r16,r19,1
   1083c:	9007d07a 	srai	r3,r18,1
   10840:	008ff834 	movhi	r2,16352
   10844:	9480004c 	andi	r18,r18,1
   10848:	1887883a 	add	r3,r3,r2
   1084c:	90000126 	beq	r18,zero,10854 <__ieee754_sqrt+0x218>
   10850:	84200034 	orhi	r16,r16,32768
   10854:	8822953a 	slli	r17,r17,20
   10858:	8005883a 	mov	r2,r16
   1085c:	88c7883a 	add	r3,r17,r3
   10860:	dfc00617 	ldw	ra,24(sp)
   10864:	dd400517 	ldw	r21,20(sp)
   10868:	dd000417 	ldw	r20,16(sp)
   1086c:	dcc00317 	ldw	r19,12(sp)
   10870:	dc800217 	ldw	r18,8(sp)
   10874:	dc400117 	ldw	r17,4(sp)
   10878:	dc000017 	ldw	r16,0(sp)
   1087c:	dec00704 	addi	sp,sp,28
   10880:	f800283a 	ret
   10884:	0005883a 	mov	r2,zero
   10888:	8c63883a 	add	r17,r17,r17
   1088c:	8900042c 	andhi	r4,r17,16
   10890:	1007883a 	mov	r3,r2
   10894:	10800044 	addi	r2,r2,1
   10898:	203ffb26 	beq	r4,zero,10888 <__ieee754_sqrt+0x24c>
   1089c:	01000804 	movi	r4,32
   108a0:	8090983a 	sll	r8,r16,r2
   108a4:	2085c83a 	sub	r2,r4,r2
   108a8:	80a0d83a 	srl	r16,r16,r2
   108ac:	28cbc83a 	sub	r5,r5,r3
   108b0:	8c22b03a 	or	r17,r17,r16
   108b4:	003f7206 	br	10680 <__ieee754_sqrt+0x44>
   108b8:	200d883a 	mov	r6,r4
   108bc:	280f883a 	mov	r7,r5
   108c0:	0011e500 	call	11e50 <__muldf3>
   108c4:	800d883a 	mov	r6,r16
   108c8:	880f883a 	mov	r7,r17
   108cc:	1009883a 	mov	r4,r2
   108d0:	180b883a 	mov	r5,r3
   108d4:	0010b680 	call	10b68 <__adddf3>
   108d8:	003fe106 	br	10860 <__ieee754_sqrt+0x224>
   108dc:	00800074 	movhi	r2,1
   108e0:	11117c17 	ldw	r4,17904(r2)
   108e4:	00800074 	movhi	r2,1
   108e8:	11517d17 	ldw	r5,17908(r2)
   108ec:	00800074 	movhi	r2,1
   108f0:	11917a17 	ldw	r6,17896(r2)
   108f4:	00800074 	movhi	r2,1
   108f8:	11d17b17 	ldw	r7,17900(r2)
   108fc:	98bfffd8 	cmpnei	r2,r19,-1
   10900:	10001c26 	beq	r2,zero,10974 <__ieee754_sqrt+0x338>
   10904:	00800074 	movhi	r2,1
   10908:	15117c17 	ldw	r20,17904(r2)
   1090c:	00800074 	movhi	r2,1
   10910:	14117d17 	ldw	r16,17908(r2)
   10914:	0010b680 	call	10b68 <__adddf3>
   10918:	100d883a 	mov	r6,r2
   1091c:	180f883a 	mov	r7,r3
   10920:	a009883a 	mov	r4,r20
   10924:	800b883a 	mov	r5,r16
   10928:	0011d580 	call	11d58 <__ledf2>
   1092c:	1000130e 	bge	r2,zero,1097c <__ieee754_sqrt+0x340>
   10930:	98bfff98 	cmpnei	r2,r19,-2
   10934:	10001326 	beq	r2,zero,10984 <__ieee754_sqrt+0x348>
   10938:	9cc00084 	addi	r19,r19,2
   1093c:	9820d07a 	srli	r16,r19,1
   10940:	003fbe06 	br	1083c <__ieee754_sqrt+0x200>
   10944:	200d883a 	mov	r6,r4
   10948:	280f883a 	mov	r7,r5
   1094c:	00126580 	call	12658 <__subdf3>
   10950:	100d883a 	mov	r6,r2
   10954:	180f883a 	mov	r7,r3
   10958:	1009883a 	mov	r4,r2
   1095c:	180b883a 	mov	r5,r3
   10960:	001146c0 	call	1146c <__divdf3>
   10964:	003fbe06 	br	10860 <__ieee754_sqrt+0x224>
   10968:	2005883a 	mov	r2,r4
   1096c:	2807883a 	mov	r3,r5
   10970:	003fbb06 	br	10860 <__ieee754_sqrt+0x224>
   10974:	94800044 	addi	r18,r18,1
   10978:	003fb006 	br	1083c <__ieee754_sqrt+0x200>
   1097c:	9cc00044 	addi	r19,r19,1
   10980:	003fad06 	br	10838 <__ieee754_sqrt+0x1fc>
   10984:	94800044 	addi	r18,r18,1
   10988:	003feb06 	br	10938 <__ieee754_sqrt+0x2fc>

0001098c <__divsi3>:
   1098c:	20001a16 	blt	r4,zero,109f8 <__divsi3+0x6c>
   10990:	000f883a 	mov	r7,zero
   10994:	2800020e 	bge	r5,zero,109a0 <__divsi3+0x14>
   10998:	014bc83a 	sub	r5,zero,r5
   1099c:	39c0005c 	xori	r7,r7,1
   109a0:	200d883a 	mov	r6,r4
   109a4:	00c00044 	movi	r3,1
   109a8:	2900092e 	bgeu	r5,r4,109d0 <__divsi3+0x44>
   109ac:	00800804 	movi	r2,32
   109b0:	00c00044 	movi	r3,1
   109b4:	00000106 	br	109bc <__divsi3+0x30>
   109b8:	10001226 	beq	r2,zero,10a04 <__divsi3+0x78>
   109bc:	294b883a 	add	r5,r5,r5
   109c0:	10bfffc4 	addi	r2,r2,-1
   109c4:	18c7883a 	add	r3,r3,r3
   109c8:	293ffb36 	bltu	r5,r4,109b8 <__divsi3+0x2c>
   109cc:	18000d26 	beq	r3,zero,10a04 <__divsi3+0x78>
   109d0:	0005883a 	mov	r2,zero
   109d4:	31400236 	bltu	r6,r5,109e0 <__divsi3+0x54>
   109d8:	314dc83a 	sub	r6,r6,r5
   109dc:	10c4b03a 	or	r2,r2,r3
   109e0:	1806d07a 	srli	r3,r3,1
   109e4:	280ad07a 	srli	r5,r5,1
   109e8:	183ffa1e 	bne	r3,zero,109d4 <__divsi3+0x48>
   109ec:	38000126 	beq	r7,zero,109f4 <__divsi3+0x68>
   109f0:	0085c83a 	sub	r2,zero,r2
   109f4:	f800283a 	ret
   109f8:	0109c83a 	sub	r4,zero,r4
   109fc:	01c00044 	movi	r7,1
   10a00:	003fe406 	br	10994 <__divsi3+0x8>
   10a04:	0005883a 	mov	r2,zero
   10a08:	003ff806 	br	109ec <__divsi3+0x60>

00010a0c <__modsi3>:
   10a0c:	20001716 	blt	r4,zero,10a6c <__modsi3+0x60>
   10a10:	000f883a 	mov	r7,zero
   10a14:	2005883a 	mov	r2,r4
   10a18:	2800010e 	bge	r5,zero,10a20 <__modsi3+0x14>
   10a1c:	014bc83a 	sub	r5,zero,r5
   10a20:	00c00044 	movi	r3,1
   10a24:	2900092e 	bgeu	r5,r4,10a4c <__modsi3+0x40>
   10a28:	01800804 	movi	r6,32
   10a2c:	00c00044 	movi	r3,1
   10a30:	00000106 	br	10a38 <__modsi3+0x2c>
   10a34:	30001026 	beq	r6,zero,10a78 <__modsi3+0x6c>
   10a38:	294b883a 	add	r5,r5,r5
   10a3c:	31bfffc4 	addi	r6,r6,-1
   10a40:	18c7883a 	add	r3,r3,r3
   10a44:	293ffb36 	bltu	r5,r4,10a34 <__modsi3+0x28>
   10a48:	18000b26 	beq	r3,zero,10a78 <__modsi3+0x6c>
   10a4c:	1806d07a 	srli	r3,r3,1
   10a50:	11400136 	bltu	r2,r5,10a58 <__modsi3+0x4c>
   10a54:	1145c83a 	sub	r2,r2,r5
   10a58:	280ad07a 	srli	r5,r5,1
   10a5c:	183ffb1e 	bne	r3,zero,10a4c <__modsi3+0x40>
   10a60:	38000126 	beq	r7,zero,10a68 <__modsi3+0x5c>
   10a64:	0085c83a 	sub	r2,zero,r2
   10a68:	f800283a 	ret
   10a6c:	0109c83a 	sub	r4,zero,r4
   10a70:	01c00044 	movi	r7,1
   10a74:	003fe706 	br	10a14 <__modsi3+0x8>
   10a78:	2005883a 	mov	r2,r4
   10a7c:	003ff806 	br	10a60 <__modsi3+0x54>

00010a80 <__udivsi3>:
   10a80:	200d883a 	mov	r6,r4
   10a84:	2900152e 	bgeu	r5,r4,10adc <__udivsi3+0x5c>
   10a88:	28001416 	blt	r5,zero,10adc <__udivsi3+0x5c>
   10a8c:	00800804 	movi	r2,32
   10a90:	00c00044 	movi	r3,1
   10a94:	00000206 	br	10aa0 <__udivsi3+0x20>
   10a98:	10000e26 	beq	r2,zero,10ad4 <__udivsi3+0x54>
   10a9c:	28000416 	blt	r5,zero,10ab0 <__udivsi3+0x30>
   10aa0:	294b883a 	add	r5,r5,r5
   10aa4:	10bfffc4 	addi	r2,r2,-1
   10aa8:	18c7883a 	add	r3,r3,r3
   10aac:	293ffa36 	bltu	r5,r4,10a98 <__udivsi3+0x18>
   10ab0:	18000826 	beq	r3,zero,10ad4 <__udivsi3+0x54>
   10ab4:	0005883a 	mov	r2,zero
   10ab8:	31400236 	bltu	r6,r5,10ac4 <__udivsi3+0x44>
   10abc:	314dc83a 	sub	r6,r6,r5
   10ac0:	10c4b03a 	or	r2,r2,r3
   10ac4:	1806d07a 	srli	r3,r3,1
   10ac8:	280ad07a 	srli	r5,r5,1
   10acc:	183ffa1e 	bne	r3,zero,10ab8 <__udivsi3+0x38>
   10ad0:	f800283a 	ret
   10ad4:	0005883a 	mov	r2,zero
   10ad8:	f800283a 	ret
   10adc:	00c00044 	movi	r3,1
   10ae0:	003ff406 	br	10ab4 <__udivsi3+0x34>

00010ae4 <__umodsi3>:
   10ae4:	2005883a 	mov	r2,r4
   10ae8:	2900132e 	bgeu	r5,r4,10b38 <__umodsi3+0x54>
   10aec:	28001216 	blt	r5,zero,10b38 <__umodsi3+0x54>
   10af0:	01800804 	movi	r6,32
   10af4:	00c00044 	movi	r3,1
   10af8:	00000206 	br	10b04 <__umodsi3+0x20>
   10afc:	30000c26 	beq	r6,zero,10b30 <__umodsi3+0x4c>
   10b00:	28000416 	blt	r5,zero,10b14 <__umodsi3+0x30>
   10b04:	294b883a 	add	r5,r5,r5
   10b08:	31bfffc4 	addi	r6,r6,-1
   10b0c:	18c7883a 	add	r3,r3,r3
   10b10:	293ffa36 	bltu	r5,r4,10afc <__umodsi3+0x18>
   10b14:	18000626 	beq	r3,zero,10b30 <__umodsi3+0x4c>
   10b18:	1806d07a 	srli	r3,r3,1
   10b1c:	11400136 	bltu	r2,r5,10b24 <__umodsi3+0x40>
   10b20:	1145c83a 	sub	r2,r2,r5
   10b24:	280ad07a 	srli	r5,r5,1
   10b28:	183ffb1e 	bne	r3,zero,10b18 <__umodsi3+0x34>
   10b2c:	f800283a 	ret
   10b30:	2005883a 	mov	r2,r4
   10b34:	f800283a 	ret
   10b38:	00c00044 	movi	r3,1
   10b3c:	003ff606 	br	10b18 <__umodsi3+0x34>

00010b40 <__mulsi3>:
   10b40:	0005883a 	mov	r2,zero
   10b44:	20000726 	beq	r4,zero,10b64 <__mulsi3+0x24>
   10b48:	20c0004c 	andi	r3,r4,1
   10b4c:	2008d07a 	srli	r4,r4,1
   10b50:	18000126 	beq	r3,zero,10b58 <__mulsi3+0x18>
   10b54:	1145883a 	add	r2,r2,r5
   10b58:	294b883a 	add	r5,r5,r5
   10b5c:	203ffa1e 	bne	r4,zero,10b48 <__mulsi3+0x8>
   10b60:	f800283a 	ret
   10b64:	f800283a 	ret

00010b68 <__adddf3>:
   10b68:	00c00434 	movhi	r3,16
   10b6c:	18ffffc4 	addi	r3,r3,-1
   10b70:	defffa04 	addi	sp,sp,-24
   10b74:	2810d7fa 	srli	r8,r5,31
   10b78:	3804d53a 	srli	r2,r7,20
   10b7c:	28d4703a 	and	r10,r5,r3
   10b80:	38d2703a 	and	r9,r7,r3
   10b84:	280ad53a 	srli	r5,r5,20
   10b88:	501490fa 	slli	r10,r10,3
   10b8c:	481290fa 	slli	r9,r9,3
   10b90:	3016d77a 	srli	r11,r6,29
   10b94:	dc400115 	stw	r17,4(sp)
   10b98:	380ed7fa 	srli	r7,r7,31
   10b9c:	2022d77a 	srli	r17,r4,29
   10ba0:	dd000415 	stw	r20,16(sp)
   10ba4:	dcc00315 	stw	r19,12(sp)
   10ba8:	dc000015 	stw	r16,0(sp)
   10bac:	1081ffcc 	andi	r2,r2,2047
   10bb0:	2c01ffcc 	andi	r16,r5,2047
   10bb4:	dfc00515 	stw	ra,20(sp)
   10bb8:	dc800215 	stw	r18,8(sp)
   10bbc:	201890fa 	slli	r12,r4,3
   10bc0:	301a90fa 	slli	r13,r6,3
   10bc4:	4027883a 	mov	r19,r8
   10bc8:	45003fcc 	andi	r20,r8,255
   10bcc:	8aa2b03a 	or	r17,r17,r10
   10bd0:	5a56b03a 	or	r11,r11,r9
   10bd4:	808bc83a 	sub	r5,r16,r2
   10bd8:	41c07526 	beq	r8,r7,10db0 <__adddf3+0x248>
   10bdc:	0140540e 	bge	zero,r5,10d30 <__adddf3+0x1c8>
   10be0:	10008b26 	beq	r2,zero,10e10 <__adddf3+0x2a8>
   10be4:	8081ffe0 	cmpeqi	r2,r16,2047
   10be8:	10010d1e 	bne	r2,zero,11020 <__adddf3+0x4b8>
   10bec:	28800e48 	cmpgei	r2,r5,57
   10bf0:	1000c11e 	bne	r2,zero,10ef8 <__adddf3+0x390>
   10bf4:	5ac02034 	orhi	r11,r11,128
   10bf8:	28800808 	cmpgei	r2,r5,32
   10bfc:	1001461e 	bne	r2,zero,11118 <__adddf3+0x5b0>
   10c00:	00800804 	movi	r2,32
   10c04:	1145c83a 	sub	r2,r2,r5
   10c08:	58a4983a 	sll	r18,r11,r2
   10c0c:	6946d83a 	srl	r3,r13,r5
   10c10:	6884983a 	sll	r2,r13,r2
   10c14:	594ad83a 	srl	r5,r11,r5
   10c18:	90e4b03a 	or	r18,r18,r3
   10c1c:	1004c03a 	cmpne	r2,r2,zero
   10c20:	90a4b03a 	or	r18,r18,r2
   10c24:	8963c83a 	sub	r17,r17,r5
   10c28:	64a5c83a 	sub	r18,r12,r18
   10c2c:	6485803a 	cmpltu	r2,r12,r18
   10c30:	88a3c83a 	sub	r17,r17,r2
   10c34:	8880202c 	andhi	r2,r17,128
   10c38:	1000b826 	beq	r2,zero,10f1c <__adddf3+0x3b4>
   10c3c:	00802034 	movhi	r2,128
   10c40:	10bfffc4 	addi	r2,r2,-1
   10c44:	88a2703a 	and	r17,r17,r2
   10c48:	8800d026 	beq	r17,zero,10f8c <__adddf3+0x424>
   10c4c:	8809883a 	mov	r4,r17
   10c50:	00131800 	call	13180 <__clzsi2>
   10c54:	113ffe04 	addi	r4,r2,-8
   10c58:	00c00804 	movi	r3,32
   10c5c:	1905c83a 	sub	r2,r3,r4
   10c60:	9084d83a 	srl	r2,r18,r2
   10c64:	8922983a 	sll	r17,r17,r4
   10c68:	9124983a 	sll	r18,r18,r4
   10c6c:	1444b03a 	or	r2,r2,r17
   10c70:	2400ff16 	blt	r4,r16,11070 <__adddf3+0x508>
   10c74:	2409c83a 	sub	r4,r4,r16
   10c78:	21000044 	addi	r4,r4,1
   10c7c:	1907c83a 	sub	r3,r3,r4
   10c80:	90ca983a 	sll	r5,r18,r3
   10c84:	9122d83a 	srl	r17,r18,r4
   10c88:	280ac03a 	cmpne	r5,r5,zero
   10c8c:	10c6983a 	sll	r3,r2,r3
   10c90:	894ab03a 	or	r5,r17,r5
   10c94:	1122d83a 	srl	r17,r2,r4
   10c98:	0021883a 	mov	r16,zero
   10c9c:	1964b03a 	or	r18,r3,r5
   10ca0:	908001cc 	andi	r2,r18,7
   10ca4:	10000726 	beq	r2,zero,10cc4 <__adddf3+0x15c>
   10ca8:	908003cc 	andi	r2,r18,15
   10cac:	10800120 	cmpeqi	r2,r2,4
   10cb0:	1000041e 	bne	r2,zero,10cc4 <__adddf3+0x15c>
   10cb4:	90800104 	addi	r2,r18,4
   10cb8:	14a5803a 	cmpltu	r18,r2,r18
   10cbc:	8ca3883a 	add	r17,r17,r18
   10cc0:	1025883a 	mov	r18,r2
   10cc4:	8880202c 	andhi	r2,r17,128
   10cc8:	1000c926 	beq	r2,zero,10ff0 <__adddf3+0x488>
   10ccc:	8081ffa0 	cmpeqi	r2,r16,2046
   10cd0:	84000044 	addi	r16,r16,1
   10cd4:	1000841e 	bne	r2,zero,10ee8 <__adddf3+0x380>
   10cd8:	013fe034 	movhi	r4,65408
   10cdc:	213fffc4 	addi	r4,r4,-1
   10ce0:	8908703a 	and	r4,r17,r4
   10ce4:	2004977a 	slli	r2,r4,29
   10ce8:	2008927a 	slli	r4,r4,9
   10cec:	9024d0fa 	srli	r18,r18,3
   10cf0:	80c1ffcc 	andi	r3,r16,2047
   10cf4:	2008d33a 	srli	r4,r4,12
   10cf8:	1484b03a 	or	r2,r2,r18
   10cfc:	a027883a 	mov	r19,r20
   10d00:	1806953a 	slli	r3,r3,20
   10d04:	982697fa 	slli	r19,r19,31
   10d08:	1906b03a 	or	r3,r3,r4
   10d0c:	1cc6b03a 	or	r3,r3,r19
   10d10:	dfc00517 	ldw	ra,20(sp)
   10d14:	dd000417 	ldw	r20,16(sp)
   10d18:	dcc00317 	ldw	r19,12(sp)
   10d1c:	dc800217 	ldw	r18,8(sp)
   10d20:	dc400117 	ldw	r17,4(sp)
   10d24:	dc000017 	ldw	r16,0(sp)
   10d28:	dec00604 	addi	sp,sp,24
   10d2c:	f800283a 	ret
   10d30:	3a803fcc 	andi	r10,r7,255
   10d34:	28004026 	beq	r5,zero,10e38 <__adddf3+0x2d0>
   10d38:	140bc83a 	sub	r5,r2,r16
   10d3c:	8000e61e 	bne	r16,zero,110d8 <__adddf3+0x570>
   10d40:	8b06b03a 	or	r3,r17,r12
   10d44:	1800c426 	beq	r3,zero,11058 <__adddf3+0x4f0>
   10d48:	28ffffc4 	addi	r3,r5,-1
   10d4c:	18017a26 	beq	r3,zero,11338 <__adddf3+0x7d0>
   10d50:	2941ffe0 	cmpeqi	r5,r5,2047
   10d54:	28019a1e 	bne	r5,zero,113c0 <__adddf3+0x858>
   10d58:	19000e48 	cmpgei	r4,r3,57
   10d5c:	20010c1e 	bne	r4,zero,11190 <__adddf3+0x628>
   10d60:	180b883a 	mov	r5,r3
   10d64:	28c00808 	cmpgei	r3,r5,32
   10d68:	1801521e 	bne	r3,zero,112b4 <__adddf3+0x74c>
   10d6c:	00c00804 	movi	r3,32
   10d70:	1947c83a 	sub	r3,r3,r5
   10d74:	88e4983a 	sll	r18,r17,r3
   10d78:	6148d83a 	srl	r4,r12,r5
   10d7c:	60c6983a 	sll	r3,r12,r3
   10d80:	894ad83a 	srl	r5,r17,r5
   10d84:	9124b03a 	or	r18,r18,r4
   10d88:	1806c03a 	cmpne	r3,r3,zero
   10d8c:	90e4b03a 	or	r18,r18,r3
   10d90:	5957c83a 	sub	r11,r11,r5
   10d94:	6ca5c83a 	sub	r18,r13,r18
   10d98:	6c9b803a 	cmpltu	r13,r13,r18
   10d9c:	5b63c83a 	sub	r17,r11,r13
   10da0:	3827883a 	mov	r19,r7
   10da4:	1021883a 	mov	r16,r2
   10da8:	5029883a 	mov	r20,r10
   10dac:	003fa106 	br	10c34 <__adddf3+0xcc>
   10db0:	01405d0e 	bge	zero,r5,10f28 <__adddf3+0x3c0>
   10db4:	1000351e 	bne	r2,zero,10e8c <__adddf3+0x324>
   10db8:	5b44b03a 	or	r2,r11,r13
   10dbc:	1000a926 	beq	r2,zero,11064 <__adddf3+0x4fc>
   10dc0:	28bfffc4 	addi	r2,r5,-1
   10dc4:	10004e26 	beq	r2,zero,10f00 <__adddf3+0x398>
   10dc8:	2941ffe0 	cmpeqi	r5,r5,2047
   10dcc:	2801121e 	bne	r5,zero,11218 <__adddf3+0x6b0>
   10dd0:	10c00e48 	cmpgei	r3,r2,57
   10dd4:	1800311e 	bne	r3,zero,10e9c <__adddf3+0x334>
   10dd8:	100b883a 	mov	r5,r2
   10ddc:	28800808 	cmpgei	r2,r5,32
   10de0:	1001181e 	bne	r2,zero,11244 <__adddf3+0x6dc>
   10de4:	00800804 	movi	r2,32
   10de8:	1145c83a 	sub	r2,r2,r5
   10dec:	58a4983a 	sll	r18,r11,r2
   10df0:	6946d83a 	srl	r3,r13,r5
   10df4:	6884983a 	sll	r2,r13,r2
   10df8:	594ad83a 	srl	r5,r11,r5
   10dfc:	90e4b03a 	or	r18,r18,r3
   10e00:	1004c03a 	cmpne	r2,r2,zero
   10e04:	90a4b03a 	or	r18,r18,r2
   10e08:	8963883a 	add	r17,r17,r5
   10e0c:	00002406 	br	10ea0 <__adddf3+0x338>
   10e10:	5b44b03a 	or	r2,r11,r13
   10e14:	10009326 	beq	r2,zero,11064 <__adddf3+0x4fc>
   10e18:	28bfffc4 	addi	r2,r5,-1
   10e1c:	1000f826 	beq	r2,zero,11200 <__adddf3+0x698>
   10e20:	2941ffe0 	cmpeqi	r5,r5,2047
   10e24:	2800fc1e 	bne	r5,zero,11218 <__adddf3+0x6b0>
   10e28:	10c00e48 	cmpgei	r3,r2,57
   10e2c:	1800321e 	bne	r3,zero,10ef8 <__adddf3+0x390>
   10e30:	100b883a 	mov	r5,r2
   10e34:	003f7006 	br	10bf8 <__adddf3+0x90>
   10e38:	80800044 	addi	r2,r16,1
   10e3c:	1081ff8c 	andi	r2,r2,2046
   10e40:	1000ab1e 	bne	r2,zero,110f0 <__adddf3+0x588>
   10e44:	8b0ab03a 	or	r5,r17,r12
   10e48:	5b44b03a 	or	r2,r11,r13
   10e4c:	8000e71e 	bne	r16,zero,111ec <__adddf3+0x684>
   10e50:	28014126 	beq	r5,zero,11358 <__adddf3+0x7f0>
   10e54:	10010626 	beq	r2,zero,11270 <__adddf3+0x708>
   10e58:	6365c83a 	sub	r18,r12,r13
   10e5c:	6485803a 	cmpltu	r2,r12,r18
   10e60:	8ac7c83a 	sub	r3,r17,r11
   10e64:	1887c83a 	sub	r3,r3,r2
   10e68:	1880202c 	andhi	r2,r3,128
   10e6c:	10017326 	beq	r2,zero,1143c <__adddf3+0x8d4>
   10e70:	6b25c83a 	sub	r18,r13,r12
   10e74:	5c57c83a 	sub	r11,r11,r17
   10e78:	6c9b803a 	cmpltu	r13,r13,r18
   10e7c:	5b63c83a 	sub	r17,r11,r13
   10e80:	3827883a 	mov	r19,r7
   10e84:	5029883a 	mov	r20,r10
   10e88:	003f8506 	br	10ca0 <__adddf3+0x138>
   10e8c:	8081ffe0 	cmpeqi	r2,r16,2047
   10e90:	1000631e 	bne	r2,zero,11020 <__adddf3+0x4b8>
   10e94:	28800e48 	cmpgei	r2,r5,57
   10e98:	1000aa26 	beq	r2,zero,11144 <__adddf3+0x5dc>
   10e9c:	04800044 	movi	r18,1
   10ea0:	9325883a 	add	r18,r18,r12
   10ea4:	9305803a 	cmpltu	r2,r18,r12
   10ea8:	88a3883a 	add	r17,r17,r2
   10eac:	8880202c 	andhi	r2,r17,128
   10eb0:	10001a26 	beq	r2,zero,10f1c <__adddf3+0x3b4>
   10eb4:	84000044 	addi	r16,r16,1
   10eb8:	8081ffe0 	cmpeqi	r2,r16,2047
   10ebc:	10000a1e 	bne	r2,zero,10ee8 <__adddf3+0x380>
   10ec0:	00bfe034 	movhi	r2,65408
   10ec4:	10bfffc4 	addi	r2,r2,-1
   10ec8:	9006d07a 	srli	r3,r18,1
   10ecc:	8884703a 	and	r2,r17,r2
   10ed0:	100897fa 	slli	r4,r2,31
   10ed4:	9480004c 	andi	r18,r18,1
   10ed8:	1c86b03a 	or	r3,r3,r18
   10edc:	1022d07a 	srli	r17,r2,1
   10ee0:	20e4b03a 	or	r18,r4,r3
   10ee4:	003f6e06 	br	10ca0 <__adddf3+0x138>
   10ee8:	00c1ffc4 	movi	r3,2047
   10eec:	0009883a 	mov	r4,zero
   10ef0:	0005883a 	mov	r2,zero
   10ef4:	003f8206 	br	10d00 <__adddf3+0x198>
   10ef8:	04800044 	movi	r18,1
   10efc:	003f4a06 	br	10c28 <__adddf3+0xc0>
   10f00:	6365883a 	add	r18,r12,r13
   10f04:	8ad7883a 	add	r11,r17,r11
   10f08:	9305803a 	cmpltu	r2,r18,r12
   10f0c:	58a3883a 	add	r17,r11,r2
   10f10:	8880202c 	andhi	r2,r17,128
   10f14:	1001061e 	bne	r2,zero,11330 <__adddf3+0x7c8>
   10f18:	04000044 	movi	r16,1
   10f1c:	908001cc 	andi	r2,r18,7
   10f20:	103f611e 	bne	r2,zero,10ca8 <__adddf3+0x140>
   10f24:	00006906 	br	110cc <__adddf3+0x564>
   10f28:	28005626 	beq	r5,zero,11084 <__adddf3+0x51c>
   10f2c:	140bc83a 	sub	r5,r2,r16
   10f30:	80008626 	beq	r16,zero,1114c <__adddf3+0x5e4>
   10f34:	10c1ffe0 	cmpeqi	r3,r2,2047
   10f38:	1801101e 	bne	r3,zero,1137c <__adddf3+0x814>
   10f3c:	28c00e48 	cmpgei	r3,r5,57
   10f40:	1800da1e 	bne	r3,zero,112ac <__adddf3+0x744>
   10f44:	8c402034 	orhi	r17,r17,128
   10f48:	28c00808 	cmpgei	r3,r5,32
   10f4c:	1801241e 	bne	r3,zero,113e0 <__adddf3+0x878>
   10f50:	00c00804 	movi	r3,32
   10f54:	1947c83a 	sub	r3,r3,r5
   10f58:	88e4983a 	sll	r18,r17,r3
   10f5c:	6148d83a 	srl	r4,r12,r5
   10f60:	60c6983a 	sll	r3,r12,r3
   10f64:	894ad83a 	srl	r5,r17,r5
   10f68:	9124b03a 	or	r18,r18,r4
   10f6c:	1806c03a 	cmpne	r3,r3,zero
   10f70:	90e4b03a 	or	r18,r18,r3
   10f74:	5957883a 	add	r11,r11,r5
   10f78:	9365883a 	add	r18,r18,r13
   10f7c:	935b803a 	cmpltu	r13,r18,r13
   10f80:	6ae3883a 	add	r17,r13,r11
   10f84:	1021883a 	mov	r16,r2
   10f88:	003fc806 	br	10eac <__adddf3+0x344>
   10f8c:	9009883a 	mov	r4,r18
   10f90:	00131800 	call	13180 <__clzsi2>
   10f94:	11000604 	addi	r4,r2,24
   10f98:	20c00808 	cmpgei	r3,r4,32
   10f9c:	183f2e26 	beq	r3,zero,10c58 <__adddf3+0xf0>
   10fa0:	10bffe04 	addi	r2,r2,-8
   10fa4:	9084983a 	sll	r2,r18,r2
   10fa8:	24007216 	blt	r4,r16,11174 <__adddf3+0x60c>
   10fac:	2425c83a 	sub	r18,r4,r16
   10fb0:	91000044 	addi	r4,r18,1
   10fb4:	20c00808 	cmpgei	r3,r4,32
   10fb8:	18012426 	beq	r3,zero,1144c <__adddf3+0x8e4>
   10fbc:	94bff844 	addi	r18,r18,-31
   10fc0:	20c00820 	cmpeqi	r3,r4,32
   10fc4:	14a4d83a 	srl	r18,r2,r18
   10fc8:	1800051e 	bne	r3,zero,10fe0 <__adddf3+0x478>
   10fcc:	00c01004 	movi	r3,64
   10fd0:	1907c83a 	sub	r3,r3,r4
   10fd4:	10c4983a 	sll	r2,r2,r3
   10fd8:	1004c03a 	cmpne	r2,r2,zero
   10fdc:	90a4b03a 	or	r18,r18,r2
   10fe0:	908001cc 	andi	r2,r18,7
   10fe4:	0021883a 	mov	r16,zero
   10fe8:	103f2f1e 	bne	r2,zero,10ca8 <__adddf3+0x140>
   10fec:	00003706 	br	110cc <__adddf3+0x564>
   10ff0:	9004d0fa 	srli	r2,r18,3
   10ff4:	880a977a 	slli	r5,r17,29
   10ff8:	8101ffe0 	cmpeqi	r4,r16,2047
   10ffc:	8806d0fa 	srli	r3,r17,3
   11000:	2884b03a 	or	r2,r5,r2
   11004:	20000c1e 	bne	r4,zero,11038 <__adddf3+0x4d0>
   11008:	01000434 	movhi	r4,16
   1100c:	213fffc4 	addi	r4,r4,-1
   11010:	1908703a 	and	r4,r3,r4
   11014:	80c1ffcc 	andi	r3,r16,2047
   11018:	003f3906 	br	10d00 <__adddf3+0x198>
   1101c:	1000b31e 	bne	r2,zero,112ec <__adddf3+0x784>
   11020:	880a977a 	slli	r5,r17,29
   11024:	00880034 	movhi	r2,8192
   11028:	10bfffc4 	addi	r2,r2,-1
   1102c:	8806d0fa 	srli	r3,r17,3
   11030:	2084703a 	and	r2,r4,r2
   11034:	1144b03a 	or	r2,r2,r5
   11038:	10c8b03a 	or	r4,r2,r3
   1103c:	20010726 	beq	r4,zero,1145c <__adddf3+0x8f4>
   11040:	01400434 	movhi	r5,16
   11044:	19000234 	orhi	r4,r3,8
   11048:	297fffc4 	addi	r5,r5,-1
   1104c:	2148703a 	and	r4,r4,r5
   11050:	00c1ffc4 	movi	r3,2047
   11054:	003f2a06 	br	10d00 <__adddf3+0x198>
   11058:	6819883a 	mov	r12,r13
   1105c:	5823883a 	mov	r17,r11
   11060:	3827883a 	mov	r19,r7
   11064:	6004d0fa 	srli	r2,r12,3
   11068:	2821883a 	mov	r16,r5
   1106c:	003fe106 	br	10ff4 <__adddf3+0x48c>
   11070:	047fe034 	movhi	r17,65408
   11074:	8c7fffc4 	addi	r17,r17,-1
   11078:	8121c83a 	sub	r16,r16,r4
   1107c:	1462703a 	and	r17,r2,r17
   11080:	003f0706 	br	10ca0 <__adddf3+0x138>
   11084:	80c00044 	addi	r3,r16,1
   11088:	1881ff8c 	andi	r2,r3,2046
   1108c:	1000421e 	bne	r2,zero,11198 <__adddf3+0x630>
   11090:	8b04b03a 	or	r2,r17,r12
   11094:	8000921e 	bne	r16,zero,112e0 <__adddf3+0x778>
   11098:	1000c226 	beq	r2,zero,113a4 <__adddf3+0x83c>
   1109c:	5b44b03a 	or	r2,r11,r13
   110a0:	10007326 	beq	r2,zero,11270 <__adddf3+0x708>
   110a4:	6365883a 	add	r18,r12,r13
   110a8:	9305803a 	cmpltu	r2,r18,r12
   110ac:	8ad7883a 	add	r11,r17,r11
   110b0:	58a3883a 	add	r17,r11,r2
   110b4:	8880202c 	andhi	r2,r17,128
   110b8:	10000426 	beq	r2,zero,110cc <__adddf3+0x564>
   110bc:	00bfe034 	movhi	r2,65408
   110c0:	10bfffc4 	addi	r2,r2,-1
   110c4:	88a2703a 	and	r17,r17,r2
   110c8:	04000044 	movi	r16,1
   110cc:	800b883a 	mov	r5,r16
   110d0:	9019883a 	mov	r12,r18
   110d4:	003fe306 	br	11064 <__adddf3+0x4fc>
   110d8:	10c1ffe0 	cmpeqi	r3,r2,2047
   110dc:	18006b1e 	bne	r3,zero,1128c <__adddf3+0x724>
   110e0:	28c00e48 	cmpgei	r3,r5,57
   110e4:	18002a1e 	bne	r3,zero,11190 <__adddf3+0x628>
   110e8:	8c402034 	orhi	r17,r17,128
   110ec:	003f1d06 	br	10d64 <__adddf3+0x1fc>
   110f0:	6365c83a 	sub	r18,r12,r13
   110f4:	6485803a 	cmpltu	r2,r12,r18
   110f8:	8ac7c83a 	sub	r3,r17,r11
   110fc:	1887c83a 	sub	r3,r3,r2
   11100:	1880202c 	andhi	r2,r3,128
   11104:	1000321e 	bne	r2,zero,111d0 <__adddf3+0x668>
   11108:	90c4b03a 	or	r2,r18,r3
   1110c:	10004926 	beq	r2,zero,11234 <__adddf3+0x6cc>
   11110:	1823883a 	mov	r17,r3
   11114:	003ecc06 	br	10c48 <__adddf3+0xe0>
   11118:	28bff804 	addi	r2,r5,-32
   1111c:	28c00820 	cmpeqi	r3,r5,32
   11120:	5884d83a 	srl	r2,r11,r2
   11124:	1800041e 	bne	r3,zero,11138 <__adddf3+0x5d0>
   11128:	00c01004 	movi	r3,64
   1112c:	1947c83a 	sub	r3,r3,r5
   11130:	58c6983a 	sll	r3,r11,r3
   11134:	68dab03a 	or	r13,r13,r3
   11138:	6824c03a 	cmpne	r18,r13,zero
   1113c:	90a4b03a 	or	r18,r18,r2
   11140:	003eb906 	br	10c28 <__adddf3+0xc0>
   11144:	5ac02034 	orhi	r11,r11,128
   11148:	003f2406 	br	10ddc <__adddf3+0x274>
   1114c:	8b06b03a 	or	r3,r17,r12
   11150:	18009126 	beq	r3,zero,11398 <__adddf3+0x830>
   11154:	28ffffc4 	addi	r3,r5,-1
   11158:	1800ac26 	beq	r3,zero,1140c <__adddf3+0x8a4>
   1115c:	2941ffe0 	cmpeqi	r5,r5,2047
   11160:	2800861e 	bne	r5,zero,1137c <__adddf3+0x814>
   11164:	19000e48 	cmpgei	r4,r3,57
   11168:	2000501e 	bne	r4,zero,112ac <__adddf3+0x744>
   1116c:	180b883a 	mov	r5,r3
   11170:	003f7506 	br	10f48 <__adddf3+0x3e0>
   11174:	00ffe034 	movhi	r3,65408
   11178:	18ffffc4 	addi	r3,r3,-1
   1117c:	10c6703a 	and	r3,r2,r3
   11180:	1804977a 	slli	r2,r3,29
   11184:	8121c83a 	sub	r16,r16,r4
   11188:	1806d0fa 	srli	r3,r3,3
   1118c:	003f9e06 	br	11008 <__adddf3+0x4a0>
   11190:	04800044 	movi	r18,1
   11194:	003eff06 	br	10d94 <__adddf3+0x22c>
   11198:	1881ffe0 	cmpeqi	r2,r3,2047
   1119c:	103f521e 	bne	r2,zero,10ee8 <__adddf3+0x380>
   111a0:	6349883a 	add	r4,r12,r13
   111a4:	8ad7883a 	add	r11,r17,r11
   111a8:	2305803a 	cmpltu	r2,r4,r12
   111ac:	5885883a 	add	r2,r11,r2
   111b0:	2008d07a 	srli	r4,r4,1
   111b4:	102497fa 	slli	r18,r2,31
   111b8:	1022d07a 	srli	r17,r2,1
   111bc:	208001cc 	andi	r2,r4,7
   111c0:	9124b03a 	or	r18,r18,r4
   111c4:	1821883a 	mov	r16,r3
   111c8:	103eb71e 	bne	r2,zero,10ca8 <__adddf3+0x140>
   111cc:	003fbf06 	br	110cc <__adddf3+0x564>
   111d0:	6b25c83a 	sub	r18,r13,r12
   111d4:	5c57c83a 	sub	r11,r11,r17
   111d8:	6c9b803a 	cmpltu	r13,r13,r18
   111dc:	5b63c83a 	sub	r17,r11,r13
   111e0:	3827883a 	mov	r19,r7
   111e4:	5029883a 	mov	r20,r10
   111e8:	003e9706 	br	10c48 <__adddf3+0xe0>
   111ec:	283f8b1e 	bne	r5,zero,1101c <__adddf3+0x4b4>
   111f0:	1000261e 	bne	r2,zero,1128c <__adddf3+0x724>
   111f4:	00bfffc4 	movi	r2,-1
   111f8:	0027883a 	mov	r19,zero
   111fc:	003f9006 	br	11040 <__adddf3+0x4d8>
   11200:	6365c83a 	sub	r18,r12,r13
   11204:	8ad7c83a 	sub	r11,r17,r11
   11208:	6485803a 	cmpltu	r2,r12,r18
   1120c:	58a3c83a 	sub	r17,r11,r2
   11210:	04000044 	movi	r16,1
   11214:	003e8706 	br	10c34 <__adddf3+0xcc>
   11218:	8804977a 	slli	r2,r17,29
   1121c:	00c80034 	movhi	r3,8192
   11220:	18ffffc4 	addi	r3,r3,-1
   11224:	20c8703a 	and	r4,r4,r3
   11228:	2084b03a 	or	r2,r4,r2
   1122c:	8806d0fa 	srli	r3,r17,3
   11230:	003f8106 	br	11038 <__adddf3+0x4d0>
   11234:	0027883a 	mov	r19,zero
   11238:	0007883a 	mov	r3,zero
   1123c:	0009883a 	mov	r4,zero
   11240:	003eaf06 	br	10d00 <__adddf3+0x198>
   11244:	28bff804 	addi	r2,r5,-32
   11248:	28c00820 	cmpeqi	r3,r5,32
   1124c:	5884d83a 	srl	r2,r11,r2
   11250:	1800041e 	bne	r3,zero,11264 <__adddf3+0x6fc>
   11254:	00c01004 	movi	r3,64
   11258:	1947c83a 	sub	r3,r3,r5
   1125c:	58c6983a 	sll	r3,r11,r3
   11260:	68dab03a 	or	r13,r13,r3
   11264:	6824c03a 	cmpne	r18,r13,zero
   11268:	90a4b03a 	or	r18,r18,r2
   1126c:	003f0c06 	br	10ea0 <__adddf3+0x338>
   11270:	880a977a 	slli	r5,r17,29
   11274:	00880034 	movhi	r2,8192
   11278:	10bfffc4 	addi	r2,r2,-1
   1127c:	2084703a 	and	r2,r4,r2
   11280:	8806d0fa 	srli	r3,r17,3
   11284:	1144b03a 	or	r2,r2,r5
   11288:	003f5f06 	br	11008 <__adddf3+0x4a0>
   1128c:	5804977a 	slli	r2,r11,29
   11290:	00c80034 	movhi	r3,8192
   11294:	18ffffc4 	addi	r3,r3,-1
   11298:	30c8703a 	and	r4,r6,r3
   1129c:	1104b03a 	or	r2,r2,r4
   112a0:	5806d0fa 	srli	r3,r11,3
   112a4:	3827883a 	mov	r19,r7
   112a8:	003f6306 	br	11038 <__adddf3+0x4d0>
   112ac:	04800044 	movi	r18,1
   112b0:	003f3106 	br	10f78 <__adddf3+0x410>
   112b4:	28fff804 	addi	r3,r5,-32
   112b8:	29000820 	cmpeqi	r4,r5,32
   112bc:	88c6d83a 	srl	r3,r17,r3
   112c0:	2000041e 	bne	r4,zero,112d4 <__adddf3+0x76c>
   112c4:	01001004 	movi	r4,64
   112c8:	2149c83a 	sub	r4,r4,r5
   112cc:	8908983a 	sll	r4,r17,r4
   112d0:	6118b03a 	or	r12,r12,r4
   112d4:	6024c03a 	cmpne	r18,r12,zero
   112d8:	90e4b03a 	or	r18,r18,r3
   112dc:	003ead06 	br	10d94 <__adddf3+0x22c>
   112e0:	10004f26 	beq	r2,zero,11420 <__adddf3+0x8b8>
   112e4:	5b5ab03a 	or	r13,r11,r13
   112e8:	683f4d26 	beq	r13,zero,11020 <__adddf3+0x4b8>
   112ec:	8806d0fa 	srli	r3,r17,3
   112f0:	01480034 	movhi	r5,8192
   112f4:	8822977a 	slli	r17,r17,29
   112f8:	297fffc4 	addi	r5,r5,-1
   112fc:	2144703a 	and	r2,r4,r5
   11300:	1900022c 	andhi	r4,r3,8
   11304:	1444b03a 	or	r2,r2,r17
   11308:	203f4b26 	beq	r4,zero,11038 <__adddf3+0x4d0>
   1130c:	5808d0fa 	srli	r4,r11,3
   11310:	2200022c 	andhi	r8,r4,8
   11314:	403f481e 	bne	r8,zero,11038 <__adddf3+0x4d0>
   11318:	5804977a 	slli	r2,r11,29
   1131c:	314a703a 	and	r5,r6,r5
   11320:	3827883a 	mov	r19,r7
   11324:	2884b03a 	or	r2,r5,r2
   11328:	2007883a 	mov	r3,r4
   1132c:	003f4206 	br	11038 <__adddf3+0x4d0>
   11330:	04000084 	movi	r16,2
   11334:	003ee206 	br	10ec0 <__adddf3+0x358>
   11338:	6b25c83a 	sub	r18,r13,r12
   1133c:	5c57c83a 	sub	r11,r11,r17
   11340:	6c9b803a 	cmpltu	r13,r13,r18
   11344:	5b63c83a 	sub	r17,r11,r13
   11348:	3827883a 	mov	r19,r7
   1134c:	5029883a 	mov	r20,r10
   11350:	04000044 	movi	r16,1
   11354:	003e3706 	br	10c34 <__adddf3+0xcc>
   11358:	103fb626 	beq	r2,zero,11234 <__adddf3+0x6cc>
   1135c:	5808977a 	slli	r4,r11,29
   11360:	00880034 	movhi	r2,8192
   11364:	10bfffc4 	addi	r2,r2,-1
   11368:	3084703a 	and	r2,r6,r2
   1136c:	5806d0fa 	srli	r3,r11,3
   11370:	1104b03a 	or	r2,r2,r4
   11374:	3827883a 	mov	r19,r7
   11378:	003f2306 	br	11008 <__adddf3+0x4a0>
   1137c:	5808977a 	slli	r4,r11,29
   11380:	00880034 	movhi	r2,8192
   11384:	10bfffc4 	addi	r2,r2,-1
   11388:	3084703a 	and	r2,r6,r2
   1138c:	5806d0fa 	srli	r3,r11,3
   11390:	1104b03a 	or	r2,r2,r4
   11394:	003f2806 	br	11038 <__adddf3+0x4d0>
   11398:	6819883a 	mov	r12,r13
   1139c:	5823883a 	mov	r17,r11
   113a0:	003f3006 	br	11064 <__adddf3+0x4fc>
   113a4:	5808977a 	slli	r4,r11,29
   113a8:	00880034 	movhi	r2,8192
   113ac:	10bfffc4 	addi	r2,r2,-1
   113b0:	3084703a 	and	r2,r6,r2
   113b4:	5806d0fa 	srli	r3,r11,3
   113b8:	1104b03a 	or	r2,r2,r4
   113bc:	003f1206 	br	11008 <__adddf3+0x4a0>
   113c0:	5808977a 	slli	r4,r11,29
   113c4:	00880034 	movhi	r2,8192
   113c8:	10bfffc4 	addi	r2,r2,-1
   113cc:	3084703a 	and	r2,r6,r2
   113d0:	5806d0fa 	srli	r3,r11,3
   113d4:	1104b03a 	or	r2,r2,r4
   113d8:	3827883a 	mov	r19,r7
   113dc:	003f1606 	br	11038 <__adddf3+0x4d0>
   113e0:	28fff804 	addi	r3,r5,-32
   113e4:	29000820 	cmpeqi	r4,r5,32
   113e8:	88c6d83a 	srl	r3,r17,r3
   113ec:	2000041e 	bne	r4,zero,11400 <__adddf3+0x898>
   113f0:	01001004 	movi	r4,64
   113f4:	2149c83a 	sub	r4,r4,r5
   113f8:	8908983a 	sll	r4,r17,r4
   113fc:	6118b03a 	or	r12,r12,r4
   11400:	6024c03a 	cmpne	r18,r12,zero
   11404:	90e4b03a 	or	r18,r18,r3
   11408:	003edb06 	br	10f78 <__adddf3+0x410>
   1140c:	6365883a 	add	r18,r12,r13
   11410:	8ad7883a 	add	r11,r17,r11
   11414:	935b803a 	cmpltu	r13,r18,r13
   11418:	5b63883a 	add	r17,r11,r13
   1141c:	003ebc06 	br	10f10 <__adddf3+0x3a8>
   11420:	5804977a 	slli	r2,r11,29
   11424:	00c80034 	movhi	r3,8192
   11428:	18ffffc4 	addi	r3,r3,-1
   1142c:	30cc703a 	and	r6,r6,r3
   11430:	1184b03a 	or	r2,r2,r6
   11434:	5806d0fa 	srli	r3,r11,3
   11438:	003eff06 	br	11038 <__adddf3+0x4d0>
   1143c:	90c4b03a 	or	r2,r18,r3
   11440:	103f7c26 	beq	r2,zero,11234 <__adddf3+0x6cc>
   11444:	1823883a 	mov	r17,r3
   11448:	003f2006 	br	110cc <__adddf3+0x564>
   1144c:	00c00804 	movi	r3,32
   11450:	1907c83a 	sub	r3,r3,r4
   11454:	000b883a 	mov	r5,zero
   11458:	003e0c06 	br	10c8c <__adddf3+0x124>
   1145c:	0005883a 	mov	r2,zero
   11460:	00c1ffc4 	movi	r3,2047
   11464:	0009883a 	mov	r4,zero
   11468:	003e2506 	br	10d00 <__adddf3+0x198>

0001146c <__divdf3>:
   1146c:	2806d53a 	srli	r3,r5,20
   11470:	defff004 	addi	sp,sp,-64
   11474:	00800434 	movhi	r2,16
   11478:	dd800c15 	stw	r22,48(sp)
   1147c:	dd400b15 	stw	r21,44(sp)
   11480:	dd000a15 	stw	r20,40(sp)
   11484:	dc800815 	stw	r18,32(sp)
   11488:	dc000615 	stw	r16,24(sp)
   1148c:	10bfffc4 	addi	r2,r2,-1
   11490:	dfc00f15 	stw	ra,60(sp)
   11494:	df000e15 	stw	fp,56(sp)
   11498:	ddc00d15 	stw	r23,52(sp)
   1149c:	dcc00915 	stw	r19,36(sp)
   114a0:	dc400715 	stw	r17,28(sp)
   114a4:	18c1ffcc 	andi	r3,r3,2047
   114a8:	282cd7fa 	srli	r22,r5,31
   114ac:	302b883a 	mov	r21,r6
   114b0:	3821883a 	mov	r16,r7
   114b4:	2029883a 	mov	r20,r4
   114b8:	28a4703a 	and	r18,r5,r2
   114bc:	18013426 	beq	r3,zero,11990 <__divdf3+0x524>
   114c0:	1881ffe0 	cmpeqi	r2,r3,2047
   114c4:	1001451e 	bne	r2,zero,119dc <__divdf3+0x570>
   114c8:	900a90fa 	slli	r5,r18,3
   114cc:	2022d77a 	srli	r17,r4,29
   114d0:	202890fa 	slli	r20,r4,3
   114d4:	1f3f0044 	addi	fp,r3,-1023
   114d8:	8962b03a 	or	r17,r17,r5
   114dc:	8c402034 	orhi	r17,r17,128
   114e0:	0027883a 	mov	r19,zero
   114e4:	0025883a 	mov	r18,zero
   114e8:	8004d53a 	srli	r2,r16,20
   114ec:	01000434 	movhi	r4,16
   114f0:	213fffc4 	addi	r4,r4,-1
   114f4:	1081ffcc 	andi	r2,r2,2047
   114f8:	802ed7fa 	srli	r23,r16,31
   114fc:	8120703a 	and	r16,r16,r4
   11500:	10011226 	beq	r2,zero,1194c <__divdf3+0x4e0>
   11504:	1101ffe0 	cmpeqi	r4,r2,2047
   11508:	20013b1e 	bne	r4,zero,119f8 <__divdf3+0x58c>
   1150c:	a808d77a 	srli	r4,r21,29
   11510:	802090fa 	slli	r16,r16,3
   11514:	a80e90fa 	slli	r7,r21,3
   11518:	10bf0044 	addi	r2,r2,-1023
   1151c:	2420b03a 	or	r16,r4,r16
   11520:	84002034 	orhi	r16,r16,128
   11524:	e0b9c83a 	sub	fp,fp,r2
   11528:	0009883a 	mov	r4,zero
   1152c:	98800428 	cmpgeui	r2,r19,16
   11530:	b5eaf03a 	xor	r21,r22,r23
   11534:	1000391e 	bne	r2,zero,1161c <__divdf3+0x1b0>
   11538:	982690ba 	slli	r19,r19,2
   1153c:	00800074 	movhi	r2,1
   11540:	9885883a 	add	r2,r19,r2
   11544:	10855317 	ldw	r2,5452(r2)
   11548:	1000683a 	jmp	r2
   1154c:	0001161c 	xori	zero,zero,1112
   11550:	00011604 	movi	zero,1112
   11554:	000115b4 	movhi	zero,1110
   11558:	00011614 	movui	zero,1112
   1155c:	000115b4 	movhi	zero,1110
   11560:	00011a5c 	xori	zero,zero,1129
   11564:	000115b4 	movhi	zero,1110
   11568:	00011614 	movui	zero,1112
   1156c:	00011604 	movi	zero,1112
   11570:	00011604 	movi	zero,1112
   11574:	00011a5c 	xori	zero,zero,1129
   11578:	00011614 	movui	zero,1112
   1157c:	0001158c 	andi	zero,zero,1110
   11580:	0001158c 	andi	zero,zero,1110
   11584:	0001158c 	andi	zero,zero,1110
   11588:	00011aec 	andhi	zero,zero,1131
   1158c:	b02b883a 	mov	r21,r22
   11590:	8821883a 	mov	r16,r17
   11594:	a00f883a 	mov	r7,r20
   11598:	9009883a 	mov	r4,r18
   1159c:	208000a0 	cmpeqi	r2,r4,2
   115a0:	1000181e 	bne	r2,zero,11604 <__divdf3+0x198>
   115a4:	208000e0 	cmpeqi	r2,r4,3
   115a8:	1001df1e 	bne	r2,zero,11d28 <__divdf3+0x8bc>
   115ac:	21000060 	cmpeqi	r4,r4,1
   115b0:	2000d326 	beq	r4,zero,11900 <__divdf3+0x494>
   115b4:	0009883a 	mov	r4,zero
   115b8:	0023883a 	mov	r17,zero
   115bc:	0029883a 	mov	r20,zero
   115c0:	2006953a 	slli	r3,r4,20
   115c4:	a80c97fa 	slli	r6,r21,31
   115c8:	a005883a 	mov	r2,r20
   115cc:	1c46b03a 	or	r3,r3,r17
   115d0:	1986b03a 	or	r3,r3,r6
   115d4:	dfc00f17 	ldw	ra,60(sp)
   115d8:	df000e17 	ldw	fp,56(sp)
   115dc:	ddc00d17 	ldw	r23,52(sp)
   115e0:	dd800c17 	ldw	r22,48(sp)
   115e4:	dd400b17 	ldw	r21,44(sp)
   115e8:	dd000a17 	ldw	r20,40(sp)
   115ec:	dcc00917 	ldw	r19,36(sp)
   115f0:	dc800817 	ldw	r18,32(sp)
   115f4:	dc400717 	ldw	r17,28(sp)
   115f8:	dc000617 	ldw	r16,24(sp)
   115fc:	dec01004 	addi	sp,sp,64
   11600:	f800283a 	ret
   11604:	0101ffc4 	movi	r4,2047
   11608:	0023883a 	mov	r17,zero
   1160c:	0029883a 	mov	r20,zero
   11610:	003feb06 	br	115c0 <__divdf3+0x154>
   11614:	b82b883a 	mov	r21,r23
   11618:	003fe006 	br	1159c <__divdf3+0x130>
   1161c:	84414d36 	bltu	r16,r17,11b54 <__divdf3+0x6e8>
   11620:	84414b26 	beq	r16,r17,11b50 <__divdf3+0x6e4>
   11624:	a025883a 	mov	r18,r20
   11628:	e73fffc4 	addi	fp,fp,-1
   1162c:	0029883a 	mov	r20,zero
   11630:	8020923a 	slli	r16,r16,8
   11634:	3826d63a 	srli	r19,r7,24
   11638:	8809883a 	mov	r4,r17
   1163c:	802ed43a 	srli	r23,r16,16
   11640:	9c26b03a 	or	r19,r19,r16
   11644:	9dbfffcc 	andi	r22,r19,65535
   11648:	b80b883a 	mov	r5,r23
   1164c:	d9c00115 	stw	r7,4(sp)
   11650:	dd800015 	stw	r22,0(sp)
   11654:	0010a800 	call	10a80 <__udivsi3>
   11658:	b009883a 	mov	r4,r22
   1165c:	100b883a 	mov	r5,r2
   11660:	1021883a 	mov	r16,r2
   11664:	0010b400 	call	10b40 <__mulsi3>
   11668:	8809883a 	mov	r4,r17
   1166c:	b80b883a 	mov	r5,r23
   11670:	102d883a 	mov	r22,r2
   11674:	0010ae40 	call	10ae4 <__umodsi3>
   11678:	1004943a 	slli	r2,r2,16
   1167c:	9008d43a 	srli	r4,r18,16
   11680:	d9c00117 	ldw	r7,4(sp)
   11684:	2088b03a 	or	r4,r4,r2
   11688:	3822923a 	slli	r17,r7,8
   1168c:	2580042e 	bgeu	r4,r22,116a0 <__divdf3+0x234>
   11690:	24c9883a 	add	r4,r4,r19
   11694:	80bfffc4 	addi	r2,r16,-1
   11698:	24c1602e 	bgeu	r4,r19,11c1c <__divdf3+0x7b0>
   1169c:	1021883a 	mov	r16,r2
   116a0:	25adc83a 	sub	r22,r4,r22
   116a4:	b80b883a 	mov	r5,r23
   116a8:	b009883a 	mov	r4,r22
   116ac:	0010a800 	call	10a80 <__udivsi3>
   116b0:	d9000017 	ldw	r4,0(sp)
   116b4:	100b883a 	mov	r5,r2
   116b8:	d8800215 	stw	r2,8(sp)
   116bc:	0010b400 	call	10b40 <__mulsi3>
   116c0:	b80b883a 	mov	r5,r23
   116c4:	b009883a 	mov	r4,r22
   116c8:	d8800115 	stw	r2,4(sp)
   116cc:	0010ae40 	call	10ae4 <__umodsi3>
   116d0:	1004943a 	slli	r2,r2,16
   116d4:	da400117 	ldw	r9,4(sp)
   116d8:	94bfffcc 	andi	r18,r18,65535
   116dc:	908eb03a 	or	r7,r18,r2
   116e0:	da000217 	ldw	r8,8(sp)
   116e4:	3a40042e 	bgeu	r7,r9,116f8 <__divdf3+0x28c>
   116e8:	3ccf883a 	add	r7,r7,r19
   116ec:	40bfffc4 	addi	r2,r8,-1
   116f0:	3cc1462e 	bgeu	r7,r19,11c0c <__divdf3+0x7a0>
   116f4:	1011883a 	mov	r8,r2
   116f8:	8020943a 	slli	r16,r16,16
   116fc:	88bfffcc 	andi	r2,r17,65535
   11700:	100b883a 	mov	r5,r2
   11704:	8220b03a 	or	r16,r16,r8
   11708:	82bfffcc 	andi	r10,r16,65535
   1170c:	3a51c83a 	sub	r8,r7,r9
   11710:	5009883a 	mov	r4,r10
   11714:	da000415 	stw	r8,16(sp)
   11718:	da800515 	stw	r10,20(sp)
   1171c:	8024d43a 	srli	r18,r16,16
   11720:	d8800115 	stw	r2,4(sp)
   11724:	0010b400 	call	10b40 <__mulsi3>
   11728:	d9400117 	ldw	r5,4(sp)
   1172c:	882cd43a 	srli	r22,r17,16
   11730:	9009883a 	mov	r4,r18
   11734:	d8800315 	stw	r2,12(sp)
   11738:	0010b400 	call	10b40 <__mulsi3>
   1173c:	9009883a 	mov	r4,r18
   11740:	b00b883a 	mov	r5,r22
   11744:	d8800215 	stw	r2,8(sp)
   11748:	0010b400 	call	10b40 <__mulsi3>
   1174c:	da800517 	ldw	r10,20(sp)
   11750:	b009883a 	mov	r4,r22
   11754:	1025883a 	mov	r18,r2
   11758:	500b883a 	mov	r5,r10
   1175c:	0010b400 	call	10b40 <__mulsi3>
   11760:	da400317 	ldw	r9,12(sp)
   11764:	d9c00217 	ldw	r7,8(sp)
   11768:	da000417 	ldw	r8,16(sp)
   1176c:	4808d43a 	srli	r4,r9,16
   11770:	11c5883a 	add	r2,r2,r7
   11774:	2089883a 	add	r4,r4,r2
   11778:	21c0022e 	bgeu	r4,r7,11784 <__divdf3+0x318>
   1177c:	00800074 	movhi	r2,1
   11780:	90a5883a 	add	r18,r18,r2
   11784:	200ad43a 	srli	r5,r4,16
   11788:	200e943a 	slli	r7,r4,16
   1178c:	4a7fffcc 	andi	r9,r9,65535
   11790:	2c85883a 	add	r2,r5,r18
   11794:	3a4f883a 	add	r7,r7,r9
   11798:	40800236 	bltu	r8,r2,117a4 <__divdf3+0x338>
   1179c:	40800a1e 	bne	r8,r2,117c8 <__divdf3+0x35c>
   117a0:	a1c0092e 	bgeu	r20,r7,117c8 <__divdf3+0x35c>
   117a4:	a469883a 	add	r20,r20,r17
   117a8:	a449803a 	cmpltu	r4,r20,r17
   117ac:	24c9883a 	add	r4,r4,r19
   117b0:	4111883a 	add	r8,r8,r4
   117b4:	813fffc4 	addi	r4,r16,-1
   117b8:	9a01112e 	bgeu	r19,r8,11c00 <__divdf3+0x794>
   117bc:	40814236 	bltu	r8,r2,11cc8 <__divdf3+0x85c>
   117c0:	12014026 	beq	r2,r8,11cc4 <__divdf3+0x858>
   117c4:	2021883a 	mov	r16,r4
   117c8:	a1e5c83a 	sub	r18,r20,r7
   117cc:	4085c83a 	sub	r2,r8,r2
   117d0:	a4a9803a 	cmpltu	r20,r20,r18
   117d4:	1529c83a 	sub	r20,r2,r20
   117d8:	9d012926 	beq	r19,r20,11c80 <__divdf3+0x814>
   117dc:	a009883a 	mov	r4,r20
   117e0:	b80b883a 	mov	r5,r23
   117e4:	0010a800 	call	10a80 <__udivsi3>
   117e8:	d9000017 	ldw	r4,0(sp)
   117ec:	100b883a 	mov	r5,r2
   117f0:	d8800215 	stw	r2,8(sp)
   117f4:	0010b400 	call	10b40 <__mulsi3>
   117f8:	a009883a 	mov	r4,r20
   117fc:	b80b883a 	mov	r5,r23
   11800:	1029883a 	mov	r20,r2
   11804:	0010ae40 	call	10ae4 <__umodsi3>
   11808:	1004943a 	slli	r2,r2,16
   1180c:	9008d43a 	srli	r4,r18,16
   11810:	2088b03a 	or	r4,r4,r2
   11814:	2500f136 	bltu	r4,r20,11bdc <__divdf3+0x770>
   11818:	2529c83a 	sub	r20,r4,r20
   1181c:	a009883a 	mov	r4,r20
   11820:	b80b883a 	mov	r5,r23
   11824:	0010a800 	call	10a80 <__udivsi3>
   11828:	d9000017 	ldw	r4,0(sp)
   1182c:	100b883a 	mov	r5,r2
   11830:	d8800315 	stw	r2,12(sp)
   11834:	0010b400 	call	10b40 <__mulsi3>
   11838:	a009883a 	mov	r4,r20
   1183c:	b80b883a 	mov	r5,r23
   11840:	1029883a 	mov	r20,r2
   11844:	0010ae40 	call	10ae4 <__umodsi3>
   11848:	1004943a 	slli	r2,r2,16
   1184c:	91ffffcc 	andi	r7,r18,65535
   11850:	da400317 	ldw	r9,12(sp)
   11854:	3890b03a 	or	r8,r7,r2
   11858:	4500d936 	bltu	r8,r20,11bc0 <__divdf3+0x754>
   1185c:	d8800217 	ldw	r2,8(sp)
   11860:	ddc00117 	ldw	r23,4(sp)
   11864:	4529c83a 	sub	r20,r8,r20
   11868:	1024943a 	slli	r18,r2,16
   1186c:	b809883a 	mov	r4,r23
   11870:	924eb03a 	or	r7,r18,r9
   11874:	3824d43a 	srli	r18,r7,16
   11878:	3a7fffcc 	andi	r9,r7,65535
   1187c:	480b883a 	mov	r5,r9
   11880:	d9c00215 	stw	r7,8(sp)
   11884:	da400115 	stw	r9,4(sp)
   11888:	0010b400 	call	10b40 <__mulsi3>
   1188c:	b80b883a 	mov	r5,r23
   11890:	9009883a 	mov	r4,r18
   11894:	102f883a 	mov	r23,r2
   11898:	0010b400 	call	10b40 <__mulsi3>
   1189c:	900b883a 	mov	r5,r18
   118a0:	b009883a 	mov	r4,r22
   118a4:	d8800015 	stw	r2,0(sp)
   118a8:	0010b400 	call	10b40 <__mulsi3>
   118ac:	da400117 	ldw	r9,4(sp)
   118b0:	b009883a 	mov	r4,r22
   118b4:	1025883a 	mov	r18,r2
   118b8:	480b883a 	mov	r5,r9
   118bc:	0010b400 	call	10b40 <__mulsi3>
   118c0:	d8c00017 	ldw	r3,0(sp)
   118c4:	b808d43a 	srli	r4,r23,16
   118c8:	d9c00217 	ldw	r7,8(sp)
   118cc:	10cb883a 	add	r5,r2,r3
   118d0:	2149883a 	add	r4,r4,r5
   118d4:	20c0022e 	bgeu	r4,r3,118e0 <__divdf3+0x474>
   118d8:	00800074 	movhi	r2,1
   118dc:	90a5883a 	add	r18,r18,r2
   118e0:	200ad43a 	srli	r5,r4,16
   118e4:	2008943a 	slli	r4,r4,16
   118e8:	ba3fffcc 	andi	r8,r23,65535
   118ec:	2c8b883a 	add	r5,r5,r18
   118f0:	2209883a 	add	r4,r4,r8
   118f4:	a1408f36 	bltu	r20,r5,11b34 <__divdf3+0x6c8>
   118f8:	a1408d26 	beq	r20,r5,11b30 <__divdf3+0x6c4>
   118fc:	39c00054 	ori	r7,r7,1
   11900:	e100ffc4 	addi	r4,fp,1023
   11904:	01005c0e 	bge	zero,r4,11a78 <__divdf3+0x60c>
   11908:	388001cc 	andi	r2,r7,7
   1190c:	1000e41e 	bne	r2,zero,11ca0 <__divdf3+0x834>
   11910:	8080402c 	andhi	r2,r16,256
   11914:	10000426 	beq	r2,zero,11928 <__divdf3+0x4bc>
   11918:	00bfc034 	movhi	r2,65280
   1191c:	10bfffc4 	addi	r2,r2,-1
   11920:	80a0703a 	and	r16,r16,r2
   11924:	e1010004 	addi	r4,fp,1024
   11928:	2081ffc8 	cmpgei	r2,r4,2047
   1192c:	103f351e 	bne	r2,zero,11604 <__divdf3+0x198>
   11930:	380ed0fa 	srli	r7,r7,3
   11934:	8024977a 	slli	r18,r16,29
   11938:	8022927a 	slli	r17,r16,9
   1193c:	2101ffcc 	andi	r4,r4,2047
   11940:	91e8b03a 	or	r20,r18,r7
   11944:	8822d33a 	srli	r17,r17,12
   11948:	003f1d06 	br	115c0 <__divdf3+0x154>
   1194c:	854eb03a 	or	r7,r16,r21
   11950:	38003e26 	beq	r7,zero,11a4c <__divdf3+0x5e0>
   11954:	80008f26 	beq	r16,zero,11b94 <__divdf3+0x728>
   11958:	8009883a 	mov	r4,r16
   1195c:	00131800 	call	13180 <__clzsi2>
   11960:	117ffd44 	addi	r5,r2,-11
   11964:	01000744 	movi	r4,29
   11968:	11fffe04 	addi	r7,r2,-8
   1196c:	2149c83a 	sub	r4,r4,r5
   11970:	81e0983a 	sll	r16,r16,r7
   11974:	a908d83a 	srl	r4,r21,r4
   11978:	a9ce983a 	sll	r7,r21,r7
   1197c:	2420b03a 	or	r16,r4,r16
   11980:	1705883a 	add	r2,r2,fp
   11984:	1700fcc4 	addi	fp,r2,1011
   11988:	0009883a 	mov	r4,zero
   1198c:	003ee706 	br	1152c <__divdf3+0xc0>
   11990:	24a2b03a 	or	r17,r4,r18
   11994:	2027883a 	mov	r19,r4
   11998:	88002726 	beq	r17,zero,11a38 <__divdf3+0x5cc>
   1199c:	90007326 	beq	r18,zero,11b6c <__divdf3+0x700>
   119a0:	9009883a 	mov	r4,r18
   119a4:	00131800 	call	13180 <__clzsi2>
   119a8:	10fffd44 	addi	r3,r2,-11
   119ac:	04400744 	movi	r17,29
   119b0:	153ffe04 	addi	r20,r2,-8
   119b4:	88e3c83a 	sub	r17,r17,r3
   119b8:	950a983a 	sll	r5,r18,r20
   119bc:	9c62d83a 	srl	r17,r19,r17
   119c0:	9d28983a 	sll	r20,r19,r20
   119c4:	8962b03a 	or	r17,r17,r5
   119c8:	00ff0344 	movi	r3,-1011
   119cc:	18b9c83a 	sub	fp,r3,r2
   119d0:	0027883a 	mov	r19,zero
   119d4:	0025883a 	mov	r18,zero
   119d8:	003ec306 	br	114e8 <__divdf3+0x7c>
   119dc:	24a2b03a 	or	r17,r4,r18
   119e0:	8800101e 	bne	r17,zero,11a24 <__divdf3+0x5b8>
   119e4:	0029883a 	mov	r20,zero
   119e8:	04c00204 	movi	r19,8
   119ec:	0701ffc4 	movi	fp,2047
   119f0:	04800084 	movi	r18,2
   119f4:	003ebc06 	br	114e8 <__divdf3+0x7c>
   119f8:	854eb03a 	or	r7,r16,r21
   119fc:	e73e0044 	addi	fp,fp,-2047
   11a00:	3800041e 	bne	r7,zero,11a14 <__divdf3+0x5a8>
   11a04:	9cc00094 	ori	r19,r19,2
   11a08:	0021883a 	mov	r16,zero
   11a0c:	01000084 	movi	r4,2
   11a10:	003ec606 	br	1152c <__divdf3+0xc0>
   11a14:	9cc000d4 	ori	r19,r19,3
   11a18:	a80f883a 	mov	r7,r21
   11a1c:	010000c4 	movi	r4,3
   11a20:	003ec206 	br	1152c <__divdf3+0xc0>
   11a24:	9023883a 	mov	r17,r18
   11a28:	04c00304 	movi	r19,12
   11a2c:	0701ffc4 	movi	fp,2047
   11a30:	048000c4 	movi	r18,3
   11a34:	003eac06 	br	114e8 <__divdf3+0x7c>
   11a38:	0029883a 	mov	r20,zero
   11a3c:	04c00104 	movi	r19,4
   11a40:	0039883a 	mov	fp,zero
   11a44:	04800044 	movi	r18,1
   11a48:	003ea706 	br	114e8 <__divdf3+0x7c>
   11a4c:	9cc00054 	ori	r19,r19,1
   11a50:	0021883a 	mov	r16,zero
   11a54:	01000044 	movi	r4,1
   11a58:	003eb406 	br	1152c <__divdf3+0xc0>
   11a5c:	04400434 	movhi	r17,16
   11a60:	002b883a 	mov	r21,zero
   11a64:	8c7fffc4 	addi	r17,r17,-1
   11a68:	053fffc4 	movi	r20,-1
   11a6c:	0101ffc4 	movi	r4,2047
   11a70:	003ed306 	br	115c0 <__divdf3+0x154>
   11a74:	01ffffc4 	movi	r7,-1
   11a78:	00800044 	movi	r2,1
   11a7c:	1105c83a 	sub	r2,r2,r4
   11a80:	11400e48 	cmpgei	r5,r2,57
   11a84:	283ecb1e 	bne	r5,zero,115b4 <__divdf3+0x148>
   11a88:	11400808 	cmpgei	r5,r2,32
   11a8c:	2800671e 	bne	r5,zero,11c2c <__divdf3+0x7c0>
   11a90:	e0c10784 	addi	r3,fp,1054
   11a94:	80e4983a 	sll	r18,r16,r3
   11a98:	3888d83a 	srl	r4,r7,r2
   11a9c:	38c6983a 	sll	r3,r7,r3
   11aa0:	80a0d83a 	srl	r16,r16,r2
   11aa4:	9124b03a 	or	r18,r18,r4
   11aa8:	1806c03a 	cmpne	r3,r3,zero
   11aac:	90e4b03a 	or	r18,r18,r3
   11ab0:	908001cc 	andi	r2,r18,7
   11ab4:	10000726 	beq	r2,zero,11ad4 <__divdf3+0x668>
   11ab8:	908003cc 	andi	r2,r18,15
   11abc:	10800120 	cmpeqi	r2,r2,4
   11ac0:	1000041e 	bne	r2,zero,11ad4 <__divdf3+0x668>
   11ac4:	90800104 	addi	r2,r18,4
   11ac8:	14a5803a 	cmpltu	r18,r2,r18
   11acc:	84a1883a 	add	r16,r16,r18
   11ad0:	1025883a 	mov	r18,r2
   11ad4:	8080202c 	andhi	r2,r16,128
   11ad8:	10008f26 	beq	r2,zero,11d18 <__divdf3+0x8ac>
   11adc:	01000044 	movi	r4,1
   11ae0:	0023883a 	mov	r17,zero
   11ae4:	0029883a 	mov	r20,zero
   11ae8:	003eb506 	br	115c0 <__divdf3+0x154>
   11aec:	8880022c 	andhi	r2,r17,8
   11af0:	10000926 	beq	r2,zero,11b18 <__divdf3+0x6ac>
   11af4:	8080022c 	andhi	r2,r16,8
   11af8:	1000071e 	bne	r2,zero,11b18 <__divdf3+0x6ac>
   11afc:	00800434 	movhi	r2,16
   11b00:	84400234 	orhi	r17,r16,8
   11b04:	10bfffc4 	addi	r2,r2,-1
   11b08:	88a2703a 	and	r17,r17,r2
   11b0c:	b82b883a 	mov	r21,r23
   11b10:	3829883a 	mov	r20,r7
   11b14:	003fd506 	br	11a6c <__divdf3+0x600>
   11b18:	00800434 	movhi	r2,16
   11b1c:	8c400234 	orhi	r17,r17,8
   11b20:	10bfffc4 	addi	r2,r2,-1
   11b24:	88a2703a 	and	r17,r17,r2
   11b28:	b02b883a 	mov	r21,r22
   11b2c:	003fcf06 	br	11a6c <__divdf3+0x600>
   11b30:	203f7326 	beq	r4,zero,11900 <__divdf3+0x494>
   11b34:	9d11883a 	add	r8,r19,r20
   11b38:	38bfffc4 	addi	r2,r7,-1
   11b3c:	44c04c36 	bltu	r8,r19,11c70 <__divdf3+0x804>
   11b40:	41406736 	bltu	r8,r5,11ce0 <__divdf3+0x874>
   11b44:	41407e26 	beq	r8,r5,11d40 <__divdf3+0x8d4>
   11b48:	100f883a 	mov	r7,r2
   11b4c:	003f6b06 	br	118fc <__divdf3+0x490>
   11b50:	a1feb436 	bltu	r20,r7,11624 <__divdf3+0x1b8>
   11b54:	880897fa 	slli	r4,r17,31
   11b58:	a004d07a 	srli	r2,r20,1
   11b5c:	8822d07a 	srli	r17,r17,1
   11b60:	a02897fa 	slli	r20,r20,31
   11b64:	20a4b03a 	or	r18,r4,r2
   11b68:	003eb106 	br	11630 <__divdf3+0x1c4>
   11b6c:	00131800 	call	13180 <__clzsi2>
   11b70:	10c00544 	addi	r3,r2,21
   11b74:	19000748 	cmpgei	r4,r3,29
   11b78:	1023883a 	mov	r17,r2
   11b7c:	10800804 	addi	r2,r2,32
   11b80:	203f8a26 	beq	r4,zero,119ac <__divdf3+0x540>
   11b84:	8c7ffe04 	addi	r17,r17,-8
   11b88:	a462983a 	sll	r17,r20,r17
   11b8c:	0029883a 	mov	r20,zero
   11b90:	003f8d06 	br	119c8 <__divdf3+0x55c>
   11b94:	a809883a 	mov	r4,r21
   11b98:	00131800 	call	13180 <__clzsi2>
   11b9c:	11400544 	addi	r5,r2,21
   11ba0:	29800748 	cmpgei	r6,r5,29
   11ba4:	1009883a 	mov	r4,r2
   11ba8:	10800804 	addi	r2,r2,32
   11bac:	303f6d26 	beq	r6,zero,11964 <__divdf3+0x4f8>
   11bb0:	213ffe04 	addi	r4,r4,-8
   11bb4:	a920983a 	sll	r16,r21,r4
   11bb8:	000f883a 	mov	r7,zero
   11bbc:	003f7006 	br	11980 <__divdf3+0x514>
   11bc0:	44d1883a 	add	r8,r8,r19
   11bc4:	48bfffc4 	addi	r2,r9,-1
   11bc8:	44c03c36 	bltu	r8,r19,11cbc <__divdf3+0x850>
   11bcc:	45003b2e 	bgeu	r8,r20,11cbc <__divdf3+0x850>
   11bd0:	4a7fff84 	addi	r9,r9,-2
   11bd4:	44d1883a 	add	r8,r8,r19
   11bd8:	003f2006 	br	1185c <__divdf3+0x3f0>
   11bdc:	d8c00217 	ldw	r3,8(sp)
   11be0:	24c9883a 	add	r4,r4,r19
   11be4:	18bfffc4 	addi	r2,r3,-1
   11be8:	24c03236 	bltu	r4,r19,11cb4 <__divdf3+0x848>
   11bec:	2500312e 	bgeu	r4,r20,11cb4 <__divdf3+0x848>
   11bf0:	18bfff84 	addi	r2,r3,-2
   11bf4:	d8800215 	stw	r2,8(sp)
   11bf8:	24c9883a 	add	r4,r4,r19
   11bfc:	003f0606 	br	11818 <__divdf3+0x3ac>
   11c00:	9a3ef01e 	bne	r19,r8,117c4 <__divdf3+0x358>
   11c04:	a47eef36 	bltu	r20,r17,117c4 <__divdf3+0x358>
   11c08:	003eec06 	br	117bc <__divdf3+0x350>
   11c0c:	3a7eb92e 	bgeu	r7,r9,116f4 <__divdf3+0x288>
   11c10:	423fff84 	addi	r8,r8,-2
   11c14:	3ccf883a 	add	r7,r7,r19
   11c18:	003eb706 	br	116f8 <__divdf3+0x28c>
   11c1c:	25be9f2e 	bgeu	r4,r22,1169c <__divdf3+0x230>
   11c20:	843fff84 	addi	r16,r16,-2
   11c24:	24c9883a 	add	r4,r4,r19
   11c28:	003e9d06 	br	116a0 <__divdf3+0x234>
   11c2c:	017ff844 	movi	r5,-31
   11c30:	2909c83a 	sub	r4,r5,r4
   11c34:	10800820 	cmpeqi	r2,r2,32
   11c38:	8108d83a 	srl	r4,r16,r4
   11c3c:	1000031e 	bne	r2,zero,11c4c <__divdf3+0x7e0>
   11c40:	e0c10f84 	addi	r3,fp,1086
   11c44:	80c6983a 	sll	r3,r16,r3
   11c48:	38ceb03a 	or	r7,r7,r3
   11c4c:	3824c03a 	cmpne	r18,r7,zero
   11c50:	9124b03a 	or	r18,r18,r4
   11c54:	940001cc 	andi	r16,r18,7
   11c58:	8000291e 	bne	r16,zero,11d00 <__divdf3+0x894>
   11c5c:	0023883a 	mov	r17,zero
   11c60:	9024d0fa 	srli	r18,r18,3
   11c64:	0009883a 	mov	r4,zero
   11c68:	9428b03a 	or	r20,r18,r16
   11c6c:	003e5406 	br	115c0 <__divdf3+0x154>
   11c70:	100f883a 	mov	r7,r2
   11c74:	417f211e 	bne	r8,r5,118fc <__divdf3+0x490>
   11c78:	247f201e 	bne	r4,r17,118fc <__divdf3+0x490>
   11c7c:	003f2006 	br	11900 <__divdf3+0x494>
   11c80:	e0bf0088 	cmpgei	r2,fp,-1022
   11c84:	e100ffc4 	addi	r4,fp,1023
   11c88:	103f7a26 	beq	r2,zero,11a74 <__divdf3+0x608>
   11c8c:	00bfffc4 	movi	r2,-1
   11c90:	11c00104 	addi	r7,r2,4
   11c94:	3885803a 	cmpltu	r2,r7,r2
   11c98:	80a1883a 	add	r16,r16,r2
   11c9c:	003f1c06 	br	11910 <__divdf3+0x4a4>
   11ca0:	388003cc 	andi	r2,r7,15
   11ca4:	10800120 	cmpeqi	r2,r2,4
   11ca8:	103f191e 	bne	r2,zero,11910 <__divdf3+0x4a4>
   11cac:	3805883a 	mov	r2,r7
   11cb0:	003ff706 	br	11c90 <__divdf3+0x824>
   11cb4:	d8800215 	stw	r2,8(sp)
   11cb8:	003ed706 	br	11818 <__divdf3+0x3ac>
   11cbc:	1013883a 	mov	r9,r2
   11cc0:	003ee606 	br	1185c <__divdf3+0x3f0>
   11cc4:	a1febf2e 	bgeu	r20,r7,117c4 <__divdf3+0x358>
   11cc8:	a469883a 	add	r20,r20,r17
   11ccc:	a449803a 	cmpltu	r4,r20,r17
   11cd0:	24c9883a 	add	r4,r4,r19
   11cd4:	843fff84 	addi	r16,r16,-2
   11cd8:	4111883a 	add	r8,r8,r4
   11cdc:	003eba06 	br	117c8 <__divdf3+0x35c>
   11ce0:	8c45883a 	add	r2,r17,r17
   11ce4:	1463803a 	cmpltu	r17,r2,r17
   11ce8:	8ce3883a 	add	r17,r17,r19
   11cec:	4451883a 	add	r8,r8,r17
   11cf0:	39ffff84 	addi	r7,r7,-2
   11cf4:	1023883a 	mov	r17,r2
   11cf8:	417fdf26 	beq	r8,r5,11c78 <__divdf3+0x80c>
   11cfc:	003eff06 	br	118fc <__divdf3+0x490>
   11d00:	908003cc 	andi	r2,r18,15
   11d04:	10800120 	cmpeqi	r2,r2,4
   11d08:	1000111e 	bne	r2,zero,11d50 <__divdf3+0x8e4>
   11d0c:	90800104 	addi	r2,r18,4
   11d10:	14a1803a 	cmpltu	r16,r2,r18
   11d14:	1025883a 	mov	r18,r2
   11d18:	8022927a 	slli	r17,r16,9
   11d1c:	8020977a 	slli	r16,r16,29
   11d20:	8822d33a 	srli	r17,r17,12
   11d24:	003fce06 	br	11c60 <__divdf3+0x7f4>
   11d28:	00800434 	movhi	r2,16
   11d2c:	84400234 	orhi	r17,r16,8
   11d30:	10bfffc4 	addi	r2,r2,-1
   11d34:	88a2703a 	and	r17,r17,r2
   11d38:	3829883a 	mov	r20,r7
   11d3c:	003f4b06 	br	11a6c <__divdf3+0x600>
   11d40:	893fe736 	bltu	r17,r4,11ce0 <__divdf3+0x874>
   11d44:	100f883a 	mov	r7,r2
   11d48:	247eec1e 	bne	r4,r17,118fc <__divdf3+0x490>
   11d4c:	003eec06 	br	11900 <__divdf3+0x494>
   11d50:	0021883a 	mov	r16,zero
   11d54:	003ff006 	br	11d18 <__divdf3+0x8ac>

00011d58 <__ledf2>:
   11d58:	2810d53a 	srli	r8,r5,20
   11d5c:	3812d53a 	srli	r9,r7,20
   11d60:	00c00434 	movhi	r3,16
   11d64:	4201ffcc 	andi	r8,r8,2047
   11d68:	18ffffc4 	addi	r3,r3,-1
   11d6c:	4281ffd8 	cmpnei	r10,r8,2047
   11d70:	2816d7fa 	srli	r11,r5,31
   11d74:	3804d7fa 	srli	r2,r7,31
   11d78:	28ca703a 	and	r5,r5,r3
   11d7c:	38ce703a 	and	r7,r7,r3
   11d80:	48c1ffcc 	andi	r3,r9,2047
   11d84:	50001426 	beq	r10,zero,11dd8 <__ledf2+0x80>
   11d88:	1a41ffd8 	cmpnei	r9,r3,2047
   11d8c:	48000926 	beq	r9,zero,11db4 <__ledf2+0x5c>
   11d90:	4000191e 	bne	r8,zero,11df8 <__ledf2+0xa0>
   11d94:	2910b03a 	or	r8,r5,r4
   11d98:	1800221e 	bne	r3,zero,11e24 <__ledf2+0xcc>
   11d9c:	3986b03a 	or	r3,r7,r6
   11da0:	18002326 	beq	r3,zero,11e30 <__ledf2+0xd8>
   11da4:	4000281e 	bne	r8,zero,11e48 <__ledf2+0xf0>
   11da8:	10000a1e 	bne	r2,zero,11dd4 <__ledf2+0x7c>
   11dac:	00bfffc4 	movi	r2,-1
   11db0:	f800283a 	ret
   11db4:	398eb03a 	or	r7,r7,r6
   11db8:	38000d1e 	bne	r7,zero,11df0 <__ledf2+0x98>
   11dbc:	4000021e 	bne	r8,zero,11dc8 <__ledf2+0x70>
   11dc0:	290ab03a 	or	r5,r5,r4
   11dc4:	283ff826 	beq	r5,zero,11da8 <__ledf2+0x50>
   11dc8:	58801326 	beq	r11,r2,11e18 <__ledf2+0xc0>
   11dcc:	00800044 	movi	r2,1
   11dd0:	583ff61e 	bne	r11,zero,11dac <__ledf2+0x54>
   11dd4:	f800283a 	ret
   11dd8:	290ab03a 	or	r5,r5,r4
   11ddc:	2800041e 	bne	r5,zero,11df0 <__ledf2+0x98>
   11de0:	1901ffe0 	cmpeqi	r4,r3,2047
   11de4:	203ff926 	beq	r4,zero,11dcc <__ledf2+0x74>
   11de8:	398eb03a 	or	r7,r7,r6
   11dec:	38001326 	beq	r7,zero,11e3c <__ledf2+0xe4>
   11df0:	00800084 	movi	r2,2
   11df4:	f800283a 	ret
   11df8:	183ff426 	beq	r3,zero,11dcc <__ledf2+0x74>
   11dfc:	58bff31e 	bne	r11,r2,11dcc <__ledf2+0x74>
   11e00:	1a3ff216 	blt	r3,r8,11dcc <__ledf2+0x74>
   11e04:	40c00416 	blt	r8,r3,11e18 <__ledf2+0xc0>
   11e08:	397ff036 	bltu	r7,r5,11dcc <__ledf2+0x74>
   11e0c:	29c0021e 	bne	r5,r7,11e18 <__ledf2+0xc0>
   11e10:	313fee36 	bltu	r6,r4,11dcc <__ledf2+0x74>
   11e14:	21800a2e 	bgeu	r4,r6,11e40 <__ledf2+0xe8>
   11e18:	583fe426 	beq	r11,zero,11dac <__ledf2+0x54>
   11e1c:	5805883a 	mov	r2,r11
   11e20:	f800283a 	ret
   11e24:	403fe81e 	bne	r8,zero,11dc8 <__ledf2+0x70>
   11e28:	103fea1e 	bne	r2,zero,11dd4 <__ledf2+0x7c>
   11e2c:	003fdf06 	br	11dac <__ledf2+0x54>
   11e30:	0005883a 	mov	r2,zero
   11e34:	403fe726 	beq	r8,zero,11dd4 <__ledf2+0x7c>
   11e38:	003fe406 	br	11dcc <__ledf2+0x74>
   11e3c:	58bfe31e 	bne	r11,r2,11dcc <__ledf2+0x74>
   11e40:	0005883a 	mov	r2,zero
   11e44:	f800283a 	ret
   11e48:	58bfef26 	beq	r11,r2,11e08 <__ledf2+0xb0>
   11e4c:	003fdf06 	br	11dcc <__ledf2+0x74>

00011e50 <__muldf3>:
   11e50:	deffef04 	addi	sp,sp,-68
   11e54:	2804d53a 	srli	r2,r5,20
   11e58:	ddc00e15 	stw	r23,56(sp)
   11e5c:	282ed7fa 	srli	r23,r5,31
   11e60:	00c00434 	movhi	r3,16
   11e64:	df000f15 	stw	fp,60(sp)
   11e68:	dc400815 	stw	r17,32(sp)
   11e6c:	dc000715 	stw	r16,28(sp)
   11e70:	18ffffc4 	addi	r3,r3,-1
   11e74:	dfc01015 	stw	ra,64(sp)
   11e78:	dd800d15 	stw	r22,52(sp)
   11e7c:	dd400c15 	stw	r21,48(sp)
   11e80:	dd000b15 	stw	r20,44(sp)
   11e84:	dcc00a15 	stw	r19,40(sp)
   11e88:	dc800915 	stw	r18,36(sp)
   11e8c:	1081ffcc 	andi	r2,r2,2047
   11e90:	2021883a 	mov	r16,r4
   11e94:	3039883a 	mov	fp,r6
   11e98:	28e2703a 	and	r17,r5,r3
   11e9c:	b811883a 	mov	r8,r23
   11ea0:	10009226 	beq	r2,zero,120ec <__muldf3+0x29c>
   11ea4:	10c1ffe0 	cmpeqi	r3,r2,2047
   11ea8:	1800a71e 	bne	r3,zero,12148 <__muldf3+0x2f8>
   11eac:	882290fa 	slli	r17,r17,3
   11eb0:	2006d77a 	srli	r3,r4,29
   11eb4:	202690fa 	slli	r19,r4,3
   11eb8:	157f0044 	addi	r21,r2,-1023
   11ebc:	1c62b03a 	or	r17,r3,r17
   11ec0:	8c402034 	orhi	r17,r17,128
   11ec4:	0029883a 	mov	r20,zero
   11ec8:	000d883a 	mov	r6,zero
   11ecc:	3804d53a 	srli	r2,r7,20
   11ed0:	04000434 	movhi	r16,16
   11ed4:	843fffc4 	addi	r16,r16,-1
   11ed8:	1081ffcc 	andi	r2,r2,2047
   11edc:	380ad7fa 	srli	r5,r7,31
   11ee0:	e025883a 	mov	r18,fp
   11ee4:	3c20703a 	and	r16,r7,r16
   11ee8:	10006526 	beq	r2,zero,12080 <__muldf3+0x230>
   11eec:	10c1ffe0 	cmpeqi	r3,r2,2047
   11ef0:	1800291e 	bne	r3,zero,11f98 <__muldf3+0x148>
   11ef4:	e006d77a 	srli	r3,fp,29
   11ef8:	802090fa 	slli	r16,r16,3
   11efc:	10bf0044 	addi	r2,r2,-1023
   11f00:	e02490fa 	slli	r18,fp,3
   11f04:	1c20b03a 	or	r16,r3,r16
   11f08:	1547883a 	add	r3,r2,r21
   11f0c:	a08002c8 	cmpgei	r2,r20,11
   11f10:	84002034 	orhi	r16,r16,128
   11f14:	0009883a 	mov	r4,zero
   11f18:	1d400044 	addi	r21,r3,1
   11f1c:	10002c1e 	bne	r2,zero,11fd0 <__muldf3+0x180>
   11f20:	2dd0f03a 	xor	r8,r5,r23
   11f24:	a08000c8 	cmpgei	r2,r20,3
   11f28:	1000251e 	bne	r2,zero,11fc0 <__muldf3+0x170>
   11f2c:	a53fffc4 	addi	r20,r20,-1
   11f30:	a50000a8 	cmpgeui	r20,r20,2
   11f34:	a000ce1e 	bne	r20,zero,12270 <__muldf3+0x420>
   11f38:	208000a0 	cmpeqi	r2,r4,2
   11f3c:	1000891e 	bne	r2,zero,12164 <__muldf3+0x314>
   11f40:	21000060 	cmpeqi	r4,r4,1
   11f44:	20002b26 	beq	r4,zero,11ff4 <__muldf3+0x1a4>
   11f48:	0009883a 	mov	r4,zero
   11f4c:	0021883a 	mov	r16,zero
   11f50:	0027883a 	mov	r19,zero
   11f54:	2006953a 	slli	r3,r4,20
   11f58:	401097fa 	slli	r8,r8,31
   11f5c:	9805883a 	mov	r2,r19
   11f60:	1c06b03a 	or	r3,r3,r16
   11f64:	1a06b03a 	or	r3,r3,r8
   11f68:	dfc01017 	ldw	ra,64(sp)
   11f6c:	df000f17 	ldw	fp,60(sp)
   11f70:	ddc00e17 	ldw	r23,56(sp)
   11f74:	dd800d17 	ldw	r22,52(sp)
   11f78:	dd400c17 	ldw	r21,48(sp)
   11f7c:	dd000b17 	ldw	r20,44(sp)
   11f80:	dcc00a17 	ldw	r19,40(sp)
   11f84:	dc800917 	ldw	r18,36(sp)
   11f88:	dc400817 	ldw	r17,32(sp)
   11f8c:	dc000717 	ldw	r16,28(sp)
   11f90:	dec01104 	addi	sp,sp,68
   11f94:	f800283a 	ret
   11f98:	8704b03a 	or	r2,r16,fp
   11f9c:	a8c1ffc4 	addi	r3,r21,2047
   11fa0:	10007a26 	beq	r2,zero,1218c <__muldf3+0x33c>
   11fa4:	a50000d4 	ori	r20,r20,3
   11fa8:	a08002c8 	cmpgei	r2,r20,11
   11fac:	2deef03a 	xor	r23,r5,r23
   11fb0:	ad420004 	addi	r21,r21,2048
   11fb4:	10019c1e 	bne	r2,zero,12628 <__muldf3+0x7d8>
   11fb8:	b811883a 	mov	r8,r23
   11fbc:	010000c4 	movi	r4,3
   11fc0:	00800044 	movi	r2,1
   11fc4:	1504983a 	sll	r2,r2,r20
   11fc8:	11c14c0c 	andi	r7,r2,1328
   11fcc:	38002326 	beq	r7,zero,1205c <__muldf3+0x20c>
   11fd0:	308000a0 	cmpeqi	r2,r6,2
   11fd4:	1000631e 	bne	r2,zero,12164 <__muldf3+0x314>
   11fd8:	308000e0 	cmpeqi	r2,r6,3
   11fdc:	1001571e 	bne	r2,zero,1253c <__muldf3+0x6ec>
   11fe0:	3009883a 	mov	r4,r6
   11fe4:	21000060 	cmpeqi	r4,r4,1
   11fe8:	8821883a 	mov	r16,r17
   11fec:	9825883a 	mov	r18,r19
   11ff0:	203fd51e 	bne	r4,zero,11f48 <__muldf3+0xf8>
   11ff4:	a900ffc4 	addi	r4,r21,1023
   11ff8:	0100800e 	bge	zero,r4,121fc <__muldf3+0x3ac>
   11ffc:	908001cc 	andi	r2,r18,7
   12000:	10000726 	beq	r2,zero,12020 <__muldf3+0x1d0>
   12004:	908003cc 	andi	r2,r18,15
   12008:	10800120 	cmpeqi	r2,r2,4
   1200c:	1000041e 	bne	r2,zero,12020 <__muldf3+0x1d0>
   12010:	90800104 	addi	r2,r18,4
   12014:	14a5803a 	cmpltu	r18,r2,r18
   12018:	84a1883a 	add	r16,r16,r18
   1201c:	1025883a 	mov	r18,r2
   12020:	8080402c 	andhi	r2,r16,256
   12024:	10000426 	beq	r2,zero,12038 <__muldf3+0x1e8>
   12028:	00bfc034 	movhi	r2,65280
   1202c:	10bfffc4 	addi	r2,r2,-1
   12030:	80a0703a 	and	r16,r16,r2
   12034:	a9010004 	addi	r4,r21,1024
   12038:	2081ffc8 	cmpgei	r2,r4,2047
   1203c:	1000491e 	bne	r2,zero,12164 <__muldf3+0x314>
   12040:	8026977a 	slli	r19,r16,29
   12044:	9024d0fa 	srli	r18,r18,3
   12048:	8020927a 	slli	r16,r16,9
   1204c:	2101ffcc 	andi	r4,r4,2047
   12050:	9ca6b03a 	or	r19,r19,r18
   12054:	8020d33a 	srli	r16,r16,12
   12058:	003fbe06 	br	11f54 <__muldf3+0x104>
   1205c:	1180900c 	andi	r6,r2,576
   12060:	3000441e 	bne	r6,zero,12174 <__muldf3+0x324>
   12064:	1080220c 	andi	r2,r2,136
   12068:	10008126 	beq	r2,zero,12270 <__muldf3+0x420>
   1206c:	2811883a 	mov	r8,r5
   12070:	8023883a 	mov	r17,r16
   12074:	9027883a 	mov	r19,r18
   12078:	200d883a 	mov	r6,r4
   1207c:	003fd406 	br	11fd0 <__muldf3+0x180>
   12080:	8704b03a 	or	r2,r16,fp
   12084:	10005426 	beq	r2,zero,121d8 <__muldf3+0x388>
   12088:	d9400215 	stw	r5,8(sp)
   1208c:	da000115 	stw	r8,4(sp)
   12090:	d9800015 	stw	r6,0(sp)
   12094:	80013926 	beq	r16,zero,1257c <__muldf3+0x72c>
   12098:	8009883a 	mov	r4,r16
   1209c:	00131800 	call	13180 <__clzsi2>
   120a0:	d9800017 	ldw	r6,0(sp)
   120a4:	da000117 	ldw	r8,4(sp)
   120a8:	d9400217 	ldw	r5,8(sp)
   120ac:	1007883a 	mov	r3,r2
   120b0:	113ffd44 	addi	r4,r2,-11
   120b4:	00800744 	movi	r2,29
   120b8:	1cbffe04 	addi	r18,r3,-8
   120bc:	1105c83a 	sub	r2,r2,r4
   120c0:	84a0983a 	sll	r16,r16,r18
   120c4:	e084d83a 	srl	r2,fp,r2
   120c8:	e4a4983a 	sll	r18,fp,r18
   120cc:	1420b03a 	or	r16,r2,r16
   120d0:	a8c7c83a 	sub	r3,r21,r3
   120d4:	18ff0344 	addi	r3,r3,-1011
   120d8:	a08002c8 	cmpgei	r2,r20,11
   120dc:	0009883a 	mov	r4,zero
   120e0:	1d400044 	addi	r21,r3,1
   120e4:	103f8e26 	beq	r2,zero,11f20 <__muldf3+0xd0>
   120e8:	003fb906 	br	11fd0 <__muldf3+0x180>
   120ec:	2466b03a 	or	r19,r4,r17
   120f0:	98003426 	beq	r19,zero,121c4 <__muldf3+0x374>
   120f4:	d9c00115 	stw	r7,4(sp)
   120f8:	da000015 	stw	r8,0(sp)
   120fc:	88011426 	beq	r17,zero,12550 <__muldf3+0x700>
   12100:	8809883a 	mov	r4,r17
   12104:	00131800 	call	13180 <__clzsi2>
   12108:	da000017 	ldw	r8,0(sp)
   1210c:	d9c00117 	ldw	r7,4(sp)
   12110:	1009883a 	mov	r4,r2
   12114:	117ffd44 	addi	r5,r2,-11
   12118:	00c00744 	movi	r3,29
   1211c:	24fffe04 	addi	r19,r4,-8
   12120:	1947c83a 	sub	r3,r3,r5
   12124:	8ce2983a 	sll	r17,r17,r19
   12128:	80c6d83a 	srl	r3,r16,r3
   1212c:	84e6983a 	sll	r19,r16,r19
   12130:	1c62b03a 	or	r17,r3,r17
   12134:	00bf0344 	movi	r2,-1011
   12138:	112bc83a 	sub	r21,r2,r4
   1213c:	0029883a 	mov	r20,zero
   12140:	000d883a 	mov	r6,zero
   12144:	003f6106 	br	11ecc <__muldf3+0x7c>
   12148:	2466b03a 	or	r19,r4,r17
   1214c:	9800181e 	bne	r19,zero,121b0 <__muldf3+0x360>
   12150:	0023883a 	mov	r17,zero
   12154:	05000204 	movi	r20,8
   12158:	0541ffc4 	movi	r21,2047
   1215c:	01800084 	movi	r6,2
   12160:	003f5a06 	br	11ecc <__muldf3+0x7c>
   12164:	0101ffc4 	movi	r4,2047
   12168:	0021883a 	mov	r16,zero
   1216c:	0027883a 	mov	r19,zero
   12170:	003f7806 	br	11f54 <__muldf3+0x104>
   12174:	04000434 	movhi	r16,16
   12178:	0011883a 	mov	r8,zero
   1217c:	843fffc4 	addi	r16,r16,-1
   12180:	04ffffc4 	movi	r19,-1
   12184:	0101ffc4 	movi	r4,2047
   12188:	003f7206 	br	11f54 <__muldf3+0x104>
   1218c:	a5000094 	ori	r20,r20,2
   12190:	a08002c8 	cmpgei	r2,r20,11
   12194:	ad420004 	addi	r21,r21,2048
   12198:	103f8d1e 	bne	r2,zero,11fd0 <__muldf3+0x180>
   1219c:	2dd0f03a 	xor	r8,r5,r23
   121a0:	0025883a 	mov	r18,zero
   121a4:	0021883a 	mov	r16,zero
   121a8:	01000084 	movi	r4,2
   121ac:	003f5d06 	br	11f24 <__muldf3+0xd4>
   121b0:	2027883a 	mov	r19,r4
   121b4:	05000304 	movi	r20,12
   121b8:	0541ffc4 	movi	r21,2047
   121bc:	018000c4 	movi	r6,3
   121c0:	003f4206 	br	11ecc <__muldf3+0x7c>
   121c4:	0023883a 	mov	r17,zero
   121c8:	05000104 	movi	r20,4
   121cc:	002b883a 	mov	r21,zero
   121d0:	01800044 	movi	r6,1
   121d4:	003f3d06 	br	11ecc <__muldf3+0x7c>
   121d8:	a5000054 	ori	r20,r20,1
   121dc:	a807883a 	mov	r3,r21
   121e0:	a08002c8 	cmpgei	r2,r20,11
   121e4:	0021883a 	mov	r16,zero
   121e8:	0025883a 	mov	r18,zero
   121ec:	01000044 	movi	r4,1
   121f0:	1d400044 	addi	r21,r3,1
   121f4:	103f4a26 	beq	r2,zero,11f20 <__muldf3+0xd0>
   121f8:	003f7506 	br	11fd0 <__muldf3+0x180>
   121fc:	00c00044 	movi	r3,1
   12200:	1907c83a 	sub	r3,r3,r4
   12204:	18800e48 	cmpgei	r2,r3,57
   12208:	103f4f1e 	bne	r2,zero,11f48 <__muldf3+0xf8>
   1220c:	18800808 	cmpgei	r2,r3,32
   12210:	1000ea1e 	bne	r2,zero,125bc <__muldf3+0x76c>
   12214:	ad410784 	addi	r21,r21,1054
   12218:	90c4d83a 	srl	r2,r18,r3
   1221c:	8566983a 	sll	r19,r16,r21
   12220:	9552983a 	sll	r9,r18,r21
   12224:	80c6d83a 	srl	r3,r16,r3
   12228:	98a6b03a 	or	r19,r19,r2
   1222c:	4812c03a 	cmpne	r9,r9,zero
   12230:	9a66b03a 	or	r19,r19,r9
   12234:	988001cc 	andi	r2,r19,7
   12238:	10000726 	beq	r2,zero,12258 <__muldf3+0x408>
   1223c:	988003cc 	andi	r2,r19,15
   12240:	10800120 	cmpeqi	r2,r2,4
   12244:	1000041e 	bne	r2,zero,12258 <__muldf3+0x408>
   12248:	98800104 	addi	r2,r19,4
   1224c:	14e7803a 	cmpltu	r19,r2,r19
   12250:	1cc7883a 	add	r3,r3,r19
   12254:	1027883a 	mov	r19,r2
   12258:	1880202c 	andhi	r2,r3,128
   1225c:	1000ee26 	beq	r2,zero,12618 <__muldf3+0x7c8>
   12260:	01000044 	movi	r4,1
   12264:	0021883a 	mov	r16,zero
   12268:	0027883a 	mov	r19,zero
   1226c:	003f3906 	br	11f54 <__muldf3+0x104>
   12270:	9828d43a 	srli	r20,r19,16
   12274:	973fffcc 	andi	fp,r18,65535
   12278:	9cffffcc 	andi	r19,r19,65535
   1227c:	980b883a 	mov	r5,r19
   12280:	e009883a 	mov	r4,fp
   12284:	d8c00215 	stw	r3,8(sp)
   12288:	da000115 	stw	r8,4(sp)
   1228c:	9024d43a 	srli	r18,r18,16
   12290:	0010b400 	call	10b40 <__mulsi3>
   12294:	e00b883a 	mov	r5,fp
   12298:	a009883a 	mov	r4,r20
   1229c:	102d883a 	mov	r22,r2
   122a0:	0010b400 	call	10b40 <__mulsi3>
   122a4:	900b883a 	mov	r5,r18
   122a8:	a009883a 	mov	r4,r20
   122ac:	102f883a 	mov	r23,r2
   122b0:	0010b400 	call	10b40 <__mulsi3>
   122b4:	980b883a 	mov	r5,r19
   122b8:	9009883a 	mov	r4,r18
   122bc:	d8800015 	stw	r2,0(sp)
   122c0:	0010b400 	call	10b40 <__mulsi3>
   122c4:	b00cd43a 	srli	r6,r22,16
   122c8:	15c5883a 	add	r2,r2,r23
   122cc:	da000117 	ldw	r8,4(sp)
   122d0:	308d883a 	add	r6,r6,r2
   122d4:	d8c00217 	ldw	r3,8(sp)
   122d8:	35c0042e 	bgeu	r6,r23,122ec <__muldf3+0x49c>
   122dc:	d9000017 	ldw	r4,0(sp)
   122e0:	00800074 	movhi	r2,1
   122e4:	2085883a 	add	r2,r4,r2
   122e8:	d8800015 	stw	r2,0(sp)
   122ec:	3004943a 	slli	r2,r6,16
   122f0:	d8c00615 	stw	r3,24(sp)
   122f4:	3006d43a 	srli	r3,r6,16
   122f8:	85ffffcc 	andi	r23,r16,65535
   122fc:	b5bfffcc 	andi	r22,r22,65535
   12300:	980b883a 	mov	r5,r19
   12304:	b809883a 	mov	r4,r23
   12308:	1585883a 	add	r2,r2,r22
   1230c:	da000515 	stw	r8,20(sp)
   12310:	d8c00115 	stw	r3,4(sp)
   12314:	8020d43a 	srli	r16,r16,16
   12318:	d8800215 	stw	r2,8(sp)
   1231c:	0010b400 	call	10b40 <__mulsi3>
   12320:	a009883a 	mov	r4,r20
   12324:	b80b883a 	mov	r5,r23
   12328:	d8800415 	stw	r2,16(sp)
   1232c:	0010b400 	call	10b40 <__mulsi3>
   12330:	a009883a 	mov	r4,r20
   12334:	800b883a 	mov	r5,r16
   12338:	1029883a 	mov	r20,r2
   1233c:	0010b400 	call	10b40 <__mulsi3>
   12340:	980b883a 	mov	r5,r19
   12344:	8009883a 	mov	r4,r16
   12348:	d8800315 	stw	r2,12(sp)
   1234c:	0010b400 	call	10b40 <__mulsi3>
   12350:	d9800417 	ldw	r6,16(sp)
   12354:	1505883a 	add	r2,r2,r20
   12358:	d9c00317 	ldw	r7,12(sp)
   1235c:	3026d43a 	srli	r19,r6,16
   12360:	da000517 	ldw	r8,20(sp)
   12364:	d8c00617 	ldw	r3,24(sp)
   12368:	98a7883a 	add	r19,r19,r2
   1236c:	9d00022e 	bgeu	r19,r20,12378 <__muldf3+0x528>
   12370:	00800074 	movhi	r2,1
   12374:	388f883a 	add	r7,r7,r2
   12378:	9828d43a 	srli	r20,r19,16
   1237c:	9826943a 	slli	r19,r19,16
   12380:	882cd43a 	srli	r22,r17,16
   12384:	8c7fffcc 	andi	r17,r17,65535
   12388:	31bfffcc 	andi	r6,r6,65535
   1238c:	e009883a 	mov	r4,fp
   12390:	880b883a 	mov	r5,r17
   12394:	99a7883a 	add	r19,r19,r6
   12398:	d8c00615 	stw	r3,24(sp)
   1239c:	da000515 	stw	r8,20(sp)
   123a0:	a1e9883a 	add	r20,r20,r7
   123a4:	0010b400 	call	10b40 <__mulsi3>
   123a8:	e00b883a 	mov	r5,fp
   123ac:	b009883a 	mov	r4,r22
   123b0:	d8800415 	stw	r2,16(sp)
   123b4:	0010b400 	call	10b40 <__mulsi3>
   123b8:	b00b883a 	mov	r5,r22
   123bc:	9009883a 	mov	r4,r18
   123c0:	d8800315 	stw	r2,12(sp)
   123c4:	0010b400 	call	10b40 <__mulsi3>
   123c8:	9009883a 	mov	r4,r18
   123cc:	880b883a 	mov	r5,r17
   123d0:	1039883a 	mov	fp,r2
   123d4:	0010b400 	call	10b40 <__mulsi3>
   123d8:	d9c00417 	ldw	r7,16(sp)
   123dc:	dac00317 	ldw	r11,12(sp)
   123e0:	da000517 	ldw	r8,20(sp)
   123e4:	380cd43a 	srli	r6,r7,16
   123e8:	12c9883a 	add	r4,r2,r11
   123ec:	d8800117 	ldw	r2,4(sp)
   123f0:	310d883a 	add	r6,r6,r4
   123f4:	d8c00617 	ldw	r3,24(sp)
   123f8:	14d5883a 	add	r10,r2,r19
   123fc:	32c0022e 	bgeu	r6,r11,12408 <__muldf3+0x5b8>
   12400:	00800074 	movhi	r2,1
   12404:	e0b9883a 	add	fp,fp,r2
   12408:	3024d43a 	srli	r18,r6,16
   1240c:	300c943a 	slli	r6,r6,16
   12410:	39ffffcc 	andi	r7,r7,65535
   12414:	880b883a 	mov	r5,r17
   12418:	b809883a 	mov	r4,r23
   1241c:	d8c00415 	stw	r3,16(sp)
   12420:	da000315 	stw	r8,12(sp)
   12424:	da800115 	stw	r10,4(sp)
   12428:	9725883a 	add	r18,r18,fp
   1242c:	31f9883a 	add	fp,r6,r7
   12430:	0010b400 	call	10b40 <__mulsi3>
   12434:	b80b883a 	mov	r5,r23
   12438:	b009883a 	mov	r4,r22
   1243c:	102f883a 	mov	r23,r2
   12440:	0010b400 	call	10b40 <__mulsi3>
   12444:	b00b883a 	mov	r5,r22
   12448:	8009883a 	mov	r4,r16
   1244c:	102d883a 	mov	r22,r2
   12450:	0010b400 	call	10b40 <__mulsi3>
   12454:	880b883a 	mov	r5,r17
   12458:	8009883a 	mov	r4,r16
   1245c:	1023883a 	mov	r17,r2
   12460:	0010b400 	call	10b40 <__mulsi3>
   12464:	b80ed43a 	srli	r7,r23,16
   12468:	1585883a 	add	r2,r2,r22
   1246c:	da800117 	ldw	r10,4(sp)
   12470:	388f883a 	add	r7,r7,r2
   12474:	da000317 	ldw	r8,12(sp)
   12478:	d8c00417 	ldw	r3,16(sp)
   1247c:	3d80022e 	bgeu	r7,r22,12488 <__muldf3+0x638>
   12480:	00800074 	movhi	r2,1
   12484:	88a3883a 	add	r17,r17,r2
   12488:	3808943a 	slli	r4,r7,16
   1248c:	d8800017 	ldw	r2,0(sp)
   12490:	bdffffcc 	andi	r23,r23,65535
   12494:	25c9883a 	add	r4,r4,r23
   12498:	508b883a 	add	r5,r10,r2
   1249c:	2ce7803a 	cmpltu	r19,r5,r19
   124a0:	2509883a 	add	r4,r4,r20
   124a4:	2f0b883a 	add	r5,r5,fp
   124a8:	24d7883a 	add	r11,r4,r19
   124ac:	5c85883a 	add	r2,r11,r18
   124b0:	2f0d803a 	cmpltu	r6,r5,fp
   124b4:	380ed43a 	srli	r7,r7,16
   124b8:	1195883a 	add	r10,r2,r6
   124bc:	2521803a 	cmpltu	r16,r4,r20
   124c0:	5cd7803a 	cmpltu	r11,r11,r19
   124c4:	1485803a 	cmpltu	r2,r2,r18
   124c8:	518d803a 	cmpltu	r6,r10,r6
   124cc:	82e0b03a 	or	r16,r16,r11
   124d0:	1184b03a 	or	r2,r2,r6
   124d4:	81e1883a 	add	r16,r16,r7
   124d8:	2824927a 	slli	r18,r5,9
   124dc:	d9000217 	ldw	r4,8(sp)
   124e0:	80a1883a 	add	r16,r16,r2
   124e4:	8461883a 	add	r16,r16,r17
   124e8:	8020927a 	slli	r16,r16,9
   124ec:	280ad5fa 	srli	r5,r5,23
   124f0:	9124b03a 	or	r18,r18,r4
   124f4:	500cd5fa 	srli	r6,r10,23
   124f8:	5004927a 	slli	r2,r10,9
   124fc:	9024c03a 	cmpne	r18,r18,zero
   12500:	9164b03a 	or	r18,r18,r5
   12504:	8100402c 	andhi	r4,r16,256
   12508:	90a4b03a 	or	r18,r18,r2
   1250c:	81a0b03a 	or	r16,r16,r6
   12510:	20002826 	beq	r4,zero,125b4 <__muldf3+0x764>
   12514:	9006d07a 	srli	r3,r18,1
   12518:	800497fa 	slli	r2,r16,31
   1251c:	9480004c 	andi	r18,r18,1
   12520:	1c86b03a 	or	r3,r3,r18
   12524:	8020d07a 	srli	r16,r16,1
   12528:	18a4b03a 	or	r18,r3,r2
   1252c:	003eb106 	br	11ff4 <__muldf3+0x1a4>
   12530:	2811883a 	mov	r8,r5
   12534:	8023883a 	mov	r17,r16
   12538:	e027883a 	mov	r19,fp
   1253c:	00800434 	movhi	r2,16
   12540:	8c000234 	orhi	r16,r17,8
   12544:	10bfffc4 	addi	r2,r2,-1
   12548:	80a0703a 	and	r16,r16,r2
   1254c:	003f0d06 	br	12184 <__muldf3+0x334>
   12550:	00131800 	call	13180 <__clzsi2>
   12554:	11400544 	addi	r5,r2,21
   12558:	28c00748 	cmpgei	r3,r5,29
   1255c:	da000017 	ldw	r8,0(sp)
   12560:	d9c00117 	ldw	r7,4(sp)
   12564:	11000804 	addi	r4,r2,32
   12568:	183eeb26 	beq	r3,zero,12118 <__muldf3+0x2c8>
   1256c:	10bffe04 	addi	r2,r2,-8
   12570:	80a2983a 	sll	r17,r16,r2
   12574:	0027883a 	mov	r19,zero
   12578:	003eee06 	br	12134 <__muldf3+0x2e4>
   1257c:	e009883a 	mov	r4,fp
   12580:	00131800 	call	13180 <__clzsi2>
   12584:	11000544 	addi	r4,r2,21
   12588:	21c00748 	cmpgei	r7,r4,29
   1258c:	d9800017 	ldw	r6,0(sp)
   12590:	da000117 	ldw	r8,4(sp)
   12594:	d9400217 	ldw	r5,8(sp)
   12598:	10c00804 	addi	r3,r2,32
   1259c:	383ec526 	beq	r7,zero,120b4 <__muldf3+0x264>
   125a0:	10bffe04 	addi	r2,r2,-8
   125a4:	e084983a 	sll	r2,fp,r2
   125a8:	0025883a 	mov	r18,zero
   125ac:	1021883a 	mov	r16,r2
   125b0:	003ec706 	br	120d0 <__muldf3+0x280>
   125b4:	182b883a 	mov	r21,r3
   125b8:	003e8e06 	br	11ff4 <__muldf3+0x1a4>
   125bc:	00bff844 	movi	r2,-31
   125c0:	1109c83a 	sub	r4,r2,r4
   125c4:	18c00820 	cmpeqi	r3,r3,32
   125c8:	8108d83a 	srl	r4,r16,r4
   125cc:	1800031e 	bne	r3,zero,125dc <__muldf3+0x78c>
   125d0:	aa410f84 	addi	r9,r21,1086
   125d4:	8252983a 	sll	r9,r16,r9
   125d8:	9264b03a 	or	r18,r18,r9
   125dc:	9026c03a 	cmpne	r19,r18,zero
   125e0:	9926b03a 	or	r19,r19,r4
   125e4:	98c001cc 	andi	r3,r19,7
   125e8:	1800051e 	bne	r3,zero,12600 <__muldf3+0x7b0>
   125ec:	0021883a 	mov	r16,zero
   125f0:	9826d0fa 	srli	r19,r19,3
   125f4:	0009883a 	mov	r4,zero
   125f8:	98e6b03a 	or	r19,r19,r3
   125fc:	003e5506 	br	11f54 <__muldf3+0x104>
   12600:	988003cc 	andi	r2,r19,15
   12604:	10800120 	cmpeqi	r2,r2,4
   12608:	1000111e 	bne	r2,zero,12650 <__muldf3+0x800>
   1260c:	98800104 	addi	r2,r19,4
   12610:	14c7803a 	cmpltu	r3,r2,r19
   12614:	1027883a 	mov	r19,r2
   12618:	1820927a 	slli	r16,r3,9
   1261c:	1806977a 	slli	r3,r3,29
   12620:	8020d33a 	srli	r16,r16,12
   12624:	003ff206 	br	125f0 <__muldf3+0x7a0>
   12628:	a50003e0 	cmpeqi	r20,r20,15
   1262c:	a03fc026 	beq	r20,zero,12530 <__muldf3+0x6e0>
   12630:	8880022c 	andhi	r2,r17,8
   12634:	103fc126 	beq	r2,zero,1253c <__muldf3+0x6ec>
   12638:	39c0022c 	andhi	r7,r7,8
   1263c:	383fbf1e 	bne	r7,zero,1253c <__muldf3+0x6ec>
   12640:	84000234 	orhi	r16,r16,8
   12644:	2811883a 	mov	r8,r5
   12648:	e027883a 	mov	r19,fp
   1264c:	003ecd06 	br	12184 <__muldf3+0x334>
   12650:	0007883a 	mov	r3,zero
   12654:	003ff006 	br	12618 <__muldf3+0x7c8>

00012658 <__subdf3>:
   12658:	00800434 	movhi	r2,16
   1265c:	3806d53a 	srli	r3,r7,20
   12660:	10bfffc4 	addi	r2,r2,-1
   12664:	defffa04 	addi	sp,sp,-24
   12668:	2890703a 	and	r8,r5,r2
   1266c:	3884703a 	and	r2,r7,r2
   12670:	2812d7fa 	srli	r9,r5,31
   12674:	401090fa 	slli	r8,r8,3
   12678:	280ad53a 	srli	r5,r5,20
   1267c:	100490fa 	slli	r2,r2,3
   12680:	3016d77a 	srli	r11,r6,29
   12684:	dc400115 	stw	r17,4(sp)
   12688:	2022d77a 	srli	r17,r4,29
   1268c:	18c1ffcc 	andi	r3,r3,2047
   12690:	dd000415 	stw	r20,16(sp)
   12694:	dcc00315 	stw	r19,12(sp)
   12698:	dc000015 	stw	r16,0(sp)
   1269c:	dfc00515 	stw	ra,20(sp)
   126a0:	dc800215 	stw	r18,8(sp)
   126a4:	1a81ffd8 	cmpnei	r10,r3,2047
   126a8:	2c01ffcc 	andi	r16,r5,2047
   126ac:	380ed7fa 	srli	r7,r7,31
   126b0:	201890fa 	slli	r12,r4,3
   126b4:	301a90fa 	slli	r13,r6,3
   126b8:	4829883a 	mov	r20,r9
   126bc:	4cc03fcc 	andi	r19,r9,255
   126c0:	8a22b03a 	or	r17,r17,r8
   126c4:	588ab03a 	or	r5,r11,r2
   126c8:	50007126 	beq	r10,zero,12890 <__subdf3+0x238>
   126cc:	39c0005c 	xori	r7,r7,1
   126d0:	3813883a 	mov	r9,r7
   126d4:	3a803fcc 	andi	r10,r7,255
   126d8:	80d1c83a 	sub	r8,r16,r3
   126dc:	99c05526 	beq	r19,r7,12834 <__subdf3+0x1dc>
   126e0:	0202320e 	bge	zero,r8,12fac <__subdf3+0x954>
   126e4:	18008426 	beq	r3,zero,128f8 <__subdf3+0x2a0>
   126e8:	8081ffe0 	cmpeqi	r2,r16,2047
   126ec:	10011b1e 	bne	r2,zero,12b5c <__subdf3+0x504>
   126f0:	40800e48 	cmpgei	r2,r8,57
   126f4:	1000881e 	bne	r2,zero,12918 <__subdf3+0x2c0>
   126f8:	29402034 	orhi	r5,r5,128
   126fc:	40800808 	cmpgei	r2,r8,32
   12700:	1001451e 	bne	r2,zero,12c18 <__subdf3+0x5c0>
   12704:	00800804 	movi	r2,32
   12708:	1205c83a 	sub	r2,r2,r8
   1270c:	28a4983a 	sll	r18,r5,r2
   12710:	6a06d83a 	srl	r3,r13,r8
   12714:	6884983a 	sll	r2,r13,r2
   12718:	2a10d83a 	srl	r8,r5,r8
   1271c:	90e4b03a 	or	r18,r18,r3
   12720:	1004c03a 	cmpne	r2,r2,zero
   12724:	90a4b03a 	or	r18,r18,r2
   12728:	8a23c83a 	sub	r17,r17,r8
   1272c:	64a5c83a 	sub	r18,r12,r18
   12730:	6485803a 	cmpltu	r2,r12,r18
   12734:	88a3c83a 	sub	r17,r17,r2
   12738:	8880202c 	andhi	r2,r17,128
   1273c:	1000ae26 	beq	r2,zero,129f8 <__subdf3+0x3a0>
   12740:	00802034 	movhi	r2,128
   12744:	10bfffc4 	addi	r2,r2,-1
   12748:	88a2703a 	and	r17,r17,r2
   1274c:	8800de26 	beq	r17,zero,12ac8 <__subdf3+0x470>
   12750:	8809883a 	mov	r4,r17
   12754:	00131800 	call	13180 <__clzsi2>
   12758:	10fffe04 	addi	r3,r2,-8
   1275c:	01000804 	movi	r4,32
   12760:	20c5c83a 	sub	r2,r4,r3
   12764:	9084d83a 	srl	r2,r18,r2
   12768:	88e2983a 	sll	r17,r17,r3
   1276c:	90e4983a 	sll	r18,r18,r3
   12770:	1444b03a 	or	r2,r2,r17
   12774:	1c010516 	blt	r3,r16,12b8c <__subdf3+0x534>
   12778:	1c07c83a 	sub	r3,r3,r16
   1277c:	18c00044 	addi	r3,r3,1
   12780:	20c9c83a 	sub	r4,r4,r3
   12784:	910a983a 	sll	r5,r18,r4
   12788:	90e2d83a 	srl	r17,r18,r3
   1278c:	280ac03a 	cmpne	r5,r5,zero
   12790:	1108983a 	sll	r4,r2,r4
   12794:	894ab03a 	or	r5,r17,r5
   12798:	10e2d83a 	srl	r17,r2,r3
   1279c:	0021883a 	mov	r16,zero
   127a0:	2164b03a 	or	r18,r4,r5
   127a4:	908001cc 	andi	r2,r18,7
   127a8:	10000726 	beq	r2,zero,127c8 <__subdf3+0x170>
   127ac:	908003cc 	andi	r2,r18,15
   127b0:	10800120 	cmpeqi	r2,r2,4
   127b4:	1000041e 	bne	r2,zero,127c8 <__subdf3+0x170>
   127b8:	90800104 	addi	r2,r18,4
   127bc:	14a5803a 	cmpltu	r18,r2,r18
   127c0:	8ca3883a 	add	r17,r17,r18
   127c4:	1025883a 	mov	r18,r2
   127c8:	8880202c 	andhi	r2,r17,128
   127cc:	1000d726 	beq	r2,zero,12b2c <__subdf3+0x4d4>
   127d0:	8081ffa0 	cmpeqi	r2,r16,2046
   127d4:	84000044 	addi	r16,r16,1
   127d8:	10007c1e 	bne	r2,zero,129cc <__subdf3+0x374>
   127dc:	013fe034 	movhi	r4,65408
   127e0:	213fffc4 	addi	r4,r4,-1
   127e4:	8908703a 	and	r4,r17,r4
   127e8:	2004977a 	slli	r2,r4,29
   127ec:	2008927a 	slli	r4,r4,9
   127f0:	9024d0fa 	srli	r18,r18,3
   127f4:	80c1ffcc 	andi	r3,r16,2047
   127f8:	2008d33a 	srli	r4,r4,12
   127fc:	1484b03a 	or	r2,r2,r18
   12800:	9d00004c 	andi	r20,r19,1
   12804:	1806953a 	slli	r3,r3,20
   12808:	a02897fa 	slli	r20,r20,31
   1280c:	1906b03a 	or	r3,r3,r4
   12810:	1d06b03a 	or	r3,r3,r20
   12814:	dfc00517 	ldw	ra,20(sp)
   12818:	dd000417 	ldw	r20,16(sp)
   1281c:	dcc00317 	ldw	r19,12(sp)
   12820:	dc800217 	ldw	r18,8(sp)
   12824:	dc400117 	ldw	r17,4(sp)
   12828:	dc000017 	ldw	r16,0(sp)
   1282c:	dec00604 	addi	sp,sp,24
   12830:	f800283a 	ret
   12834:	0201e60e 	bge	zero,r8,12fd0 <__subdf3+0x978>
   12838:	18004d1e 	bne	r3,zero,12970 <__subdf3+0x318>
   1283c:	2b44b03a 	or	r2,r5,r13
   12840:	1000d026 	beq	r2,zero,12b84 <__subdf3+0x52c>
   12844:	823fffc4 	addi	r8,r16,-1
   12848:	40006426 	beq	r8,zero,129dc <__subdf3+0x384>
   1284c:	8081ffe0 	cmpeqi	r2,r16,2047
   12850:	10018e1e 	bne	r2,zero,12e8c <__subdf3+0x834>
   12854:	40800e48 	cmpgei	r2,r8,57
   12858:	1000491e 	bne	r2,zero,12980 <__subdf3+0x328>
   1285c:	40800808 	cmpgei	r2,r8,32
   12860:	1001431e 	bne	r2,zero,12d70 <__subdf3+0x718>
   12864:	00800804 	movi	r2,32
   12868:	1205c83a 	sub	r2,r2,r8
   1286c:	28a4983a 	sll	r18,r5,r2
   12870:	6a06d83a 	srl	r3,r13,r8
   12874:	6884983a 	sll	r2,r13,r2
   12878:	2a10d83a 	srl	r8,r5,r8
   1287c:	90e4b03a 	or	r18,r18,r3
   12880:	1004c03a 	cmpne	r2,r2,zero
   12884:	90a4b03a 	or	r18,r18,r2
   12888:	8a23883a 	add	r17,r17,r8
   1288c:	00003d06 	br	12984 <__subdf3+0x32c>
   12890:	2b44b03a 	or	r2,r5,r13
   12894:	823e0044 	addi	r8,r16,-2047
   12898:	1000211e 	bne	r2,zero,12920 <__subdf3+0x2c8>
   1289c:	39c0005c 	xori	r7,r7,1
   128a0:	3813883a 	mov	r9,r7
   128a4:	3a803fcc 	andi	r10,r7,255
   128a8:	99c06b26 	beq	r19,r7,12a58 <__subdf3+0x400>
   128ac:	40005526 	beq	r8,zero,12a04 <__subdf3+0x3ac>
   128b0:	8000201e 	bne	r16,zero,12934 <__subdf3+0x2dc>
   128b4:	0401ffc4 	movi	r16,2047
   128b8:	8b04b03a 	or	r2,r17,r12
   128bc:	1000ae26 	beq	r2,zero,12b78 <__subdf3+0x520>
   128c0:	80bfffc4 	addi	r2,r16,-1
   128c4:	10015e26 	beq	r2,zero,12e40 <__subdf3+0x7e8>
   128c8:	8401ffe0 	cmpeqi	r16,r16,2047
   128cc:	8001801e 	bne	r16,zero,12ed0 <__subdf3+0x878>
   128d0:	11000e48 	cmpgei	r4,r2,57
   128d4:	5027883a 	mov	r19,r10
   128d8:	4829883a 	mov	r20,r9
   128dc:	20011326 	beq	r4,zero,12d2c <__subdf3+0x6d4>
   128e0:	04800044 	movi	r18,1
   128e4:	6ca5c83a 	sub	r18,r13,r18
   128e8:	6c9b803a 	cmpltu	r13,r13,r18
   128ec:	2b63c83a 	sub	r17,r5,r13
   128f0:	1821883a 	mov	r16,r3
   128f4:	003f9006 	br	12738 <__subdf3+0xe0>
   128f8:	2b44b03a 	or	r2,r5,r13
   128fc:	1000a126 	beq	r2,zero,12b84 <__subdf3+0x52c>
   12900:	823fffc4 	addi	r8,r16,-1
   12904:	4000fe26 	beq	r8,zero,12d00 <__subdf3+0x6a8>
   12908:	8081ffe0 	cmpeqi	r2,r16,2047
   1290c:	1000931e 	bne	r2,zero,12b5c <__subdf3+0x504>
   12910:	40800e48 	cmpgei	r2,r8,57
   12914:	103f7926 	beq	r2,zero,126fc <__subdf3+0xa4>
   12918:	04800044 	movi	r18,1
   1291c:	003f8306 	br	1272c <__subdf3+0xd4>
   12920:	3a803fcc 	andi	r10,r7,255
   12924:	99c04c26 	beq	r19,r7,12a58 <__subdf3+0x400>
   12928:	40003626 	beq	r8,zero,12a04 <__subdf3+0x3ac>
   1292c:	3813883a 	mov	r9,r7
   12930:	803fe026 	beq	r16,zero,128b4 <__subdf3+0x25c>
   12934:	2804977a 	slli	r2,r5,29
   12938:	00c80034 	movhi	r3,8192
   1293c:	18ffffc4 	addi	r3,r3,-1
   12940:	280ad0fa 	srli	r5,r5,3
   12944:	30c6703a 	and	r3,r6,r3
   12948:	10c4b03a 	or	r2,r2,r3
   1294c:	4829883a 	mov	r20,r9
   12950:	1146b03a 	or	r3,r2,r5
   12954:	18019126 	beq	r3,zero,12f9c <__subdf3+0x944>
   12958:	00c00434 	movhi	r3,16
   1295c:	18ffffc4 	addi	r3,r3,-1
   12960:	29000234 	orhi	r4,r5,8
   12964:	20c8703a 	and	r4,r4,r3
   12968:	00c1ffc4 	movi	r3,2047
   1296c:	003fa506 	br	12804 <__subdf3+0x1ac>
   12970:	8081ffe0 	cmpeqi	r2,r16,2047
   12974:	1000791e 	bne	r2,zero,12b5c <__subdf3+0x504>
   12978:	40800e48 	cmpgei	r2,r8,57
   1297c:	1000b126 	beq	r2,zero,12c44 <__subdf3+0x5ec>
   12980:	04800044 	movi	r18,1
   12984:	9325883a 	add	r18,r18,r12
   12988:	9305803a 	cmpltu	r2,r18,r12
   1298c:	88a3883a 	add	r17,r17,r2
   12990:	8880202c 	andhi	r2,r17,128
   12994:	10001826 	beq	r2,zero,129f8 <__subdf3+0x3a0>
   12998:	84000044 	addi	r16,r16,1
   1299c:	8081ffe0 	cmpeqi	r2,r16,2047
   129a0:	10000a1e 	bne	r2,zero,129cc <__subdf3+0x374>
   129a4:	00bfe034 	movhi	r2,65408
   129a8:	10bfffc4 	addi	r2,r2,-1
   129ac:	9006d07a 	srli	r3,r18,1
   129b0:	8884703a 	and	r2,r17,r2
   129b4:	100897fa 	slli	r4,r2,31
   129b8:	9480004c 	andi	r18,r18,1
   129bc:	1c86b03a 	or	r3,r3,r18
   129c0:	1022d07a 	srli	r17,r2,1
   129c4:	20e4b03a 	or	r18,r4,r3
   129c8:	003f7606 	br	127a4 <__subdf3+0x14c>
   129cc:	00c1ffc4 	movi	r3,2047
   129d0:	0009883a 	mov	r4,zero
   129d4:	0005883a 	mov	r2,zero
   129d8:	003f8a06 	br	12804 <__subdf3+0x1ac>
   129dc:	6365883a 	add	r18,r12,r13
   129e0:	894b883a 	add	r5,r17,r5
   129e4:	9305803a 	cmpltu	r2,r18,r12
   129e8:	28a3883a 	add	r17,r5,r2
   129ec:	8880202c 	andhi	r2,r17,128
   129f0:	1001241e 	bne	r2,zero,12e84 <__subdf3+0x82c>
   129f4:	04000044 	movi	r16,1
   129f8:	908001cc 	andi	r2,r18,7
   129fc:	103f6b1e 	bne	r2,zero,127ac <__subdf3+0x154>
   12a00:	00007906 	br	12be8 <__subdf3+0x590>
   12a04:	80800044 	addi	r2,r16,1
   12a08:	1081ff8c 	andi	r2,r2,2046
   12a0c:	1000781e 	bne	r2,zero,12bf0 <__subdf3+0x598>
   12a10:	2b44b03a 	or	r2,r5,r13
   12a14:	8b06b03a 	or	r3,r17,r12
   12a18:	8000af1e 	bne	r16,zero,12cd8 <__subdf3+0x680>
   12a1c:	18011026 	beq	r3,zero,12e60 <__subdf3+0x808>
   12a20:	1000de26 	beq	r2,zero,12d9c <__subdf3+0x744>
   12a24:	6365c83a 	sub	r18,r12,r13
   12a28:	6485803a 	cmpltu	r2,r12,r18
   12a2c:	8947c83a 	sub	r3,r17,r5
   12a30:	1887c83a 	sub	r3,r3,r2
   12a34:	1880202c 	andhi	r2,r3,128
   12a38:	10014426 	beq	r2,zero,12f4c <__subdf3+0x8f4>
   12a3c:	6b25c83a 	sub	r18,r13,r12
   12a40:	2c4bc83a 	sub	r5,r5,r17
   12a44:	6c9b803a 	cmpltu	r13,r13,r18
   12a48:	2b63c83a 	sub	r17,r5,r13
   12a4c:	5029883a 	mov	r20,r10
   12a50:	5027883a 	mov	r19,r10
   12a54:	003f5306 	br	127a4 <__subdf3+0x14c>
   12a58:	40005126 	beq	r8,zero,12ba0 <__subdf3+0x548>
   12a5c:	80007b1e 	bne	r16,zero,12c4c <__subdf3+0x5f4>
   12a60:	0401ffc4 	movi	r16,2047
   12a64:	8b04b03a 	or	r2,r17,r12
   12a68:	10010f26 	beq	r2,zero,12ea8 <__subdf3+0x850>
   12a6c:	80bfffc4 	addi	r2,r16,-1
   12a70:	10012a26 	beq	r2,zero,12f1c <__subdf3+0x8c4>
   12a74:	8401ffe0 	cmpeqi	r16,r16,2047
   12a78:	80013d1e 	bne	r16,zero,12f70 <__subdf3+0x918>
   12a7c:	11000e48 	cmpgei	r4,r2,57
   12a80:	2000cd1e 	bne	r4,zero,12db8 <__subdf3+0x760>
   12a84:	11000808 	cmpgei	r4,r2,32
   12a88:	2001191e 	bne	r4,zero,12ef0 <__subdf3+0x898>
   12a8c:	01000804 	movi	r4,32
   12a90:	2089c83a 	sub	r4,r4,r2
   12a94:	8924983a 	sll	r18,r17,r4
   12a98:	608cd83a 	srl	r6,r12,r2
   12a9c:	6108983a 	sll	r4,r12,r4
   12aa0:	8884d83a 	srl	r2,r17,r2
   12aa4:	91a4b03a 	or	r18,r18,r6
   12aa8:	2008c03a 	cmpne	r4,r4,zero
   12aac:	9124b03a 	or	r18,r18,r4
   12ab0:	288b883a 	add	r5,r5,r2
   12ab4:	9365883a 	add	r18,r18,r13
   12ab8:	935b803a 	cmpltu	r13,r18,r13
   12abc:	6963883a 	add	r17,r13,r5
   12ac0:	1821883a 	mov	r16,r3
   12ac4:	003fb206 	br	12990 <__subdf3+0x338>
   12ac8:	9009883a 	mov	r4,r18
   12acc:	00131800 	call	13180 <__clzsi2>
   12ad0:	10c00604 	addi	r3,r2,24
   12ad4:	19000808 	cmpgei	r4,r3,32
   12ad8:	203f2026 	beq	r4,zero,1275c <__subdf3+0x104>
   12adc:	10bffe04 	addi	r2,r2,-8
   12ae0:	9084983a 	sll	r2,r18,r2
   12ae4:	1c006016 	blt	r3,r16,12c68 <__subdf3+0x610>
   12ae8:	1c25c83a 	sub	r18,r3,r16
   12aec:	90c00044 	addi	r3,r18,1
   12af0:	19000808 	cmpgei	r4,r3,32
   12af4:	20012526 	beq	r4,zero,12f8c <__subdf3+0x934>
   12af8:	94bff844 	addi	r18,r18,-31
   12afc:	19000820 	cmpeqi	r4,r3,32
   12b00:	14a4d83a 	srl	r18,r2,r18
   12b04:	2000051e 	bne	r4,zero,12b1c <__subdf3+0x4c4>
   12b08:	01001004 	movi	r4,64
   12b0c:	20c7c83a 	sub	r3,r4,r3
   12b10:	10c4983a 	sll	r2,r2,r3
   12b14:	1004c03a 	cmpne	r2,r2,zero
   12b18:	90a4b03a 	or	r18,r18,r2
   12b1c:	908001cc 	andi	r2,r18,7
   12b20:	0021883a 	mov	r16,zero
   12b24:	103f211e 	bne	r2,zero,127ac <__subdf3+0x154>
   12b28:	00002f06 	br	12be8 <__subdf3+0x590>
   12b2c:	9004d0fa 	srli	r2,r18,3
   12b30:	8808977a 	slli	r4,r17,29
   12b34:	80c1ffe0 	cmpeqi	r3,r16,2047
   12b38:	880ad0fa 	srli	r5,r17,3
   12b3c:	2084b03a 	or	r2,r4,r2
   12b40:	183f831e 	bne	r3,zero,12950 <__subdf3+0x2f8>
   12b44:	01000434 	movhi	r4,16
   12b48:	213fffc4 	addi	r4,r4,-1
   12b4c:	2908703a 	and	r4,r5,r4
   12b50:	80c1ffcc 	andi	r3,r16,2047
   12b54:	003f2b06 	br	12804 <__subdf3+0x1ac>
   12b58:	1000a71e 	bne	r2,zero,12df8 <__subdf3+0x7a0>
   12b5c:	8806977a 	slli	r3,r17,29
   12b60:	00880034 	movhi	r2,8192
   12b64:	10bfffc4 	addi	r2,r2,-1
   12b68:	2084703a 	and	r2,r4,r2
   12b6c:	880ad0fa 	srli	r5,r17,3
   12b70:	10c4b03a 	or	r2,r2,r3
   12b74:	003f7606 	br	12950 <__subdf3+0x2f8>
   12b78:	6819883a 	mov	r12,r13
   12b7c:	2823883a 	mov	r17,r5
   12b80:	4829883a 	mov	r20,r9
   12b84:	6004d0fa 	srli	r2,r12,3
   12b88:	003fe906 	br	12b30 <__subdf3+0x4d8>
   12b8c:	047fe034 	movhi	r17,65408
   12b90:	8c7fffc4 	addi	r17,r17,-1
   12b94:	80e1c83a 	sub	r16,r16,r3
   12b98:	1462703a 	and	r17,r2,r17
   12b9c:	003f0106 	br	127a4 <__subdf3+0x14c>
   12ba0:	80c00044 	addi	r3,r16,1
   12ba4:	1881ff8c 	andi	r2,r3,2046
   12ba8:	1000361e 	bne	r2,zero,12c84 <__subdf3+0x62c>
   12bac:	8b04b03a 	or	r2,r17,r12
   12bb0:	80008e1e 	bne	r16,zero,12dec <__subdf3+0x794>
   12bb4:	1000bf26 	beq	r2,zero,12eb4 <__subdf3+0x85c>
   12bb8:	2b44b03a 	or	r2,r5,r13
   12bbc:	10007726 	beq	r2,zero,12d9c <__subdf3+0x744>
   12bc0:	6365883a 	add	r18,r12,r13
   12bc4:	9305803a 	cmpltu	r2,r18,r12
   12bc8:	894b883a 	add	r5,r17,r5
   12bcc:	28a3883a 	add	r17,r5,r2
   12bd0:	8880202c 	andhi	r2,r17,128
   12bd4:	10000426 	beq	r2,zero,12be8 <__subdf3+0x590>
   12bd8:	00bfe034 	movhi	r2,65408
   12bdc:	10bfffc4 	addi	r2,r2,-1
   12be0:	88a2703a 	and	r17,r17,r2
   12be4:	04000044 	movi	r16,1
   12be8:	9019883a 	mov	r12,r18
   12bec:	003fe506 	br	12b84 <__subdf3+0x52c>
   12bf0:	6365c83a 	sub	r18,r12,r13
   12bf4:	6485803a 	cmpltu	r2,r12,r18
   12bf8:	8947c83a 	sub	r3,r17,r5
   12bfc:	1887c83a 	sub	r3,r3,r2
   12c00:	1880202c 	andhi	r2,r3,128
   12c04:	10002d1e 	bne	r2,zero,12cbc <__subdf3+0x664>
   12c08:	90c4b03a 	or	r2,r18,r3
   12c0c:	10005426 	beq	r2,zero,12d60 <__subdf3+0x708>
   12c10:	1823883a 	mov	r17,r3
   12c14:	003ecd06 	br	1274c <__subdf3+0xf4>
   12c18:	40bff804 	addi	r2,r8,-32
   12c1c:	40c00820 	cmpeqi	r3,r8,32
   12c20:	2884d83a 	srl	r2,r5,r2
   12c24:	1800041e 	bne	r3,zero,12c38 <__subdf3+0x5e0>
   12c28:	00c01004 	movi	r3,64
   12c2c:	1a07c83a 	sub	r3,r3,r8
   12c30:	28c6983a 	sll	r3,r5,r3
   12c34:	68dab03a 	or	r13,r13,r3
   12c38:	6824c03a 	cmpne	r18,r13,zero
   12c3c:	90a4b03a 	or	r18,r18,r2
   12c40:	003eba06 	br	1272c <__subdf3+0xd4>
   12c44:	29402034 	orhi	r5,r5,128
   12c48:	003f0406 	br	1285c <__subdf3+0x204>
   12c4c:	2804977a 	slli	r2,r5,29
   12c50:	00c80034 	movhi	r3,8192
   12c54:	18ffffc4 	addi	r3,r3,-1
   12c58:	30c6703a 	and	r3,r6,r3
   12c5c:	280ad0fa 	srli	r5,r5,3
   12c60:	10c4b03a 	or	r2,r2,r3
   12c64:	003f3a06 	br	12950 <__subdf3+0x2f8>
   12c68:	017fe034 	movhi	r5,65408
   12c6c:	297fffc4 	addi	r5,r5,-1
   12c70:	114a703a 	and	r5,r2,r5
   12c74:	2804977a 	slli	r2,r5,29
   12c78:	80e1c83a 	sub	r16,r16,r3
   12c7c:	280ad0fa 	srli	r5,r5,3
   12c80:	003fb006 	br	12b44 <__subdf3+0x4ec>
   12c84:	1881ffe0 	cmpeqi	r2,r3,2047
   12c88:	103f501e 	bne	r2,zero,129cc <__subdf3+0x374>
   12c8c:	6349883a 	add	r4,r12,r13
   12c90:	894b883a 	add	r5,r17,r5
   12c94:	2305803a 	cmpltu	r2,r4,r12
   12c98:	2885883a 	add	r2,r5,r2
   12c9c:	2008d07a 	srli	r4,r4,1
   12ca0:	102497fa 	slli	r18,r2,31
   12ca4:	1022d07a 	srli	r17,r2,1
   12ca8:	208001cc 	andi	r2,r4,7
   12cac:	9124b03a 	or	r18,r18,r4
   12cb0:	1821883a 	mov	r16,r3
   12cb4:	103ebd1e 	bne	r2,zero,127ac <__subdf3+0x154>
   12cb8:	003fcb06 	br	12be8 <__subdf3+0x590>
   12cbc:	6b25c83a 	sub	r18,r13,r12
   12cc0:	2c4bc83a 	sub	r5,r5,r17
   12cc4:	6c9b803a 	cmpltu	r13,r13,r18
   12cc8:	2b63c83a 	sub	r17,r5,r13
   12ccc:	5029883a 	mov	r20,r10
   12cd0:	5027883a 	mov	r19,r10
   12cd4:	003e9d06 	br	1274c <__subdf3+0xf4>
   12cd8:	183f9f1e 	bne	r3,zero,12b58 <__subdf3+0x500>
   12cdc:	10009f26 	beq	r2,zero,12f5c <__subdf3+0x904>
   12ce0:	2804977a 	slli	r2,r5,29
   12ce4:	00c80034 	movhi	r3,8192
   12ce8:	18ffffc4 	addi	r3,r3,-1
   12cec:	30c6703a 	and	r3,r6,r3
   12cf0:	280ad0fa 	srli	r5,r5,3
   12cf4:	5029883a 	mov	r20,r10
   12cf8:	10c4b03a 	or	r2,r2,r3
   12cfc:	003f1406 	br	12950 <__subdf3+0x2f8>
   12d00:	6365c83a 	sub	r18,r12,r13
   12d04:	894bc83a 	sub	r5,r17,r5
   12d08:	6485803a 	cmpltu	r2,r12,r18
   12d0c:	28a3c83a 	sub	r17,r5,r2
   12d10:	04000044 	movi	r16,1
   12d14:	003e8806 	br	12738 <__subdf3+0xe0>
   12d18:	11000e48 	cmpgei	r4,r2,57
   12d1c:	2000a81e 	bne	r4,zero,12fc0 <__subdf3+0x968>
   12d20:	8c402034 	orhi	r17,r17,128
   12d24:	5027883a 	mov	r19,r10
   12d28:	3829883a 	mov	r20,r7
   12d2c:	11000808 	cmpgei	r4,r2,32
   12d30:	2000231e 	bne	r4,zero,12dc0 <__subdf3+0x768>
   12d34:	01000804 	movi	r4,32
   12d38:	2089c83a 	sub	r4,r4,r2
   12d3c:	8924983a 	sll	r18,r17,r4
   12d40:	608cd83a 	srl	r6,r12,r2
   12d44:	6108983a 	sll	r4,r12,r4
   12d48:	8884d83a 	srl	r2,r17,r2
   12d4c:	91a4b03a 	or	r18,r18,r6
   12d50:	2008c03a 	cmpne	r4,r4,zero
   12d54:	9124b03a 	or	r18,r18,r4
   12d58:	288bc83a 	sub	r5,r5,r2
   12d5c:	003ee106 	br	128e4 <__subdf3+0x28c>
   12d60:	0029883a 	mov	r20,zero
   12d64:	0007883a 	mov	r3,zero
   12d68:	0009883a 	mov	r4,zero
   12d6c:	003ea506 	br	12804 <__subdf3+0x1ac>
   12d70:	40bff804 	addi	r2,r8,-32
   12d74:	40c00820 	cmpeqi	r3,r8,32
   12d78:	2884d83a 	srl	r2,r5,r2
   12d7c:	1800041e 	bne	r3,zero,12d90 <__subdf3+0x738>
   12d80:	00c01004 	movi	r3,64
   12d84:	1a07c83a 	sub	r3,r3,r8
   12d88:	28c6983a 	sll	r3,r5,r3
   12d8c:	68dab03a 	or	r13,r13,r3
   12d90:	6824c03a 	cmpne	r18,r13,zero
   12d94:	90a4b03a 	or	r18,r18,r2
   12d98:	003efa06 	br	12984 <__subdf3+0x32c>
   12d9c:	8806977a 	slli	r3,r17,29
   12da0:	00880034 	movhi	r2,8192
   12da4:	10bfffc4 	addi	r2,r2,-1
   12da8:	2084703a 	and	r2,r4,r2
   12dac:	880ad0fa 	srli	r5,r17,3
   12db0:	10c4b03a 	or	r2,r2,r3
   12db4:	003f6306 	br	12b44 <__subdf3+0x4ec>
   12db8:	04800044 	movi	r18,1
   12dbc:	003f3d06 	br	12ab4 <__subdf3+0x45c>
   12dc0:	113ff804 	addi	r4,r2,-32
   12dc4:	11800820 	cmpeqi	r6,r2,32
   12dc8:	8908d83a 	srl	r4,r17,r4
   12dcc:	3000041e 	bne	r6,zero,12de0 <__subdf3+0x788>
   12dd0:	01801004 	movi	r6,64
   12dd4:	3085c83a 	sub	r2,r6,r2
   12dd8:	8884983a 	sll	r2,r17,r2
   12ddc:	6098b03a 	or	r12,r12,r2
   12de0:	6024c03a 	cmpne	r18,r12,zero
   12de4:	9124b03a 	or	r18,r18,r4
   12de8:	003ebe06 	br	128e4 <__subdf3+0x28c>
   12dec:	10005026 	beq	r2,zero,12f30 <__subdf3+0x8d8>
   12df0:	2b5ab03a 	or	r13,r5,r13
   12df4:	683f5926 	beq	r13,zero,12b5c <__subdf3+0x504>
   12df8:	880ed0fa 	srli	r7,r17,3
   12dfc:	00c80034 	movhi	r3,8192
   12e00:	8822977a 	slli	r17,r17,29
   12e04:	18ffffc4 	addi	r3,r3,-1
   12e08:	20c4703a 	and	r2,r4,r3
   12e0c:	3900022c 	andhi	r4,r7,8
   12e10:	1444b03a 	or	r2,r2,r17
   12e14:	20000826 	beq	r4,zero,12e38 <__subdf3+0x7e0>
   12e18:	2808d0fa 	srli	r4,r5,3
   12e1c:	2200022c 	andhi	r8,r4,8
   12e20:	4000051e 	bne	r8,zero,12e38 <__subdf3+0x7e0>
   12e24:	2804977a 	slli	r2,r5,29
   12e28:	30c6703a 	and	r3,r6,r3
   12e2c:	5029883a 	mov	r20,r10
   12e30:	1884b03a 	or	r2,r3,r2
   12e34:	200f883a 	mov	r7,r4
   12e38:	380b883a 	mov	r5,r7
   12e3c:	003ec406 	br	12950 <__subdf3+0x2f8>
   12e40:	6b25c83a 	sub	r18,r13,r12
   12e44:	2c4bc83a 	sub	r5,r5,r17
   12e48:	6c9b803a 	cmpltu	r13,r13,r18
   12e4c:	2b63c83a 	sub	r17,r5,r13
   12e50:	4829883a 	mov	r20,r9
   12e54:	5027883a 	mov	r19,r10
   12e58:	04000044 	movi	r16,1
   12e5c:	003e3606 	br	12738 <__subdf3+0xe0>
   12e60:	103fbf26 	beq	r2,zero,12d60 <__subdf3+0x708>
   12e64:	2806977a 	slli	r3,r5,29
   12e68:	00880034 	movhi	r2,8192
   12e6c:	10bfffc4 	addi	r2,r2,-1
   12e70:	3084703a 	and	r2,r6,r2
   12e74:	280ad0fa 	srli	r5,r5,3
   12e78:	5029883a 	mov	r20,r10
   12e7c:	10c4b03a 	or	r2,r2,r3
   12e80:	003f3006 	br	12b44 <__subdf3+0x4ec>
   12e84:	04000084 	movi	r16,2
   12e88:	003ec606 	br	129a4 <__subdf3+0x34c>
   12e8c:	8804977a 	slli	r2,r17,29
   12e90:	00c80034 	movhi	r3,8192
   12e94:	18ffffc4 	addi	r3,r3,-1
   12e98:	20c8703a 	and	r4,r4,r3
   12e9c:	880ad0fa 	srli	r5,r17,3
   12ea0:	1104b03a 	or	r2,r2,r4
   12ea4:	003eaa06 	br	12950 <__subdf3+0x2f8>
   12ea8:	6819883a 	mov	r12,r13
   12eac:	2823883a 	mov	r17,r5
   12eb0:	003f3406 	br	12b84 <__subdf3+0x52c>
   12eb4:	2806977a 	slli	r3,r5,29
   12eb8:	00880034 	movhi	r2,8192
   12ebc:	10bfffc4 	addi	r2,r2,-1
   12ec0:	3084703a 	and	r2,r6,r2
   12ec4:	280ad0fa 	srli	r5,r5,3
   12ec8:	10c4b03a 	or	r2,r2,r3
   12ecc:	003f1d06 	br	12b44 <__subdf3+0x4ec>
   12ed0:	2806977a 	slli	r3,r5,29
   12ed4:	00880034 	movhi	r2,8192
   12ed8:	10bfffc4 	addi	r2,r2,-1
   12edc:	3084703a 	and	r2,r6,r2
   12ee0:	280ad0fa 	srli	r5,r5,3
   12ee4:	10c4b03a 	or	r2,r2,r3
   12ee8:	4829883a 	mov	r20,r9
   12eec:	003e9806 	br	12950 <__subdf3+0x2f8>
   12ef0:	113ff804 	addi	r4,r2,-32
   12ef4:	11800820 	cmpeqi	r6,r2,32
   12ef8:	8908d83a 	srl	r4,r17,r4
   12efc:	3000041e 	bne	r6,zero,12f10 <__subdf3+0x8b8>
   12f00:	01801004 	movi	r6,64
   12f04:	3085c83a 	sub	r2,r6,r2
   12f08:	8884983a 	sll	r2,r17,r2
   12f0c:	6098b03a 	or	r12,r12,r2
   12f10:	6024c03a 	cmpne	r18,r12,zero
   12f14:	9124b03a 	or	r18,r18,r4
   12f18:	003ee606 	br	12ab4 <__subdf3+0x45c>
   12f1c:	6365883a 	add	r18,r12,r13
   12f20:	894b883a 	add	r5,r17,r5
   12f24:	935b803a 	cmpltu	r13,r18,r13
   12f28:	2b63883a 	add	r17,r5,r13
   12f2c:	003eaf06 	br	129ec <__subdf3+0x394>
   12f30:	2804977a 	slli	r2,r5,29
   12f34:	00c80034 	movhi	r3,8192
   12f38:	18ffffc4 	addi	r3,r3,-1
   12f3c:	30cc703a 	and	r6,r6,r3
   12f40:	280ad0fa 	srli	r5,r5,3
   12f44:	3084b03a 	or	r2,r6,r2
   12f48:	003e8106 	br	12950 <__subdf3+0x2f8>
   12f4c:	90c4b03a 	or	r2,r18,r3
   12f50:	103f8326 	beq	r2,zero,12d60 <__subdf3+0x708>
   12f54:	1823883a 	mov	r17,r3
   12f58:	003f2306 	br	12be8 <__subdf3+0x590>
   12f5c:	01400434 	movhi	r5,16
   12f60:	297fffc4 	addi	r5,r5,-1
   12f64:	00bfffc4 	movi	r2,-1
   12f68:	0029883a 	mov	r20,zero
   12f6c:	003e7a06 	br	12958 <__subdf3+0x300>
   12f70:	2806977a 	slli	r3,r5,29
   12f74:	00880034 	movhi	r2,8192
   12f78:	10bfffc4 	addi	r2,r2,-1
   12f7c:	3084703a 	and	r2,r6,r2
   12f80:	280ad0fa 	srli	r5,r5,3
   12f84:	10c4b03a 	or	r2,r2,r3
   12f88:	003e7106 	br	12950 <__subdf3+0x2f8>
   12f8c:	01000804 	movi	r4,32
   12f90:	20c9c83a 	sub	r4,r4,r3
   12f94:	000b883a 	mov	r5,zero
   12f98:	003dfd06 	br	12790 <__subdf3+0x138>
   12f9c:	0005883a 	mov	r2,zero
   12fa0:	00c1ffc4 	movi	r3,2047
   12fa4:	0009883a 	mov	r4,zero
   12fa8:	003e1606 	br	12804 <__subdf3+0x1ac>
   12fac:	403e9526 	beq	r8,zero,12a04 <__subdf3+0x3ac>
   12fb0:	1c05c83a 	sub	r2,r3,r16
   12fb4:	803f581e 	bne	r16,zero,12d18 <__subdf3+0x6c0>
   12fb8:	1021883a 	mov	r16,r2
   12fbc:	003e3e06 	br	128b8 <__subdf3+0x260>
   12fc0:	5027883a 	mov	r19,r10
   12fc4:	3829883a 	mov	r20,r7
   12fc8:	04800044 	movi	r18,1
   12fcc:	003e4506 	br	128e4 <__subdf3+0x28c>
   12fd0:	403ef326 	beq	r8,zero,12ba0 <__subdf3+0x548>
   12fd4:	1c05c83a 	sub	r2,r3,r16
   12fd8:	8000021e 	bne	r16,zero,12fe4 <__subdf3+0x98c>
   12fdc:	1021883a 	mov	r16,r2
   12fe0:	003ea006 	br	12a64 <__subdf3+0x40c>
   12fe4:	11000e48 	cmpgei	r4,r2,57
   12fe8:	203f731e 	bne	r4,zero,12db8 <__subdf3+0x760>
   12fec:	8c402034 	orhi	r17,r17,128
   12ff0:	003ea406 	br	12a84 <__subdf3+0x42c>

00012ff4 <__unorddf2>:
   12ff4:	2804d53a 	srli	r2,r5,20
   12ff8:	3806d53a 	srli	r3,r7,20
   12ffc:	02000434 	movhi	r8,16
   13000:	1081ffcc 	andi	r2,r2,2047
   13004:	423fffc4 	addi	r8,r8,-1
   13008:	1081ffd8 	cmpnei	r2,r2,2047
   1300c:	2a0a703a 	and	r5,r5,r8
   13010:	3a0e703a 	and	r7,r7,r8
   13014:	18c1ffcc 	andi	r3,r3,2047
   13018:	10000426 	beq	r2,zero,1302c <__unorddf2+0x38>
   1301c:	18c1ffd8 	cmpnei	r3,r3,2047
   13020:	18000626 	beq	r3,zero,1303c <__unorddf2+0x48>
   13024:	0005883a 	mov	r2,zero
   13028:	f800283a 	ret
   1302c:	290ab03a 	or	r5,r5,r4
   13030:	283ffa26 	beq	r5,zero,1301c <__unorddf2+0x28>
   13034:	00800044 	movi	r2,1
   13038:	f800283a 	ret
   1303c:	398eb03a 	or	r7,r7,r6
   13040:	3804c03a 	cmpne	r2,r7,zero
   13044:	f800283a 	ret

00013048 <__fixdfsi>:
   13048:	2804d53a 	srli	r2,r5,20
   1304c:	00c00434 	movhi	r3,16
   13050:	18ffffc4 	addi	r3,r3,-1
   13054:	1081ffcc 	andi	r2,r2,2047
   13058:	1180ffd0 	cmplti	r6,r2,1023
   1305c:	280ed7fa 	srli	r7,r5,31
   13060:	28ca703a 	and	r5,r5,r3
   13064:	3000061e 	bne	r6,zero,13080 <__fixdfsi+0x38>
   13068:	10c10790 	cmplti	r3,r2,1054
   1306c:	1800061e 	bne	r3,zero,13088 <__fixdfsi+0x40>
   13070:	00a00034 	movhi	r2,32768
   13074:	10bfffc4 	addi	r2,r2,-1
   13078:	3885883a 	add	r2,r7,r2
   1307c:	f800283a 	ret
   13080:	0005883a 	mov	r2,zero
   13084:	f800283a 	ret
   13088:	00c10cc4 	movi	r3,1075
   1308c:	1887c83a 	sub	r3,r3,r2
   13090:	19800808 	cmpgei	r6,r3,32
   13094:	29400434 	orhi	r5,r5,16
   13098:	3000071e 	bne	r6,zero,130b8 <__fixdfsi+0x70>
   1309c:	10befb44 	addi	r2,r2,-1043
   130a0:	2884983a 	sll	r2,r5,r2
   130a4:	20c8d83a 	srl	r4,r4,r3
   130a8:	1104b03a 	or	r2,r2,r4
   130ac:	383ff526 	beq	r7,zero,13084 <__fixdfsi+0x3c>
   130b0:	0085c83a 	sub	r2,zero,r2
   130b4:	f800283a 	ret
   130b8:	00c104c4 	movi	r3,1043
   130bc:	1885c83a 	sub	r2,r3,r2
   130c0:	2884d83a 	srl	r2,r5,r2
   130c4:	003ff906 	br	130ac <__fixdfsi+0x64>

000130c8 <__floatsidf>:
   130c8:	defffd04 	addi	sp,sp,-12
   130cc:	dfc00215 	stw	ra,8(sp)
   130d0:	dc400115 	stw	r17,4(sp)
   130d4:	dc000015 	stw	r16,0(sp)
   130d8:	20001326 	beq	r4,zero,13128 <__floatsidf+0x60>
   130dc:	2022d7fa 	srli	r17,r4,31
   130e0:	2021883a 	mov	r16,r4
   130e4:	20002416 	blt	r4,zero,13178 <__floatsidf+0xb0>
   130e8:	8009883a 	mov	r4,r16
   130ec:	00131800 	call	13180 <__clzsi2>
   130f0:	01010784 	movi	r4,1054
   130f4:	2089c83a 	sub	r4,r4,r2
   130f8:	10c002c8 	cmpgei	r3,r2,11
   130fc:	2101ffcc 	andi	r4,r4,2047
   13100:	1800161e 	bne	r3,zero,1315c <__floatsidf+0x94>
   13104:	014002c4 	movi	r5,11
   13108:	288bc83a 	sub	r5,r5,r2
   1310c:	814ad83a 	srl	r5,r16,r5
   13110:	00c00434 	movhi	r3,16
   13114:	10800544 	addi	r2,r2,21
   13118:	18ffffc4 	addi	r3,r3,-1
   1311c:	8084983a 	sll	r2,r16,r2
   13120:	28ca703a 	and	r5,r5,r3
   13124:	00000406 	br	13138 <__floatsidf+0x70>
   13128:	0023883a 	mov	r17,zero
   1312c:	0009883a 	mov	r4,zero
   13130:	000b883a 	mov	r5,zero
   13134:	0005883a 	mov	r2,zero
   13138:	2008953a 	slli	r4,r4,20
   1313c:	880697fa 	slli	r3,r17,31
   13140:	2148b03a 	or	r4,r4,r5
   13144:	20c6b03a 	or	r3,r4,r3
   13148:	dfc00217 	ldw	ra,8(sp)
   1314c:	dc400117 	ldw	r17,4(sp)
   13150:	dc000017 	ldw	r16,0(sp)
   13154:	dec00304 	addi	sp,sp,12
   13158:	f800283a 	ret
   1315c:	10bffd44 	addi	r2,r2,-11
   13160:	808a983a 	sll	r5,r16,r2
   13164:	00800434 	movhi	r2,16
   13168:	10bfffc4 	addi	r2,r2,-1
   1316c:	288a703a 	and	r5,r5,r2
   13170:	0005883a 	mov	r2,zero
   13174:	003ff006 	br	13138 <__floatsidf+0x70>
   13178:	0121c83a 	sub	r16,zero,r4
   1317c:	003fda06 	br	130e8 <__floatsidf+0x20>

00013180 <__clzsi2>:
   13180:	00bfffd4 	movui	r2,65535
   13184:	11000a36 	bltu	r2,r4,131b0 <__clzsi2+0x30>
   13188:	20c04028 	cmpgeui	r3,r4,256
   1318c:	180690fa 	slli	r3,r3,3
   13190:	00800804 	movi	r2,32
   13194:	10c5c83a 	sub	r2,r2,r3
   13198:	20c8d83a 	srl	r4,r4,r3
   1319c:	00c00074 	movhi	r3,1
   131a0:	20c7883a 	add	r3,r4,r3
   131a4:	18d0dd03 	ldbu	r3,17268(r3)
   131a8:	10c5c83a 	sub	r2,r2,r3
   131ac:	f800283a 	ret
   131b0:	00804034 	movhi	r2,256
   131b4:	2080032e 	bgeu	r4,r2,131c4 <__clzsi2+0x44>
   131b8:	00800404 	movi	r2,16
   131bc:	00c00404 	movi	r3,16
   131c0:	003ff506 	br	13198 <__clzsi2+0x18>
   131c4:	00800204 	movi	r2,8
   131c8:	00c00604 	movi	r3,24
   131cc:	003ff206 	br	13198 <__clzsi2+0x18>

000131d0 <__errno>:
   131d0:	00800074 	movhi	r2,1
   131d4:	10917f17 	ldw	r2,17916(r2)
   131d8:	f800283a 	ret

000131dc <memcpy>:
   131dc:	2005883a 	mov	r2,r4
   131e0:	0007883a 	mov	r3,zero
   131e4:	30c0011e 	bne	r6,r3,131ec <memcpy+0x10>
   131e8:	f800283a 	ret
   131ec:	28cf883a 	add	r7,r5,r3
   131f0:	39c00003 	ldbu	r7,0(r7)
   131f4:	10c9883a 	add	r4,r2,r3
   131f8:	18c00044 	addi	r3,r3,1
   131fc:	21c00005 	stb	r7,0(r4)
   13200:	003ff806 	br	131e4 <memcpy+0x8>

00013204 <_printf_r>:
   13204:	defffd04 	addi	sp,sp,-12
   13208:	dfc00015 	stw	ra,0(sp)
   1320c:	d9800115 	stw	r6,4(sp)
   13210:	d9c00215 	stw	r7,8(sp)
   13214:	21800217 	ldw	r6,8(r4)
   13218:	00c00074 	movhi	r3,1
   1321c:	18ce0a04 	addi	r3,r3,14376
   13220:	30c00115 	stw	r3,4(r6)
   13224:	280d883a 	mov	r6,r5
   13228:	21400217 	ldw	r5,8(r4)
   1322c:	d9c00104 	addi	r7,sp,4
   13230:	00132f40 	call	132f4 <___vfprintf_internal_r>
   13234:	dfc00017 	ldw	ra,0(sp)
   13238:	dec00304 	addi	sp,sp,12
   1323c:	f800283a 	ret

00013240 <printf>:
   13240:	defffc04 	addi	sp,sp,-16
   13244:	dfc00015 	stw	ra,0(sp)
   13248:	d9400115 	stw	r5,4(sp)
   1324c:	d9800215 	stw	r6,8(sp)
   13250:	d9c00315 	stw	r7,12(sp)
   13254:	00800074 	movhi	r2,1
   13258:	10d17f17 	ldw	r3,17916(r2)
   1325c:	00800074 	movhi	r2,1
   13260:	108e0a04 	addi	r2,r2,14376
   13264:	19400217 	ldw	r5,8(r3)
   13268:	d9800104 	addi	r6,sp,4
   1326c:	28800115 	stw	r2,4(r5)
   13270:	200b883a 	mov	r5,r4
   13274:	19000217 	ldw	r4,8(r3)
   13278:	00138100 	call	13810 <__vfprintf_internal>
   1327c:	dfc00017 	ldw	ra,0(sp)
   13280:	dec00404 	addi	sp,sp,16
   13284:	f800283a 	ret

00013288 <print_repeat>:
   13288:	defffb04 	addi	sp,sp,-20
   1328c:	dc800315 	stw	r18,12(sp)
   13290:	dc400215 	stw	r17,8(sp)
   13294:	dc000115 	stw	r16,4(sp)
   13298:	dfc00415 	stw	ra,16(sp)
   1329c:	2025883a 	mov	r18,r4
   132a0:	2823883a 	mov	r17,r5
   132a4:	d9800005 	stb	r6,0(sp)
   132a8:	3821883a 	mov	r16,r7
   132ac:	04000716 	blt	zero,r16,132cc <print_repeat+0x44>
   132b0:	0005883a 	mov	r2,zero
   132b4:	dfc00417 	ldw	ra,16(sp)
   132b8:	dc800317 	ldw	r18,12(sp)
   132bc:	dc400217 	ldw	r17,8(sp)
   132c0:	dc000117 	ldw	r16,4(sp)
   132c4:	dec00504 	addi	sp,sp,20
   132c8:	f800283a 	ret
   132cc:	88800117 	ldw	r2,4(r17)
   132d0:	01c00044 	movi	r7,1
   132d4:	d80d883a 	mov	r6,sp
   132d8:	880b883a 	mov	r5,r17
   132dc:	9009883a 	mov	r4,r18
   132e0:	103ee83a 	callr	r2
   132e4:	843fffc4 	addi	r16,r16,-1
   132e8:	103ff026 	beq	r2,zero,132ac <print_repeat+0x24>
   132ec:	00bfffc4 	movi	r2,-1
   132f0:	003ff006 	br	132b4 <print_repeat+0x2c>

000132f4 <___vfprintf_internal_r>:
   132f4:	deffe604 	addi	sp,sp,-104
   132f8:	ddc01715 	stw	r23,92(sp)
   132fc:	dd801615 	stw	r22,88(sp)
   13300:	dd401515 	stw	r21,84(sp)
   13304:	dd001415 	stw	r20,80(sp)
   13308:	dcc01315 	stw	r19,76(sp)
   1330c:	dc801215 	stw	r18,72(sp)
   13310:	dc401115 	stw	r17,68(sp)
   13314:	dc001015 	stw	r16,64(sp)
   13318:	dfc01915 	stw	ra,100(sp)
   1331c:	df001815 	stw	fp,96(sp)
   13320:	2025883a 	mov	r18,r4
   13324:	2823883a 	mov	r17,r5
   13328:	d9800515 	stw	r6,20(sp)
   1332c:	382f883a 	mov	r23,r7
   13330:	0021883a 	mov	r16,zero
   13334:	d8000215 	stw	zero,8(sp)
   13338:	d8000015 	stw	zero,0(sp)
   1333c:	0029883a 	mov	r20,zero
   13340:	002d883a 	mov	r22,zero
   13344:	0027883a 	mov	r19,zero
   13348:	002b883a 	mov	r21,zero
   1334c:	d8000115 	stw	zero,4(sp)
   13350:	0005883a 	mov	r2,zero
   13354:	00000206 	br	13360 <___vfprintf_internal_r+0x6c>
   13358:	114000e0 	cmpeqi	r5,r2,3
   1335c:	28004e1e 	bne	r5,zero,13498 <___vfprintf_internal_r+0x1a4>
   13360:	d8c00517 	ldw	r3,20(sp)
   13364:	19000003 	ldbu	r4,0(r3)
   13368:	18c00044 	addi	r3,r3,1
   1336c:	d8c00515 	stw	r3,20(sp)
   13370:	20c03fcc 	andi	r3,r4,255
   13374:	18c0201c 	xori	r3,r3,128
   13378:	18ffe004 	addi	r3,r3,-128
   1337c:	18001026 	beq	r3,zero,133c0 <___vfprintf_internal_r+0xcc>
   13380:	114000a0 	cmpeqi	r5,r2,2
   13384:	28001f1e 	bne	r5,zero,13404 <___vfprintf_internal_r+0x110>
   13388:	114000c8 	cmpgei	r5,r2,3
   1338c:	283ff21e 	bne	r5,zero,13358 <___vfprintf_internal_r+0x64>
   13390:	1000181e 	bne	r2,zero,133f4 <___vfprintf_internal_r+0x100>
   13394:	18c00960 	cmpeqi	r3,r3,37
   13398:	18010e1e 	bne	r3,zero,137d4 <___vfprintf_internal_r+0x4e0>
   1339c:	88800117 	ldw	r2,4(r17)
   133a0:	d9000805 	stb	r4,32(sp)
   133a4:	01c00044 	movi	r7,1
   133a8:	d9800804 	addi	r6,sp,32
   133ac:	880b883a 	mov	r5,r17
   133b0:	9009883a 	mov	r4,r18
   133b4:	103ee83a 	callr	r2
   133b8:	10001e26 	beq	r2,zero,13434 <___vfprintf_internal_r+0x140>
   133bc:	043fffc4 	movi	r16,-1
   133c0:	8005883a 	mov	r2,r16
   133c4:	dfc01917 	ldw	ra,100(sp)
   133c8:	df001817 	ldw	fp,96(sp)
   133cc:	ddc01717 	ldw	r23,92(sp)
   133d0:	dd801617 	ldw	r22,88(sp)
   133d4:	dd401517 	ldw	r21,84(sp)
   133d8:	dd001417 	ldw	r20,80(sp)
   133dc:	dcc01317 	ldw	r19,76(sp)
   133e0:	dc801217 	ldw	r18,72(sp)
   133e4:	dc401117 	ldw	r17,68(sp)
   133e8:	dc001017 	ldw	r16,64(sp)
   133ec:	dec01a04 	addi	sp,sp,104
   133f0:	f800283a 	ret
   133f4:	18800c20 	cmpeqi	r2,r3,48
   133f8:	1000ff1e 	bne	r2,zero,137f8 <___vfprintf_internal_r+0x504>
   133fc:	18800958 	cmpnei	r2,r3,37
   13400:	103fe626 	beq	r2,zero,1339c <___vfprintf_internal_r+0xa8>
   13404:	213ff404 	addi	r4,r4,-48
   13408:	21003fcc 	andi	r4,r4,255
   1340c:	208002a8 	cmpgeui	r2,r4,10
   13410:	10000c1e 	bne	r2,zero,13444 <___vfprintf_internal_r+0x150>
   13414:	98bfffe0 	cmpeqi	r2,r19,-1
   13418:	1000081e 	bne	r2,zero,1343c <___vfprintf_internal_r+0x148>
   1341c:	980490ba 	slli	r2,r19,2
   13420:	14c5883a 	add	r2,r2,r19
   13424:	1004907a 	slli	r2,r2,1
   13428:	20a7883a 	add	r19,r4,r2
   1342c:	00800084 	movi	r2,2
   13430:	003fcb06 	br	13360 <___vfprintf_internal_r+0x6c>
   13434:	84000044 	addi	r16,r16,1
   13438:	003fc906 	br	13360 <___vfprintf_internal_r+0x6c>
   1343c:	0005883a 	mov	r2,zero
   13440:	003ff906 	br	13428 <___vfprintf_internal_r+0x134>
   13444:	18800ba0 	cmpeqi	r2,r3,46
   13448:	1000ef1e 	bne	r2,zero,13808 <___vfprintf_internal_r+0x514>
   1344c:	18801b20 	cmpeqi	r2,r3,108
   13450:	1000ec1e 	bne	r2,zero,13804 <___vfprintf_internal_r+0x510>
   13454:	b0bfffe0 	cmpeqi	r2,r22,-1
   13458:	10001c1e 	bne	r2,zero,134cc <___vfprintf_internal_r+0x1d8>
   1345c:	d8000115 	stw	zero,4(sp)
   13460:	18801be0 	cmpeqi	r2,r3,111
   13464:	1000ba1e 	bne	r2,zero,13750 <___vfprintf_internal_r+0x45c>
   13468:	18801c08 	cmpgei	r2,r3,112
   1346c:	1000581e 	bne	r2,zero,135d0 <___vfprintf_internal_r+0x2dc>
   13470:	188018e0 	cmpeqi	r2,r3,99
   13474:	1000bd1e 	bne	r2,zero,1376c <___vfprintf_internal_r+0x478>
   13478:	18801908 	cmpgei	r2,r3,100
   1347c:	1000151e 	bne	r2,zero,134d4 <___vfprintf_internal_r+0x1e0>
   13480:	18c01620 	cmpeqi	r3,r3,88
   13484:	183fb226 	beq	r3,zero,13350 <___vfprintf_internal_r+0x5c>
   13488:	a800721e 	bne	r21,zero,13654 <___vfprintf_internal_r+0x360>
   1348c:	00800044 	movi	r2,1
   13490:	d8800215 	stw	r2,8(sp)
   13494:	00007006 	br	13658 <___vfprintf_internal_r+0x364>
   13498:	213ff404 	addi	r4,r4,-48
   1349c:	21003fcc 	andi	r4,r4,255
   134a0:	214002a8 	cmpgeui	r5,r4,10
   134a4:	283fe91e 	bne	r5,zero,1344c <___vfprintf_internal_r+0x158>
   134a8:	b0ffffe0 	cmpeqi	r3,r22,-1
   134ac:	1800051e 	bne	r3,zero,134c4 <___vfprintf_internal_r+0x1d0>
   134b0:	b00690ba 	slli	r3,r22,2
   134b4:	1d87883a 	add	r3,r3,r22
   134b8:	1806907a 	slli	r3,r3,1
   134bc:	20ed883a 	add	r22,r4,r3
   134c0:	003fa706 	br	13360 <___vfprintf_internal_r+0x6c>
   134c4:	0007883a 	mov	r3,zero
   134c8:	003ffc06 	br	134bc <___vfprintf_internal_r+0x1c8>
   134cc:	05800044 	movi	r22,1
   134d0:	003fe306 	br	13460 <___vfprintf_internal_r+0x16c>
   134d4:	18801920 	cmpeqi	r2,r3,100
   134d8:	1000021e 	bne	r2,zero,134e4 <___vfprintf_internal_r+0x1f0>
   134dc:	18c01a60 	cmpeqi	r3,r3,105
   134e0:	183f9b26 	beq	r3,zero,13350 <___vfprintf_internal_r+0x5c>
   134e4:	b8800104 	addi	r2,r23,4
   134e8:	d8800415 	stw	r2,16(sp)
   134ec:	d8800017 	ldw	r2,0(sp)
   134f0:	10009826 	beq	r2,zero,13754 <___vfprintf_internal_r+0x460>
   134f4:	bdc00017 	ldw	r23,0(r23)
   134f8:	b8009a0e 	bge	r23,zero,13764 <___vfprintf_internal_r+0x470>
   134fc:	05efc83a 	sub	r23,zero,r23
   13500:	02400044 	movi	r9,1
   13504:	df000804 	addi	fp,sp,32
   13508:	e00d883a 	mov	r6,fp
   1350c:	b800541e 	bne	r23,zero,13660 <___vfprintf_internal_r+0x36c>
   13510:	e185c83a 	sub	r2,fp,r6
   13514:	d8800315 	stw	r2,12(sp)
   13518:	b085c83a 	sub	r2,r22,r2
   1351c:	00800b0e 	bge	zero,r2,1354c <___vfprintf_internal_r+0x258>
   13520:	d8c01004 	addi	r3,sp,64
   13524:	e0c0072e 	bgeu	fp,r3,13544 <___vfprintf_internal_r+0x250>
   13528:	e085883a 	add	r2,fp,r2
   1352c:	01000c04 	movi	r4,48
   13530:	e7000044 	addi	fp,fp,1
   13534:	e13fffc5 	stb	r4,-1(fp)
   13538:	17000226 	beq	r2,fp,13544 <___vfprintf_internal_r+0x250>
   1353c:	d8c01004 	addi	r3,sp,64
   13540:	e0fffb36 	bltu	fp,r3,13530 <___vfprintf_internal_r+0x23c>
   13544:	e185c83a 	sub	r2,fp,r6
   13548:	d8800315 	stw	r2,12(sp)
   1354c:	d8800317 	ldw	r2,12(sp)
   13550:	4891883a 	add	r8,r9,r2
   13554:	d8800117 	ldw	r2,4(sp)
   13558:	9a2fc83a 	sub	r23,r19,r8
   1355c:	10005926 	beq	r2,zero,136c4 <___vfprintf_internal_r+0x3d0>
   13560:	48000a26 	beq	r9,zero,1358c <___vfprintf_internal_r+0x298>
   13564:	00800b44 	movi	r2,45
   13568:	d88007c5 	stb	r2,31(sp)
   1356c:	88800117 	ldw	r2,4(r17)
   13570:	01c00044 	movi	r7,1
   13574:	d98007c4 	addi	r6,sp,31
   13578:	880b883a 	mov	r5,r17
   1357c:	9009883a 	mov	r4,r18
   13580:	103ee83a 	callr	r2
   13584:	103f8d1e 	bne	r2,zero,133bc <___vfprintf_internal_r+0xc8>
   13588:	84000044 	addi	r16,r16,1
   1358c:	05c0070e 	bge	zero,r23,135ac <___vfprintf_internal_r+0x2b8>
   13590:	b80f883a 	mov	r7,r23
   13594:	01800c04 	movi	r6,48
   13598:	880b883a 	mov	r5,r17
   1359c:	9009883a 	mov	r4,r18
   135a0:	00132880 	call	13288 <print_repeat>
   135a4:	103f851e 	bne	r2,zero,133bc <___vfprintf_internal_r+0xc8>
   135a8:	85e1883a 	add	r16,r16,r23
   135ac:	d8800317 	ldw	r2,12(sp)
   135b0:	e011883a 	mov	r8,fp
   135b4:	172fc83a 	sub	r23,r2,fp
   135b8:	ba05883a 	add	r2,r23,r8
   135bc:	00805716 	blt	zero,r2,1371c <___vfprintf_internal_r+0x428>
   135c0:	8707883a 	add	r3,r16,fp
   135c4:	ddc00417 	ldw	r23,16(sp)
   135c8:	1a21c83a 	sub	r16,r3,r8
   135cc:	003f6006 	br	13350 <___vfprintf_internal_r+0x5c>
   135d0:	18801d60 	cmpeqi	r2,r3,117
   135d4:	10005f1e 	bne	r2,zero,13754 <___vfprintf_internal_r+0x460>
   135d8:	18801e20 	cmpeqi	r2,r3,120
   135dc:	10001e1e 	bne	r2,zero,13658 <___vfprintf_internal_r+0x364>
   135e0:	18c01ce0 	cmpeqi	r3,r3,115
   135e4:	183f5a26 	beq	r3,zero,13350 <___vfprintf_internal_r+0x5c>
   135e8:	b8800104 	addi	r2,r23,4
   135ec:	d8800315 	stw	r2,12(sp)
   135f0:	b8800017 	ldw	r2,0(r23)
   135f4:	1009883a 	mov	r4,r2
   135f8:	1039883a 	mov	fp,r2
   135fc:	00138d00 	call	138d0 <strlen>
   13600:	988fc83a 	sub	r7,r19,r2
   13604:	102f883a 	mov	r23,r2
   13608:	01c0080e 	bge	zero,r7,1362c <___vfprintf_internal_r+0x338>
   1360c:	01800804 	movi	r6,32
   13610:	880b883a 	mov	r5,r17
   13614:	9009883a 	mov	r4,r18
   13618:	d9c00415 	stw	r7,16(sp)
   1361c:	00132880 	call	13288 <print_repeat>
   13620:	103f661e 	bne	r2,zero,133bc <___vfprintf_internal_r+0xc8>
   13624:	d9c00417 	ldw	r7,16(sp)
   13628:	81e1883a 	add	r16,r16,r7
   1362c:	88800117 	ldw	r2,4(r17)
   13630:	b80f883a 	mov	r7,r23
   13634:	e00d883a 	mov	r6,fp
   13638:	880b883a 	mov	r5,r17
   1363c:	9009883a 	mov	r4,r18
   13640:	103ee83a 	callr	r2
   13644:	103f5d1e 	bne	r2,zero,133bc <___vfprintf_internal_r+0xc8>
   13648:	85e1883a 	add	r16,r16,r23
   1364c:	ddc00317 	ldw	r23,12(sp)
   13650:	003f4306 	br	13360 <___vfprintf_internal_r+0x6c>
   13654:	dd400215 	stw	r21,8(sp)
   13658:	05000404 	movi	r20,16
   1365c:	00003d06 	br	13754 <___vfprintf_internal_r+0x460>
   13660:	b809883a 	mov	r4,r23
   13664:	a00b883a 	mov	r5,r20
   13668:	da400615 	stw	r9,24(sp)
   1366c:	0010a800 	call	10a80 <__udivsi3>
   13670:	1009883a 	mov	r4,r2
   13674:	a00b883a 	mov	r5,r20
   13678:	d8800315 	stw	r2,12(sp)
   1367c:	0010b400 	call	10b40 <__mulsi3>
   13680:	b8afc83a 	sub	r23,r23,r2
   13684:	b8800288 	cmpgei	r2,r23,10
   13688:	d9000317 	ldw	r4,12(sp)
   1368c:	da400617 	ldw	r9,24(sp)
   13690:	d9800804 	addi	r6,sp,32
   13694:	1000051e 	bne	r2,zero,136ac <___vfprintf_internal_r+0x3b8>
   13698:	bdc00c04 	addi	r23,r23,48
   1369c:	e7000044 	addi	fp,fp,1
   136a0:	e5ffffc5 	stb	r23,-1(fp)
   136a4:	202f883a 	mov	r23,r4
   136a8:	003f9806 	br	1350c <___vfprintf_internal_r+0x218>
   136ac:	d8800217 	ldw	r2,8(sp)
   136b0:	10000226 	beq	r2,zero,136bc <___vfprintf_internal_r+0x3c8>
   136b4:	bdc00dc4 	addi	r23,r23,55
   136b8:	003ff806 	br	1369c <___vfprintf_internal_r+0x3a8>
   136bc:	bdc015c4 	addi	r23,r23,87
   136c0:	003ff606 	br	1369c <___vfprintf_internal_r+0x3a8>
   136c4:	05c0090e 	bge	zero,r23,136ec <___vfprintf_internal_r+0x3f8>
   136c8:	b80f883a 	mov	r7,r23
   136cc:	01800804 	movi	r6,32
   136d0:	880b883a 	mov	r5,r17
   136d4:	9009883a 	mov	r4,r18
   136d8:	da400615 	stw	r9,24(sp)
   136dc:	00132880 	call	13288 <print_repeat>
   136e0:	103f361e 	bne	r2,zero,133bc <___vfprintf_internal_r+0xc8>
   136e4:	da400617 	ldw	r9,24(sp)
   136e8:	85e1883a 	add	r16,r16,r23
   136ec:	483faf26 	beq	r9,zero,135ac <___vfprintf_internal_r+0x2b8>
   136f0:	00800b44 	movi	r2,45
   136f4:	d88007c5 	stb	r2,31(sp)
   136f8:	88800117 	ldw	r2,4(r17)
   136fc:	01c00044 	movi	r7,1
   13700:	d98007c4 	addi	r6,sp,31
   13704:	880b883a 	mov	r5,r17
   13708:	9009883a 	mov	r4,r18
   1370c:	103ee83a 	callr	r2
   13710:	103f2a1e 	bne	r2,zero,133bc <___vfprintf_internal_r+0xc8>
   13714:	84000044 	addi	r16,r16,1
   13718:	003fa406 	br	135ac <___vfprintf_internal_r+0x2b8>
   1371c:	40bfffc3 	ldbu	r2,-1(r8)
   13720:	01c00044 	movi	r7,1
   13724:	423fffc4 	addi	r8,r8,-1
   13728:	d88007c5 	stb	r2,31(sp)
   1372c:	88800117 	ldw	r2,4(r17)
   13730:	d98007c4 	addi	r6,sp,31
   13734:	880b883a 	mov	r5,r17
   13738:	9009883a 	mov	r4,r18
   1373c:	da000315 	stw	r8,12(sp)
   13740:	103ee83a 	callr	r2
   13744:	da000317 	ldw	r8,12(sp)
   13748:	103f9b26 	beq	r2,zero,135b8 <___vfprintf_internal_r+0x2c4>
   1374c:	003f1b06 	br	133bc <___vfprintf_internal_r+0xc8>
   13750:	05000204 	movi	r20,8
   13754:	b8800104 	addi	r2,r23,4
   13758:	d8800415 	stw	r2,16(sp)
   1375c:	bdc00017 	ldw	r23,0(r23)
   13760:	d8000015 	stw	zero,0(sp)
   13764:	0013883a 	mov	r9,zero
   13768:	003f6606 	br	13504 <___vfprintf_internal_r+0x210>
   1376c:	98800090 	cmplti	r2,r19,2
   13770:	1000091e 	bne	r2,zero,13798 <___vfprintf_internal_r+0x4a4>
   13774:	99ffffc4 	addi	r7,r19,-1
   13778:	01800804 	movi	r6,32
   1377c:	880b883a 	mov	r5,r17
   13780:	9009883a 	mov	r4,r18
   13784:	d9c00315 	stw	r7,12(sp)
   13788:	00132880 	call	13288 <print_repeat>
   1378c:	103f0b1e 	bne	r2,zero,133bc <___vfprintf_internal_r+0xc8>
   13790:	d9c00317 	ldw	r7,12(sp)
   13794:	81e1883a 	add	r16,r16,r7
   13798:	b8800017 	ldw	r2,0(r23)
   1379c:	b8c00104 	addi	r3,r23,4
   137a0:	01c00044 	movi	r7,1
   137a4:	d8800805 	stb	r2,32(sp)
   137a8:	88800117 	ldw	r2,4(r17)
   137ac:	d9800804 	addi	r6,sp,32
   137b0:	880b883a 	mov	r5,r17
   137b4:	9009883a 	mov	r4,r18
   137b8:	d8c00315 	stw	r3,12(sp)
   137bc:	103ee83a 	callr	r2
   137c0:	103efe1e 	bne	r2,zero,133bc <___vfprintf_internal_r+0xc8>
   137c4:	d8c00317 	ldw	r3,12(sp)
   137c8:	84000044 	addi	r16,r16,1
   137cc:	182f883a 	mov	r23,r3
   137d0:	003ee306 	br	13360 <___vfprintf_internal_r+0x6c>
   137d4:	00800044 	movi	r2,1
   137d8:	d8000215 	stw	zero,8(sp)
   137dc:	002b883a 	mov	r21,zero
   137e0:	d8000115 	stw	zero,4(sp)
   137e4:	d8800015 	stw	r2,0(sp)
   137e8:	05000284 	movi	r20,10
   137ec:	05bfffc4 	movi	r22,-1
   137f0:	04ffffc4 	movi	r19,-1
   137f4:	003eda06 	br	13360 <___vfprintf_internal_r+0x6c>
   137f8:	00800044 	movi	r2,1
   137fc:	d8800115 	stw	r2,4(sp)
   13800:	003f0a06 	br	1342c <___vfprintf_internal_r+0x138>
   13804:	05400044 	movi	r21,1
   13808:	008000c4 	movi	r2,3
   1380c:	003ed406 	br	13360 <___vfprintf_internal_r+0x6c>

00013810 <__vfprintf_internal>:
   13810:	00800074 	movhi	r2,1
   13814:	300f883a 	mov	r7,r6
   13818:	280d883a 	mov	r6,r5
   1381c:	200b883a 	mov	r5,r4
   13820:	11117f17 	ldw	r4,17916(r2)
   13824:	00132f41 	jmpi	132f4 <___vfprintf_internal_r>

00013828 <__sfvwrite_small_dev>:
   13828:	2880000b 	ldhu	r2,0(r5)
   1382c:	1080020c 	andi	r2,r2,8
   13830:	10002526 	beq	r2,zero,138c8 <__sfvwrite_small_dev+0xa0>
   13834:	2880008f 	ldh	r2,2(r5)
   13838:	defffb04 	addi	sp,sp,-20
   1383c:	dcc00315 	stw	r19,12(sp)
   13840:	dc800215 	stw	r18,8(sp)
   13844:	dc400115 	stw	r17,4(sp)
   13848:	dc000015 	stw	r16,0(sp)
   1384c:	dfc00415 	stw	ra,16(sp)
   13850:	2027883a 	mov	r19,r4
   13854:	2821883a 	mov	r16,r5
   13858:	3025883a 	mov	r18,r6
   1385c:	3823883a 	mov	r17,r7
   13860:	1000100e 	bge	r2,zero,138a4 <__sfvwrite_small_dev+0x7c>
   13864:	8080000b 	ldhu	r2,0(r16)
   13868:	10801014 	ori	r2,r2,64
   1386c:	8080000d 	sth	r2,0(r16)
   13870:	00bfffc4 	movi	r2,-1
   13874:	00000d06 	br	138ac <__sfvwrite_small_dev+0x84>
   13878:	88810050 	cmplti	r2,r17,1025
   1387c:	880f883a 	mov	r7,r17
   13880:	1000011e 	bne	r2,zero,13888 <__sfvwrite_small_dev+0x60>
   13884:	01c10004 	movi	r7,1024
   13888:	8140008f 	ldh	r5,2(r16)
   1388c:	900d883a 	mov	r6,r18
   13890:	9809883a 	mov	r4,r19
   13894:	00138ec0 	call	138ec <_write_r>
   13898:	00bff20e 	bge	zero,r2,13864 <__sfvwrite_small_dev+0x3c>
   1389c:	88a3c83a 	sub	r17,r17,r2
   138a0:	90a5883a 	add	r18,r18,r2
   138a4:	047ff416 	blt	zero,r17,13878 <__sfvwrite_small_dev+0x50>
   138a8:	0005883a 	mov	r2,zero
   138ac:	dfc00417 	ldw	ra,16(sp)
   138b0:	dcc00317 	ldw	r19,12(sp)
   138b4:	dc800217 	ldw	r18,8(sp)
   138b8:	dc400117 	ldw	r17,4(sp)
   138bc:	dc000017 	ldw	r16,0(sp)
   138c0:	dec00504 	addi	sp,sp,20
   138c4:	f800283a 	ret
   138c8:	00bfffc4 	movi	r2,-1
   138cc:	f800283a 	ret

000138d0 <strlen>:
   138d0:	2005883a 	mov	r2,r4
   138d4:	10c00007 	ldb	r3,0(r2)
   138d8:	1800021e 	bne	r3,zero,138e4 <strlen+0x14>
   138dc:	1105c83a 	sub	r2,r2,r4
   138e0:	f800283a 	ret
   138e4:	10800044 	addi	r2,r2,1
   138e8:	003ffa06 	br	138d4 <strlen+0x4>

000138ec <_write_r>:
   138ec:	defffe04 	addi	sp,sp,-8
   138f0:	dc000015 	stw	r16,0(sp)
   138f4:	00800074 	movhi	r2,1
   138f8:	2021883a 	mov	r16,r4
   138fc:	2809883a 	mov	r4,r5
   13900:	300b883a 	mov	r5,r6
   13904:	380d883a 	mov	r6,r7
   13908:	dfc00115 	stw	ra,4(sp)
   1390c:	1011ee15 	stw	zero,18360(r2)
   13910:	00139ec0 	call	139ec <write>
   13914:	10ffffd8 	cmpnei	r3,r2,-1
   13918:	1800041e 	bne	r3,zero,1392c <_write_r+0x40>
   1391c:	00c00074 	movhi	r3,1
   13920:	18d1ee17 	ldw	r3,18360(r3)
   13924:	18000126 	beq	r3,zero,1392c <_write_r+0x40>
   13928:	80c00015 	stw	r3,0(r16)
   1392c:	dfc00117 	ldw	ra,4(sp)
   13930:	dc000017 	ldw	r16,0(sp)
   13934:	dec00204 	addi	sp,sp,8
   13938:	f800283a 	ret

0001393c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1393c:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   13940:	01000074 	movhi	r4,1
   13944:	01400074 	movhi	r5,1
   13948:	dfc00015 	stw	ra,0(sp)
   1394c:	21112004 	addi	r4,r4,17536
   13950:	29518704 	addi	r5,r5,17948
   13954:	21400426 	beq	r4,r5,13968 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
   13958:	01800074 	movhi	r6,1
   1395c:	31918704 	addi	r6,r6,17948
   13960:	310dc83a 	sub	r6,r6,r4
   13964:	00131dc0 	call	131dc <memcpy>
  if (to != from)
   13968:	01000074 	movhi	r4,1
   1396c:	01400074 	movhi	r5,1
   13970:	21000804 	addi	r4,r4,32
   13974:	29400804 	addi	r5,r5,32
   13978:	21400426 	beq	r4,r5,1398c <alt_load+0x50>
      *to++ = *from++;
   1397c:	01800074 	movhi	r6,1
   13980:	31800804 	addi	r6,r6,32
   13984:	310dc83a 	sub	r6,r6,r4
   13988:	00131dc0 	call	131dc <memcpy>
  if (to != from)
   1398c:	01000074 	movhi	r4,1
   13990:	01400074 	movhi	r5,1
   13994:	210f4a04 	addi	r4,r4,15656
   13998:	294f4a04 	addi	r5,r5,15656
   1399c:	21400426 	beq	r4,r5,139b0 <alt_load+0x74>
      *to++ = *from++;
   139a0:	01800074 	movhi	r6,1
   139a4:	31912004 	addi	r6,r6,17536
   139a8:	310dc83a 	sub	r6,r6,r4
   139ac:	00131dc0 	call	131dc <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   139b0:	0013c080 	call	13c08 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   139b4:	dfc00017 	ldw	ra,0(sp)
   139b8:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   139bc:	0013cec1 	jmpi	13cec <alt_icache_flush_all>

000139c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   139c0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   139c4:	0009883a 	mov	r4,zero
{
   139c8:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   139cc:	0013a480 	call	13a48 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   139d0:	0013a680 	call	13a68 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   139d4:	d1a07517 	ldw	r6,-32300(gp)
   139d8:	d1607617 	ldw	r5,-32296(gp)
   139dc:	d1207717 	ldw	r4,-32292(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   139e0:	dfc00017 	ldw	ra,0(sp)
   139e4:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   139e8:	00103b01 	jmpi	103b0 <main>

000139ec <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   139ec:	213fffc4 	addi	r4,r4,-1
   139f0:	210000a8 	cmpgeui	r4,r4,2
   139f4:	2000041e 	bne	r4,zero,13a08 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   139f8:	01000074 	movhi	r4,1
   139fc:	000f883a 	mov	r7,zero
   13a00:	21118004 	addi	r4,r4,17920
   13a04:	0013a781 	jmpi	13a78 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   13a08:	d0a00c17 	ldw	r2,-32720(gp)
   13a0c:	10000926 	beq	r2,zero,13a34 <write+0x48>
{
   13a10:	deffff04 	addi	sp,sp,-4
   13a14:	dfc00015 	stw	ra,0(sp)
   13a18:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   13a1c:	00c01444 	movi	r3,81
   13a20:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   13a24:	00bfffc4 	movi	r2,-1
   13a28:	dfc00017 	ldw	ra,0(sp)
   13a2c:	dec00104 	addi	sp,sp,4
   13a30:	f800283a 	ret
   13a34:	d0a07404 	addi	r2,gp,-32304
        ALT_ERRNO = EBADFD;
   13a38:	00c01444 	movi	r3,81
   13a3c:	10c00015 	stw	r3,0(r2)
}
   13a40:	00bfffc4 	movi	r2,-1
   13a44:	f800283a 	ret

00013a48 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13a48:	deffff04 	addi	sp,sp,-4
   13a4c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   13a50:	0013cf00 	call	13cf0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13a54:	00800044 	movi	r2,1
   13a58:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13a5c:	dfc00017 	ldw	ra,0(sp)
   13a60:	dec00104 	addi	sp,sp,4
   13a64:	f800283a 	ret

00013a68 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13a68:	01000074 	movhi	r4,1
   13a6c:	d1600804 	addi	r5,gp,-32736
   13a70:	21115904 	addi	r4,r4,17764
   13a74:	0013c141 	jmpi	13c14 <alt_dev_llist_insert>

00013a78 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   13a78:	20c00017 	ldw	r3,0(r4)
{
   13a7c:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   13a80:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   13a84:	01bfffd4 	movui	r6,65535
  while (ptr < end)
   13a88:	29000136 	bltu	r5,r4,13a90 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   13a8c:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   13a90:	19c00137 	ldwio	r7,4(r3)
   13a94:	31fffc2e 	bgeu	r6,r7,13a88 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   13a98:	29c00007 	ldb	r7,0(r5)
   13a9c:	29400044 	addi	r5,r5,1
   13aa0:	19c00035 	stwio	r7,0(r3)
   13aa4:	003ff806 	br	13a88 <altera_avalon_jtag_uart_write+0x10>

00013aa8 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   13aa8:	d1600804 	addi	r5,gp,-32736
   13aac:	0013c7c1 	jmpi	13c7c <alt_find_dev>

00013ab0 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   13ab0:	20800a17 	ldw	r2,40(r4)
   13ab4:	10800023 	ldbuio	r2,0(r2)
   13ab8:	28800005 	stb	r2,0(r5)

	return 0;
}
   13abc:	0005883a 	mov	r2,zero
   13ac0:	f800283a 	ret

00013ac4 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13ac4:	20800a17 	ldw	r2,40(r4)
   13ac8:	29400fcc 	andi	r5,r5,63
   13acc:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13ad0:	20800a17 	ldw	r2,40(r4)
   13ad4:	10800063 	ldbuio	r2,1(r2)
   13ad8:	30800005 	stb	r2,0(r6)

	return 0;
}
   13adc:	0005883a 	mov	r2,zero
   13ae0:	f800283a 	ret

00013ae4 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13ae4:	20800a17 	ldw	r2,40(r4)
   13ae8:	29400fcc 	andi	r5,r5,63
   13aec:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   13af0:	20800a17 	ldw	r2,40(r4)
   13af4:	11800065 	stbio	r6,1(r2)

	return 0;
}
   13af8:	0005883a 	mov	r2,zero
   13afc:	f800283a 	ret

00013b00 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13b00:	20800a17 	ldw	r2,40(r4)
   13b04:	00c00c84 	movi	r3,50
   13b08:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13b0c:	20800a17 	ldw	r2,40(r4)
   13b10:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13b14:	00c00cc4 	movi	r3,51
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13b18:	10803fcc 	andi	r2,r2,255
   13b1c:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13b20:	20800a17 	ldw	r2,40(r4)
   13b24:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   13b28:	20800a17 	ldw	r2,40(r4)
   13b2c:	10800063 	ldbuio	r2,1(r2)
   13b30:	10803fcc 	andi	r2,r2,255
   13b34:	28c00017 	ldw	r3,0(r5)
   13b38:	1004923a 	slli	r2,r2,8
   13b3c:	10c5883a 	add	r2,r2,r3

	if (*(x_axis) & 0x00008000)
   13b40:	10e0000c 	andi	r3,r2,32768
   13b44:	18000126 	beq	r3,zero,13b4c <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   13b48:	10bffff4 	orhi	r2,r2,65535
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   13b4c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   13b50:	0005883a 	mov	r2,zero
   13b54:	f800283a 	ret

00013b58 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13b58:	20800a17 	ldw	r2,40(r4)
   13b5c:	00c00d04 	movi	r3,52
   13b60:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13b64:	20800a17 	ldw	r2,40(r4)
   13b68:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13b6c:	00c00d44 	movi	r3,53
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13b70:	10803fcc 	andi	r2,r2,255
   13b74:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13b78:	20800a17 	ldw	r2,40(r4)
   13b7c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   13b80:	20800a17 	ldw	r2,40(r4)
   13b84:	10800063 	ldbuio	r2,1(r2)
   13b88:	10803fcc 	andi	r2,r2,255
   13b8c:	28c00017 	ldw	r3,0(r5)
   13b90:	1004923a 	slli	r2,r2,8
   13b94:	10c5883a 	add	r2,r2,r3

	if (*(y_axis) & 0x00008000)
   13b98:	10e0000c 	andi	r3,r2,32768
   13b9c:	18000126 	beq	r3,zero,13ba4 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   13ba0:	10bffff4 	orhi	r2,r2,65535
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   13ba4:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   13ba8:	0005883a 	mov	r2,zero
   13bac:	f800283a 	ret

00013bb0 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13bb0:	20800a17 	ldw	r2,40(r4)
   13bb4:	00c00d84 	movi	r3,54
   13bb8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13bbc:	20800a17 	ldw	r2,40(r4)
   13bc0:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13bc4:	00c00dc4 	movi	r3,55
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13bc8:	10803fcc 	andi	r2,r2,255
   13bcc:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13bd0:	20800a17 	ldw	r2,40(r4)
   13bd4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   13bd8:	20800a17 	ldw	r2,40(r4)
   13bdc:	10800063 	ldbuio	r2,1(r2)
   13be0:	10803fcc 	andi	r2,r2,255
   13be4:	28c00017 	ldw	r3,0(r5)
   13be8:	1004923a 	slli	r2,r2,8
   13bec:	10c5883a 	add	r2,r2,r3

	if (*(z_axis) & 0x00008000)
   13bf0:	10e0000c 	andi	r3,r2,32768
   13bf4:	18000126 	beq	r3,zero,13bfc <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   13bf8:	10bffff4 	orhi	r2,r2,65535
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   13bfc:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   13c00:	0005883a 	mov	r2,zero
   13c04:	f800283a 	ret

00013c08 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   13c08:	f800283a 	ret

00013c0c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13c0c:	3005883a 	mov	r2,r6
  return len;
}
   13c10:	f800283a 	ret

00013c14 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13c14:	20000226 	beq	r4,zero,13c20 <alt_dev_llist_insert+0xc>
   13c18:	20800217 	ldw	r2,8(r4)
   13c1c:	10000b1e 	bne	r2,zero,13c4c <alt_dev_llist_insert+0x38>
   13c20:	d0a00c17 	ldw	r2,-32720(gp)
   13c24:	10001026 	beq	r2,zero,13c68 <alt_dev_llist_insert+0x54>
{
   13c28:	deffff04 	addi	sp,sp,-4
   13c2c:	dfc00015 	stw	ra,0(sp)
   13c30:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
   13c34:	00c00584 	movi	r3,22
   13c38:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   13c3c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   13c40:	dfc00017 	ldw	ra,0(sp)
   13c44:	dec00104 	addi	sp,sp,4
   13c48:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   13c4c:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
   13c50:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   13c54:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   13c58:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   13c5c:	29000015 	stw	r4,0(r5)
  return 0;  
   13c60:	0005883a 	mov	r2,zero
   13c64:	f800283a 	ret
   13c68:	d0a07404 	addi	r2,gp,-32304
    ALT_ERRNO = EINVAL;
   13c6c:	00c00584 	movi	r3,22
   13c70:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   13c74:	00bffa84 	movi	r2,-22
}
   13c78:	f800283a 	ret

00013c7c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13c7c:	defffb04 	addi	sp,sp,-20
   13c80:	dcc00315 	stw	r19,12(sp)
   13c84:	dc800215 	stw	r18,8(sp)
   13c88:	dc400115 	stw	r17,4(sp)
   13c8c:	dc000015 	stw	r16,0(sp)
   13c90:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
   13c94:	2c000017 	ldw	r16,0(r5)
{
   13c98:	2027883a 	mov	r19,r4
   13c9c:	2823883a 	mov	r17,r5
  alt_32 len;

  len  = strlen(name) + 1;
   13ca0:	00138d00 	call	138d0 <strlen>
   13ca4:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13ca8:	8440091e 	bne	r16,r17,13cd0 <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   13cac:	0021883a 	mov	r16,zero
}
   13cb0:	8005883a 	mov	r2,r16
   13cb4:	dfc00417 	ldw	ra,16(sp)
   13cb8:	dcc00317 	ldw	r19,12(sp)
   13cbc:	dc800217 	ldw	r18,8(sp)
   13cc0:	dc400117 	ldw	r17,4(sp)
   13cc4:	dc000017 	ldw	r16,0(sp)
   13cc8:	dec00504 	addi	sp,sp,20
   13ccc:	f800283a 	ret
    if (!memcmp (next->name, name, len))
   13cd0:	81000217 	ldw	r4,8(r16)
   13cd4:	900d883a 	mov	r6,r18
   13cd8:	980b883a 	mov	r5,r19
   13cdc:	0013cf80 	call	13cf8 <memcmp>
   13ce0:	103ff326 	beq	r2,zero,13cb0 <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
   13ce4:	84000017 	ldw	r16,0(r16)
   13ce8:	003fef06 	br	13ca8 <alt_find_dev+0x2c>

00013cec <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   13cec:	f800283a 	ret

00013cf0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   13cf0:	000170fa 	wrctl	ienable,zero
}
   13cf4:	f800283a 	ret

00013cf8 <memcmp>:
   13cf8:	0007883a 	mov	r3,zero
   13cfc:	30c0021e 	bne	r6,r3,13d08 <memcmp+0x10>
   13d00:	0005883a 	mov	r2,zero
   13d04:	f800283a 	ret
   13d08:	20c5883a 	add	r2,r4,r3
   13d0c:	18c00044 	addi	r3,r3,1
   13d10:	28cf883a 	add	r7,r5,r3
   13d14:	10800003 	ldbu	r2,0(r2)
   13d18:	39ffffc3 	ldbu	r7,-1(r7)
   13d1c:	11fff726 	beq	r2,r7,13cfc <memcmp+0x4>
   13d20:	11c5c83a 	sub	r2,r2,r7
   13d24:	f800283a 	ret
