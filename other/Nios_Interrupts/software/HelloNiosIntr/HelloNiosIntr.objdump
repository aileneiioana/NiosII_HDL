
HelloNiosIntr.elf:     file format elf32-littlenios2
HelloNiosIntr.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010188

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000f30 memsz 0x00000f30 flags r-x
    LOAD off    0x00001f50 vaddr 0x00010f50 paddr 0x00011048 align 2**12
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x00000140 vaddr 0x00011140 paddr 0x00011140 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000168  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000d54  00010188  00010188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000074  00010edc  00010edc  00001edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f8  00010f50  00011048  00001f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00011140  00011140  00002140  2**2
                  ALLOC, SMALL_DATA
  6 .SRAM         00000000  0001125c  0001125c  00002048  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003d8  00000000  00000000  00002078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00004cbd  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001e19  00000000  00000000  0000710d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00001945  00000000  00000000  00008f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000004bc  00000000  00000000  0000a86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000107d  00000000  00000000  0000ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000030  00000000  00000000  0000bda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  0000bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000013ee  00000000  00000000  0000be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001f3  00000000  00000000  0000d236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000be2  00000000  00000000  0000d429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  0000f3ec  2**0
                  CONTENTS, READONLY
 20 .cpu          00000008  00000000  00000000  0000f3ef  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0000f3f7  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0000f3f8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000005  00000000  00000000  0000f3f9  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000005  00000000  00000000  0000f3fe  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000005  00000000  00000000  0000f403  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000d  00000000  00000000  0000f408  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002d  00000000  00000000  0000f415  2**0
                  CONTENTS, READONLY
 28 .jdi          00004ed0  00000000  00000000  0000f442  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010188 l    d  .text	00000000 .text
00010edc l    d  .rodata	00000000 .rodata
00010f50 l    d  .rwdata	00000000 .rwdata
00011140 l    d  .bss	00000000 .bss
0001125c l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
000101d0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000101d4 l     F .text	00000020 timer_isr
00011140 l     O .bss	00000004 count.0
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010388 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00010f50 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcpy.c
00011158 g     O .bss	00000004 alt_instruction_exception_handler
00010d2c g     F .text	0000002c alt_main
000102dc g     F .text	00000080 _puts_r
0001115c g     O .bss	00000100 alt_irq
00011048 g       *ABS*	00000000 __flash_rwdata_start
00010294 g     F .text	00000048 printf
00010e50 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011144 g     O .bss	00000004 errno
00011150 g     O .bss	00000004 alt_argv
00019034 g       *ABS*	00000000 _gp
00010eb4 g     F .text	00000028 memcpy
0001035c g     F .text	00000010 puts
00010e2c g     F .text	00000024 alt_exception_cause_generated_bad_addr
00010258 g     F .text	0000003c _printf_r
00010af4 g     F .text	00000064 .hidden __udivsi3
00010e58 g     F .text	0000005c alt_icache_flush
00011034 g     O .rwdata	00000004 _global_impure_ptr
0001125c g       *ABS*	00000000 __bss_end
00010c40 g     F .text	00000068 alt_iic_isr_register
00010c28 g     F .text	00000018 alt_ic_irq_enabled
00011148 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00010e08 g     F .text	00000018 alt_dcache_flush_all
00011048 g       *ABS*	00000000 __ram_rwdata_end
00010d58 g     F .text	0000005c write
00010f50 g       *ABS*	00000000 __ram_rodata_end
00011040 g     O .rwdata	00000004 DEBUG
00010b58 g     F .text	0000005c .hidden __umodsi3
0001125c g       *ABS*	00000000 end
0001015c g     F .exceptions	0000002c alt_instruction_exception_entry
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010dd8 g     F .text	00000030 altera_avalon_jtag_uart_write
000103f4 g     F .text	000004fc ___vfprintf_internal_r
000101f4 g     F .text	0000003c init_timer_interrupt
00010188 g     F .text	0000004c _start
00010dd4 g     F .text	00000004 alt_sys_init
00010f50 g       *ABS*	00000000 __ram_rwdata_start
00010edc g       *ABS*	00000000 __ram_rodata_start
0001125c g       *ABS*	00000000 __alt_stack_base
00010908 g     F .text	000000a8 __sfvwrite_small_dev
00011140 g       *ABS*	00000000 __bss_start
00010230 g     F .text	00000028 main
0001114c g     O .bss	00000004 alt_envp
00011044 g     O .rwdata	00000004 alt_errno
00010a00 g     F .text	00000080 .hidden __divsi3
00010edc g       *ABS*	00000000 __flash_rodata_start
00010db4 g     F .text	00000020 alt_irq_init
000109b0 g     F .text	00000050 _write_r
00011038 g     O .rwdata	00000004 _impure_ptr
00011154 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010bb4 g     F .text	00000004 alt_ic_isr_register
00011048 g       *ABS*	00000000 _edata
0001125c g       *ABS*	00000000 _end
00010188 g       *ABS*	00000000 __ram_exceptions_end
00010bf0 g     F .text	00000038 alt_ic_irq_disable
00010a80 g     F .text	00000074 .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001001c g       .entry	00000000 _exit
0001036c g     F .text	0000001c strlen
00010000 g       *ABS*	00000000 __alt_mem_SRAM
00010e20 g     F .text	0000000c alt_icache_flush_all
0001103c g     O .rwdata	00000004 alt_priority_mask
00010bb8 g     F .text	00000038 alt_ic_irq_enable
000108f0 g     F .text	00000018 __vfprintf_internal
00010ca8 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406214 	ori	at,at,392
    jmp r1
   10018:	0800683a 	jmp	at

0001001c <_exit>:
   1001c:	00000000 	call	0 <__reset-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
   10094:	e93fff04 	addi	r4,ea,-4
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>
   100a0:	ebffff04 	addi	r15,ea,-4
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1010c:	04000074 	movhi	r16,1
   10110:	84045704 	addi	r16,r16,4444
    i = 0;
   10114:	0005883a 	mov	r2,zero
    mask = 1;
   10118:	00c00044 	movi	r3,1
      if (active & mask)
   1011c:	20ca703a 	and	r5,r4,r3
   10120:	28000b26 	beq	r5,zero,10150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
   10124:	100490fa 	slli	r2,r2,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	203ff51e 	bne	r4,zero,10114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
      mask <<= 1;
   10150:	1806907a 	slli	r3,r3,1
      i++;
   10154:	10800044 	addi	r2,r2,1
      if (active & mask)
   10158:	003ff006 	br	1011c <alt_irq_handler+0x20>

0001015c <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   1015c:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   10160:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   10164:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10168:	d0e04917 	ldw	r3,-32476(gp)
   1016c:	18000326 	beq	r3,zero,1017c <alt_instruction_exception_entry+0x20>
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   10170:	1004d0ba 	srli	r2,r2,2
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10174:	110007cc 	andi	r4,r2,31
   10178:	1800683a 	jmp	r3
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   1017c:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10180:	0005883a 	mov	r2,zero
   10184:	f800283a 	ret

Disassembly of section .text:

00010188 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10188:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   1018c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10190:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10194:	00bffd16 	blt	zero,r2,1018c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10198:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   1019c:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   101a0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101a4:	d6a40d14 	ori	gp,gp,36916
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101a8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101ac:	10845014 	ori	r2,r2,4416

    movhi r3, %hi(__bss_end)
   101b0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101b4:	18c49714 	ori	r3,r3,4700

    beq r2, r3, 1f
   101b8:	10c00326 	beq	r2,r3,101c8 <_start+0x40>

0:
    stw zero, (r2)
   101bc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101c0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101c4:	10fffd36 	bltu	r2,r3,101bc <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101c8:	0010ca80 	call	10ca8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101cc:	0010d2c0 	call	10d2c <alt_main>

000101d0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101d0:	003fff06 	br	101d0 <alt_after_alt_main>

000101d4 <timer_isr>:
static void timer_isr( void * context, alt_u32 id )
{
	static int count = 0;

	// Clear the interrupt
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101d4:	008000b4 	movhi	r2,2
   101d8:	10040035 	stwio	zero,4096(r2)

	// Do something
	printf("\nTimer Expired: %d", count++);
   101dc:	d1604317 	ldw	r5,-32500(gp)
   101e0:	01000074 	movhi	r4,1
   101e4:	2103b704 	addi	r4,r4,3804
   101e8:	28800044 	addi	r2,r5,1
   101ec:	d0a04315 	stw	r2,-32500(gp)
   101f0:	00102941 	jmpi	10294 <printf>

000101f4 <init_timer_interrupt>:
{
   101f4:	defffe04 	addi	sp,sp,-8
	alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ, (void *)timer_isr, NULL, 0x0);
   101f8:	01800074 	movhi	r6,1
   101fc:	d8000015 	stw	zero,0(sp)
   10200:	000f883a 	mov	r7,zero
   10204:	31807504 	addi	r6,r6,468
   10208:	000b883a 	mov	r5,zero
   1020c:	0009883a 	mov	r4,zero
{
   10210:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ, (void *)timer_isr, NULL, 0x0);
   10214:	0010bb40 	call	10bb4 <alt_ic_isr_register>
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
   10218:	00c001c4 	movi	r3,7
   1021c:	008000b4 	movhi	r2,2
   10220:	10c40135 	stwio	r3,4100(r2)
}
   10224:	dfc00117 	ldw	ra,4(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

00010230 <main>:
	printf("Hello from Nios II!\n");
   10230:	01000074 	movhi	r4,1
{
   10234:	deffff04 	addi	sp,sp,-4
	printf("Hello from Nios II!\n");
   10238:	2103bc04 	addi	r4,r4,3824
{
   1023c:	dfc00015 	stw	ra,0(sp)
	printf("Hello from Nios II!\n");
   10240:	001035c0 	call	1035c <puts>
	printf("This is am interrupt example using an interval timer with interrupts.");
   10244:	01000074 	movhi	r4,1
   10248:	2103c104 	addi	r4,r4,3844
   1024c:	00102940 	call	10294 <printf>
	init_timer_interrupt();
   10250:	00101f40 	call	101f4 <init_timer_interrupt>
	while(1)
   10254:	003fff06 	br	10254 <main+0x24>

00010258 <_printf_r>:
   10258:	defffd04 	addi	sp,sp,-12
   1025c:	dfc00015 	stw	ra,0(sp)
   10260:	d9800115 	stw	r6,4(sp)
   10264:	d9c00215 	stw	r7,8(sp)
   10268:	21800217 	ldw	r6,8(r4)
   1026c:	00c00074 	movhi	r3,1
   10270:	18c24204 	addi	r3,r3,2312
   10274:	30c00115 	stw	r3,4(r6)
   10278:	280d883a 	mov	r6,r5
   1027c:	21400217 	ldw	r5,8(r4)
   10280:	d9c00104 	addi	r7,sp,4
   10284:	00103f40 	call	103f4 <___vfprintf_internal_r>
   10288:	dfc00017 	ldw	ra,0(sp)
   1028c:	dec00304 	addi	sp,sp,12
   10290:	f800283a 	ret

00010294 <printf>:
   10294:	defffc04 	addi	sp,sp,-16
   10298:	dfc00015 	stw	ra,0(sp)
   1029c:	d9400115 	stw	r5,4(sp)
   102a0:	d9800215 	stw	r6,8(sp)
   102a4:	d9c00315 	stw	r7,12(sp)
   102a8:	00800074 	movhi	r2,1
   102ac:	10c40e17 	ldw	r3,4152(r2)
   102b0:	00800074 	movhi	r2,1
   102b4:	10824204 	addi	r2,r2,2312
   102b8:	19400217 	ldw	r5,8(r3)
   102bc:	d9800104 	addi	r6,sp,4
   102c0:	28800115 	stw	r2,4(r5)
   102c4:	200b883a 	mov	r5,r4
   102c8:	19000217 	ldw	r4,8(r3)
   102cc:	00108f00 	call	108f0 <__vfprintf_internal>
   102d0:	dfc00017 	ldw	ra,0(sp)
   102d4:	dec00404 	addi	sp,sp,16
   102d8:	f800283a 	ret

000102dc <_puts_r>:
   102dc:	defffd04 	addi	sp,sp,-12
   102e0:	dc000015 	stw	r16,0(sp)
   102e4:	2021883a 	mov	r16,r4
   102e8:	2809883a 	mov	r4,r5
   102ec:	dfc00215 	stw	ra,8(sp)
   102f0:	dc400115 	stw	r17,4(sp)
   102f4:	2823883a 	mov	r17,r5
   102f8:	001036c0 	call	1036c <strlen>
   102fc:	81400217 	ldw	r5,8(r16)
   10300:	00c00074 	movhi	r3,1
   10304:	18c24204 	addi	r3,r3,2312
   10308:	28c00115 	stw	r3,4(r5)
   1030c:	100f883a 	mov	r7,r2
   10310:	880d883a 	mov	r6,r17
   10314:	8009883a 	mov	r4,r16
   10318:	00109080 	call	10908 <__sfvwrite_small_dev>
   1031c:	10ffffe0 	cmpeqi	r3,r2,-1
   10320:	1800091e 	bne	r3,zero,10348 <_puts_r+0x6c>
   10324:	81400217 	ldw	r5,8(r16)
   10328:	01800074 	movhi	r6,1
   1032c:	01c00044 	movi	r7,1
   10330:	28800117 	ldw	r2,4(r5)
   10334:	3183d304 	addi	r6,r6,3916
   10338:	8009883a 	mov	r4,r16
   1033c:	103ee83a 	callr	r2
   10340:	10bfffe0 	cmpeqi	r2,r2,-1
   10344:	0085c83a 	sub	r2,zero,r2
   10348:	dfc00217 	ldw	ra,8(sp)
   1034c:	dc400117 	ldw	r17,4(sp)
   10350:	dc000017 	ldw	r16,0(sp)
   10354:	dec00304 	addi	sp,sp,12
   10358:	f800283a 	ret

0001035c <puts>:
   1035c:	00800074 	movhi	r2,1
   10360:	200b883a 	mov	r5,r4
   10364:	11040e17 	ldw	r4,4152(r2)
   10368:	00102dc1 	jmpi	102dc <_puts_r>

0001036c <strlen>:
   1036c:	2005883a 	mov	r2,r4
   10370:	10c00007 	ldb	r3,0(r2)
   10374:	1800021e 	bne	r3,zero,10380 <strlen+0x14>
   10378:	1105c83a 	sub	r2,r2,r4
   1037c:	f800283a 	ret
   10380:	10800044 	addi	r2,r2,1
   10384:	003ffa06 	br	10370 <strlen+0x4>

00010388 <print_repeat>:
   10388:	defffb04 	addi	sp,sp,-20
   1038c:	dc800315 	stw	r18,12(sp)
   10390:	dc400215 	stw	r17,8(sp)
   10394:	dc000115 	stw	r16,4(sp)
   10398:	dfc00415 	stw	ra,16(sp)
   1039c:	2025883a 	mov	r18,r4
   103a0:	2823883a 	mov	r17,r5
   103a4:	d9800005 	stb	r6,0(sp)
   103a8:	3821883a 	mov	r16,r7
   103ac:	04000716 	blt	zero,r16,103cc <print_repeat+0x44>
   103b0:	0005883a 	mov	r2,zero
   103b4:	dfc00417 	ldw	ra,16(sp)
   103b8:	dc800317 	ldw	r18,12(sp)
   103bc:	dc400217 	ldw	r17,8(sp)
   103c0:	dc000117 	ldw	r16,4(sp)
   103c4:	dec00504 	addi	sp,sp,20
   103c8:	f800283a 	ret
   103cc:	88800117 	ldw	r2,4(r17)
   103d0:	01c00044 	movi	r7,1
   103d4:	d80d883a 	mov	r6,sp
   103d8:	880b883a 	mov	r5,r17
   103dc:	9009883a 	mov	r4,r18
   103e0:	103ee83a 	callr	r2
   103e4:	843fffc4 	addi	r16,r16,-1
   103e8:	103ff026 	beq	r2,zero,103ac <print_repeat+0x24>
   103ec:	00bfffc4 	movi	r2,-1
   103f0:	003ff006 	br	103b4 <print_repeat+0x2c>

000103f4 <___vfprintf_internal_r>:
   103f4:	deffe604 	addi	sp,sp,-104
   103f8:	ddc01715 	stw	r23,92(sp)
   103fc:	dd801615 	stw	r22,88(sp)
   10400:	dd401515 	stw	r21,84(sp)
   10404:	dd001415 	stw	r20,80(sp)
   10408:	dcc01315 	stw	r19,76(sp)
   1040c:	dc801215 	stw	r18,72(sp)
   10410:	dc401115 	stw	r17,68(sp)
   10414:	dc001015 	stw	r16,64(sp)
   10418:	dfc01915 	stw	ra,100(sp)
   1041c:	df001815 	stw	fp,96(sp)
   10420:	2025883a 	mov	r18,r4
   10424:	2823883a 	mov	r17,r5
   10428:	d9800515 	stw	r6,20(sp)
   1042c:	382f883a 	mov	r23,r7
   10430:	0021883a 	mov	r16,zero
   10434:	d8000215 	stw	zero,8(sp)
   10438:	d8000015 	stw	zero,0(sp)
   1043c:	002b883a 	mov	r21,zero
   10440:	0029883a 	mov	r20,zero
   10444:	0027883a 	mov	r19,zero
   10448:	002d883a 	mov	r22,zero
   1044c:	d8000115 	stw	zero,4(sp)
   10450:	0005883a 	mov	r2,zero
   10454:	00000206 	br	10460 <___vfprintf_internal_r+0x6c>
   10458:	114000e0 	cmpeqi	r5,r2,3
   1045c:	28004c1e 	bne	r5,zero,10590 <___vfprintf_internal_r+0x19c>
   10460:	d8c00517 	ldw	r3,20(sp)
   10464:	19000003 	ldbu	r4,0(r3)
   10468:	18c00044 	addi	r3,r3,1
   1046c:	d8c00515 	stw	r3,20(sp)
   10470:	20c03fcc 	andi	r3,r4,255
   10474:	18c0201c 	xori	r3,r3,128
   10478:	18ffe004 	addi	r3,r3,-128
   1047c:	18001026 	beq	r3,zero,104c0 <___vfprintf_internal_r+0xcc>
   10480:	114000a0 	cmpeqi	r5,r2,2
   10484:	28001f1e 	bne	r5,zero,10504 <___vfprintf_internal_r+0x110>
   10488:	114000c8 	cmpgei	r5,r2,3
   1048c:	283ff21e 	bne	r5,zero,10458 <___vfprintf_internal_r+0x64>
   10490:	1000181e 	bne	r2,zero,104f4 <___vfprintf_internal_r+0x100>
   10494:	18c00960 	cmpeqi	r3,r3,37
   10498:	1801061e 	bne	r3,zero,108b4 <___vfprintf_internal_r+0x4c0>
   1049c:	88800117 	ldw	r2,4(r17)
   104a0:	d9000805 	stb	r4,32(sp)
   104a4:	01c00044 	movi	r7,1
   104a8:	d9800804 	addi	r6,sp,32
   104ac:	880b883a 	mov	r5,r17
   104b0:	9009883a 	mov	r4,r18
   104b4:	103ee83a 	callr	r2
   104b8:	10001c26 	beq	r2,zero,1052c <___vfprintf_internal_r+0x138>
   104bc:	043fffc4 	movi	r16,-1
   104c0:	8005883a 	mov	r2,r16
   104c4:	dfc01917 	ldw	ra,100(sp)
   104c8:	df001817 	ldw	fp,96(sp)
   104cc:	ddc01717 	ldw	r23,92(sp)
   104d0:	dd801617 	ldw	r22,88(sp)
   104d4:	dd401517 	ldw	r21,84(sp)
   104d8:	dd001417 	ldw	r20,80(sp)
   104dc:	dcc01317 	ldw	r19,76(sp)
   104e0:	dc801217 	ldw	r18,72(sp)
   104e4:	dc401117 	ldw	r17,68(sp)
   104e8:	dc001017 	ldw	r16,64(sp)
   104ec:	dec01a04 	addi	sp,sp,104
   104f0:	f800283a 	ret
   104f4:	18800c20 	cmpeqi	r2,r3,48
   104f8:	1000f71e 	bne	r2,zero,108d8 <___vfprintf_internal_r+0x4e4>
   104fc:	18800958 	cmpnei	r2,r3,37
   10500:	103fe626 	beq	r2,zero,1049c <___vfprintf_internal_r+0xa8>
   10504:	213ff404 	addi	r4,r4,-48
   10508:	21003fcc 	andi	r4,r4,255
   1050c:	208002a8 	cmpgeui	r2,r4,10
   10510:	10000a1e 	bne	r2,zero,1053c <___vfprintf_internal_r+0x148>
   10514:	98bfffe0 	cmpeqi	r2,r19,-1
   10518:	1000061e 	bne	r2,zero,10534 <___vfprintf_internal_r+0x140>
   1051c:	9cc002a4 	muli	r19,r19,10
   10520:	24e7883a 	add	r19,r4,r19
   10524:	00800084 	movi	r2,2
   10528:	003fcd06 	br	10460 <___vfprintf_internal_r+0x6c>
   1052c:	84000044 	addi	r16,r16,1
   10530:	003fcb06 	br	10460 <___vfprintf_internal_r+0x6c>
   10534:	0027883a 	mov	r19,zero
   10538:	003ff906 	br	10520 <___vfprintf_internal_r+0x12c>
   1053c:	18800ba0 	cmpeqi	r2,r3,46
   10540:	1000e91e 	bne	r2,zero,108e8 <___vfprintf_internal_r+0x4f4>
   10544:	18801b20 	cmpeqi	r2,r3,108
   10548:	1000e61e 	bne	r2,zero,108e4 <___vfprintf_internal_r+0x4f0>
   1054c:	a0bfffe0 	cmpeqi	r2,r20,-1
   10550:	10001a1e 	bne	r2,zero,105bc <___vfprintf_internal_r+0x1c8>
   10554:	d8000115 	stw	zero,4(sp)
   10558:	18801be0 	cmpeqi	r2,r3,111
   1055c:	1000b41e 	bne	r2,zero,10830 <___vfprintf_internal_r+0x43c>
   10560:	18801c08 	cmpgei	r2,r3,112
   10564:	1000561e 	bne	r2,zero,106c0 <___vfprintf_internal_r+0x2cc>
   10568:	188018e0 	cmpeqi	r2,r3,99
   1056c:	1000b71e 	bne	r2,zero,1084c <___vfprintf_internal_r+0x458>
   10570:	18801908 	cmpgei	r2,r3,100
   10574:	1000131e 	bne	r2,zero,105c4 <___vfprintf_internal_r+0x1d0>
   10578:	18c01620 	cmpeqi	r3,r3,88
   1057c:	183fb426 	beq	r3,zero,10450 <___vfprintf_internal_r+0x5c>
   10580:	b000701e 	bne	r22,zero,10744 <___vfprintf_internal_r+0x350>
   10584:	00800044 	movi	r2,1
   10588:	d8800215 	stw	r2,8(sp)
   1058c:	00006e06 	br	10748 <___vfprintf_internal_r+0x354>
   10590:	213ff404 	addi	r4,r4,-48
   10594:	21003fcc 	andi	r4,r4,255
   10598:	214002a8 	cmpgeui	r5,r4,10
   1059c:	283fe91e 	bne	r5,zero,10544 <___vfprintf_internal_r+0x150>
   105a0:	a0ffffe0 	cmpeqi	r3,r20,-1
   105a4:	1800031e 	bne	r3,zero,105b4 <___vfprintf_internal_r+0x1c0>
   105a8:	a50002a4 	muli	r20,r20,10
   105ac:	2529883a 	add	r20,r4,r20
   105b0:	003fab06 	br	10460 <___vfprintf_internal_r+0x6c>
   105b4:	0029883a 	mov	r20,zero
   105b8:	003ffc06 	br	105ac <___vfprintf_internal_r+0x1b8>
   105bc:	05000044 	movi	r20,1
   105c0:	003fe506 	br	10558 <___vfprintf_internal_r+0x164>
   105c4:	18801920 	cmpeqi	r2,r3,100
   105c8:	1000021e 	bne	r2,zero,105d4 <___vfprintf_internal_r+0x1e0>
   105cc:	18c01a60 	cmpeqi	r3,r3,105
   105d0:	183f9f26 	beq	r3,zero,10450 <___vfprintf_internal_r+0x5c>
   105d4:	b8800104 	addi	r2,r23,4
   105d8:	d8800415 	stw	r2,16(sp)
   105dc:	d8800017 	ldw	r2,0(sp)
   105e0:	10009426 	beq	r2,zero,10834 <___vfprintf_internal_r+0x440>
   105e4:	bdc00017 	ldw	r23,0(r23)
   105e8:	b800960e 	bge	r23,zero,10844 <___vfprintf_internal_r+0x450>
   105ec:	05efc83a 	sub	r23,zero,r23
   105f0:	02400044 	movi	r9,1
   105f4:	df000804 	addi	fp,sp,32
   105f8:	e00d883a 	mov	r6,fp
   105fc:	b800541e 	bne	r23,zero,10750 <___vfprintf_internal_r+0x35c>
   10600:	e185c83a 	sub	r2,fp,r6
   10604:	d8800315 	stw	r2,12(sp)
   10608:	a085c83a 	sub	r2,r20,r2
   1060c:	00800b0e 	bge	zero,r2,1063c <___vfprintf_internal_r+0x248>
   10610:	d8c01004 	addi	r3,sp,64
   10614:	e0c0072e 	bgeu	fp,r3,10634 <___vfprintf_internal_r+0x240>
   10618:	e085883a 	add	r2,fp,r2
   1061c:	01000c04 	movi	r4,48
   10620:	e7000044 	addi	fp,fp,1
   10624:	e13fffc5 	stb	r4,-1(fp)
   10628:	17000226 	beq	r2,fp,10634 <___vfprintf_internal_r+0x240>
   1062c:	d8c01004 	addi	r3,sp,64
   10630:	e0fffb36 	bltu	fp,r3,10620 <___vfprintf_internal_r+0x22c>
   10634:	e185c83a 	sub	r2,fp,r6
   10638:	d8800315 	stw	r2,12(sp)
   1063c:	d8800317 	ldw	r2,12(sp)
   10640:	4891883a 	add	r8,r9,r2
   10644:	d8800117 	ldw	r2,4(sp)
   10648:	9a2fc83a 	sub	r23,r19,r8
   1064c:	10005526 	beq	r2,zero,107a4 <___vfprintf_internal_r+0x3b0>
   10650:	48000a26 	beq	r9,zero,1067c <___vfprintf_internal_r+0x288>
   10654:	00800b44 	movi	r2,45
   10658:	d88007c5 	stb	r2,31(sp)
   1065c:	88800117 	ldw	r2,4(r17)
   10660:	01c00044 	movi	r7,1
   10664:	d98007c4 	addi	r6,sp,31
   10668:	880b883a 	mov	r5,r17
   1066c:	9009883a 	mov	r4,r18
   10670:	103ee83a 	callr	r2
   10674:	103f911e 	bne	r2,zero,104bc <___vfprintf_internal_r+0xc8>
   10678:	84000044 	addi	r16,r16,1
   1067c:	05c0070e 	bge	zero,r23,1069c <___vfprintf_internal_r+0x2a8>
   10680:	b80f883a 	mov	r7,r23
   10684:	01800c04 	movi	r6,48
   10688:	880b883a 	mov	r5,r17
   1068c:	9009883a 	mov	r4,r18
   10690:	00103880 	call	10388 <print_repeat>
   10694:	103f891e 	bne	r2,zero,104bc <___vfprintf_internal_r+0xc8>
   10698:	85e1883a 	add	r16,r16,r23
   1069c:	d8800317 	ldw	r2,12(sp)
   106a0:	e011883a 	mov	r8,fp
   106a4:	172fc83a 	sub	r23,r2,fp
   106a8:	ba05883a 	add	r2,r23,r8
   106ac:	00805316 	blt	zero,r2,107fc <___vfprintf_internal_r+0x408>
   106b0:	8707883a 	add	r3,r16,fp
   106b4:	ddc00417 	ldw	r23,16(sp)
   106b8:	1a21c83a 	sub	r16,r3,r8
   106bc:	003f6406 	br	10450 <___vfprintf_internal_r+0x5c>
   106c0:	18801d60 	cmpeqi	r2,r3,117
   106c4:	10005b1e 	bne	r2,zero,10834 <___vfprintf_internal_r+0x440>
   106c8:	18801e20 	cmpeqi	r2,r3,120
   106cc:	10001e1e 	bne	r2,zero,10748 <___vfprintf_internal_r+0x354>
   106d0:	18c01ce0 	cmpeqi	r3,r3,115
   106d4:	183f5e26 	beq	r3,zero,10450 <___vfprintf_internal_r+0x5c>
   106d8:	b8800104 	addi	r2,r23,4
   106dc:	d8800315 	stw	r2,12(sp)
   106e0:	b8800017 	ldw	r2,0(r23)
   106e4:	1009883a 	mov	r4,r2
   106e8:	1039883a 	mov	fp,r2
   106ec:	001036c0 	call	1036c <strlen>
   106f0:	988fc83a 	sub	r7,r19,r2
   106f4:	102f883a 	mov	r23,r2
   106f8:	01c0080e 	bge	zero,r7,1071c <___vfprintf_internal_r+0x328>
   106fc:	01800804 	movi	r6,32
   10700:	880b883a 	mov	r5,r17
   10704:	9009883a 	mov	r4,r18
   10708:	d9c00415 	stw	r7,16(sp)
   1070c:	00103880 	call	10388 <print_repeat>
   10710:	103f6a1e 	bne	r2,zero,104bc <___vfprintf_internal_r+0xc8>
   10714:	d9c00417 	ldw	r7,16(sp)
   10718:	81e1883a 	add	r16,r16,r7
   1071c:	88800117 	ldw	r2,4(r17)
   10720:	b80f883a 	mov	r7,r23
   10724:	e00d883a 	mov	r6,fp
   10728:	880b883a 	mov	r5,r17
   1072c:	9009883a 	mov	r4,r18
   10730:	103ee83a 	callr	r2
   10734:	103f611e 	bne	r2,zero,104bc <___vfprintf_internal_r+0xc8>
   10738:	85e1883a 	add	r16,r16,r23
   1073c:	ddc00317 	ldw	r23,12(sp)
   10740:	003f4706 	br	10460 <___vfprintf_internal_r+0x6c>
   10744:	dd800215 	stw	r22,8(sp)
   10748:	05400404 	movi	r21,16
   1074c:	00003906 	br	10834 <___vfprintf_internal_r+0x440>
   10750:	b809883a 	mov	r4,r23
   10754:	a80b883a 	mov	r5,r21
   10758:	da400315 	stw	r9,12(sp)
   1075c:	0010af40 	call	10af4 <__udivsi3>
   10760:	1549383a 	mul	r4,r2,r21
   10764:	da400317 	ldw	r9,12(sp)
   10768:	d9800804 	addi	r6,sp,32
   1076c:	b92fc83a 	sub	r23,r23,r4
   10770:	b9000288 	cmpgei	r4,r23,10
   10774:	2000051e 	bne	r4,zero,1078c <___vfprintf_internal_r+0x398>
   10778:	bdc00c04 	addi	r23,r23,48
   1077c:	e7000044 	addi	fp,fp,1
   10780:	e5ffffc5 	stb	r23,-1(fp)
   10784:	102f883a 	mov	r23,r2
   10788:	003f9c06 	br	105fc <___vfprintf_internal_r+0x208>
   1078c:	d8c00217 	ldw	r3,8(sp)
   10790:	18000226 	beq	r3,zero,1079c <___vfprintf_internal_r+0x3a8>
   10794:	bdc00dc4 	addi	r23,r23,55
   10798:	003ff806 	br	1077c <___vfprintf_internal_r+0x388>
   1079c:	bdc015c4 	addi	r23,r23,87
   107a0:	003ff606 	br	1077c <___vfprintf_internal_r+0x388>
   107a4:	05c0090e 	bge	zero,r23,107cc <___vfprintf_internal_r+0x3d8>
   107a8:	b80f883a 	mov	r7,r23
   107ac:	01800804 	movi	r6,32
   107b0:	880b883a 	mov	r5,r17
   107b4:	9009883a 	mov	r4,r18
   107b8:	da400615 	stw	r9,24(sp)
   107bc:	00103880 	call	10388 <print_repeat>
   107c0:	103f3e1e 	bne	r2,zero,104bc <___vfprintf_internal_r+0xc8>
   107c4:	da400617 	ldw	r9,24(sp)
   107c8:	85e1883a 	add	r16,r16,r23
   107cc:	483fb326 	beq	r9,zero,1069c <___vfprintf_internal_r+0x2a8>
   107d0:	00800b44 	movi	r2,45
   107d4:	d88007c5 	stb	r2,31(sp)
   107d8:	88800117 	ldw	r2,4(r17)
   107dc:	01c00044 	movi	r7,1
   107e0:	d98007c4 	addi	r6,sp,31
   107e4:	880b883a 	mov	r5,r17
   107e8:	9009883a 	mov	r4,r18
   107ec:	103ee83a 	callr	r2
   107f0:	103f321e 	bne	r2,zero,104bc <___vfprintf_internal_r+0xc8>
   107f4:	84000044 	addi	r16,r16,1
   107f8:	003fa806 	br	1069c <___vfprintf_internal_r+0x2a8>
   107fc:	40bfffc3 	ldbu	r2,-1(r8)
   10800:	01c00044 	movi	r7,1
   10804:	423fffc4 	addi	r8,r8,-1
   10808:	d88007c5 	stb	r2,31(sp)
   1080c:	88800117 	ldw	r2,4(r17)
   10810:	d98007c4 	addi	r6,sp,31
   10814:	880b883a 	mov	r5,r17
   10818:	9009883a 	mov	r4,r18
   1081c:	da000315 	stw	r8,12(sp)
   10820:	103ee83a 	callr	r2
   10824:	da000317 	ldw	r8,12(sp)
   10828:	103f9f26 	beq	r2,zero,106a8 <___vfprintf_internal_r+0x2b4>
   1082c:	003f2306 	br	104bc <___vfprintf_internal_r+0xc8>
   10830:	05400204 	movi	r21,8
   10834:	b8800104 	addi	r2,r23,4
   10838:	d8800415 	stw	r2,16(sp)
   1083c:	bdc00017 	ldw	r23,0(r23)
   10840:	d8000015 	stw	zero,0(sp)
   10844:	0013883a 	mov	r9,zero
   10848:	003f6a06 	br	105f4 <___vfprintf_internal_r+0x200>
   1084c:	98800090 	cmplti	r2,r19,2
   10850:	1000091e 	bne	r2,zero,10878 <___vfprintf_internal_r+0x484>
   10854:	99ffffc4 	addi	r7,r19,-1
   10858:	01800804 	movi	r6,32
   1085c:	880b883a 	mov	r5,r17
   10860:	9009883a 	mov	r4,r18
   10864:	d9c00315 	stw	r7,12(sp)
   10868:	00103880 	call	10388 <print_repeat>
   1086c:	103f131e 	bne	r2,zero,104bc <___vfprintf_internal_r+0xc8>
   10870:	d9c00317 	ldw	r7,12(sp)
   10874:	81e1883a 	add	r16,r16,r7
   10878:	b8800017 	ldw	r2,0(r23)
   1087c:	b8c00104 	addi	r3,r23,4
   10880:	01c00044 	movi	r7,1
   10884:	d8800805 	stb	r2,32(sp)
   10888:	88800117 	ldw	r2,4(r17)
   1088c:	d9800804 	addi	r6,sp,32
   10890:	880b883a 	mov	r5,r17
   10894:	9009883a 	mov	r4,r18
   10898:	d8c00315 	stw	r3,12(sp)
   1089c:	103ee83a 	callr	r2
   108a0:	103f061e 	bne	r2,zero,104bc <___vfprintf_internal_r+0xc8>
   108a4:	d8c00317 	ldw	r3,12(sp)
   108a8:	84000044 	addi	r16,r16,1
   108ac:	182f883a 	mov	r23,r3
   108b0:	003eeb06 	br	10460 <___vfprintf_internal_r+0x6c>
   108b4:	00800044 	movi	r2,1
   108b8:	d8000215 	stw	zero,8(sp)
   108bc:	002d883a 	mov	r22,zero
   108c0:	d8000115 	stw	zero,4(sp)
   108c4:	d8800015 	stw	r2,0(sp)
   108c8:	05400284 	movi	r21,10
   108cc:	053fffc4 	movi	r20,-1
   108d0:	04ffffc4 	movi	r19,-1
   108d4:	003ee206 	br	10460 <___vfprintf_internal_r+0x6c>
   108d8:	00800044 	movi	r2,1
   108dc:	d8800115 	stw	r2,4(sp)
   108e0:	003f1006 	br	10524 <___vfprintf_internal_r+0x130>
   108e4:	05800044 	movi	r22,1
   108e8:	008000c4 	movi	r2,3
   108ec:	003edc06 	br	10460 <___vfprintf_internal_r+0x6c>

000108f0 <__vfprintf_internal>:
   108f0:	00800074 	movhi	r2,1
   108f4:	300f883a 	mov	r7,r6
   108f8:	280d883a 	mov	r6,r5
   108fc:	200b883a 	mov	r5,r4
   10900:	11040e17 	ldw	r4,4152(r2)
   10904:	00103f41 	jmpi	103f4 <___vfprintf_internal_r>

00010908 <__sfvwrite_small_dev>:
   10908:	2880000b 	ldhu	r2,0(r5)
   1090c:	1080020c 	andi	r2,r2,8
   10910:	10002526 	beq	r2,zero,109a8 <__sfvwrite_small_dev+0xa0>
   10914:	2880008f 	ldh	r2,2(r5)
   10918:	defffb04 	addi	sp,sp,-20
   1091c:	dcc00315 	stw	r19,12(sp)
   10920:	dc800215 	stw	r18,8(sp)
   10924:	dc400115 	stw	r17,4(sp)
   10928:	dc000015 	stw	r16,0(sp)
   1092c:	dfc00415 	stw	ra,16(sp)
   10930:	2027883a 	mov	r19,r4
   10934:	2821883a 	mov	r16,r5
   10938:	3025883a 	mov	r18,r6
   1093c:	3823883a 	mov	r17,r7
   10940:	1000100e 	bge	r2,zero,10984 <__sfvwrite_small_dev+0x7c>
   10944:	8080000b 	ldhu	r2,0(r16)
   10948:	10801014 	ori	r2,r2,64
   1094c:	8080000d 	sth	r2,0(r16)
   10950:	00bfffc4 	movi	r2,-1
   10954:	00000d06 	br	1098c <__sfvwrite_small_dev+0x84>
   10958:	88810050 	cmplti	r2,r17,1025
   1095c:	880f883a 	mov	r7,r17
   10960:	1000011e 	bne	r2,zero,10968 <__sfvwrite_small_dev+0x60>
   10964:	01c10004 	movi	r7,1024
   10968:	8140008f 	ldh	r5,2(r16)
   1096c:	900d883a 	mov	r6,r18
   10970:	9809883a 	mov	r4,r19
   10974:	00109b00 	call	109b0 <_write_r>
   10978:	00bff20e 	bge	zero,r2,10944 <__sfvwrite_small_dev+0x3c>
   1097c:	88a3c83a 	sub	r17,r17,r2
   10980:	90a5883a 	add	r18,r18,r2
   10984:	047ff416 	blt	zero,r17,10958 <__sfvwrite_small_dev+0x50>
   10988:	0005883a 	mov	r2,zero
   1098c:	dfc00417 	ldw	ra,16(sp)
   10990:	dcc00317 	ldw	r19,12(sp)
   10994:	dc800217 	ldw	r18,8(sp)
   10998:	dc400117 	ldw	r17,4(sp)
   1099c:	dc000017 	ldw	r16,0(sp)
   109a0:	dec00504 	addi	sp,sp,20
   109a4:	f800283a 	ret
   109a8:	00bfffc4 	movi	r2,-1
   109ac:	f800283a 	ret

000109b0 <_write_r>:
   109b0:	defffe04 	addi	sp,sp,-8
   109b4:	dc000015 	stw	r16,0(sp)
   109b8:	00800074 	movhi	r2,1
   109bc:	2021883a 	mov	r16,r4
   109c0:	2809883a 	mov	r4,r5
   109c4:	300b883a 	mov	r5,r6
   109c8:	380d883a 	mov	r6,r7
   109cc:	dfc00115 	stw	ra,4(sp)
   109d0:	10045115 	stw	zero,4420(r2)
   109d4:	0010d580 	call	10d58 <write>
   109d8:	10ffffd8 	cmpnei	r3,r2,-1
   109dc:	1800041e 	bne	r3,zero,109f0 <_write_r+0x40>
   109e0:	00c00074 	movhi	r3,1
   109e4:	18c45117 	ldw	r3,4420(r3)
   109e8:	18000126 	beq	r3,zero,109f0 <_write_r+0x40>
   109ec:	80c00015 	stw	r3,0(r16)
   109f0:	dfc00117 	ldw	ra,4(sp)
   109f4:	dc000017 	ldw	r16,0(sp)
   109f8:	dec00204 	addi	sp,sp,8
   109fc:	f800283a 	ret

00010a00 <__divsi3>:
   10a00:	20001a16 	blt	r4,zero,10a6c <__divsi3+0x6c>
   10a04:	000f883a 	mov	r7,zero
   10a08:	2800020e 	bge	r5,zero,10a14 <__divsi3+0x14>
   10a0c:	014bc83a 	sub	r5,zero,r5
   10a10:	39c0005c 	xori	r7,r7,1
   10a14:	200d883a 	mov	r6,r4
   10a18:	00c00044 	movi	r3,1
   10a1c:	2900092e 	bgeu	r5,r4,10a44 <__divsi3+0x44>
   10a20:	00800804 	movi	r2,32
   10a24:	00c00044 	movi	r3,1
   10a28:	00000106 	br	10a30 <__divsi3+0x30>
   10a2c:	10001226 	beq	r2,zero,10a78 <__divsi3+0x78>
   10a30:	294b883a 	add	r5,r5,r5
   10a34:	10bfffc4 	addi	r2,r2,-1
   10a38:	18c7883a 	add	r3,r3,r3
   10a3c:	293ffb36 	bltu	r5,r4,10a2c <__divsi3+0x2c>
   10a40:	18000d26 	beq	r3,zero,10a78 <__divsi3+0x78>
   10a44:	0005883a 	mov	r2,zero
   10a48:	31400236 	bltu	r6,r5,10a54 <__divsi3+0x54>
   10a4c:	314dc83a 	sub	r6,r6,r5
   10a50:	10c4b03a 	or	r2,r2,r3
   10a54:	1806d07a 	srli	r3,r3,1
   10a58:	280ad07a 	srli	r5,r5,1
   10a5c:	183ffa1e 	bne	r3,zero,10a48 <__divsi3+0x48>
   10a60:	38000126 	beq	r7,zero,10a68 <__divsi3+0x68>
   10a64:	0085c83a 	sub	r2,zero,r2
   10a68:	f800283a 	ret
   10a6c:	0109c83a 	sub	r4,zero,r4
   10a70:	01c00044 	movi	r7,1
   10a74:	003fe406 	br	10a08 <__divsi3+0x8>
   10a78:	0005883a 	mov	r2,zero
   10a7c:	003ff806 	br	10a60 <__divsi3+0x60>

00010a80 <__modsi3>:
   10a80:	20001716 	blt	r4,zero,10ae0 <__modsi3+0x60>
   10a84:	000f883a 	mov	r7,zero
   10a88:	2005883a 	mov	r2,r4
   10a8c:	2800010e 	bge	r5,zero,10a94 <__modsi3+0x14>
   10a90:	014bc83a 	sub	r5,zero,r5
   10a94:	00c00044 	movi	r3,1
   10a98:	2900092e 	bgeu	r5,r4,10ac0 <__modsi3+0x40>
   10a9c:	01800804 	movi	r6,32
   10aa0:	00c00044 	movi	r3,1
   10aa4:	00000106 	br	10aac <__modsi3+0x2c>
   10aa8:	30001026 	beq	r6,zero,10aec <__modsi3+0x6c>
   10aac:	294b883a 	add	r5,r5,r5
   10ab0:	31bfffc4 	addi	r6,r6,-1
   10ab4:	18c7883a 	add	r3,r3,r3
   10ab8:	293ffb36 	bltu	r5,r4,10aa8 <__modsi3+0x28>
   10abc:	18000b26 	beq	r3,zero,10aec <__modsi3+0x6c>
   10ac0:	1806d07a 	srli	r3,r3,1
   10ac4:	11400136 	bltu	r2,r5,10acc <__modsi3+0x4c>
   10ac8:	1145c83a 	sub	r2,r2,r5
   10acc:	280ad07a 	srli	r5,r5,1
   10ad0:	183ffb1e 	bne	r3,zero,10ac0 <__modsi3+0x40>
   10ad4:	38000126 	beq	r7,zero,10adc <__modsi3+0x5c>
   10ad8:	0085c83a 	sub	r2,zero,r2
   10adc:	f800283a 	ret
   10ae0:	0109c83a 	sub	r4,zero,r4
   10ae4:	01c00044 	movi	r7,1
   10ae8:	003fe706 	br	10a88 <__modsi3+0x8>
   10aec:	2005883a 	mov	r2,r4
   10af0:	003ff806 	br	10ad4 <__modsi3+0x54>

00010af4 <__udivsi3>:
   10af4:	200d883a 	mov	r6,r4
   10af8:	2900152e 	bgeu	r5,r4,10b50 <__udivsi3+0x5c>
   10afc:	28001416 	blt	r5,zero,10b50 <__udivsi3+0x5c>
   10b00:	00800804 	movi	r2,32
   10b04:	00c00044 	movi	r3,1
   10b08:	00000206 	br	10b14 <__udivsi3+0x20>
   10b0c:	10000e26 	beq	r2,zero,10b48 <__udivsi3+0x54>
   10b10:	28000416 	blt	r5,zero,10b24 <__udivsi3+0x30>
   10b14:	294b883a 	add	r5,r5,r5
   10b18:	10bfffc4 	addi	r2,r2,-1
   10b1c:	18c7883a 	add	r3,r3,r3
   10b20:	293ffa36 	bltu	r5,r4,10b0c <__udivsi3+0x18>
   10b24:	18000826 	beq	r3,zero,10b48 <__udivsi3+0x54>
   10b28:	0005883a 	mov	r2,zero
   10b2c:	31400236 	bltu	r6,r5,10b38 <__udivsi3+0x44>
   10b30:	314dc83a 	sub	r6,r6,r5
   10b34:	10c4b03a 	or	r2,r2,r3
   10b38:	1806d07a 	srli	r3,r3,1
   10b3c:	280ad07a 	srli	r5,r5,1
   10b40:	183ffa1e 	bne	r3,zero,10b2c <__udivsi3+0x38>
   10b44:	f800283a 	ret
   10b48:	0005883a 	mov	r2,zero
   10b4c:	f800283a 	ret
   10b50:	00c00044 	movi	r3,1
   10b54:	003ff406 	br	10b28 <__udivsi3+0x34>

00010b58 <__umodsi3>:
   10b58:	2005883a 	mov	r2,r4
   10b5c:	2900132e 	bgeu	r5,r4,10bac <__umodsi3+0x54>
   10b60:	28001216 	blt	r5,zero,10bac <__umodsi3+0x54>
   10b64:	01800804 	movi	r6,32
   10b68:	00c00044 	movi	r3,1
   10b6c:	00000206 	br	10b78 <__umodsi3+0x20>
   10b70:	30000c26 	beq	r6,zero,10ba4 <__umodsi3+0x4c>
   10b74:	28000416 	blt	r5,zero,10b88 <__umodsi3+0x30>
   10b78:	294b883a 	add	r5,r5,r5
   10b7c:	31bfffc4 	addi	r6,r6,-1
   10b80:	18c7883a 	add	r3,r3,r3
   10b84:	293ffa36 	bltu	r5,r4,10b70 <__umodsi3+0x18>
   10b88:	18000626 	beq	r3,zero,10ba4 <__umodsi3+0x4c>
   10b8c:	1806d07a 	srli	r3,r3,1
   10b90:	11400136 	bltu	r2,r5,10b98 <__umodsi3+0x40>
   10b94:	1145c83a 	sub	r2,r2,r5
   10b98:	280ad07a 	srli	r5,r5,1
   10b9c:	183ffb1e 	bne	r3,zero,10b8c <__umodsi3+0x34>
   10ba0:	f800283a 	ret
   10ba4:	2005883a 	mov	r2,r4
   10ba8:	f800283a 	ret
   10bac:	00c00044 	movi	r3,1
   10bb0:	003ff606 	br	10b8c <__umodsi3+0x34>

00010bb4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10bb4:	0010c401 	jmpi	10c40 <alt_iic_isr_register>

00010bb8 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
   10bb8:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10bbc:	00bfff84 	movi	r2,-2
   10bc0:	1884703a 	and	r2,r3,r2
   10bc4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10bc8:	00800044 	movi	r2,1
   10bcc:	d1204517 	ldw	r4,-32492(gp)
   10bd0:	114a983a 	sll	r5,r2,r5
   10bd4:	290ab03a 	or	r5,r5,r4
   10bd8:	d1604515 	stw	r5,-32492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10bdc:	d0a04517 	ldw	r2,-32492(gp)
   10be0:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
   10be4:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   10be8:	0005883a 	mov	r2,zero
   10bec:	f800283a 	ret

00010bf0 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
   10bf0:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10bf4:	00bfff84 	movi	r2,-2
   10bf8:	1884703a 	and	r2,r3,r2
   10bfc:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
   10c00:	00bfff84 	movi	r2,-2
   10c04:	d1204517 	ldw	r4,-32492(gp)
   10c08:	114a183a 	rol	r5,r2,r5
   10c0c:	290a703a 	and	r5,r5,r4
   10c10:	d1604515 	stw	r5,-32492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10c14:	d0a04517 	ldw	r2,-32492(gp)
   10c18:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
   10c1c:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   10c20:	0005883a 	mov	r2,zero
   10c24:	f800283a 	ret

00010c28 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10c28:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10c2c:	00800044 	movi	r2,1
   10c30:	1144983a 	sll	r2,r2,r5
   10c34:	10c4703a 	and	r2,r2,r3
}
   10c38:	1004c03a 	cmpne	r2,r2,zero
   10c3c:	f800283a 	ret

00010c40 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10c40:	28800808 	cmpgei	r2,r5,32
   10c44:	1000161e 	bne	r2,zero,10ca0 <alt_iic_isr_register+0x60>
{
   10c48:	defffe04 	addi	sp,sp,-8
   10c4c:	dfc00115 	stw	ra,4(sp)
   10c50:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
   10c54:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c58:	00bfff84 	movi	r2,-2
   10c5c:	8084703a 	and	r2,r16,r2
   10c60:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   10c64:	280690fa 	slli	r3,r5,3
   10c68:	00800074 	movhi	r2,1
   10c6c:	10845704 	addi	r2,r2,4444
   10c70:	10c5883a 	add	r2,r2,r3
   10c74:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   10c78:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10c7c:	30000626 	beq	r6,zero,10c98 <alt_iic_isr_register+0x58>
   10c80:	0010bb80 	call	10bb8 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
   10c84:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   10c88:	dfc00117 	ldw	ra,4(sp)
   10c8c:	dc000017 	ldw	r16,0(sp)
   10c90:	dec00204 	addi	sp,sp,8
   10c94:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10c98:	0010bf00 	call	10bf0 <alt_ic_irq_disable>
   10c9c:	003ff906 	br	10c84 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
   10ca0:	00bffa84 	movi	r2,-22
}
   10ca4:	f800283a 	ret

00010ca8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10ca8:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10cac:	01000074 	movhi	r4,1
   10cb0:	01400074 	movhi	r5,1
   10cb4:	dfc00015 	stw	ra,0(sp)
   10cb8:	2103d404 	addi	r4,r4,3920
   10cbc:	29441204 	addi	r5,r5,4168
   10cc0:	21400426 	beq	r4,r5,10cd4 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
   10cc4:	01800074 	movhi	r6,1
   10cc8:	31841204 	addi	r6,r6,4168
   10ccc:	310dc83a 	sub	r6,r6,r4
   10cd0:	0010eb40 	call	10eb4 <memcpy>
  if (to != from)
   10cd4:	01000074 	movhi	r4,1
   10cd8:	01400074 	movhi	r5,1
   10cdc:	21000804 	addi	r4,r4,32
   10ce0:	29400804 	addi	r5,r5,32
   10ce4:	21400426 	beq	r4,r5,10cf8 <alt_load+0x50>
      *to++ = *from++;
   10ce8:	01800074 	movhi	r6,1
   10cec:	31806204 	addi	r6,r6,392
   10cf0:	310dc83a 	sub	r6,r6,r4
   10cf4:	0010eb40 	call	10eb4 <memcpy>
  if (to != from)
   10cf8:	01000074 	movhi	r4,1
   10cfc:	01400074 	movhi	r5,1
   10d00:	2103b704 	addi	r4,r4,3804
   10d04:	2943b704 	addi	r5,r5,3804
   10d08:	21400426 	beq	r4,r5,10d1c <alt_load+0x74>
      *to++ = *from++;
   10d0c:	01800074 	movhi	r6,1
   10d10:	3183d404 	addi	r6,r6,3920
   10d14:	310dc83a 	sub	r6,r6,r4
   10d18:	0010eb40 	call	10eb4 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10d1c:	0010e080 	call	10e08 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10d20:	dfc00017 	ldw	ra,0(sp)
   10d24:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   10d28:	0010e201 	jmpi	10e20 <alt_icache_flush_all>

00010d2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10d2c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10d30:	0009883a 	mov	r4,zero
{
   10d34:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   10d38:	0010db40 	call	10db4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10d3c:	0010dd40 	call	10dd4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10d40:	d1a04617 	ldw	r6,-32488(gp)
   10d44:	d1604717 	ldw	r5,-32484(gp)
   10d48:	d1204817 	ldw	r4,-32480(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10d4c:	dfc00017 	ldw	ra,0(sp)
   10d50:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   10d54:	00102301 	jmpi	10230 <main>

00010d58 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10d58:	213fffc4 	addi	r4,r4,-1
   10d5c:	210000a8 	cmpgeui	r4,r4,2
   10d60:	2000041e 	bne	r4,zero,10d74 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   10d64:	01000074 	movhi	r4,1
   10d68:	000f883a 	mov	r7,zero
   10d6c:	21041004 	addi	r4,r4,4160
   10d70:	0010dd81 	jmpi	10dd8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10d74:	d0a00417 	ldw	r2,-32752(gp)
   10d78:	10000926 	beq	r2,zero,10da0 <write+0x48>
{
   10d7c:	deffff04 	addi	sp,sp,-4
   10d80:	dfc00015 	stw	ra,0(sp)
   10d84:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10d88:	00c01444 	movi	r3,81
   10d8c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10d90:	00bfffc4 	movi	r2,-1
   10d94:	dfc00017 	ldw	ra,0(sp)
   10d98:	dec00104 	addi	sp,sp,4
   10d9c:	f800283a 	ret
   10da0:	d0a04404 	addi	r2,gp,-32496
        ALT_ERRNO = EBADFD;
   10da4:	00c01444 	movi	r3,81
   10da8:	10c00015 	stw	r3,0(r2)
}
   10dac:	00bfffc4 	movi	r2,-1
   10db0:	f800283a 	ret

00010db4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10db4:	deffff04 	addi	sp,sp,-4
   10db8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSINTR, NiosIntr);
   10dbc:	0010e500 	call	10e50 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10dc0:	00800044 	movi	r2,1
   10dc4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10dc8:	dfc00017 	ldw	ra,0(sp)
   10dcc:	dec00104 	addi	sp,sp,4
   10dd0:	f800283a 	ret

00010dd4 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
    ALTERA_AVALON_JTAG_UART_INIT ( DEBUG, DEBUG);
}
   10dd4:	f800283a 	ret

00010dd8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10dd8:	20c00017 	ldw	r3,0(r4)
{
   10ddc:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   10de0:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10de4:	01bfffd4 	movui	r6,65535
  while (ptr < end)
   10de8:	29000136 	bltu	r5,r4,10df0 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   10dec:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10df0:	19c00137 	ldwio	r7,4(r3)
   10df4:	31fffc2e 	bgeu	r6,r7,10de8 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10df8:	29c00007 	ldb	r7,0(r5)
   10dfc:	29400044 	addi	r5,r5,1
   10e00:	19c00035 	stwio	r7,0(r3)
   10e04:	003ff806 	br	10de8 <altera_avalon_jtag_uart_write+0x10>

00010e08 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10e08:	0005883a 	mov	r2,zero
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10e0c:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10e10:	10800804 	addi	r2,r2,32
   10e14:	10c20018 	cmpnei	r3,r2,2048
   10e18:	183ffc1e 	bne	r3,zero,10e0c <alt_dcache_flush_all+0x4>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10e1c:	f800283a 	ret

00010e20 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10e20:	01440004 	movi	r5,4096
   10e24:	0009883a 	mov	r4,zero
   10e28:	0010e581 	jmpi	10e58 <alt_icache_flush>

00010e2c <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   10e2c:	213ffe84 	addi	r4,r4,-6
   10e30:	20800428 	cmpgeui	r2,r4,16
   10e34:	1000041e 	bne	r2,zero,10e48 <alt_exception_cause_generated_bad_addr+0x1c>
   10e38:	00a2c8d4 	movui	r2,35619
   10e3c:	1104d83a 	srl	r2,r2,r4
   10e40:	1080004c 	andi	r2,r2,1
   10e44:	f800283a 	ret
   10e48:	0005883a 	mov	r2,zero
    return 0;

  default:
    return 0;
  }
}
   10e4c:	f800283a 	ret

00010e50 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10e50:	000170fa 	wrctl	ienable,zero
}
   10e54:	f800283a 	ret

00010e58 <alt_icache_flush>:

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10e58:	28840070 	cmpltui	r2,r5,4097
   10e5c:	1000011e 	bne	r2,zero,10e64 <alt_icache_flush+0xc>
   10e60:	01440004 	movi	r5,4096
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   10e64:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10e68:	2005883a 	mov	r2,r4
   10e6c:	11400c36 	bltu	r2,r5,10ea0 <alt_icache_flush+0x48>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10e70:	208007cc 	andi	r2,r4,31
   10e74:	10000826 	beq	r2,zero,10e98 <alt_icache_flush+0x40>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10e78:	20bff844 	addi	r2,r4,-31
   10e7c:	28800b36 	bltu	r5,r2,10eac <alt_icache_flush+0x54>
   10e80:	290bc83a 	sub	r5,r5,r4
   10e84:	294007c4 	addi	r5,r5,31
   10e88:	280ad17a 	srli	r5,r5,5
   10e8c:	280a917a 	slli	r5,r5,5
   10e90:	2149883a 	add	r4,r4,r5
   10e94:	2000603a 	flushi	r4
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10e98:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10e9c:	f800283a 	ret
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10ea0:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10ea4:	10800804 	addi	r2,r2,32
   10ea8:	003ff006 	br	10e6c <alt_icache_flush+0x14>
    __asm__ volatile ("flushi %0" :: "r" (i));
   10eac:	000b883a 	mov	r5,zero
   10eb0:	003ff706 	br	10e90 <alt_icache_flush+0x38>

00010eb4 <memcpy>:
   10eb4:	2005883a 	mov	r2,r4
   10eb8:	0007883a 	mov	r3,zero
   10ebc:	30c0011e 	bne	r6,r3,10ec4 <memcpy+0x10>
   10ec0:	f800283a 	ret
   10ec4:	28cf883a 	add	r7,r5,r3
   10ec8:	39c00003 	ldbu	r7,0(r7)
   10ecc:	10c9883a 	add	r4,r2,r3
   10ed0:	18c00044 	addi	r3,r3,1
   10ed4:	21c00005 	stb	r7,0(r4)
   10ed8:	003ff806 	br	10ebc <memcpy+0x8>
