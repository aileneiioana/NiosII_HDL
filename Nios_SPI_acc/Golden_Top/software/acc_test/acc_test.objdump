
acc_test.elf:     file format elf32-littlenios2
acc_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001c38 memsz 0x00001c38 flags r-x
    LOAD off    0x00002c58 vaddr 0x00011c58 paddr 0x00011de4 align 2**12
         filesz 0x0000018c memsz 0x0000018c flags rw-
    LOAD off    0x00000f70 vaddr 0x00011f70 paddr 0x00011f70 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00002de4  2**0
                  CONTENTS
  2 .text         00001210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a28  00011230  00011230  00002230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000018c  00011c58  00011de4  00002c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00011f70  00011f70  00002f70  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00011f80  00011f80  00002de4  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00002de4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000350  00000000  00000000  00002e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00005826  00000000  00000000  00003168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001d12  00000000  00000000  0000898e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00001b36  00000000  00000000  0000a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000600  00000000  00000000  0000c1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00000f8a  00000000  00000000  0000c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  0000d764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  0000d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00001531  00000000  00000000  0000d798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001f4  00000000  00000000  0000ecc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000d45  00000000  00000000  0000eebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  0001111d  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  00011120  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00011123  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00011124  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00011125  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0001112e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00011137  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  00011140  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000036  00000000  00000000  00011152  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003e1f6  00000000  00000000  00011188  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00011230 l    d  .rodata	00000000 .rodata
00011c58 l    d  .rwdata	00000000 .rwdata
00011f70 l    d  .bss	00000000 .bss
00011f80 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010790 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00011c58 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011d3c l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011114 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00010ec8 g     F .text	0000002c alt_main
00011de4 g       *ABS*	00000000 __flash_rwdata_start
00010150 g     F .text	00000020 userA
00010748 g     F .text	00000048 printf
00011dc8 g     O .rwdata	00000004 jtag_uart
000111f8 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011008 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011f70 g     O .bss	00000004 errno
00011f78 g     O .bss	00000004 alt_argv
00019dc0 g       *ABS*	00000000 _gp
00011d68 g     O .rwdata	00000030 alt_fd_list
00011184 g     F .text	00000070 alt_find_dev
000106e4 g     F .text	00000028 memcpy
0001070c g     F .text	0000003c _printf_r
000105fc g     F .text	00000064 .hidden __udivsi3
00010178 g     F .text	00000030 insertA
00011dcc g     O .rwdata	00000004 alt_max_fd
00011dc0 g     O .rwdata	00000004 _global_impure_ptr
00011f80 g       *ABS*	00000000 __bss_end
00011d98 g     O .rwdata	00000028 alt_dev_null
00011110 g     F .text	00000004 alt_dcache_flush_all
00011de4 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00011dd0 g     O .rwdata	00000008 alt_dev_list
00010ef4 g     F .text	0000005c write
00011c58 g       *ABS*	00000000 __ram_rodata_end
000102b0 g     F .text	00000098 firAccelerometer
00010660 g     F .text	0000005c .hidden __umodsi3
00011f80 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
000101a8 g     F .text	00000060 insertAccelerometer
00010f80 g     F .text	00000030 altera_avalon_jtag_uart_write
000107fc g     F .text	0000051c ___vfprintf_internal_r
00010020 g     F .text	0000003c _start
00010f70 g     F .text	00000010 alt_sys_init
00010fb8 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00010348 g     F .text	00000040 filter
00010208 g     F .text	000000a8 userAccelerationGravitationalDirection
000106bc g     F .text	00000028 .hidden __mulsi3
00011c58 g       *ABS*	00000000 __ram_rwdata_start
00011230 g       *ABS*	00000000 __ram_rodata_start
00010170 g     F .text	00000008 gravitationalA
00011060 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00011200 g     F .text	00000030 memcmp
00011f80 g       *ABS*	00000000 __alt_stack_base
0001111c g     F .text	00000068 alt_dev_llist_insert
00010d30 g     F .text	000000a8 __sfvwrite_small_dev
00011f70 g       *ABS*	00000000 __bss_start
000103b0 g     F .text	00000158 main
00011f74 g     O .bss	00000004 alt_envp
00011de0 g     O .rwdata	00000004 alt_errno
00010388 g     F .text	00000028 run_filter
00010508 g     F .text	00000080 .hidden __divsi3
00011230 g       *ABS*	00000000 __flash_rodata_start
00010f50 g     F .text	00000020 alt_irq_init
00010df4 g     F .text	00000050 _write_r
00011dc4 g     O .rwdata	00000004 _impure_ptr
00011f7c g     O .bss	00000004 alt_argc
00011dd8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010fb0 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00011de4 g       *ABS*	00000000 _edata
00011f80 g       *ABS*	00000000 _end
0001008c g     F .text	00000094 filterProduct
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010588 g     F .text	00000074 .hidden __modsi3
000110b8 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
0001005c g     F .text	00000030 insert
0001000c g       .entry	00000000 _exit
00010fcc g     F .text	00000020 alt_up_accelerometer_spi_read
00010fec g     F .text	0000001c alt_up_accelerometer_spi_write
00010dd8 g     F .text	0000001c strlen
000111f4 g     F .text	00000004 alt_icache_flush_all
00010d18 g     F .text	00000018 __vfprintf_internal
00010e44 g     F .text	00000084 alt_load
00010120 g     F .text	00000030 fir



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a77014 	ori	gp,gp,40384
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1087dc14 	ori	r2,r2,8048

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c7e014 	ori	r3,r3,8064

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0010e440 	call	10e44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0010ec80 	call	10ec8 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <insert>:
struct ListConstants{
    long int data[243];
};

void insert(struct ListAxis* list, long int data){
    list->cursor--;
   1005c:	2080f317 	ldw	r2,972(r4)
   10060:	10bfffc4 	addi	r2,r2,-1
   10064:	2080f315 	stw	r2,972(r4)
    if(list->cursor < 0){
   10068:	1000030e 	bge	r2,zero,10078 <insert+0x1c>
        list->cursor += list->length;
   1006c:	20c0f417 	ldw	r3,976(r4)
   10070:	1885883a 	add	r2,r3,r2
   10074:	2080f315 	stw	r2,972(r4)
    }
    list->data[list->cursor] = data;
   10078:	2080f317 	ldw	r2,972(r4)
   1007c:	100490ba 	slli	r2,r2,2
   10080:	2089883a 	add	r4,r4,r2
   10084:	21400015 	stw	r5,0(r4)
}
   10088:	f800283a 	ret

0001008c <filterProduct>:

long int filterProduct(struct ListAxis* a, struct ListConstants* alpha){
   1008c:	defffa04 	addi	sp,sp,-24
   10090:	dd000415 	stw	r20,16(sp)
    long int total = 0;
    int cursor;
    long int data;
    for(int i = 0; i < a->length; i++){
   10094:	2500f417 	ldw	r20,976(r4)
long int filterProduct(struct ListAxis* a, struct ListConstants* alpha){
   10098:	dcc00315 	stw	r19,12(sp)
   1009c:	dc800215 	stw	r18,8(sp)
   100a0:	dc400115 	stw	r17,4(sp)
   100a4:	dc000015 	stw	r16,0(sp)
   100a8:	dfc00515 	stw	ra,20(sp)
   100ac:	2023883a 	mov	r17,r4
   100b0:	2827883a 	mov	r19,r5
    for(int i = 0; i < a->length; i++){
   100b4:	0021883a 	mov	r16,zero
    long int total = 0;
   100b8:	0025883a 	mov	r18,zero
    for(int i = 0; i < a->length; i++){
   100bc:	85000916 	blt	r16,r20,100e4 <filterProduct+0x58>
        data = ((a->data[cursor])*(alpha->data[i]));
        data >>= 20;
        total += data;
    }
    return total;
}
   100c0:	9005883a 	mov	r2,r18
   100c4:	dfc00517 	ldw	ra,20(sp)
   100c8:	dd000417 	ldw	r20,16(sp)
   100cc:	dcc00317 	ldw	r19,12(sp)
   100d0:	dc800217 	ldw	r18,8(sp)
   100d4:	dc400117 	ldw	r17,4(sp)
   100d8:	dc000017 	ldw	r16,0(sp)
   100dc:	dec00604 	addi	sp,sp,24
   100e0:	f800283a 	ret
        cursor = (i + a->cursor) % a->length;
   100e4:	8900f317 	ldw	r4,972(r17)
   100e8:	a00b883a 	mov	r5,r20
   100ec:	8109883a 	add	r4,r16,r4
   100f0:	00105880 	call	10588 <__modsi3>
        data = ((a->data[cursor])*(alpha->data[i]));
   100f4:	800690ba 	slli	r3,r16,2
   100f8:	100490ba 	slli	r2,r2,2
    for(int i = 0; i < a->length; i++){
   100fc:	84000044 	addi	r16,r16,1
        data = ((a->data[cursor])*(alpha->data[i]));
   10100:	98c7883a 	add	r3,r19,r3
   10104:	8885883a 	add	r2,r17,r2
   10108:	19400017 	ldw	r5,0(r3)
   1010c:	11000017 	ldw	r4,0(r2)
   10110:	00106bc0 	call	106bc <__mulsi3>
        data >>= 20;
   10114:	1005d53a 	srai	r2,r2,20
        total += data;
   10118:	90a5883a 	add	r18,r18,r2
    for(int i = 0; i < a->length; i++){
   1011c:	003fe706 	br	100bc <filterProduct+0x30>

00010120 <fir>:
    struct ListAxis* a;
    struct ListConstants* alpha;
    long int firA;
};

void fir(struct Acceleration* acceleration){
   10120:	defffe04 	addi	sp,sp,-8
   10124:	dc000015 	stw	r16,0(sp)
    acceleration->firA = filterProduct(acceleration->a,acceleration->alpha);
   10128:	21400117 	ldw	r5,4(r4)
void fir(struct Acceleration* acceleration){
   1012c:	2021883a 	mov	r16,r4
    acceleration->firA = filterProduct(acceleration->a,acceleration->alpha);
   10130:	21000017 	ldw	r4,0(r4)
void fir(struct Acceleration* acceleration){
   10134:	dfc00115 	stw	ra,4(sp)
    acceleration->firA = filterProduct(acceleration->a,acceleration->alpha);
   10138:	001008c0 	call	1008c <filterProduct>
   1013c:	80800215 	stw	r2,8(r16)
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret

00010150 <userA>:

long int userA(struct Acceleration* acceleration){
    return (acceleration->a->data[acceleration->a->cursor] - acceleration->firA);
   10150:	20800017 	ldw	r2,0(r4)
   10154:	10c0f317 	ldw	r3,972(r2)
   10158:	180690ba 	slli	r3,r3,2
   1015c:	10c5883a 	add	r2,r2,r3
   10160:	10c00017 	ldw	r3,0(r2)
   10164:	20800217 	ldw	r2,8(r4)
}
   10168:	1885c83a 	sub	r2,r3,r2
   1016c:	f800283a 	ret

00010170 <gravitationalA>:

long int gravitationalA(struct Acceleration* acceleration){
    return (acceleration->firA);
}
   10170:	20800217 	ldw	r2,8(r4)
   10174:	f800283a 	ret

00010178 <insertA>:
    struct ListAccelerometer* a;
    struct ListConstantsAccelerometer* alpha;
};

void insertA(struct ListAccelerometer* list, long int data){
    list->cursor--;
   10178:	20818c17 	ldw	r2,1584(r4)
   1017c:	10bfffc4 	addi	r2,r2,-1
   10180:	20818c15 	stw	r2,1584(r4)
    if(list->cursor < 0){
   10184:	1000030e 	bge	r2,zero,10194 <insertA+0x1c>
        list->cursor += list->length;
   10188:	20c18d17 	ldw	r3,1588(r4)
   1018c:	1885883a 	add	r2,r3,r2
   10190:	20818c15 	stw	r2,1584(r4)
    }
    list->data[list->cursor] = data;
   10194:	20818c17 	ldw	r2,1584(r4)
   10198:	100490ba 	slli	r2,r2,2
   1019c:	2089883a 	add	r4,r4,r2
   101a0:	21400015 	stw	r5,0(r4)
}
   101a4:	f800283a 	ret

000101a8 <insertAccelerometer>:

void insertAccelerometer(struct Accelerometer* accelerometer, long int x, long int y, long int z){
    insert(accelerometer->x->a,x);
   101a8:	20800017 	ldw	r2,0(r4)
void insertAccelerometer(struct Accelerometer* accelerometer, long int x, long int y, long int z){
   101ac:	defffc04 	addi	sp,sp,-16
   101b0:	dc000015 	stw	r16,0(sp)
   101b4:	2021883a 	mov	r16,r4
    insert(accelerometer->x->a,x);
   101b8:	11000017 	ldw	r4,0(r2)
void insertAccelerometer(struct Accelerometer* accelerometer, long int x, long int y, long int z){
   101bc:	dfc00315 	stw	ra,12(sp)
   101c0:	dc800215 	stw	r18,8(sp)
   101c4:	dc400115 	stw	r17,4(sp)
   101c8:	3025883a 	mov	r18,r6
   101cc:	3823883a 	mov	r17,r7
    insert(accelerometer->x->a,x);
   101d0:	001005c0 	call	1005c <insert>
    insert(accelerometer->y->a,y);
   101d4:	80800117 	ldw	r2,4(r16)
   101d8:	900b883a 	mov	r5,r18
   101dc:	11000017 	ldw	r4,0(r2)
   101e0:	001005c0 	call	1005c <insert>
    insert(accelerometer->z->a,z);
   101e4:	80800217 	ldw	r2,8(r16)
   101e8:	880b883a 	mov	r5,r17
   101ec:	11000017 	ldw	r4,0(r2)
}
   101f0:	dfc00317 	ldw	ra,12(sp)
   101f4:	dc800217 	ldw	r18,8(sp)
   101f8:	dc400117 	ldw	r17,4(sp)
   101fc:	dc000017 	ldw	r16,0(sp)
   10200:	dec00404 	addi	sp,sp,16
    insert(accelerometer->z->a,z);
   10204:	001005c1 	jmpi	1005c <insert>

00010208 <userAccelerationGravitationalDirection>:

long int userAccelerationGravitationalDirection(struct Accelerometer* accelerometer){
   10208:	defffb04 	addi	sp,sp,-20
   1020c:	dcc00315 	stw	r19,12(sp)
    fir(accelerometer->x);
   10210:	24c00017 	ldw	r19,0(r4)
long int userAccelerationGravitationalDirection(struct Accelerometer* accelerometer){
   10214:	dc000015 	stw	r16,0(sp)
   10218:	2021883a 	mov	r16,r4
    fir(accelerometer->x);
   1021c:	9809883a 	mov	r4,r19
long int userAccelerationGravitationalDirection(struct Accelerometer* accelerometer){
   10220:	dfc00415 	stw	ra,16(sp)
   10224:	dc800215 	stw	r18,8(sp)
   10228:	dc400115 	stw	r17,4(sp)
    fir(accelerometer->x);
   1022c:	00101200 	call	10120 <fir>
    fir(accelerometer->y);
   10230:	84400117 	ldw	r17,4(r16)
   10234:	8809883a 	mov	r4,r17
   10238:	00101200 	call	10120 <fir>
    fir(accelerometer->z);
   1023c:	84800217 	ldw	r18,8(r16)
   10240:	9009883a 	mov	r4,r18
   10244:	00101200 	call	10120 <fir>
    long int x_sum = userA(accelerometer->x) * gravitationalA(accelerometer->x);
   10248:	9809883a 	mov	r4,r19
   1024c:	00101500 	call	10150 <userA>
   10250:	99400217 	ldw	r5,8(r19)
   10254:	1009883a 	mov	r4,r2
   10258:	00106bc0 	call	106bc <__mulsi3>
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
   1025c:	8809883a 	mov	r4,r17
    long int x_sum = userA(accelerometer->x) * gravitationalA(accelerometer->x);
   10260:	1021883a 	mov	r16,r2
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
   10264:	00101500 	call	10150 <userA>
   10268:	89400217 	ldw	r5,8(r17)
   1026c:	1009883a 	mov	r4,r2
   10270:	00106bc0 	call	106bc <__mulsi3>
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
   10274:	9009883a 	mov	r4,r18
    long int y_sum = userA(accelerometer->y) * gravitationalA(accelerometer->y);
   10278:	1023883a 	mov	r17,r2
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
   1027c:	00101500 	call	10150 <userA>
   10280:	91400217 	ldw	r5,8(r18)
   10284:	1009883a 	mov	r4,r2
    return (x_sum + y_sum + z_sum);
   10288:	8461883a 	add	r16,r16,r17
    long int z_sum = userA(accelerometer->z) * gravitationalA(accelerometer->z);
   1028c:	00106bc0 	call	106bc <__mulsi3>
}
   10290:	1405883a 	add	r2,r2,r16
   10294:	dfc00417 	ldw	ra,16(sp)
   10298:	dcc00317 	ldw	r19,12(sp)
   1029c:	dc800217 	ldw	r18,8(sp)
   102a0:	dc400117 	ldw	r17,4(sp)
   102a4:	dc000017 	ldw	r16,0(sp)
   102a8:	dec00504 	addi	sp,sp,20
   102ac:	f800283a 	ret

000102b0 <firAccelerometer>:

long int firAccelerometer(struct Accelerometer* accelerometer){
   102b0:	defffa04 	addi	sp,sp,-24
   102b4:	dcc00315 	stw	r19,12(sp)
    long int total = 0;
    long int data;
    int cursor;
    for(int i = 0; i < accelerometer->a->length; i++){
   102b8:	24c00317 	ldw	r19,12(r4)
long int firAccelerometer(struct Accelerometer* accelerometer){
   102bc:	dd000415 	stw	r20,16(sp)
   102c0:	dc800215 	stw	r18,8(sp)
    for(int i = 0; i < accelerometer->a->length; i++){
   102c4:	9d018d17 	ldw	r20,1588(r19)
long int firAccelerometer(struct Accelerometer* accelerometer){
   102c8:	dc400115 	stw	r17,4(sp)
   102cc:	dc000015 	stw	r16,0(sp)
   102d0:	dfc00515 	stw	ra,20(sp)
   102d4:	2023883a 	mov	r17,r4
    for(int i = 0; i < accelerometer->a->length; i++){
   102d8:	0021883a 	mov	r16,zero
    long int total = 0;
   102dc:	0025883a 	mov	r18,zero
    for(int i = 0; i < accelerometer->a->length; i++){
   102e0:	85000916 	blt	r16,r20,10308 <firAccelerometer+0x58>
        long int data = ((accelerometer->a->data[cursor])*(accelerometer->alpha->data[i]));
        data >>= 19;
        total += data;
    }
    return total;
}
   102e4:	9005883a 	mov	r2,r18
   102e8:	dfc00517 	ldw	ra,20(sp)
   102ec:	dd000417 	ldw	r20,16(sp)
   102f0:	dcc00317 	ldw	r19,12(sp)
   102f4:	dc800217 	ldw	r18,8(sp)
   102f8:	dc400117 	ldw	r17,4(sp)
   102fc:	dc000017 	ldw	r16,0(sp)
   10300:	dec00604 	addi	sp,sp,24
   10304:	f800283a 	ret
        cursor = (i + accelerometer->a->cursor) % accelerometer->a->length;
   10308:	99018c17 	ldw	r4,1584(r19)
   1030c:	a00b883a 	mov	r5,r20
   10310:	8109883a 	add	r4,r16,r4
   10314:	00105880 	call	10588 <__modsi3>
        long int data = ((accelerometer->a->data[cursor])*(accelerometer->alpha->data[i]));
   10318:	800890ba 	slli	r4,r16,2
   1031c:	100490ba 	slli	r2,r2,2
   10320:	88c00417 	ldw	r3,16(r17)
    for(int i = 0; i < accelerometer->a->length; i++){
   10324:	84000044 	addi	r16,r16,1
        long int data = ((accelerometer->a->data[cursor])*(accelerometer->alpha->data[i]));
   10328:	9885883a 	add	r2,r19,r2
   1032c:	1907883a 	add	r3,r3,r4
   10330:	19400017 	ldw	r5,0(r3)
   10334:	11000017 	ldw	r4,0(r2)
   10338:	00106bc0 	call	106bc <__mulsi3>
        data >>= 19;
   1033c:	1005d4fa 	srai	r2,r2,19
        total += data;
   10340:	90a5883a 	add	r18,r18,r2
    for(int i = 0; i < accelerometer->a->length; i++){
   10344:	003fe606 	br	102e0 <firAccelerometer+0x30>

00010348 <filter>:

long int filter(struct Accelerometer* accelerometer){
   10348:	defffd04 	addi	sp,sp,-12
   1034c:	dc400115 	stw	r17,4(sp)
    insertA(accelerometer->a,userAccelerationGravitationalDirection(accelerometer));
   10350:	24400317 	ldw	r17,12(r4)
long int filter(struct Accelerometer* accelerometer){
   10354:	dfc00215 	stw	ra,8(sp)
   10358:	dc000015 	stw	r16,0(sp)
   1035c:	2021883a 	mov	r16,r4
    insertA(accelerometer->a,userAccelerationGravitationalDirection(accelerometer));
   10360:	00102080 	call	10208 <userAccelerationGravitationalDirection>
   10364:	8809883a 	mov	r4,r17
   10368:	100b883a 	mov	r5,r2
   1036c:	00101780 	call	10178 <insertA>
    return firAccelerometer(accelerometer);
   10370:	8009883a 	mov	r4,r16
}
   10374:	dfc00217 	ldw	ra,8(sp)
   10378:	dc400117 	ldw	r17,4(sp)
   1037c:	dc000017 	ldw	r16,0(sp)
   10380:	dec00304 	addi	sp,sp,12
    return firAccelerometer(accelerometer);
   10384:	00102b01 	jmpi	102b0 <firAccelerometer>

00010388 <run_filter>:

//StepDetection
long int run_filter(struct Accelerometer* accelerometer, long int x, long int y, long int z){
   10388:	defffe04 	addi	sp,sp,-8
   1038c:	dc000015 	stw	r16,0(sp)
   10390:	dfc00115 	stw	ra,4(sp)
   10394:	2021883a 	mov	r16,r4
    insertAccelerometer(accelerometer,x,y,z);
   10398:	00101a80 	call	101a8 <insertAccelerometer>
    return filter(accelerometer);
   1039c:	8009883a 	mov	r4,r16
}
   103a0:	dfc00117 	ldw	ra,4(sp)
   103a4:	dc000017 	ldw	r16,0(sp)
   103a8:	dec00204 	addi	sp,sp,8
    return filter(accelerometer);
   103ac:	00103481 	jmpi	10348 <filter>

000103b0 <main>:

int main(){
   103b0:	def8ff04 	addi	sp,sp,-7172
    //first initialise the three acceleration axis;
    struct ListAxis x; x.cursor = 243; x.length = 243;
    struct ListAxis y; y.cursor = 243; y.length = 243;
    struct ListAxis z; z.cursor = 243; z.length = 243;
    struct ListConstants alphaAxis = {.data = {  650 ,  155 ,  174 ,  193 ,  214 ,  237 ,  260 ,  286 ,  312 ,  340 ,  370 ,  401 ,  435 ,  469 ,  506 ,  544 ,  585 ,  627 ,  671 ,  716 ,  764 ,  814 ,  866 ,  920 ,  976 ,  1034 ,  1094 ,  1156 ,  1221 ,  1288 ,  1356 ,  1428 ,  1501 ,  1577 ,  1655 ,  1734 ,  1817 ,  1901 ,  1988 ,  2076 ,  2167 ,  2260 ,  2355 ,  2452 ,  2551 ,  2652 ,  2756 ,  2861 ,  2968 ,  3076 ,  3187 ,  3299 ,  3413 ,  3529 ,  3646 ,  3765 ,  3885 ,  4007 ,  4129 ,  4253 ,  4378 ,  4504 ,  4631 ,  4759 ,  4888 ,  5017 ,  5147 ,  5277 ,  5408 ,  5538 ,  5670 ,  5801 ,  5932 ,  6062 ,  6193 ,  6323 ,  6453 ,  6582 ,  6710 ,  6837 ,  6964 ,  7089 ,  7213 ,  7336 ,  7457 ,  7577 ,  7695 ,  7811 ,  7926 ,  8038 ,  8148 ,  8256 ,  8362 ,  8465 ,  8565 ,  8663 ,  8758 ,  8851 ,  8940 ,  9026 ,  9109 ,  9189 ,  9265 ,  9339 ,  9408 ,  9474 ,  9536 ,  9595 ,  9650 ,  9701 ,  9748 ,  9792 ,  9831 ,  9866 ,  9897 ,  9925 ,  9948 ,  9966 ,  9981 ,  9992 ,  9998 ,  10000 ,  9998 ,  9992 ,  9981 ,  9966 ,  9948 ,  9925 ,  9897 ,  9866 ,  9831 ,  9792 ,  9748 ,  9701 ,  9650 ,  9595 ,  9536 ,  9474 ,  9408 ,  9339 ,  9265 ,  9189 ,  9109 ,  9026 ,  8940 ,  8851 ,  8758 ,  8663 ,  8565 ,  8465 ,  8362 ,  8256 ,  8148 ,  8038 ,  7926 ,  7811 ,  7695 ,  7577 ,  7457 ,  7336 ,  7213 ,  7089 ,  6964 ,  6837 ,  6710 ,  6582 ,  6453 ,  6323 ,  6193 ,  6062 ,  5932 ,  5801 ,  5670 ,  5538 ,  5408 ,  5277 ,  5147 ,  5017 ,  4888 ,  4759 ,  4631 ,  4504 ,  4378 ,  4253 ,  4129 ,  4007 ,  3885 ,  3765 ,  3646 ,  3529 ,  3413 ,  3299 ,  3187 ,  3076 ,  2968 ,  2861 ,  2756 ,  2652 ,  2551 ,  2452 ,  2355 ,  2260 ,  2167 ,  2076 ,  1988 ,  1901 ,  1817 ,  1734 ,  1655 ,  1577 ,  1501 ,  1428 ,  1356 ,  1288 ,  1221 ,  1156 ,  1094 ,  1034 ,  976 ,  920 ,  866 ,  814 ,  764 ,  716 ,  671 ,  627 ,  585 ,  544 ,  506 ,  469 ,  435 ,  401 ,  370 ,  340 ,  312 ,  286 ,  260 ,  237 ,  214 ,  193 ,  174 ,  155 ,  650}};
   103b4:	01400074 	movhi	r5,1
    struct ListAxis x; x.cursor = 243; x.length = 243;
   103b8:	00803cc4 	movi	r2,243
    struct ListConstants alphaAxis = {.data = {  650 ,  155 ,  174 ,  193 ,  214 ,  237 ,  260 ,  286 ,  312 ,  340 ,  370 ,  401 ,  435 ,  469 ,  506 ,  544 ,  585 ,  627 ,  671 ,  716 ,  764 ,  814 ,  866 ,  920 ,  976 ,  1034 ,  1094 ,  1156 ,  1221 ,  1288 ,  1356 ,  1428 ,  1501 ,  1577 ,  1655 ,  1734 ,  1817 ,  1901 ,  1988 ,  2076 ,  2167 ,  2260 ,  2355 ,  2452 ,  2551 ,  2652 ,  2756 ,  2861 ,  2968 ,  3076 ,  3187 ,  3299 ,  3413 ,  3529 ,  3646 ,  3765 ,  3885 ,  4007 ,  4129 ,  4253 ,  4378 ,  4504 ,  4631 ,  4759 ,  4888 ,  5017 ,  5147 ,  5277 ,  5408 ,  5538 ,  5670 ,  5801 ,  5932 ,  6062 ,  6193 ,  6323 ,  6453 ,  6582 ,  6710 ,  6837 ,  6964 ,  7089 ,  7213 ,  7336 ,  7457 ,  7577 ,  7695 ,  7811 ,  7926 ,  8038 ,  8148 ,  8256 ,  8362 ,  8465 ,  8565 ,  8663 ,  8758 ,  8851 ,  8940 ,  9026 ,  9109 ,  9189 ,  9265 ,  9339 ,  9408 ,  9474 ,  9536 ,  9595 ,  9650 ,  9701 ,  9748 ,  9792 ,  9831 ,  9866 ,  9897 ,  9925 ,  9948 ,  9966 ,  9981 ,  9992 ,  9998 ,  10000 ,  9998 ,  9992 ,  9981 ,  9966 ,  9948 ,  9925 ,  9897 ,  9866 ,  9831 ,  9792 ,  9748 ,  9701 ,  9650 ,  9595 ,  9536 ,  9474 ,  9408 ,  9339 ,  9265 ,  9189 ,  9109 ,  9026 ,  8940 ,  8851 ,  8758 ,  8663 ,  8565 ,  8465 ,  8362 ,  8256 ,  8148 ,  8038 ,  7926 ,  7811 ,  7695 ,  7577 ,  7457 ,  7336 ,  7213 ,  7089 ,  6964 ,  6837 ,  6710 ,  6582 ,  6453 ,  6323 ,  6193 ,  6062 ,  5932 ,  5801 ,  5670 ,  5538 ,  5408 ,  5277 ,  5147 ,  5017 ,  4888 ,  4759 ,  4631 ,  4504 ,  4378 ,  4253 ,  4129 ,  4007 ,  3885 ,  3765 ,  3646 ,  3529 ,  3413 ,  3299 ,  3187 ,  3076 ,  2968 ,  2861 ,  2756 ,  2652 ,  2551 ,  2452 ,  2355 ,  2260 ,  2167 ,  2076 ,  1988 ,  1901 ,  1817 ,  1734 ,  1655 ,  1577 ,  1501 ,  1428 ,  1356 ,  1288 ,  1221 ,  1156 ,  1094 ,  1034 ,  976 ,  920 ,  866 ,  814 ,  764 ,  716 ,  671 ,  627 ,  585 ,  544 ,  506 ,  469 ,  435 ,  401 ,  370 ,  340 ,  312 ,  286 ,  260 ,  237 ,  214 ,  193 ,  174 ,  155 ,  650}};
   103bc:	d9001104 	addi	r4,sp,68
   103c0:	0180f304 	movi	r6,972
   103c4:	29449404 	addi	r5,r5,4688
int main(){
   103c8:	dfc70015 	stw	ra,7168(sp)
   103cc:	dc86ff15 	stw	r18,7164(sp)
   103d0:	dc46fe15 	stw	r17,7160(sp)
   103d4:	dc06fd15 	stw	r16,7156(sp)
    struct ListAxis x; x.cursor = 243; x.length = 243;
   103d8:	d881f715 	stw	r2,2012(sp)
   103dc:	d881f815 	stw	r2,2016(sp)
    struct ListAxis y; y.cursor = 243; y.length = 243;
   103e0:	d882ec15 	stw	r2,2992(sp)
   103e4:	d882ed15 	stw	r2,2996(sp)
    struct ListAxis z; z.cursor = 243; z.length = 243;
   103e8:	d883e115 	stw	r2,3972(sp)
   103ec:	d883e215 	stw	r2,3976(sp)
    struct ListConstants alphaAxis = {.data = {  650 ,  155 ,  174 ,  193 ,  214 ,  237 ,  260 ,  286 ,  312 ,  340 ,  370 ,  401 ,  435 ,  469 ,  506 ,  544 ,  585 ,  627 ,  671 ,  716 ,  764 ,  814 ,  866 ,  920 ,  976 ,  1034 ,  1094 ,  1156 ,  1221 ,  1288 ,  1356 ,  1428 ,  1501 ,  1577 ,  1655 ,  1734 ,  1817 ,  1901 ,  1988 ,  2076 ,  2167 ,  2260 ,  2355 ,  2452 ,  2551 ,  2652 ,  2756 ,  2861 ,  2968 ,  3076 ,  3187 ,  3299 ,  3413 ,  3529 ,  3646 ,  3765 ,  3885 ,  4007 ,  4129 ,  4253 ,  4378 ,  4504 ,  4631 ,  4759 ,  4888 ,  5017 ,  5147 ,  5277 ,  5408 ,  5538 ,  5670 ,  5801 ,  5932 ,  6062 ,  6193 ,  6323 ,  6453 ,  6582 ,  6710 ,  6837 ,  6964 ,  7089 ,  7213 ,  7336 ,  7457 ,  7577 ,  7695 ,  7811 ,  7926 ,  8038 ,  8148 ,  8256 ,  8362 ,  8465 ,  8565 ,  8663 ,  8758 ,  8851 ,  8940 ,  9026 ,  9109 ,  9189 ,  9265 ,  9339 ,  9408 ,  9474 ,  9536 ,  9595 ,  9650 ,  9701 ,  9748 ,  9792 ,  9831 ,  9866 ,  9897 ,  9925 ,  9948 ,  9966 ,  9981 ,  9992 ,  9998 ,  10000 ,  9998 ,  9992 ,  9981 ,  9966 ,  9948 ,  9925 ,  9897 ,  9866 ,  9831 ,  9792 ,  9748 ,  9701 ,  9650 ,  9595 ,  9536 ,  9474 ,  9408 ,  9339 ,  9265 ,  9189 ,  9109 ,  9026 ,  8940 ,  8851 ,  8758 ,  8663 ,  8565 ,  8465 ,  8362 ,  8256 ,  8148 ,  8038 ,  7926 ,  7811 ,  7695 ,  7577 ,  7457 ,  7336 ,  7213 ,  7089 ,  6964 ,  6837 ,  6710 ,  6582 ,  6453 ,  6323 ,  6193 ,  6062 ,  5932 ,  5801 ,  5670 ,  5538 ,  5408 ,  5277 ,  5147 ,  5017 ,  4888 ,  4759 ,  4631 ,  4504 ,  4378 ,  4253 ,  4129 ,  4007 ,  3885 ,  3765 ,  3646 ,  3529 ,  3413 ,  3299 ,  3187 ,  3076 ,  2968 ,  2861 ,  2756 ,  2652 ,  2551 ,  2452 ,  2355 ,  2260 ,  2167 ,  2076 ,  1988 ,  1901 ,  1817 ,  1734 ,  1655 ,  1577 ,  1501 ,  1428 ,  1356 ,  1288 ,  1221 ,  1156 ,  1094 ,  1034 ,  976 ,  920 ,  866 ,  814 ,  764 ,  716 ,  671 ,  627 ,  585 ,  544 ,  506 ,  469 ,  435 ,  401 ,  370 ,  340 ,  312 ,  286 ,  260 ,  237 ,  214 ,  193 ,  174 ,  155 ,  650}};
   103f0:	00106e40 	call	106e4 <memcpy>
   103f4:	1009883a 	mov	r4,r2
    struct Acceleration accelerationX; accelerationX.a = &x; accelerationX.alpha = &alphaAxis; accelerationX.firA = 0;
   103f8:	d8810404 	addi	r2,sp,1040
   103fc:	d8800315 	stw	r2,12(sp)
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
   10400:	d881f904 	addi	r2,sp,2020
   10404:	d8800615 	stw	r2,24(sp)
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
    struct ListAccelerometer a; a.cursor = 0; a.length = 396;
    struct ListConstantsAccelerometer alphaA = {.data = {  348 ,  29 ,  29 ,  27 ,  25 ,  22 ,  19 ,  15 ,  10 ,  5 ,  0 ,  -4 ,  -8 ,  -12 ,  -15 ,  -16 ,  -17 ,  -16 ,  -13 ,  -10 ,  -5 ,  1 ,  8 ,  15 ,  23 ,  31 ,  38 ,  44 ,  48 ,  50 ,  49 ,  45 ,  37 ,  24 ,  7 ,  -13 ,  -40 ,  -71 ,  -106 ,  -145 ,  -187 ,  -232 ,  -278 ,  -325 ,  -371 ,  -415 ,  -455 ,  -491 ,  -520 ,  -541 ,  -553 ,  -555 ,  -544 ,  -522 ,  -486 ,  -437 ,  -374 ,  -298 ,  -209 ,  -108 ,  3 ,  123 ,  251 ,  384 ,  520 ,  655 ,  787 ,  913 ,  1030 ,  1136 ,  1227 ,  1300 ,  1355 ,  1387 ,  1397 ,  1382 ,  1342 ,  1276 ,  1186 ,  1071 ,  935 ,  777 ,  602 ,  412 ,  211 ,  1 ,  -211 ,  -423 ,  -631 ,  -830 ,  -1015 ,  -1184 ,  -1333 ,  -1457 ,  -1556 ,  -1627 ,  -1668 ,  -1679 ,  -1660 ,  -1612 ,  -1536 ,  -1436 ,  -1312 ,  -1169 ,  -1012 ,  -843 ,  -668 ,  -492 ,  -319 ,  -154 ,  -2 ,  134 ,  250 ,  344 ,  413 ,  455 ,  471 ,  459 ,  423 ,  363 ,  283 ,  187 ,  78 ,  -36 ,  -153 ,  -266 ,  -368 ,  -454 ,  -518 ,  -555 ,  -561 ,  -530 ,  -460 ,  -350 ,  -198 ,  -4 ,  228 ,  498 ,  801 ,  1130 ,  1480 ,  1842 ,  2208 ,  2569 ,  2914 ,  3233 ,  3517 ,  3755 ,  3937 ,  4055 ,  4101 ,  4069 ,  3953 ,  3750 ,  3459 ,  3079 ,  2613 ,  2066 ,  1444 ,  755 ,  10 ,  -779 ,  -1599 ,  -2436 ,  -3273 ,  -4095 ,  -4884 ,  -5624 ,  -6298 ,  -6892 ,  -7390 ,  -7779 ,  -8050 ,  -8191 ,  -8197 ,  -8063 ,  -7787 ,  -7371 ,  -6819 ,  -6136 ,  -5333 ,  -4422 ,  -3416 ,  -2332 ,  -1188 ,  -4 ,  1198 ,  2400 ,  3579 ,  4713 ,  5781 ,  6765 ,  7645 ,  8405 ,  9031 ,  9511 ,  9836 ,  10000 ,  10000 ,  9836 ,  9511 ,  9031 ,  8405 ,  7645 ,  6765 ,  5781 ,  4713 ,  3579 ,  2400 ,  1198 ,  -4 ,  -1188 ,  -2332 ,  -3416 ,  -4422 ,  -5333 ,  -6136 ,  -6819 ,  -7371 ,  -7787 ,  -8063 ,  -8197 ,  -8191 ,  -8050 ,  -7779 ,  -7390 ,  -6892 ,  -6298 ,  -5624 ,  -4884 ,  -4095 ,  -3273 ,  -2436 ,  -1599 ,  -779 ,  10 ,  755 ,  1444 ,  2066 ,  2613 ,  3079 ,  3459 ,  3750 ,  3953 ,  4069 ,  4101 ,  4055 ,  3937 ,  3755 ,  3517 ,  3233 ,  2914 ,  2569 ,  2208 ,  1842 ,  1480 ,  1130 ,  801 ,  498 ,  228 ,  -4 ,  -198 ,  -350 ,  -460 ,  -530 ,  -561 ,  -555 ,  -518 ,  -454 ,  -368 ,  -266 ,  -153 ,  -36 ,  78 ,  187 ,  283 ,  363 ,  423 ,  459 ,  471 ,  455 ,  413 ,  344 ,  250 ,  134 ,  -2 ,  -154 ,  -319 ,  -492 ,  -668 ,  -843 ,  -1012 ,  -1169 ,  -1312 ,  -1436 ,  -1536 ,  -1612 ,  -1660 ,  -1679 ,  -1668 ,  -1627 ,  -1556 ,  -1457 ,  -1333 ,  -1184 ,  -1015 ,  -830 ,  -631 ,  -423 ,  -211 ,  1 ,  211 ,  412 ,  602 ,  777 ,  935 ,  1071 ,  1186 ,  1276 ,  1342 ,  1382 ,  1397 ,  1387 ,  1355 ,  1300 ,  1227 ,  1136 ,  1030 ,  913 ,  787 ,  655 ,  520 ,  384 ,  251 ,  123 ,  3 ,  -108 ,  -209 ,  -298 ,  -374 ,  -437 ,  -486 ,  -522 ,  -544 ,  -555 ,  -553 ,  -541 ,  -520 ,  -491 ,  -455 ,  -415 ,  -371 ,  -325 ,  -278 ,  -232 ,  -187 ,  -145 ,  -106 ,  -71 ,  -40 ,  -13 ,  7 ,  24 ,  37 ,  45 ,  49 ,  50 ,  48 ,  44 ,  38 ,  31 ,  23 ,  15 ,  8 ,  1 ,  -5 ,  -10 ,  -13 ,  -16 ,  -17 ,  -16 ,  -15 ,  -12 ,  -8 ,  -4 ,  0 ,  5 ,  10 ,  15 ,  19 ,  22 ,  25 ,  27 ,  29 ,  29 ,  348}};
   10408:	01400074 	movhi	r5,1
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
   1040c:	d882ee04 	addi	r2,sp,3000
    struct Acceleration accelerationX; accelerationX.a = &x; accelerationX.alpha = &alphaAxis; accelerationX.firA = 0;
   10410:	d9000415 	stw	r4,16(sp)
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
   10414:	d9000715 	stw	r4,28(sp)
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
   10418:	d8800915 	stw	r2,36(sp)
   1041c:	d9000a15 	stw	r4,40(sp)
    struct ListAccelerometer a; a.cursor = 0; a.length = 396;
   10420:	00806304 	movi	r2,396
    struct ListConstantsAccelerometer alphaA = {.data = {  348 ,  29 ,  29 ,  27 ,  25 ,  22 ,  19 ,  15 ,  10 ,  5 ,  0 ,  -4 ,  -8 ,  -12 ,  -15 ,  -16 ,  -17 ,  -16 ,  -13 ,  -10 ,  -5 ,  1 ,  8 ,  15 ,  23 ,  31 ,  38 ,  44 ,  48 ,  50 ,  49 ,  45 ,  37 ,  24 ,  7 ,  -13 ,  -40 ,  -71 ,  -106 ,  -145 ,  -187 ,  -232 ,  -278 ,  -325 ,  -371 ,  -415 ,  -455 ,  -491 ,  -520 ,  -541 ,  -553 ,  -555 ,  -544 ,  -522 ,  -486 ,  -437 ,  -374 ,  -298 ,  -209 ,  -108 ,  3 ,  123 ,  251 ,  384 ,  520 ,  655 ,  787 ,  913 ,  1030 ,  1136 ,  1227 ,  1300 ,  1355 ,  1387 ,  1397 ,  1382 ,  1342 ,  1276 ,  1186 ,  1071 ,  935 ,  777 ,  602 ,  412 ,  211 ,  1 ,  -211 ,  -423 ,  -631 ,  -830 ,  -1015 ,  -1184 ,  -1333 ,  -1457 ,  -1556 ,  -1627 ,  -1668 ,  -1679 ,  -1660 ,  -1612 ,  -1536 ,  -1436 ,  -1312 ,  -1169 ,  -1012 ,  -843 ,  -668 ,  -492 ,  -319 ,  -154 ,  -2 ,  134 ,  250 ,  344 ,  413 ,  455 ,  471 ,  459 ,  423 ,  363 ,  283 ,  187 ,  78 ,  -36 ,  -153 ,  -266 ,  -368 ,  -454 ,  -518 ,  -555 ,  -561 ,  -530 ,  -460 ,  -350 ,  -198 ,  -4 ,  228 ,  498 ,  801 ,  1130 ,  1480 ,  1842 ,  2208 ,  2569 ,  2914 ,  3233 ,  3517 ,  3755 ,  3937 ,  4055 ,  4101 ,  4069 ,  3953 ,  3750 ,  3459 ,  3079 ,  2613 ,  2066 ,  1444 ,  755 ,  10 ,  -779 ,  -1599 ,  -2436 ,  -3273 ,  -4095 ,  -4884 ,  -5624 ,  -6298 ,  -6892 ,  -7390 ,  -7779 ,  -8050 ,  -8191 ,  -8197 ,  -8063 ,  -7787 ,  -7371 ,  -6819 ,  -6136 ,  -5333 ,  -4422 ,  -3416 ,  -2332 ,  -1188 ,  -4 ,  1198 ,  2400 ,  3579 ,  4713 ,  5781 ,  6765 ,  7645 ,  8405 ,  9031 ,  9511 ,  9836 ,  10000 ,  10000 ,  9836 ,  9511 ,  9031 ,  8405 ,  7645 ,  6765 ,  5781 ,  4713 ,  3579 ,  2400 ,  1198 ,  -4 ,  -1188 ,  -2332 ,  -3416 ,  -4422 ,  -5333 ,  -6136 ,  -6819 ,  -7371 ,  -7787 ,  -8063 ,  -8197 ,  -8191 ,  -8050 ,  -7779 ,  -7390 ,  -6892 ,  -6298 ,  -5624 ,  -4884 ,  -4095 ,  -3273 ,  -2436 ,  -1599 ,  -779 ,  10 ,  755 ,  1444 ,  2066 ,  2613 ,  3079 ,  3459 ,  3750 ,  3953 ,  4069 ,  4101 ,  4055 ,  3937 ,  3755 ,  3517 ,  3233 ,  2914 ,  2569 ,  2208 ,  1842 ,  1480 ,  1130 ,  801 ,  498 ,  228 ,  -4 ,  -198 ,  -350 ,  -460 ,  -530 ,  -561 ,  -555 ,  -518 ,  -454 ,  -368 ,  -266 ,  -153 ,  -36 ,  78 ,  187 ,  283 ,  363 ,  423 ,  459 ,  471 ,  455 ,  413 ,  344 ,  250 ,  134 ,  -2 ,  -154 ,  -319 ,  -492 ,  -668 ,  -843 ,  -1012 ,  -1169 ,  -1312 ,  -1436 ,  -1536 ,  -1612 ,  -1660 ,  -1679 ,  -1668 ,  -1627 ,  -1556 ,  -1457 ,  -1333 ,  -1184 ,  -1015 ,  -830 ,  -631 ,  -423 ,  -211 ,  1 ,  211 ,  412 ,  602 ,  777 ,  935 ,  1071 ,  1186 ,  1276 ,  1342 ,  1382 ,  1397 ,  1387 ,  1355 ,  1300 ,  1227 ,  1136 ,  1030 ,  913 ,  787 ,  655 ,  520 ,  384 ,  251 ,  123 ,  3 ,  -108 ,  -209 ,  -298 ,  -374 ,  -437 ,  -486 ,  -522 ,  -544 ,  -555 ,  -553 ,  -541 ,  -520 ,  -491 ,  -455 ,  -415 ,  -371 ,  -325 ,  -278 ,  -232 ,  -187 ,  -145 ,  -106 ,  -71 ,  -40 ,  -13 ,  7 ,  24 ,  37 ,  45 ,  49 ,  50 ,  48 ,  44 ,  38 ,  31 ,  23 ,  15 ,  8 ,  1 ,  -5 ,  -10 ,  -13 ,  -16 ,  -17 ,  -16 ,  -15 ,  -12 ,  -8 ,  -4 ,  0 ,  5 ,  10 ,  15 ,  19 ,  22 ,  25 ,  27 ,  29 ,  29 ,  348}};
   10424:	d903e304 	addi	r4,sp,3980
   10428:	01818c04 	movi	r6,1584
   1042c:	29458704 	addi	r5,r5,5660
    struct Acceleration accelerationX; accelerationX.a = &x; accelerationX.alpha = &alphaAxis; accelerationX.firA = 0;
   10430:	d8000515 	stw	zero,20(sp)
    struct Acceleration accelerationY; accelerationY.a = &y; accelerationY.alpha = &alphaAxis; accelerationY.firA = 0;
   10434:	d8000815 	stw	zero,32(sp)
    struct Acceleration accelerationZ; accelerationZ.a = &z; accelerationZ.alpha = &alphaAxis; accelerationZ.firA = 0;
   10438:	d8000b15 	stw	zero,44(sp)
    struct ListAccelerometer a; a.cursor = 0; a.length = 396;
   1043c:	d806fb15 	stw	zero,7148(sp)
   10440:	d886fc15 	stw	r2,7152(sp)
    struct ListConstantsAccelerometer alphaA = {.data = {  348 ,  29 ,  29 ,  27 ,  25 ,  22 ,  19 ,  15 ,  10 ,  5 ,  0 ,  -4 ,  -8 ,  -12 ,  -15 ,  -16 ,  -17 ,  -16 ,  -13 ,  -10 ,  -5 ,  1 ,  8 ,  15 ,  23 ,  31 ,  38 ,  44 ,  48 ,  50 ,  49 ,  45 ,  37 ,  24 ,  7 ,  -13 ,  -40 ,  -71 ,  -106 ,  -145 ,  -187 ,  -232 ,  -278 ,  -325 ,  -371 ,  -415 ,  -455 ,  -491 ,  -520 ,  -541 ,  -553 ,  -555 ,  -544 ,  -522 ,  -486 ,  -437 ,  -374 ,  -298 ,  -209 ,  -108 ,  3 ,  123 ,  251 ,  384 ,  520 ,  655 ,  787 ,  913 ,  1030 ,  1136 ,  1227 ,  1300 ,  1355 ,  1387 ,  1397 ,  1382 ,  1342 ,  1276 ,  1186 ,  1071 ,  935 ,  777 ,  602 ,  412 ,  211 ,  1 ,  -211 ,  -423 ,  -631 ,  -830 ,  -1015 ,  -1184 ,  -1333 ,  -1457 ,  -1556 ,  -1627 ,  -1668 ,  -1679 ,  -1660 ,  -1612 ,  -1536 ,  -1436 ,  -1312 ,  -1169 ,  -1012 ,  -843 ,  -668 ,  -492 ,  -319 ,  -154 ,  -2 ,  134 ,  250 ,  344 ,  413 ,  455 ,  471 ,  459 ,  423 ,  363 ,  283 ,  187 ,  78 ,  -36 ,  -153 ,  -266 ,  -368 ,  -454 ,  -518 ,  -555 ,  -561 ,  -530 ,  -460 ,  -350 ,  -198 ,  -4 ,  228 ,  498 ,  801 ,  1130 ,  1480 ,  1842 ,  2208 ,  2569 ,  2914 ,  3233 ,  3517 ,  3755 ,  3937 ,  4055 ,  4101 ,  4069 ,  3953 ,  3750 ,  3459 ,  3079 ,  2613 ,  2066 ,  1444 ,  755 ,  10 ,  -779 ,  -1599 ,  -2436 ,  -3273 ,  -4095 ,  -4884 ,  -5624 ,  -6298 ,  -6892 ,  -7390 ,  -7779 ,  -8050 ,  -8191 ,  -8197 ,  -8063 ,  -7787 ,  -7371 ,  -6819 ,  -6136 ,  -5333 ,  -4422 ,  -3416 ,  -2332 ,  -1188 ,  -4 ,  1198 ,  2400 ,  3579 ,  4713 ,  5781 ,  6765 ,  7645 ,  8405 ,  9031 ,  9511 ,  9836 ,  10000 ,  10000 ,  9836 ,  9511 ,  9031 ,  8405 ,  7645 ,  6765 ,  5781 ,  4713 ,  3579 ,  2400 ,  1198 ,  -4 ,  -1188 ,  -2332 ,  -3416 ,  -4422 ,  -5333 ,  -6136 ,  -6819 ,  -7371 ,  -7787 ,  -8063 ,  -8197 ,  -8191 ,  -8050 ,  -7779 ,  -7390 ,  -6892 ,  -6298 ,  -5624 ,  -4884 ,  -4095 ,  -3273 ,  -2436 ,  -1599 ,  -779 ,  10 ,  755 ,  1444 ,  2066 ,  2613 ,  3079 ,  3459 ,  3750 ,  3953 ,  4069 ,  4101 ,  4055 ,  3937 ,  3755 ,  3517 ,  3233 ,  2914 ,  2569 ,  2208 ,  1842 ,  1480 ,  1130 ,  801 ,  498 ,  228 ,  -4 ,  -198 ,  -350 ,  -460 ,  -530 ,  -561 ,  -555 ,  -518 ,  -454 ,  -368 ,  -266 ,  -153 ,  -36 ,  78 ,  187 ,  283 ,  363 ,  423 ,  459 ,  471 ,  455 ,  413 ,  344 ,  250 ,  134 ,  -2 ,  -154 ,  -319 ,  -492 ,  -668 ,  -843 ,  -1012 ,  -1169 ,  -1312 ,  -1436 ,  -1536 ,  -1612 ,  -1660 ,  -1679 ,  -1668 ,  -1627 ,  -1556 ,  -1457 ,  -1333 ,  -1184 ,  -1015 ,  -830 ,  -631 ,  -423 ,  -211 ,  1 ,  211 ,  412 ,  602 ,  777 ,  935 ,  1071 ,  1186 ,  1276 ,  1342 ,  1382 ,  1397 ,  1387 ,  1355 ,  1300 ,  1227 ,  1136 ,  1030 ,  913 ,  787 ,  655 ,  520 ,  384 ,  251 ,  123 ,  3 ,  -108 ,  -209 ,  -298 ,  -374 ,  -437 ,  -486 ,  -522 ,  -544 ,  -555 ,  -553 ,  -541 ,  -520 ,  -491 ,  -455 ,  -415 ,  -371 ,  -325 ,  -278 ,  -232 ,  -187 ,  -145 ,  -106 ,  -71 ,  -40 ,  -13 ,  7 ,  24 ,  37 ,  45 ,  49 ,  50 ,  48 ,  44 ,  38 ,  31 ,  23 ,  15 ,  8 ,  1 ,  -5 ,  -10 ,  -13 ,  -16 ,  -17 ,  -16 ,  -15 ,  -12 ,  -8 ,  -4 ,  0 ,  5 ,  10 ,  15 ,  19 ,  22 ,  25 ,  27 ,  29 ,  29 ,  348}};
   10444:	00106e40 	call	106e4 <memcpy>
   10448:	1009883a 	mov	r4,r2
    struct Accelerometer accelerometer;
    accelerometer.x = &accelerationX; accelerometer.y = &accelerationY; accelerometer.z = &accelerationZ;
   1044c:	d8800304 	addi	r2,sp,12
   10450:	d8800c15 	stw	r2,48(sp)
   10454:	d8800604 	addi	r2,sp,24
   10458:	d8800d15 	stw	r2,52(sp)
    accelerometer.a = &a;
    accelerometer.alpha = &alphaA;
   1045c:	d9001015 	stw	r4,64(sp)
    accelerometer.x = &accelerationX; accelerometer.y = &accelerationY; accelerometer.z = &accelerationZ;
   10460:	d8800904 	addi	r2,sp,36

    alt_32 x_read;
    alt_32 y_read;
    alt_32 z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10464:	01000074 	movhi	r4,1
    accelerometer.x = &accelerationX; accelerometer.y = &accelerationY; accelerometer.z = &accelerationZ;
   10468:	d8800e15 	stw	r2,56(sp)
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1046c:	21048c04 	addi	r4,r4,4656
    accelerometer.a = &a;
   10470:	d8856f04 	addi	r2,sp,5564
   10474:	d8800f15 	stw	r2,60(sp)
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10478:	0010fb00 	call	10fb0 <alt_up_accelerometer_spi_open_dev>
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   1047c:	10001b26 	beq	r2,zero,104ec <main+0x13c>
   10480:	1021883a 	mov	r16,r2
        return 1;
    }

    int test_count = 0;
   10484:	0023883a 	mov	r17,zero
    while (1) {

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10488:	d80b883a 	mov	r5,sp
   1048c:	8009883a 	mov	r4,r16
   10490:	00110080 	call	11008 <alt_up_accelerometer_spi_read_x_axis>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   10494:	d9400104 	addi	r5,sp,4
   10498:	8009883a 	mov	r4,r16
   1049c:	00110600 	call	11060 <alt_up_accelerometer_spi_read_y_axis>
        alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
   104a0:	d9400204 	addi	r5,sp,8
   104a4:	8009883a 	mov	r4,r16
   104a8:	00110b80 	call	110b8 <alt_up_accelerometer_spi_read_z_axis>
        //fprintf(fp," %ld ",x_read);

        data = run_filter(&accelerometer,x_read,y_read,z_read);
   104ac:	d9400017 	ldw	r5,0(sp)
   104b0:	d9c00217 	ldw	r7,8(sp)
   104b4:	d9800117 	ldw	r6,4(sp)
   104b8:	d9000c04 	addi	r4,sp,48
   104bc:	00103880 	call	10388 <run_filter>
   104c0:	01401904 	movi	r5,100
   104c4:	8809883a 	mov	r4,r17
   104c8:	1025883a 	mov	r18,r2
   104cc:	00105880 	call	10588 <__modsi3>
        }else{
            if(data < lowMag){
                below = TRUE;
            }
        }
        if((test_count % 100) == 0){
   104d0:	1000041e 	bne	r2,zero,104e4 <main+0x134>
            printf("%ld ",data);
   104d4:	01000074 	movhi	r4,1
   104d8:	900b883a 	mov	r5,r18
   104dc:	21049204 	addi	r4,r4,4680
   104e0:	00107480 	call	10748 <printf>
        }
        test_count += 1;
   104e4:	8c400044 	addi	r17,r17,1
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   104e8:	003fe706 	br	10488 <main+0xd8>



    }
    //printf("%d ",count);
}
   104ec:	00800044 	movi	r2,1
   104f0:	dfc70017 	ldw	ra,7168(sp)
   104f4:	dc86ff17 	ldw	r18,7164(sp)
   104f8:	dc46fe17 	ldw	r17,7160(sp)
   104fc:	dc06fd17 	ldw	r16,7156(sp)
   10500:	dec70104 	addi	sp,sp,7172
   10504:	f800283a 	ret

00010508 <__divsi3>:
   10508:	20001a16 	blt	r4,zero,10574 <__divsi3+0x6c>
   1050c:	000f883a 	mov	r7,zero
   10510:	2800020e 	bge	r5,zero,1051c <__divsi3+0x14>
   10514:	014bc83a 	sub	r5,zero,r5
   10518:	39c0005c 	xori	r7,r7,1
   1051c:	200d883a 	mov	r6,r4
   10520:	00c00044 	movi	r3,1
   10524:	2900092e 	bgeu	r5,r4,1054c <__divsi3+0x44>
   10528:	00800804 	movi	r2,32
   1052c:	00c00044 	movi	r3,1
   10530:	00000106 	br	10538 <__divsi3+0x30>
   10534:	10001226 	beq	r2,zero,10580 <__divsi3+0x78>
   10538:	294b883a 	add	r5,r5,r5
   1053c:	10bfffc4 	addi	r2,r2,-1
   10540:	18c7883a 	add	r3,r3,r3
   10544:	293ffb36 	bltu	r5,r4,10534 <__divsi3+0x2c>
   10548:	18000d26 	beq	r3,zero,10580 <__divsi3+0x78>
   1054c:	0005883a 	mov	r2,zero
   10550:	31400236 	bltu	r6,r5,1055c <__divsi3+0x54>
   10554:	314dc83a 	sub	r6,r6,r5
   10558:	10c4b03a 	or	r2,r2,r3
   1055c:	1806d07a 	srli	r3,r3,1
   10560:	280ad07a 	srli	r5,r5,1
   10564:	183ffa1e 	bne	r3,zero,10550 <__divsi3+0x48>
   10568:	38000126 	beq	r7,zero,10570 <__divsi3+0x68>
   1056c:	0085c83a 	sub	r2,zero,r2
   10570:	f800283a 	ret
   10574:	0109c83a 	sub	r4,zero,r4
   10578:	01c00044 	movi	r7,1
   1057c:	003fe406 	br	10510 <__divsi3+0x8>
   10580:	0005883a 	mov	r2,zero
   10584:	003ff806 	br	10568 <__divsi3+0x60>

00010588 <__modsi3>:
   10588:	20001716 	blt	r4,zero,105e8 <__modsi3+0x60>
   1058c:	000f883a 	mov	r7,zero
   10590:	2005883a 	mov	r2,r4
   10594:	2800010e 	bge	r5,zero,1059c <__modsi3+0x14>
   10598:	014bc83a 	sub	r5,zero,r5
   1059c:	00c00044 	movi	r3,1
   105a0:	2900092e 	bgeu	r5,r4,105c8 <__modsi3+0x40>
   105a4:	01800804 	movi	r6,32
   105a8:	00c00044 	movi	r3,1
   105ac:	00000106 	br	105b4 <__modsi3+0x2c>
   105b0:	30001026 	beq	r6,zero,105f4 <__modsi3+0x6c>
   105b4:	294b883a 	add	r5,r5,r5
   105b8:	31bfffc4 	addi	r6,r6,-1
   105bc:	18c7883a 	add	r3,r3,r3
   105c0:	293ffb36 	bltu	r5,r4,105b0 <__modsi3+0x28>
   105c4:	18000b26 	beq	r3,zero,105f4 <__modsi3+0x6c>
   105c8:	1806d07a 	srli	r3,r3,1
   105cc:	11400136 	bltu	r2,r5,105d4 <__modsi3+0x4c>
   105d0:	1145c83a 	sub	r2,r2,r5
   105d4:	280ad07a 	srli	r5,r5,1
   105d8:	183ffb1e 	bne	r3,zero,105c8 <__modsi3+0x40>
   105dc:	38000126 	beq	r7,zero,105e4 <__modsi3+0x5c>
   105e0:	0085c83a 	sub	r2,zero,r2
   105e4:	f800283a 	ret
   105e8:	0109c83a 	sub	r4,zero,r4
   105ec:	01c00044 	movi	r7,1
   105f0:	003fe706 	br	10590 <__modsi3+0x8>
   105f4:	2005883a 	mov	r2,r4
   105f8:	003ff806 	br	105dc <__modsi3+0x54>

000105fc <__udivsi3>:
   105fc:	200d883a 	mov	r6,r4
   10600:	2900152e 	bgeu	r5,r4,10658 <__udivsi3+0x5c>
   10604:	28001416 	blt	r5,zero,10658 <__udivsi3+0x5c>
   10608:	00800804 	movi	r2,32
   1060c:	00c00044 	movi	r3,1
   10610:	00000206 	br	1061c <__udivsi3+0x20>
   10614:	10000e26 	beq	r2,zero,10650 <__udivsi3+0x54>
   10618:	28000416 	blt	r5,zero,1062c <__udivsi3+0x30>
   1061c:	294b883a 	add	r5,r5,r5
   10620:	10bfffc4 	addi	r2,r2,-1
   10624:	18c7883a 	add	r3,r3,r3
   10628:	293ffa36 	bltu	r5,r4,10614 <__udivsi3+0x18>
   1062c:	18000826 	beq	r3,zero,10650 <__udivsi3+0x54>
   10630:	0005883a 	mov	r2,zero
   10634:	31400236 	bltu	r6,r5,10640 <__udivsi3+0x44>
   10638:	314dc83a 	sub	r6,r6,r5
   1063c:	10c4b03a 	or	r2,r2,r3
   10640:	1806d07a 	srli	r3,r3,1
   10644:	280ad07a 	srli	r5,r5,1
   10648:	183ffa1e 	bne	r3,zero,10634 <__udivsi3+0x38>
   1064c:	f800283a 	ret
   10650:	0005883a 	mov	r2,zero
   10654:	f800283a 	ret
   10658:	00c00044 	movi	r3,1
   1065c:	003ff406 	br	10630 <__udivsi3+0x34>

00010660 <__umodsi3>:
   10660:	2005883a 	mov	r2,r4
   10664:	2900132e 	bgeu	r5,r4,106b4 <__umodsi3+0x54>
   10668:	28001216 	blt	r5,zero,106b4 <__umodsi3+0x54>
   1066c:	01800804 	movi	r6,32
   10670:	00c00044 	movi	r3,1
   10674:	00000206 	br	10680 <__umodsi3+0x20>
   10678:	30000c26 	beq	r6,zero,106ac <__umodsi3+0x4c>
   1067c:	28000416 	blt	r5,zero,10690 <__umodsi3+0x30>
   10680:	294b883a 	add	r5,r5,r5
   10684:	31bfffc4 	addi	r6,r6,-1
   10688:	18c7883a 	add	r3,r3,r3
   1068c:	293ffa36 	bltu	r5,r4,10678 <__umodsi3+0x18>
   10690:	18000626 	beq	r3,zero,106ac <__umodsi3+0x4c>
   10694:	1806d07a 	srli	r3,r3,1
   10698:	11400136 	bltu	r2,r5,106a0 <__umodsi3+0x40>
   1069c:	1145c83a 	sub	r2,r2,r5
   106a0:	280ad07a 	srli	r5,r5,1
   106a4:	183ffb1e 	bne	r3,zero,10694 <__umodsi3+0x34>
   106a8:	f800283a 	ret
   106ac:	2005883a 	mov	r2,r4
   106b0:	f800283a 	ret
   106b4:	00c00044 	movi	r3,1
   106b8:	003ff606 	br	10694 <__umodsi3+0x34>

000106bc <__mulsi3>:
   106bc:	0005883a 	mov	r2,zero
   106c0:	20000726 	beq	r4,zero,106e0 <__mulsi3+0x24>
   106c4:	20c0004c 	andi	r3,r4,1
   106c8:	2008d07a 	srli	r4,r4,1
   106cc:	18000126 	beq	r3,zero,106d4 <__mulsi3+0x18>
   106d0:	1145883a 	add	r2,r2,r5
   106d4:	294b883a 	add	r5,r5,r5
   106d8:	203ffa1e 	bne	r4,zero,106c4 <__mulsi3+0x8>
   106dc:	f800283a 	ret
   106e0:	f800283a 	ret

000106e4 <memcpy>:
   106e4:	2005883a 	mov	r2,r4
   106e8:	0007883a 	mov	r3,zero
   106ec:	30c0011e 	bne	r6,r3,106f4 <memcpy+0x10>
   106f0:	f800283a 	ret
   106f4:	28cf883a 	add	r7,r5,r3
   106f8:	39c00003 	ldbu	r7,0(r7)
   106fc:	10c9883a 	add	r4,r2,r3
   10700:	18c00044 	addi	r3,r3,1
   10704:	21c00005 	stb	r7,0(r4)
   10708:	003ff806 	br	106ec <memcpy+0x8>

0001070c <_printf_r>:
   1070c:	defffd04 	addi	sp,sp,-12
   10710:	dfc00015 	stw	ra,0(sp)
   10714:	d9800115 	stw	r6,4(sp)
   10718:	d9c00215 	stw	r7,8(sp)
   1071c:	21800217 	ldw	r6,8(r4)
   10720:	00c00074 	movhi	r3,1
   10724:	18c34c04 	addi	r3,r3,3376
   10728:	30c00115 	stw	r3,4(r6)
   1072c:	280d883a 	mov	r6,r5
   10730:	21400217 	ldw	r5,8(r4)
   10734:	d9c00104 	addi	r7,sp,4
   10738:	00107fc0 	call	107fc <___vfprintf_internal_r>
   1073c:	dfc00017 	ldw	ra,0(sp)
   10740:	dec00304 	addi	sp,sp,12
   10744:	f800283a 	ret

00010748 <printf>:
   10748:	defffc04 	addi	sp,sp,-16
   1074c:	dfc00015 	stw	ra,0(sp)
   10750:	d9400115 	stw	r5,4(sp)
   10754:	d9800215 	stw	r6,8(sp)
   10758:	d9c00315 	stw	r7,12(sp)
   1075c:	00800074 	movhi	r2,1
   10760:	10c77117 	ldw	r3,7620(r2)
   10764:	00800074 	movhi	r2,1
   10768:	10834c04 	addi	r2,r2,3376
   1076c:	19400217 	ldw	r5,8(r3)
   10770:	d9800104 	addi	r6,sp,4
   10774:	28800115 	stw	r2,4(r5)
   10778:	200b883a 	mov	r5,r4
   1077c:	19000217 	ldw	r4,8(r3)
   10780:	0010d180 	call	10d18 <__vfprintf_internal>
   10784:	dfc00017 	ldw	ra,0(sp)
   10788:	dec00404 	addi	sp,sp,16
   1078c:	f800283a 	ret

00010790 <print_repeat>:
   10790:	defffb04 	addi	sp,sp,-20
   10794:	dc800315 	stw	r18,12(sp)
   10798:	dc400215 	stw	r17,8(sp)
   1079c:	dc000115 	stw	r16,4(sp)
   107a0:	dfc00415 	stw	ra,16(sp)
   107a4:	2025883a 	mov	r18,r4
   107a8:	2823883a 	mov	r17,r5
   107ac:	d9800005 	stb	r6,0(sp)
   107b0:	3821883a 	mov	r16,r7
   107b4:	04000716 	blt	zero,r16,107d4 <print_repeat+0x44>
   107b8:	0005883a 	mov	r2,zero
   107bc:	dfc00417 	ldw	ra,16(sp)
   107c0:	dc800317 	ldw	r18,12(sp)
   107c4:	dc400217 	ldw	r17,8(sp)
   107c8:	dc000117 	ldw	r16,4(sp)
   107cc:	dec00504 	addi	sp,sp,20
   107d0:	f800283a 	ret
   107d4:	88800117 	ldw	r2,4(r17)
   107d8:	01c00044 	movi	r7,1
   107dc:	d80d883a 	mov	r6,sp
   107e0:	880b883a 	mov	r5,r17
   107e4:	9009883a 	mov	r4,r18
   107e8:	103ee83a 	callr	r2
   107ec:	843fffc4 	addi	r16,r16,-1
   107f0:	103ff026 	beq	r2,zero,107b4 <print_repeat+0x24>
   107f4:	00bfffc4 	movi	r2,-1
   107f8:	003ff006 	br	107bc <print_repeat+0x2c>

000107fc <___vfprintf_internal_r>:
   107fc:	deffe604 	addi	sp,sp,-104
   10800:	ddc01715 	stw	r23,92(sp)
   10804:	dd801615 	stw	r22,88(sp)
   10808:	dd401515 	stw	r21,84(sp)
   1080c:	dd001415 	stw	r20,80(sp)
   10810:	dcc01315 	stw	r19,76(sp)
   10814:	dc801215 	stw	r18,72(sp)
   10818:	dc401115 	stw	r17,68(sp)
   1081c:	dc001015 	stw	r16,64(sp)
   10820:	dfc01915 	stw	ra,100(sp)
   10824:	df001815 	stw	fp,96(sp)
   10828:	2025883a 	mov	r18,r4
   1082c:	2823883a 	mov	r17,r5
   10830:	d9800515 	stw	r6,20(sp)
   10834:	382f883a 	mov	r23,r7
   10838:	0021883a 	mov	r16,zero
   1083c:	d8000215 	stw	zero,8(sp)
   10840:	d8000015 	stw	zero,0(sp)
   10844:	0029883a 	mov	r20,zero
   10848:	002d883a 	mov	r22,zero
   1084c:	0027883a 	mov	r19,zero
   10850:	002b883a 	mov	r21,zero
   10854:	d8000115 	stw	zero,4(sp)
   10858:	0005883a 	mov	r2,zero
   1085c:	00000206 	br	10868 <___vfprintf_internal_r+0x6c>
   10860:	114000e0 	cmpeqi	r5,r2,3
   10864:	28004e1e 	bne	r5,zero,109a0 <___vfprintf_internal_r+0x1a4>
   10868:	d8c00517 	ldw	r3,20(sp)
   1086c:	19000003 	ldbu	r4,0(r3)
   10870:	18c00044 	addi	r3,r3,1
   10874:	d8c00515 	stw	r3,20(sp)
   10878:	20c03fcc 	andi	r3,r4,255
   1087c:	18c0201c 	xori	r3,r3,128
   10880:	18ffe004 	addi	r3,r3,-128
   10884:	18001026 	beq	r3,zero,108c8 <___vfprintf_internal_r+0xcc>
   10888:	114000a0 	cmpeqi	r5,r2,2
   1088c:	28001f1e 	bne	r5,zero,1090c <___vfprintf_internal_r+0x110>
   10890:	114000c8 	cmpgei	r5,r2,3
   10894:	283ff21e 	bne	r5,zero,10860 <___vfprintf_internal_r+0x64>
   10898:	1000181e 	bne	r2,zero,108fc <___vfprintf_internal_r+0x100>
   1089c:	18c00960 	cmpeqi	r3,r3,37
   108a0:	18010e1e 	bne	r3,zero,10cdc <___vfprintf_internal_r+0x4e0>
   108a4:	88800117 	ldw	r2,4(r17)
   108a8:	d9000805 	stb	r4,32(sp)
   108ac:	01c00044 	movi	r7,1
   108b0:	d9800804 	addi	r6,sp,32
   108b4:	880b883a 	mov	r5,r17
   108b8:	9009883a 	mov	r4,r18
   108bc:	103ee83a 	callr	r2
   108c0:	10001e26 	beq	r2,zero,1093c <___vfprintf_internal_r+0x140>
   108c4:	043fffc4 	movi	r16,-1
   108c8:	8005883a 	mov	r2,r16
   108cc:	dfc01917 	ldw	ra,100(sp)
   108d0:	df001817 	ldw	fp,96(sp)
   108d4:	ddc01717 	ldw	r23,92(sp)
   108d8:	dd801617 	ldw	r22,88(sp)
   108dc:	dd401517 	ldw	r21,84(sp)
   108e0:	dd001417 	ldw	r20,80(sp)
   108e4:	dcc01317 	ldw	r19,76(sp)
   108e8:	dc801217 	ldw	r18,72(sp)
   108ec:	dc401117 	ldw	r17,68(sp)
   108f0:	dc001017 	ldw	r16,64(sp)
   108f4:	dec01a04 	addi	sp,sp,104
   108f8:	f800283a 	ret
   108fc:	18800c20 	cmpeqi	r2,r3,48
   10900:	1000ff1e 	bne	r2,zero,10d00 <___vfprintf_internal_r+0x504>
   10904:	18800958 	cmpnei	r2,r3,37
   10908:	103fe626 	beq	r2,zero,108a4 <___vfprintf_internal_r+0xa8>
   1090c:	213ff404 	addi	r4,r4,-48
   10910:	21003fcc 	andi	r4,r4,255
   10914:	208002a8 	cmpgeui	r2,r4,10
   10918:	10000c1e 	bne	r2,zero,1094c <___vfprintf_internal_r+0x150>
   1091c:	98bfffe0 	cmpeqi	r2,r19,-1
   10920:	1000081e 	bne	r2,zero,10944 <___vfprintf_internal_r+0x148>
   10924:	980490ba 	slli	r2,r19,2
   10928:	14c5883a 	add	r2,r2,r19
   1092c:	1004907a 	slli	r2,r2,1
   10930:	20a7883a 	add	r19,r4,r2
   10934:	00800084 	movi	r2,2
   10938:	003fcb06 	br	10868 <___vfprintf_internal_r+0x6c>
   1093c:	84000044 	addi	r16,r16,1
   10940:	003fc906 	br	10868 <___vfprintf_internal_r+0x6c>
   10944:	0005883a 	mov	r2,zero
   10948:	003ff906 	br	10930 <___vfprintf_internal_r+0x134>
   1094c:	18800ba0 	cmpeqi	r2,r3,46
   10950:	1000ef1e 	bne	r2,zero,10d10 <___vfprintf_internal_r+0x514>
   10954:	18801b20 	cmpeqi	r2,r3,108
   10958:	1000ec1e 	bne	r2,zero,10d0c <___vfprintf_internal_r+0x510>
   1095c:	b0bfffe0 	cmpeqi	r2,r22,-1
   10960:	10001c1e 	bne	r2,zero,109d4 <___vfprintf_internal_r+0x1d8>
   10964:	d8000115 	stw	zero,4(sp)
   10968:	18801be0 	cmpeqi	r2,r3,111
   1096c:	1000ba1e 	bne	r2,zero,10c58 <___vfprintf_internal_r+0x45c>
   10970:	18801c08 	cmpgei	r2,r3,112
   10974:	1000581e 	bne	r2,zero,10ad8 <___vfprintf_internal_r+0x2dc>
   10978:	188018e0 	cmpeqi	r2,r3,99
   1097c:	1000bd1e 	bne	r2,zero,10c74 <___vfprintf_internal_r+0x478>
   10980:	18801908 	cmpgei	r2,r3,100
   10984:	1000151e 	bne	r2,zero,109dc <___vfprintf_internal_r+0x1e0>
   10988:	18c01620 	cmpeqi	r3,r3,88
   1098c:	183fb226 	beq	r3,zero,10858 <___vfprintf_internal_r+0x5c>
   10990:	a800721e 	bne	r21,zero,10b5c <___vfprintf_internal_r+0x360>
   10994:	00800044 	movi	r2,1
   10998:	d8800215 	stw	r2,8(sp)
   1099c:	00007006 	br	10b60 <___vfprintf_internal_r+0x364>
   109a0:	213ff404 	addi	r4,r4,-48
   109a4:	21003fcc 	andi	r4,r4,255
   109a8:	214002a8 	cmpgeui	r5,r4,10
   109ac:	283fe91e 	bne	r5,zero,10954 <___vfprintf_internal_r+0x158>
   109b0:	b0ffffe0 	cmpeqi	r3,r22,-1
   109b4:	1800051e 	bne	r3,zero,109cc <___vfprintf_internal_r+0x1d0>
   109b8:	b00690ba 	slli	r3,r22,2
   109bc:	1d87883a 	add	r3,r3,r22
   109c0:	1806907a 	slli	r3,r3,1
   109c4:	20ed883a 	add	r22,r4,r3
   109c8:	003fa706 	br	10868 <___vfprintf_internal_r+0x6c>
   109cc:	0007883a 	mov	r3,zero
   109d0:	003ffc06 	br	109c4 <___vfprintf_internal_r+0x1c8>
   109d4:	05800044 	movi	r22,1
   109d8:	003fe306 	br	10968 <___vfprintf_internal_r+0x16c>
   109dc:	18801920 	cmpeqi	r2,r3,100
   109e0:	1000021e 	bne	r2,zero,109ec <___vfprintf_internal_r+0x1f0>
   109e4:	18c01a60 	cmpeqi	r3,r3,105
   109e8:	183f9b26 	beq	r3,zero,10858 <___vfprintf_internal_r+0x5c>
   109ec:	b8800104 	addi	r2,r23,4
   109f0:	d8800415 	stw	r2,16(sp)
   109f4:	d8800017 	ldw	r2,0(sp)
   109f8:	10009826 	beq	r2,zero,10c5c <___vfprintf_internal_r+0x460>
   109fc:	bdc00017 	ldw	r23,0(r23)
   10a00:	b8009a0e 	bge	r23,zero,10c6c <___vfprintf_internal_r+0x470>
   10a04:	05efc83a 	sub	r23,zero,r23
   10a08:	02400044 	movi	r9,1
   10a0c:	df000804 	addi	fp,sp,32
   10a10:	e00d883a 	mov	r6,fp
   10a14:	b800541e 	bne	r23,zero,10b68 <___vfprintf_internal_r+0x36c>
   10a18:	e185c83a 	sub	r2,fp,r6
   10a1c:	d8800315 	stw	r2,12(sp)
   10a20:	b085c83a 	sub	r2,r22,r2
   10a24:	00800b0e 	bge	zero,r2,10a54 <___vfprintf_internal_r+0x258>
   10a28:	d8c01004 	addi	r3,sp,64
   10a2c:	e0c0072e 	bgeu	fp,r3,10a4c <___vfprintf_internal_r+0x250>
   10a30:	e085883a 	add	r2,fp,r2
   10a34:	01000c04 	movi	r4,48
   10a38:	e7000044 	addi	fp,fp,1
   10a3c:	e13fffc5 	stb	r4,-1(fp)
   10a40:	17000226 	beq	r2,fp,10a4c <___vfprintf_internal_r+0x250>
   10a44:	d8c01004 	addi	r3,sp,64
   10a48:	e0fffb36 	bltu	fp,r3,10a38 <___vfprintf_internal_r+0x23c>
   10a4c:	e185c83a 	sub	r2,fp,r6
   10a50:	d8800315 	stw	r2,12(sp)
   10a54:	d8800317 	ldw	r2,12(sp)
   10a58:	4891883a 	add	r8,r9,r2
   10a5c:	d8800117 	ldw	r2,4(sp)
   10a60:	9a2fc83a 	sub	r23,r19,r8
   10a64:	10005926 	beq	r2,zero,10bcc <___vfprintf_internal_r+0x3d0>
   10a68:	48000a26 	beq	r9,zero,10a94 <___vfprintf_internal_r+0x298>
   10a6c:	00800b44 	movi	r2,45
   10a70:	d88007c5 	stb	r2,31(sp)
   10a74:	88800117 	ldw	r2,4(r17)
   10a78:	01c00044 	movi	r7,1
   10a7c:	d98007c4 	addi	r6,sp,31
   10a80:	880b883a 	mov	r5,r17
   10a84:	9009883a 	mov	r4,r18
   10a88:	103ee83a 	callr	r2
   10a8c:	103f8d1e 	bne	r2,zero,108c4 <___vfprintf_internal_r+0xc8>
   10a90:	84000044 	addi	r16,r16,1
   10a94:	05c0070e 	bge	zero,r23,10ab4 <___vfprintf_internal_r+0x2b8>
   10a98:	b80f883a 	mov	r7,r23
   10a9c:	01800c04 	movi	r6,48
   10aa0:	880b883a 	mov	r5,r17
   10aa4:	9009883a 	mov	r4,r18
   10aa8:	00107900 	call	10790 <print_repeat>
   10aac:	103f851e 	bne	r2,zero,108c4 <___vfprintf_internal_r+0xc8>
   10ab0:	85e1883a 	add	r16,r16,r23
   10ab4:	d8800317 	ldw	r2,12(sp)
   10ab8:	e011883a 	mov	r8,fp
   10abc:	172fc83a 	sub	r23,r2,fp
   10ac0:	ba05883a 	add	r2,r23,r8
   10ac4:	00805716 	blt	zero,r2,10c24 <___vfprintf_internal_r+0x428>
   10ac8:	8707883a 	add	r3,r16,fp
   10acc:	ddc00417 	ldw	r23,16(sp)
   10ad0:	1a21c83a 	sub	r16,r3,r8
   10ad4:	003f6006 	br	10858 <___vfprintf_internal_r+0x5c>
   10ad8:	18801d60 	cmpeqi	r2,r3,117
   10adc:	10005f1e 	bne	r2,zero,10c5c <___vfprintf_internal_r+0x460>
   10ae0:	18801e20 	cmpeqi	r2,r3,120
   10ae4:	10001e1e 	bne	r2,zero,10b60 <___vfprintf_internal_r+0x364>
   10ae8:	18c01ce0 	cmpeqi	r3,r3,115
   10aec:	183f5a26 	beq	r3,zero,10858 <___vfprintf_internal_r+0x5c>
   10af0:	b8800104 	addi	r2,r23,4
   10af4:	d8800315 	stw	r2,12(sp)
   10af8:	b8800017 	ldw	r2,0(r23)
   10afc:	1009883a 	mov	r4,r2
   10b00:	1039883a 	mov	fp,r2
   10b04:	0010dd80 	call	10dd8 <strlen>
   10b08:	988fc83a 	sub	r7,r19,r2
   10b0c:	102f883a 	mov	r23,r2
   10b10:	01c0080e 	bge	zero,r7,10b34 <___vfprintf_internal_r+0x338>
   10b14:	01800804 	movi	r6,32
   10b18:	880b883a 	mov	r5,r17
   10b1c:	9009883a 	mov	r4,r18
   10b20:	d9c00415 	stw	r7,16(sp)
   10b24:	00107900 	call	10790 <print_repeat>
   10b28:	103f661e 	bne	r2,zero,108c4 <___vfprintf_internal_r+0xc8>
   10b2c:	d9c00417 	ldw	r7,16(sp)
   10b30:	81e1883a 	add	r16,r16,r7
   10b34:	88800117 	ldw	r2,4(r17)
   10b38:	b80f883a 	mov	r7,r23
   10b3c:	e00d883a 	mov	r6,fp
   10b40:	880b883a 	mov	r5,r17
   10b44:	9009883a 	mov	r4,r18
   10b48:	103ee83a 	callr	r2
   10b4c:	103f5d1e 	bne	r2,zero,108c4 <___vfprintf_internal_r+0xc8>
   10b50:	85e1883a 	add	r16,r16,r23
   10b54:	ddc00317 	ldw	r23,12(sp)
   10b58:	003f4306 	br	10868 <___vfprintf_internal_r+0x6c>
   10b5c:	dd400215 	stw	r21,8(sp)
   10b60:	05000404 	movi	r20,16
   10b64:	00003d06 	br	10c5c <___vfprintf_internal_r+0x460>
   10b68:	b809883a 	mov	r4,r23
   10b6c:	a00b883a 	mov	r5,r20
   10b70:	da400615 	stw	r9,24(sp)
   10b74:	00105fc0 	call	105fc <__udivsi3>
   10b78:	1009883a 	mov	r4,r2
   10b7c:	a00b883a 	mov	r5,r20
   10b80:	d8800315 	stw	r2,12(sp)
   10b84:	00106bc0 	call	106bc <__mulsi3>
   10b88:	b8afc83a 	sub	r23,r23,r2
   10b8c:	b8800288 	cmpgei	r2,r23,10
   10b90:	d9000317 	ldw	r4,12(sp)
   10b94:	da400617 	ldw	r9,24(sp)
   10b98:	d9800804 	addi	r6,sp,32
   10b9c:	1000051e 	bne	r2,zero,10bb4 <___vfprintf_internal_r+0x3b8>
   10ba0:	bdc00c04 	addi	r23,r23,48
   10ba4:	e7000044 	addi	fp,fp,1
   10ba8:	e5ffffc5 	stb	r23,-1(fp)
   10bac:	202f883a 	mov	r23,r4
   10bb0:	003f9806 	br	10a14 <___vfprintf_internal_r+0x218>
   10bb4:	d8800217 	ldw	r2,8(sp)
   10bb8:	10000226 	beq	r2,zero,10bc4 <___vfprintf_internal_r+0x3c8>
   10bbc:	bdc00dc4 	addi	r23,r23,55
   10bc0:	003ff806 	br	10ba4 <___vfprintf_internal_r+0x3a8>
   10bc4:	bdc015c4 	addi	r23,r23,87
   10bc8:	003ff606 	br	10ba4 <___vfprintf_internal_r+0x3a8>
   10bcc:	05c0090e 	bge	zero,r23,10bf4 <___vfprintf_internal_r+0x3f8>
   10bd0:	b80f883a 	mov	r7,r23
   10bd4:	01800804 	movi	r6,32
   10bd8:	880b883a 	mov	r5,r17
   10bdc:	9009883a 	mov	r4,r18
   10be0:	da400615 	stw	r9,24(sp)
   10be4:	00107900 	call	10790 <print_repeat>
   10be8:	103f361e 	bne	r2,zero,108c4 <___vfprintf_internal_r+0xc8>
   10bec:	da400617 	ldw	r9,24(sp)
   10bf0:	85e1883a 	add	r16,r16,r23
   10bf4:	483faf26 	beq	r9,zero,10ab4 <___vfprintf_internal_r+0x2b8>
   10bf8:	00800b44 	movi	r2,45
   10bfc:	d88007c5 	stb	r2,31(sp)
   10c00:	88800117 	ldw	r2,4(r17)
   10c04:	01c00044 	movi	r7,1
   10c08:	d98007c4 	addi	r6,sp,31
   10c0c:	880b883a 	mov	r5,r17
   10c10:	9009883a 	mov	r4,r18
   10c14:	103ee83a 	callr	r2
   10c18:	103f2a1e 	bne	r2,zero,108c4 <___vfprintf_internal_r+0xc8>
   10c1c:	84000044 	addi	r16,r16,1
   10c20:	003fa406 	br	10ab4 <___vfprintf_internal_r+0x2b8>
   10c24:	40bfffc3 	ldbu	r2,-1(r8)
   10c28:	01c00044 	movi	r7,1
   10c2c:	423fffc4 	addi	r8,r8,-1
   10c30:	d88007c5 	stb	r2,31(sp)
   10c34:	88800117 	ldw	r2,4(r17)
   10c38:	d98007c4 	addi	r6,sp,31
   10c3c:	880b883a 	mov	r5,r17
   10c40:	9009883a 	mov	r4,r18
   10c44:	da000315 	stw	r8,12(sp)
   10c48:	103ee83a 	callr	r2
   10c4c:	da000317 	ldw	r8,12(sp)
   10c50:	103f9b26 	beq	r2,zero,10ac0 <___vfprintf_internal_r+0x2c4>
   10c54:	003f1b06 	br	108c4 <___vfprintf_internal_r+0xc8>
   10c58:	05000204 	movi	r20,8
   10c5c:	b8800104 	addi	r2,r23,4
   10c60:	d8800415 	stw	r2,16(sp)
   10c64:	bdc00017 	ldw	r23,0(r23)
   10c68:	d8000015 	stw	zero,0(sp)
   10c6c:	0013883a 	mov	r9,zero
   10c70:	003f6606 	br	10a0c <___vfprintf_internal_r+0x210>
   10c74:	98800090 	cmplti	r2,r19,2
   10c78:	1000091e 	bne	r2,zero,10ca0 <___vfprintf_internal_r+0x4a4>
   10c7c:	99ffffc4 	addi	r7,r19,-1
   10c80:	01800804 	movi	r6,32
   10c84:	880b883a 	mov	r5,r17
   10c88:	9009883a 	mov	r4,r18
   10c8c:	d9c00315 	stw	r7,12(sp)
   10c90:	00107900 	call	10790 <print_repeat>
   10c94:	103f0b1e 	bne	r2,zero,108c4 <___vfprintf_internal_r+0xc8>
   10c98:	d9c00317 	ldw	r7,12(sp)
   10c9c:	81e1883a 	add	r16,r16,r7
   10ca0:	b8800017 	ldw	r2,0(r23)
   10ca4:	b8c00104 	addi	r3,r23,4
   10ca8:	01c00044 	movi	r7,1
   10cac:	d8800805 	stb	r2,32(sp)
   10cb0:	88800117 	ldw	r2,4(r17)
   10cb4:	d9800804 	addi	r6,sp,32
   10cb8:	880b883a 	mov	r5,r17
   10cbc:	9009883a 	mov	r4,r18
   10cc0:	d8c00315 	stw	r3,12(sp)
   10cc4:	103ee83a 	callr	r2
   10cc8:	103efe1e 	bne	r2,zero,108c4 <___vfprintf_internal_r+0xc8>
   10ccc:	d8c00317 	ldw	r3,12(sp)
   10cd0:	84000044 	addi	r16,r16,1
   10cd4:	182f883a 	mov	r23,r3
   10cd8:	003ee306 	br	10868 <___vfprintf_internal_r+0x6c>
   10cdc:	00800044 	movi	r2,1
   10ce0:	d8000215 	stw	zero,8(sp)
   10ce4:	002b883a 	mov	r21,zero
   10ce8:	d8000115 	stw	zero,4(sp)
   10cec:	d8800015 	stw	r2,0(sp)
   10cf0:	05000284 	movi	r20,10
   10cf4:	05bfffc4 	movi	r22,-1
   10cf8:	04ffffc4 	movi	r19,-1
   10cfc:	003eda06 	br	10868 <___vfprintf_internal_r+0x6c>
   10d00:	00800044 	movi	r2,1
   10d04:	d8800115 	stw	r2,4(sp)
   10d08:	003f0a06 	br	10934 <___vfprintf_internal_r+0x138>
   10d0c:	05400044 	movi	r21,1
   10d10:	008000c4 	movi	r2,3
   10d14:	003ed406 	br	10868 <___vfprintf_internal_r+0x6c>

00010d18 <__vfprintf_internal>:
   10d18:	00800074 	movhi	r2,1
   10d1c:	300f883a 	mov	r7,r6
   10d20:	280d883a 	mov	r6,r5
   10d24:	200b883a 	mov	r5,r4
   10d28:	11077117 	ldw	r4,7620(r2)
   10d2c:	00107fc1 	jmpi	107fc <___vfprintf_internal_r>

00010d30 <__sfvwrite_small_dev>:
   10d30:	2880000b 	ldhu	r2,0(r5)
   10d34:	1080020c 	andi	r2,r2,8
   10d38:	10002526 	beq	r2,zero,10dd0 <__sfvwrite_small_dev+0xa0>
   10d3c:	2880008f 	ldh	r2,2(r5)
   10d40:	defffb04 	addi	sp,sp,-20
   10d44:	dcc00315 	stw	r19,12(sp)
   10d48:	dc800215 	stw	r18,8(sp)
   10d4c:	dc400115 	stw	r17,4(sp)
   10d50:	dc000015 	stw	r16,0(sp)
   10d54:	dfc00415 	stw	ra,16(sp)
   10d58:	2027883a 	mov	r19,r4
   10d5c:	2821883a 	mov	r16,r5
   10d60:	3025883a 	mov	r18,r6
   10d64:	3823883a 	mov	r17,r7
   10d68:	1000100e 	bge	r2,zero,10dac <__sfvwrite_small_dev+0x7c>
   10d6c:	8080000b 	ldhu	r2,0(r16)
   10d70:	10801014 	ori	r2,r2,64
   10d74:	8080000d 	sth	r2,0(r16)
   10d78:	00bfffc4 	movi	r2,-1
   10d7c:	00000d06 	br	10db4 <__sfvwrite_small_dev+0x84>
   10d80:	88810050 	cmplti	r2,r17,1025
   10d84:	880f883a 	mov	r7,r17
   10d88:	1000011e 	bne	r2,zero,10d90 <__sfvwrite_small_dev+0x60>
   10d8c:	01c10004 	movi	r7,1024
   10d90:	8140008f 	ldh	r5,2(r16)
   10d94:	900d883a 	mov	r6,r18
   10d98:	9809883a 	mov	r4,r19
   10d9c:	0010df40 	call	10df4 <_write_r>
   10da0:	00bff20e 	bge	zero,r2,10d6c <__sfvwrite_small_dev+0x3c>
   10da4:	88a3c83a 	sub	r17,r17,r2
   10da8:	90a5883a 	add	r18,r18,r2
   10dac:	047ff416 	blt	zero,r17,10d80 <__sfvwrite_small_dev+0x50>
   10db0:	0005883a 	mov	r2,zero
   10db4:	dfc00417 	ldw	ra,16(sp)
   10db8:	dcc00317 	ldw	r19,12(sp)
   10dbc:	dc800217 	ldw	r18,8(sp)
   10dc0:	dc400117 	ldw	r17,4(sp)
   10dc4:	dc000017 	ldw	r16,0(sp)
   10dc8:	dec00504 	addi	sp,sp,20
   10dcc:	f800283a 	ret
   10dd0:	00bfffc4 	movi	r2,-1
   10dd4:	f800283a 	ret

00010dd8 <strlen>:
   10dd8:	2005883a 	mov	r2,r4
   10ddc:	10c00007 	ldb	r3,0(r2)
   10de0:	1800021e 	bne	r3,zero,10dec <strlen+0x14>
   10de4:	1105c83a 	sub	r2,r2,r4
   10de8:	f800283a 	ret
   10dec:	10800044 	addi	r2,r2,1
   10df0:	003ffa06 	br	10ddc <strlen+0x4>

00010df4 <_write_r>:
   10df4:	defffe04 	addi	sp,sp,-8
   10df8:	dc000015 	stw	r16,0(sp)
   10dfc:	00800074 	movhi	r2,1
   10e00:	2021883a 	mov	r16,r4
   10e04:	2809883a 	mov	r4,r5
   10e08:	300b883a 	mov	r5,r6
   10e0c:	380d883a 	mov	r6,r7
   10e10:	dfc00115 	stw	ra,4(sp)
   10e14:	1007dc15 	stw	zero,8048(r2)
   10e18:	0010ef40 	call	10ef4 <write>
   10e1c:	10ffffd8 	cmpnei	r3,r2,-1
   10e20:	1800041e 	bne	r3,zero,10e34 <_write_r+0x40>
   10e24:	00c00074 	movhi	r3,1
   10e28:	18c7dc17 	ldw	r3,8048(r3)
   10e2c:	18000126 	beq	r3,zero,10e34 <_write_r+0x40>
   10e30:	80c00015 	stw	r3,0(r16)
   10e34:	dfc00117 	ldw	ra,4(sp)
   10e38:	dc000017 	ldw	r16,0(sp)
   10e3c:	dec00204 	addi	sp,sp,8
   10e40:	f800283a 	ret

00010e44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10e44:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10e48:	01000074 	movhi	r4,1
   10e4c:	01400074 	movhi	r5,1
   10e50:	dfc00015 	stw	ra,0(sp)
   10e54:	21071604 	addi	r4,r4,7256
   10e58:	29477904 	addi	r5,r5,7652
   10e5c:	21400426 	beq	r4,r5,10e70 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
   10e60:	01800074 	movhi	r6,1
   10e64:	31877904 	addi	r6,r6,7652
   10e68:	310dc83a 	sub	r6,r6,r4
   10e6c:	00106e40 	call	106e4 <memcpy>
  if (to != from)
   10e70:	01000074 	movhi	r4,1
   10e74:	01400074 	movhi	r5,1
   10e78:	21000804 	addi	r4,r4,32
   10e7c:	29400804 	addi	r5,r5,32
   10e80:	21400426 	beq	r4,r5,10e94 <alt_load+0x50>
      *to++ = *from++;
   10e84:	01800074 	movhi	r6,1
   10e88:	31800804 	addi	r6,r6,32
   10e8c:	310dc83a 	sub	r6,r6,r4
   10e90:	00106e40 	call	106e4 <memcpy>
  if (to != from)
   10e94:	01000074 	movhi	r4,1
   10e98:	01400074 	movhi	r5,1
   10e9c:	21048c04 	addi	r4,r4,4656
   10ea0:	29448c04 	addi	r5,r5,4656
   10ea4:	21400426 	beq	r4,r5,10eb8 <alt_load+0x74>
      *to++ = *from++;
   10ea8:	01800074 	movhi	r6,1
   10eac:	31871604 	addi	r6,r6,7256
   10eb0:	310dc83a 	sub	r6,r6,r4
   10eb4:	00106e40 	call	106e4 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10eb8:	00111100 	call	11110 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10ebc:	dfc00017 	ldw	ra,0(sp)
   10ec0:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   10ec4:	00111f41 	jmpi	111f4 <alt_icache_flush_all>

00010ec8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10ec8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10ecc:	0009883a 	mov	r4,zero
{
   10ed0:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   10ed4:	0010f500 	call	10f50 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10ed8:	0010f700 	call	10f70 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10edc:	d1a06d17 	ldw	r6,-32332(gp)
   10ee0:	d1606e17 	ldw	r5,-32328(gp)
   10ee4:	d1206f17 	ldw	r4,-32324(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10ee8:	dfc00017 	ldw	ra,0(sp)
   10eec:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   10ef0:	00103b01 	jmpi	103b0 <main>

00010ef4 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10ef4:	213fffc4 	addi	r4,r4,-1
   10ef8:	210000a8 	cmpgeui	r4,r4,2
   10efc:	2000041e 	bne	r4,zero,10f10 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   10f00:	01000074 	movhi	r4,1
   10f04:	000f883a 	mov	r7,zero
   10f08:	21077204 	addi	r4,r4,7624
   10f0c:	0010f801 	jmpi	10f80 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10f10:	d0a00817 	ldw	r2,-32736(gp)
   10f14:	10000926 	beq	r2,zero,10f3c <write+0x48>
{
   10f18:	deffff04 	addi	sp,sp,-4
   10f1c:	dfc00015 	stw	ra,0(sp)
   10f20:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10f24:	00c01444 	movi	r3,81
   10f28:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10f2c:	00bfffc4 	movi	r2,-1
   10f30:	dfc00017 	ldw	ra,0(sp)
   10f34:	dec00104 	addi	sp,sp,4
   10f38:	f800283a 	ret
   10f3c:	d0a06c04 	addi	r2,gp,-32336
        ALT_ERRNO = EBADFD;
   10f40:	00c01444 	movi	r3,81
   10f44:	10c00015 	stw	r3,0(r2)
}
   10f48:	00bfffc4 	movi	r2,-1
   10f4c:	f800283a 	ret

00010f50 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10f50:	deffff04 	addi	sp,sp,-4
   10f54:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10f58:	00111f80 	call	111f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10f5c:	00800044 	movi	r2,1
   10f60:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10f64:	dfc00017 	ldw	ra,0(sp)
   10f68:	dec00104 	addi	sp,sp,4
   10f6c:	f800283a 	ret

00010f70 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10f70:	01000074 	movhi	r4,1
   10f74:	d1600404 	addi	r5,gp,-32752
   10f78:	21074f04 	addi	r4,r4,7484
   10f7c:	001111c1 	jmpi	1111c <alt_dev_llist_insert>

00010f80 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10f80:	20c00017 	ldw	r3,0(r4)
{
   10f84:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   10f88:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10f8c:	01bfffd4 	movui	r6,65535
  while (ptr < end)
   10f90:	29000136 	bltu	r5,r4,10f98 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   10f94:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10f98:	19c00137 	ldwio	r7,4(r3)
   10f9c:	31fffc2e 	bgeu	r6,r7,10f90 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10fa0:	29c00007 	ldb	r7,0(r5)
   10fa4:	29400044 	addi	r5,r5,1
   10fa8:	19c00035 	stwio	r7,0(r3)
   10fac:	003ff806 	br	10f90 <altera_avalon_jtag_uart_write+0x10>

00010fb0 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   10fb0:	d1600404 	addi	r5,gp,-32752
   10fb4:	00111841 	jmpi	11184 <alt_find_dev>

00010fb8 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   10fb8:	20800a17 	ldw	r2,40(r4)
   10fbc:	10800023 	ldbuio	r2,0(r2)
   10fc0:	28800005 	stb	r2,0(r5)

	return 0;
}
   10fc4:	0005883a 	mov	r2,zero
   10fc8:	f800283a 	ret

00010fcc <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10fcc:	20800a17 	ldw	r2,40(r4)
   10fd0:	29400fcc 	andi	r5,r5,63
   10fd4:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10fd8:	20800a17 	ldw	r2,40(r4)
   10fdc:	10800063 	ldbuio	r2,1(r2)
   10fe0:	30800005 	stb	r2,0(r6)

	return 0;
}
   10fe4:	0005883a 	mov	r2,zero
   10fe8:	f800283a 	ret

00010fec <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10fec:	20800a17 	ldw	r2,40(r4)
   10ff0:	29400fcc 	andi	r5,r5,63
   10ff4:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   10ff8:	20800a17 	ldw	r2,40(r4)
   10ffc:	11800065 	stbio	r6,1(r2)

	return 0;
}
   11000:	0005883a 	mov	r2,zero
   11004:	f800283a 	ret

00011008 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11008:	20800a17 	ldw	r2,40(r4)
   1100c:	00c00c84 	movi	r3,50
   11010:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11014:	20800a17 	ldw	r2,40(r4)
   11018:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1101c:	00c00cc4 	movi	r3,51
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11020:	10803fcc 	andi	r2,r2,255
   11024:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11028:	20800a17 	ldw	r2,40(r4)
   1102c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11030:	20800a17 	ldw	r2,40(r4)
   11034:	10800063 	ldbuio	r2,1(r2)
   11038:	10803fcc 	andi	r2,r2,255
   1103c:	28c00017 	ldw	r3,0(r5)
   11040:	1004923a 	slli	r2,r2,8
   11044:	10c5883a 	add	r2,r2,r3

	if (*(x_axis) & 0x00008000)
   11048:	10e0000c 	andi	r3,r2,32768
   1104c:	18000126 	beq	r3,zero,11054 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   11050:	10bffff4 	orhi	r2,r2,65535
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11054:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11058:	0005883a 	mov	r2,zero
   1105c:	f800283a 	ret

00011060 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11060:	20800a17 	ldw	r2,40(r4)
   11064:	00c00d04 	movi	r3,52
   11068:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1106c:	20800a17 	ldw	r2,40(r4)
   11070:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11074:	00c00d44 	movi	r3,53
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11078:	10803fcc 	andi	r2,r2,255
   1107c:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11080:	20800a17 	ldw	r2,40(r4)
   11084:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11088:	20800a17 	ldw	r2,40(r4)
   1108c:	10800063 	ldbuio	r2,1(r2)
   11090:	10803fcc 	andi	r2,r2,255
   11094:	28c00017 	ldw	r3,0(r5)
   11098:	1004923a 	slli	r2,r2,8
   1109c:	10c5883a 	add	r2,r2,r3

	if (*(y_axis) & 0x00008000)
   110a0:	10e0000c 	andi	r3,r2,32768
   110a4:	18000126 	beq	r3,zero,110ac <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   110a8:	10bffff4 	orhi	r2,r2,65535
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   110ac:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   110b0:	0005883a 	mov	r2,zero
   110b4:	f800283a 	ret

000110b8 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   110b8:	20800a17 	ldw	r2,40(r4)
   110bc:	00c00d84 	movi	r3,54
   110c0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   110c4:	20800a17 	ldw	r2,40(r4)
   110c8:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   110cc:	00c00dc4 	movi	r3,55
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   110d0:	10803fcc 	andi	r2,r2,255
   110d4:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   110d8:	20800a17 	ldw	r2,40(r4)
   110dc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   110e0:	20800a17 	ldw	r2,40(r4)
   110e4:	10800063 	ldbuio	r2,1(r2)
   110e8:	10803fcc 	andi	r2,r2,255
   110ec:	28c00017 	ldw	r3,0(r5)
   110f0:	1004923a 	slli	r2,r2,8
   110f4:	10c5883a 	add	r2,r2,r3

	if (*(z_axis) & 0x00008000)
   110f8:	10e0000c 	andi	r3,r2,32768
   110fc:	18000126 	beq	r3,zero,11104 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   11100:	10bffff4 	orhi	r2,r2,65535
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11104:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11108:	0005883a 	mov	r2,zero
   1110c:	f800283a 	ret

00011110 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11110:	f800283a 	ret

00011114 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11114:	3005883a 	mov	r2,r6
  return len;
}
   11118:	f800283a 	ret

0001111c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1111c:	20000226 	beq	r4,zero,11128 <alt_dev_llist_insert+0xc>
   11120:	20800217 	ldw	r2,8(r4)
   11124:	10000b1e 	bne	r2,zero,11154 <alt_dev_llist_insert+0x38>
   11128:	d0a00817 	ldw	r2,-32736(gp)
   1112c:	10001026 	beq	r2,zero,11170 <alt_dev_llist_insert+0x54>
{
   11130:	deffff04 	addi	sp,sp,-4
   11134:	dfc00015 	stw	ra,0(sp)
   11138:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
   1113c:	00c00584 	movi	r3,22
   11140:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11144:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11148:	dfc00017 	ldw	ra,0(sp)
   1114c:	dec00104 	addi	sp,sp,4
   11150:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   11154:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
   11158:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   1115c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   11160:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   11164:	29000015 	stw	r4,0(r5)
  return 0;  
   11168:	0005883a 	mov	r2,zero
   1116c:	f800283a 	ret
   11170:	d0a06c04 	addi	r2,gp,-32336
    ALT_ERRNO = EINVAL;
   11174:	00c00584 	movi	r3,22
   11178:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1117c:	00bffa84 	movi	r2,-22
}
   11180:	f800283a 	ret

00011184 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11184:	defffb04 	addi	sp,sp,-20
   11188:	dcc00315 	stw	r19,12(sp)
   1118c:	dc800215 	stw	r18,8(sp)
   11190:	dc400115 	stw	r17,4(sp)
   11194:	dc000015 	stw	r16,0(sp)
   11198:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
   1119c:	2c000017 	ldw	r16,0(r5)
{
   111a0:	2027883a 	mov	r19,r4
   111a4:	2823883a 	mov	r17,r5
  alt_32 len;

  len  = strlen(name) + 1;
   111a8:	0010dd80 	call	10dd8 <strlen>
   111ac:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   111b0:	8440091e 	bne	r16,r17,111d8 <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   111b4:	0021883a 	mov	r16,zero
}
   111b8:	8005883a 	mov	r2,r16
   111bc:	dfc00417 	ldw	ra,16(sp)
   111c0:	dcc00317 	ldw	r19,12(sp)
   111c4:	dc800217 	ldw	r18,8(sp)
   111c8:	dc400117 	ldw	r17,4(sp)
   111cc:	dc000017 	ldw	r16,0(sp)
   111d0:	dec00504 	addi	sp,sp,20
   111d4:	f800283a 	ret
    if (!memcmp (next->name, name, len))
   111d8:	81000217 	ldw	r4,8(r16)
   111dc:	900d883a 	mov	r6,r18
   111e0:	980b883a 	mov	r5,r19
   111e4:	00112000 	call	11200 <memcmp>
   111e8:	103ff326 	beq	r2,zero,111b8 <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
   111ec:	84000017 	ldw	r16,0(r16)
   111f0:	003fef06 	br	111b0 <alt_find_dev+0x2c>

000111f4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   111f4:	f800283a 	ret

000111f8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   111f8:	000170fa 	wrctl	ienable,zero
}
   111fc:	f800283a 	ret

00011200 <memcmp>:
   11200:	0007883a 	mov	r3,zero
   11204:	30c0021e 	bne	r6,r3,11210 <memcmp+0x10>
   11208:	0005883a 	mov	r2,zero
   1120c:	f800283a 	ret
   11210:	20c5883a 	add	r2,r4,r3
   11214:	18c00044 	addi	r3,r3,1
   11218:	28cf883a 	add	r7,r5,r3
   1121c:	10800003 	ldbu	r2,0(r2)
   11220:	39ffffc3 	ldbu	r7,-1(r7)
   11224:	11fff726 	beq	r2,r7,11204 <memcmp+0x4>
   11228:	11c5c83a 	sub	r2,r2,r7
   1122c:	f800283a 	ret
