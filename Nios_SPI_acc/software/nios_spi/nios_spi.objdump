
nios_spi.elf:     file format elf32-littlenios2
nios_spi.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000014f4 memsz 0x000014f4 flags r-x
    LOAD off    0x00002514 vaddr 0x00011514 paddr 0x000116a4 align 2**12
         filesz 0x00000190 memsz 0x00000190 flags rw-
    LOAD off    0x00000834 vaddr 0x00011834 paddr 0x00011834 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  000026a4  2**0
                  CONTENTS
  2 .text         0000145c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000098  0001147c  0001147c  0000247c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000190  00011514  000116a4  00002514  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  00011834  00011834  00002834  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0001184c  0001184c  000026a4  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000480  00000000  00000000  000026d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00008240  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002b70  00000000  00000000  0000ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00002175  00000000  00000000  0000d908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000684  00000000  00000000  0000fa80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000010af  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000060  00000000  00000000  000111b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  00011218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00001789  00000000  00000000  00011238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000025c  00000000  00000000  000129c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000f1b  00000000  00000000  00012c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00015242  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00015245  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00015251  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00015252  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00015253  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0001525e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00015269  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000007  00000000  00000000  00015274  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000027  00000000  00000000  0001527b  2**0
                  CONTENTS, READONLY
 28 .jdi          00004ea1  00000000  00000000  000152a2  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000325e8  00000000  00000000  0001a143  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
0001147c l    d  .rodata	00000000 .rodata
00011514 l    d  .rwdata	00000000 .rwdata
00011834 l    d  .bss	00000000 .bss
0001184c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
00010068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00010320 l     F .text	0000008c sbrk_aligned
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000106e8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00011514 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011684 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000115f8 l     O .rwdata	0000002c accelerometer_spi_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000112d4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00010f98 g     F .text	0000002c alt_main
000105f4 g     F .text	00000080 _puts_r
000116a4 g       *ABS*	00000000 __flash_rwdata_start
0001184c g       *ABS*	00000000 __alt_heap_start
000105ac g     F .text	00000048 printf
00010fc8 g     F .text	00000004 __malloc_unlock
000113c0 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00011130 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001183c g     O .bss	00000004 errno
00011844 g     O .bss	00000004 alt_argv
0001967c g       *ABS*	00000000 _gp
00011018 g     F .text	00000004 usleep
00011624 g     O .rwdata	00000030 alt_fd_list
00011344 g     F .text	00000070 alt_find_dev
00011454 g     F .text	00000028 memcpy
00010674 g     F .text	00000010 puts
00010200 g     F .text	00000010 malloc
00010570 g     F .text	0000003c _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010e54 g     F .text	00000064 .hidden __udivsi3
000113c8 g     F .text	0000005c alt_icache_flush
00010684 g     F .text	00000048 _sbrk_r
0001168c g     O .rwdata	00000004 alt_max_fd
0001167c g     O .rwdata	00000004 _global_impure_ptr
0001184c g       *ABS*	00000000 __bss_end
00011654 g     O .rwdata	00000028 alt_dev_null
000112bc g     F .text	00000018 alt_dcache_flush_all
000116a4 g       *ABS*	00000000 __ram_rwdata_end
00011690 g     O .rwdata	00000008 alt_dev_list
0001101c g     F .text	0000005c write
00011514 g       *ABS*	00000000 __ram_rodata_end
00011688 g     O .rwdata	00000004 jtag_uart_0
00010eb8 g     F .text	0000005c .hidden __umodsi3
0001184c g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
000110a8 g     F .text	00000030 altera_avalon_jtag_uart_write
00010754 g     F .text	000004fc ___vfprintf_internal_r
00010220 g     F .text	00000100 _free_r
00010020 g     F .text	0000004c _start
00011098 g     F .text	00000010 alt_sys_init
000110e0 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00011514 g       *ABS*	00000000 __ram_rwdata_start
0001147c g       *ABS*	00000000 __ram_rodata_start
00011238 g     F .text	00000084 alt_busy_sleep
00011188 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00011424 g     F .text	00000030 memcmp
0001184c g       *ABS*	00000000 __alt_stack_base
000112dc g     F .text	00000068 alt_dev_llist_insert
00010fc4 g     F .text	00000004 __malloc_lock
00010fcc g     F .text	0000004c sbrk
00010c68 g     F .text	000000a8 __sfvwrite_small_dev
00011834 g       *ABS*	00000000 __bss_start
0001006c g     F .text	00000194 main
00011840 g     O .bss	00000004 alt_envp
0001a000 g       *ABS*	00000000 __alt_heap_limit
000103ac g     F .text	000001c4 _malloc_r
000116a0 g     O .rwdata	00000004 alt_errno
00010d60 g     F .text	00000080 .hidden __divsi3
0001147c g       *ABS*	00000000 __flash_rodata_start
00011078 g     F .text	00000020 alt_irq_init
00010d10 g     F .text	00000050 _write_r
00011680 g     O .rwdata	00000004 _impure_ptr
00011848 g     O .bss	00000004 alt_argc
00011698 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000110d8 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
000116a4 g       *ABS*	00000000 _edata
0001184c g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010de0 g     F .text	00000074 .hidden __modsi3
000111e0 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
0001a000 g       *ABS*	00000000 __alt_data_end
0001001c g       .entry	00000000 _exit
000110f4 g     F .text	00000020 alt_up_accelerometer_spi_read
00011114 g     F .text	0000001c alt_up_accelerometer_spi_write
000106cc g     F .text	0000001c strlen
00011834 g     O .bss	00000004 __malloc_sbrk_start
000113b4 g     F .text	0000000c alt_icache_flush_all
00011838 g     O .bss	00000004 __malloc_free_list
00010c50 g     F .text	00000018 __vfprintf_internal
00010f14 g     F .text	00000084 alt_load
00010210 g     F .text	00000010 free



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08400814 	ori	at,at,32
    jmp r1
   10018:	0800683a 	jmp	at

0001001c <_exit>:
   1001c:	00000000 	call	0 <__reset-0x10000>

Disassembly of section .text:

00010020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   1002c:	00bffd16 	blt	zero,r2,10024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10030:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10034:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1003c:	d6a59f14 	ori	gp,gp,38524
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10040:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10044:	10860d14 	ori	r2,r2,6196

    movhi r3, %hi(__bss_end)
   10048:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1004c:	18c61314 	ori	r3,r3,6220

    beq r2, r3, 1f
   10050:	10c00326 	beq	r2,r3,10060 <_start+0x40>

0:
    stw zero, (r2)
   10054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1005c:	10fffd36 	bltu	r2,r3,10054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10060:	0010f140 	call	10f14 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10064:	0010f980 	call	10f98 <alt_main>

00010068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10068:	003fff06 	br	10068 <alt_after_alt_main>

0001006c <main>:

int main(void){

	alt_up_accelerometer_spi_dev * acc_dev;

	acc_dev = alt_up_accelerometer_spi_open_dev ("/dev/accelerometer_spi_0");
   1006c:	01000074 	movhi	r4,1
int main(void){
   10070:	defff604 	addi	sp,sp,-40
	acc_dev = alt_up_accelerometer_spi_open_dev ("/dev/accelerometer_spi_0");
   10074:	21051f04 	addi	r4,r4,5244
int main(void){
   10078:	dc000115 	stw	r16,4(sp)
   1007c:	dfc00915 	stw	ra,36(sp)
   10080:	ddc00815 	stw	r23,32(sp)
   10084:	dd800715 	stw	r22,28(sp)
   10088:	dd400615 	stw	r21,24(sp)
   1008c:	dd000515 	stw	r20,20(sp)
   10090:	dcc00415 	stw	r19,16(sp)
   10094:	dc800315 	stw	r18,12(sp)
   10098:	dc400215 	stw	r17,8(sp)
	acc_dev = alt_up_accelerometer_spi_open_dev ("/dev/accelerometer_spi_0");
   1009c:	00110d80 	call	110d8 <alt_up_accelerometer_spi_open_dev>
   100a0:	1021883a 	mov	r16,r2

	//
	if ( acc_dev == NULL)
   100a4:	1000531e 	bne	r2,zero,101f4 <main+0x188>
	printf ("Error: could not acc device \n");
   100a8:	01000074 	movhi	r4,1
   100ac:	21052604 	addi	r4,r4,5272
	else
	printf ("Opened acc device \n");
   100b0:	00106740 	call	10674 <puts>
	//
	// Attempts to debug
	//
	int foo, boo, loo;
	alt_u8 test = 0;
	foo = alt_up_accelerometer_spi_write(acc_dev, 0x31, 0x40);
   100b4:	01801004 	movi	r6,64
   100b8:	01400c44 	movi	r5,49
   100bc:	8009883a 	mov	r4,r16
	alt_u8 test = 0;
   100c0:	d80000c5 	stb	zero,3(sp)
	foo = alt_up_accelerometer_spi_write(acc_dev, 0x31, 0x40);
   100c4:	00111140 	call	11114 <alt_up_accelerometer_spi_write>
	usleep(100000);	// 1sec
   100c8:	010000b4 	movhi	r4,2
   100cc:	2121a804 	addi	r4,r4,-31072
	foo = alt_up_accelerometer_spi_write(acc_dev, 0x31, 0x40);
   100d0:	1023883a 	mov	r17,r2
	usleep(100000);	// 1sec
   100d4:	00110180 	call	11018 <usleep>
	boo = alt_up_accelerometer_spi_read(acc_dev, 0x00, &test);
   100d8:	d98000c4 	addi	r6,sp,3
   100dc:	000b883a 	mov	r5,zero
   100e0:	8009883a 	mov	r4,r16
   100e4:	00110f40 	call	110f4 <alt_up_accelerometer_spi_read>
	test = alt_up_accelerometer_spi_read_address_register(acc_dev, 0x00);
   100e8:	000b883a 	mov	r5,zero
   100ec:	8009883a 	mov	r4,r16
   100f0:	00110e00 	call	110e0 <alt_up_accelerometer_spi_read_address_register>
	usleep(100000);	// 1sec
   100f4:	010000b4 	movhi	r4,2
   100f8:	2121a804 	addi	r4,r4,-31072
	test = alt_up_accelerometer_spi_read_address_register(acc_dev, 0x00);
   100fc:	d88000c5 	stb	r2,3(sp)
	usleep(100000);	// 1sec
   10100:	00110180 	call	11018 <usleep>
	printf("test: %i\n", test);
   10104:	d94000c3 	ldbu	r5,3(sp)
   10108:	01000074 	movhi	r4,1
   1010c:	21053304 	addi	r4,r4,5324
   10110:	00105ac0 	call	105ac <printf>
	printf("foo: %i\n", foo);
   10114:	01000074 	movhi	r4,1
   10118:	880b883a 	mov	r5,r17
   1011c:	21053604 	addi	r4,r4,5336
   10120:	00105ac0 	call	105ac <printf>

	// original code
	//
	// accelerometer is supposed to reset enabled in +/- 2g mode
		int *xx;
		xx = (int*) malloc(sizeof(int));
   10124:	01000104 	movi	r4,4
   10128:	00102000 	call	10200 <malloc>

		int *yy;
		yy = (int*) malloc(sizeof(int));
   1012c:	01000104 	movi	r4,4
		xx = (int*) malloc(sizeof(int));
   10130:	1027883a 	mov	r19,r2
		yy = (int*) malloc(sizeof(int));
   10134:	00102000 	call	10200 <malloc>

		int *zz;
		zz = (int*) malloc(sizeof(int));
   10138:	01000104 	movi	r4,4
		yy = (int*) malloc(sizeof(int));
   1013c:	1025883a 	mov	r18,r2

	while(1){

	    if( alt_up_accelerometer_spi_read_x_axis(acc_dev, xx) == 0)
		printf("X is : %i\n", xx);
   10140:	05400074 	movhi	r21,1
		zz = (int*) malloc(sizeof(int));
   10144:	00102000 	call	10200 <malloc>

		if( alt_up_accelerometer_spi_read_y_axis(acc_dev, yy) == 0)
		printf("Y is : %i\n", yy);
   10148:	05800074 	movhi	r22,1

		if( alt_up_accelerometer_spi_read_z_axis(acc_dev, zz) == 0)
		printf("Z is : %i\n", zz);
   1014c:	05c00074 	movhi	r23,1

		usleep(100000);	// 1sec
   10150:	050000b4 	movhi	r20,2
		zz = (int*) malloc(sizeof(int));
   10154:	1023883a 	mov	r17,r2
		printf("X is : %i\n", xx);
   10158:	ad453904 	addi	r21,r21,5348
		printf("Y is : %i\n", yy);
   1015c:	b5853c04 	addi	r22,r22,5360
		printf("Z is : %i\n", zz);
   10160:	bdc53f04 	addi	r23,r23,5372
		usleep(100000);	// 1sec
   10164:	a521a804 	addi	r20,r20,-31072
	    if( alt_up_accelerometer_spi_read_x_axis(acc_dev, xx) == 0)
   10168:	980b883a 	mov	r5,r19
   1016c:	8009883a 	mov	r4,r16
   10170:	00111300 	call	11130 <alt_up_accelerometer_spi_read_x_axis>
   10174:	1000031e 	bne	r2,zero,10184 <main+0x118>
		printf("X is : %i\n", xx);
   10178:	980b883a 	mov	r5,r19
   1017c:	a809883a 	mov	r4,r21
   10180:	00105ac0 	call	105ac <printf>
		if( alt_up_accelerometer_spi_read_y_axis(acc_dev, yy) == 0)
   10184:	900b883a 	mov	r5,r18
   10188:	8009883a 	mov	r4,r16
   1018c:	00111880 	call	11188 <alt_up_accelerometer_spi_read_y_axis>
   10190:	1000031e 	bne	r2,zero,101a0 <main+0x134>
		printf("Y is : %i\n", yy);
   10194:	900b883a 	mov	r5,r18
   10198:	b009883a 	mov	r4,r22
   1019c:	00105ac0 	call	105ac <printf>
		if( alt_up_accelerometer_spi_read_z_axis(acc_dev, zz) == 0)
   101a0:	880b883a 	mov	r5,r17
   101a4:	8009883a 	mov	r4,r16
   101a8:	00111e00 	call	111e0 <alt_up_accelerometer_spi_read_z_axis>
   101ac:	1000031e 	bne	r2,zero,101bc <main+0x150>
		printf("Z is : %i\n", zz);
   101b0:	880b883a 	mov	r5,r17
   101b4:	b809883a 	mov	r4,r23
   101b8:	00105ac0 	call	105ac <printf>
		usleep(100000);	// 1sec
   101bc:	a009883a 	mov	r4,r20
   101c0:	00110180 	call	11018 <usleep>
		usleep(100000);	// 1sec
   101c4:	a009883a 	mov	r4,r20
   101c8:	00110180 	call	11018 <usleep>

		xx = (int*) malloc(sizeof(int));
   101cc:	01000104 	movi	r4,4
   101d0:	00102000 	call	10200 <malloc>
		yy = (int*) malloc(sizeof(int));
   101d4:	01000104 	movi	r4,4
		xx = (int*) malloc(sizeof(int));
   101d8:	1027883a 	mov	r19,r2
		yy = (int*) malloc(sizeof(int));
   101dc:	00102000 	call	10200 <malloc>
		zz = (int*) malloc(sizeof(int));
   101e0:	01000104 	movi	r4,4
		yy = (int*) malloc(sizeof(int));
   101e4:	1025883a 	mov	r18,r2
		zz = (int*) malloc(sizeof(int));
   101e8:	00102000 	call	10200 <malloc>
   101ec:	1023883a 	mov	r17,r2
	    if( alt_up_accelerometer_spi_read_x_axis(acc_dev, xx) == 0)
   101f0:	003fdd06 	br	10168 <main+0xfc>
	printf ("Opened acc device \n");
   101f4:	01000074 	movhi	r4,1
   101f8:	21052e04 	addi	r4,r4,5304
   101fc:	003fac06 	br	100b0 <main+0x44>

00010200 <malloc>:
   10200:	00800074 	movhi	r2,1
   10204:	200b883a 	mov	r5,r4
   10208:	1105a017 	ldw	r4,5760(r2)
   1020c:	00103ac1 	jmpi	103ac <_malloc_r>

00010210 <free>:
   10210:	00800074 	movhi	r2,1
   10214:	200b883a 	mov	r5,r4
   10218:	1105a017 	ldw	r4,5760(r2)
   1021c:	00102201 	jmpi	10220 <_free_r>

00010220 <_free_r>:
   10220:	28003e26 	beq	r5,zero,1031c <_free_r+0xfc>
   10224:	28bfff17 	ldw	r2,-4(r5)
   10228:	defffd04 	addi	sp,sp,-12
   1022c:	dc000115 	stw	r16,4(sp)
   10230:	dfc00215 	stw	ra,8(sp)
   10234:	2c3fff04 	addi	r16,r5,-4
   10238:	1000010e 	bge	r2,zero,10240 <_free_r+0x20>
   1023c:	80a1883a 	add	r16,r16,r2
   10240:	d9000015 	stw	r4,0(sp)
   10244:	0010fc40 	call	10fc4 <__malloc_lock>
   10248:	00800074 	movhi	r2,1
   1024c:	10860e17 	ldw	r2,6200(r2)
   10250:	d9000017 	ldw	r4,0(sp)
   10254:	1000071e 	bne	r2,zero,10274 <_free_r+0x54>
   10258:	80000115 	stw	zero,4(r16)
   1025c:	00800074 	movhi	r2,1
   10260:	14060e15 	stw	r16,6200(r2)
   10264:	dfc00217 	ldw	ra,8(sp)
   10268:	dc000117 	ldw	r16,4(sp)
   1026c:	dec00304 	addi	sp,sp,12
   10270:	0010fc81 	jmpi	10fc8 <__malloc_unlock>
   10274:	8080092e 	bgeu	r16,r2,1029c <_free_r+0x7c>
   10278:	81400017 	ldw	r5,0(r16)
   1027c:	8147883a 	add	r3,r16,r5
   10280:	10c0041e 	bne	r2,r3,10294 <_free_r+0x74>
   10284:	10c00017 	ldw	r3,0(r2)
   10288:	10800117 	ldw	r2,4(r2)
   1028c:	1947883a 	add	r3,r3,r5
   10290:	80c00015 	stw	r3,0(r16)
   10294:	80800115 	stw	r2,4(r16)
   10298:	003ff006 	br	1025c <_free_r+0x3c>
   1029c:	1007883a 	mov	r3,r2
   102a0:	10800117 	ldw	r2,4(r2)
   102a4:	10000126 	beq	r2,zero,102ac <_free_r+0x8c>
   102a8:	80bffc2e 	bgeu	r16,r2,1029c <_free_r+0x7c>
   102ac:	19400017 	ldw	r5,0(r3)
   102b0:	194d883a 	add	r6,r3,r5
   102b4:	34000b1e 	bne	r6,r16,102e4 <_free_r+0xc4>
   102b8:	81800017 	ldw	r6,0(r16)
   102bc:	298b883a 	add	r5,r5,r6
   102c0:	19400015 	stw	r5,0(r3)
   102c4:	194d883a 	add	r6,r3,r5
   102c8:	11bfe61e 	bne	r2,r6,10264 <_free_r+0x44>
   102cc:	11800017 	ldw	r6,0(r2)
   102d0:	10800117 	ldw	r2,4(r2)
   102d4:	314b883a 	add	r5,r6,r5
   102d8:	19400015 	stw	r5,0(r3)
   102dc:	18800115 	stw	r2,4(r3)
   102e0:	003fe006 	br	10264 <_free_r+0x44>
   102e4:	8180032e 	bgeu	r16,r6,102f4 <_free_r+0xd4>
   102e8:	00800304 	movi	r2,12
   102ec:	20800015 	stw	r2,0(r4)
   102f0:	003fdc06 	br	10264 <_free_r+0x44>
   102f4:	81800017 	ldw	r6,0(r16)
   102f8:	818b883a 	add	r5,r16,r6
   102fc:	1140041e 	bne	r2,r5,10310 <_free_r+0xf0>
   10300:	11400017 	ldw	r5,0(r2)
   10304:	10800117 	ldw	r2,4(r2)
   10308:	298b883a 	add	r5,r5,r6
   1030c:	81400015 	stw	r5,0(r16)
   10310:	80800115 	stw	r2,4(r16)
   10314:	1c000115 	stw	r16,4(r3)
   10318:	003fd206 	br	10264 <_free_r+0x44>
   1031c:	f800283a 	ret

00010320 <sbrk_aligned>:
   10320:	00800074 	movhi	r2,1
   10324:	10860d17 	ldw	r2,6196(r2)
   10328:	defffd04 	addi	sp,sp,-12
   1032c:	dc400115 	stw	r17,4(sp)
   10330:	dc000015 	stw	r16,0(sp)
   10334:	dfc00215 	stw	ra,8(sp)
   10338:	2023883a 	mov	r17,r4
   1033c:	2821883a 	mov	r16,r5
   10340:	1000041e 	bne	r2,zero,10354 <sbrk_aligned+0x34>
   10344:	000b883a 	mov	r5,zero
   10348:	00106840 	call	10684 <_sbrk_r>
   1034c:	00c00074 	movhi	r3,1
   10350:	18860d15 	stw	r2,6196(r3)
   10354:	800b883a 	mov	r5,r16
   10358:	8809883a 	mov	r4,r17
   1035c:	00106840 	call	10684 <_sbrk_r>
   10360:	10ffffd8 	cmpnei	r3,r2,-1
   10364:	1800071e 	bne	r3,zero,10384 <sbrk_aligned+0x64>
   10368:	043fffc4 	movi	r16,-1
   1036c:	8005883a 	mov	r2,r16
   10370:	dfc00217 	ldw	ra,8(sp)
   10374:	dc400117 	ldw	r17,4(sp)
   10378:	dc000017 	ldw	r16,0(sp)
   1037c:	dec00304 	addi	sp,sp,12
   10380:	f800283a 	ret
   10384:	140000c4 	addi	r16,r2,3
   10388:	00ffff04 	movi	r3,-4
   1038c:	80e0703a 	and	r16,r16,r3
   10390:	143ff626 	beq	r2,r16,1036c <sbrk_aligned+0x4c>
   10394:	808bc83a 	sub	r5,r16,r2
   10398:	8809883a 	mov	r4,r17
   1039c:	00106840 	call	10684 <_sbrk_r>
   103a0:	10bfffe0 	cmpeqi	r2,r2,-1
   103a4:	103ff126 	beq	r2,zero,1036c <sbrk_aligned+0x4c>
   103a8:	003fef06 	br	10368 <sbrk_aligned+0x48>

000103ac <_malloc_r>:
   103ac:	defffb04 	addi	sp,sp,-20
   103b0:	00bfff04 	movi	r2,-4
   103b4:	dc400115 	stw	r17,4(sp)
   103b8:	2c4000c4 	addi	r17,r5,3
   103bc:	88a2703a 	and	r17,r17,r2
   103c0:	8c400204 	addi	r17,r17,8
   103c4:	dc800215 	stw	r18,8(sp)
   103c8:	dfc00415 	stw	ra,16(sp)
   103cc:	dcc00315 	stw	r19,12(sp)
   103d0:	dc000015 	stw	r16,0(sp)
   103d4:	88800328 	cmpgeui	r2,r17,12
   103d8:	2025883a 	mov	r18,r4
   103dc:	10002a1e 	bne	r2,zero,10488 <_malloc_r+0xdc>
   103e0:	04400304 	movi	r17,12
   103e4:	89402936 	bltu	r17,r5,1048c <_malloc_r+0xe0>
   103e8:	9009883a 	mov	r4,r18
   103ec:	0010fc40 	call	10fc4 <__malloc_lock>
   103f0:	00800074 	movhi	r2,1
   103f4:	10860e17 	ldw	r2,6200(r2)
   103f8:	1021883a 	mov	r16,r2
   103fc:	80002d1e 	bne	r16,zero,104b4 <_malloc_r+0x108>
   10400:	880b883a 	mov	r5,r17
   10404:	9009883a 	mov	r4,r18
   10408:	00103200 	call	10320 <sbrk_aligned>
   1040c:	1021883a 	mov	r16,r2
   10410:	10bfffd8 	cmpnei	r2,r2,-1
   10414:	1000541e 	bne	r2,zero,10568 <_malloc_r+0x1bc>
   10418:	00800074 	movhi	r2,1
   1041c:	14060e17 	ldw	r16,6200(r2)
   10420:	8005883a 	mov	r2,r16
   10424:	1000481e 	bne	r2,zero,10548 <_malloc_r+0x19c>
   10428:	84c00017 	ldw	r19,0(r16)
   1042c:	000b883a 	mov	r5,zero
   10430:	9009883a 	mov	r4,r18
   10434:	84e7883a 	add	r19,r16,r19
   10438:	00106840 	call	10684 <_sbrk_r>
   1043c:	9880451e 	bne	r19,r2,10554 <_malloc_r+0x1a8>
   10440:	80800017 	ldw	r2,0(r16)
   10444:	8c4000c4 	addi	r17,r17,3
   10448:	88a3c83a 	sub	r17,r17,r2
   1044c:	00bfff04 	movi	r2,-4
   10450:	88a2703a 	and	r17,r17,r2
   10454:	8c400204 	addi	r17,r17,8
   10458:	88800328 	cmpgeui	r2,r17,12
   1045c:	1000011e 	bne	r2,zero,10464 <_malloc_r+0xb8>
   10460:	04400304 	movi	r17,12
   10464:	880b883a 	mov	r5,r17
   10468:	9009883a 	mov	r4,r18
   1046c:	00103200 	call	10320 <sbrk_aligned>
   10470:	10bfffe0 	cmpeqi	r2,r2,-1
   10474:	1000371e 	bne	r2,zero,10554 <_malloc_r+0x1a8>
   10478:	80800017 	ldw	r2,0(r16)
   1047c:	1445883a 	add	r2,r2,r17
   10480:	80800015 	stw	r2,0(r16)
   10484:	00001806 	br	104e8 <_malloc_r+0x13c>
   10488:	883fd60e 	bge	r17,zero,103e4 <_malloc_r+0x38>
   1048c:	00800304 	movi	r2,12
   10490:	90800015 	stw	r2,0(r18)
   10494:	0005883a 	mov	r2,zero
   10498:	dfc00417 	ldw	ra,16(sp)
   1049c:	dcc00317 	ldw	r19,12(sp)
   104a0:	dc800217 	ldw	r18,8(sp)
   104a4:	dc400117 	ldw	r17,4(sp)
   104a8:	dc000017 	ldw	r16,0(sp)
   104ac:	dec00504 	addi	sp,sp,20
   104b0:	f800283a 	ret
   104b4:	81000017 	ldw	r4,0(r16)
   104b8:	2449c83a 	sub	r4,r4,r17
   104bc:	20001f16 	blt	r4,zero,1053c <_malloc_r+0x190>
   104c0:	20c00330 	cmpltui	r3,r4,12
   104c4:	1800161e 	bne	r3,zero,10520 <_malloc_r+0x174>
   104c8:	84400015 	stw	r17,0(r16)
   104cc:	8447883a 	add	r3,r16,r17
   104d0:	1400111e 	bne	r2,r16,10518 <_malloc_r+0x16c>
   104d4:	00800074 	movhi	r2,1
   104d8:	10c60e15 	stw	r3,6200(r2)
   104dc:	80800117 	ldw	r2,4(r16)
   104e0:	19000015 	stw	r4,0(r3)
   104e4:	18800115 	stw	r2,4(r3)
   104e8:	9009883a 	mov	r4,r18
   104ec:	0010fc80 	call	10fc8 <__malloc_unlock>
   104f0:	013ffe04 	movi	r4,-8
   104f4:	808002c4 	addi	r2,r16,11
   104f8:	80c00104 	addi	r3,r16,4
   104fc:	1104703a 	and	r2,r2,r4
   10500:	10c9c83a 	sub	r4,r2,r3
   10504:	10ffe426 	beq	r2,r3,10498 <_malloc_r+0xec>
   10508:	8121883a 	add	r16,r16,r4
   1050c:	1887c83a 	sub	r3,r3,r2
   10510:	80c00015 	stw	r3,0(r16)
   10514:	003fe006 	br	10498 <_malloc_r+0xec>
   10518:	10c00115 	stw	r3,4(r2)
   1051c:	003fef06 	br	104dc <_malloc_r+0x130>
   10520:	80c00117 	ldw	r3,4(r16)
   10524:	1400031e 	bne	r2,r16,10534 <_malloc_r+0x188>
   10528:	00800074 	movhi	r2,1
   1052c:	10c60e15 	stw	r3,6200(r2)
   10530:	003fed06 	br	104e8 <_malloc_r+0x13c>
   10534:	10c00115 	stw	r3,4(r2)
   10538:	003feb06 	br	104e8 <_malloc_r+0x13c>
   1053c:	8005883a 	mov	r2,r16
   10540:	84000117 	ldw	r16,4(r16)
   10544:	003fad06 	br	103fc <_malloc_r+0x50>
   10548:	1021883a 	mov	r16,r2
   1054c:	10800117 	ldw	r2,4(r2)
   10550:	003fb406 	br	10424 <_malloc_r+0x78>
   10554:	00800304 	movi	r2,12
   10558:	90800015 	stw	r2,0(r18)
   1055c:	9009883a 	mov	r4,r18
   10560:	0010fc80 	call	10fc8 <__malloc_unlock>
   10564:	003fcb06 	br	10494 <_malloc_r+0xe8>
   10568:	84400015 	stw	r17,0(r16)
   1056c:	003fde06 	br	104e8 <_malloc_r+0x13c>

00010570 <_printf_r>:
   10570:	defffd04 	addi	sp,sp,-12
   10574:	dfc00015 	stw	ra,0(sp)
   10578:	d9800115 	stw	r6,4(sp)
   1057c:	d9c00215 	stw	r7,8(sp)
   10580:	21800217 	ldw	r6,8(r4)
   10584:	00c00074 	movhi	r3,1
   10588:	18c31a04 	addi	r3,r3,3176
   1058c:	30c00115 	stw	r3,4(r6)
   10590:	280d883a 	mov	r6,r5
   10594:	21400217 	ldw	r5,8(r4)
   10598:	d9c00104 	addi	r7,sp,4
   1059c:	00107540 	call	10754 <___vfprintf_internal_r>
   105a0:	dfc00017 	ldw	ra,0(sp)
   105a4:	dec00304 	addi	sp,sp,12
   105a8:	f800283a 	ret

000105ac <printf>:
   105ac:	defffc04 	addi	sp,sp,-16
   105b0:	dfc00015 	stw	ra,0(sp)
   105b4:	d9400115 	stw	r5,4(sp)
   105b8:	d9800215 	stw	r6,8(sp)
   105bc:	d9c00315 	stw	r7,12(sp)
   105c0:	00800074 	movhi	r2,1
   105c4:	10c5a017 	ldw	r3,5760(r2)
   105c8:	00800074 	movhi	r2,1
   105cc:	10831a04 	addi	r2,r2,3176
   105d0:	19400217 	ldw	r5,8(r3)
   105d4:	d9800104 	addi	r6,sp,4
   105d8:	28800115 	stw	r2,4(r5)
   105dc:	200b883a 	mov	r5,r4
   105e0:	19000217 	ldw	r4,8(r3)
   105e4:	0010c500 	call	10c50 <__vfprintf_internal>
   105e8:	dfc00017 	ldw	ra,0(sp)
   105ec:	dec00404 	addi	sp,sp,16
   105f0:	f800283a 	ret

000105f4 <_puts_r>:
   105f4:	defffd04 	addi	sp,sp,-12
   105f8:	dc000015 	stw	r16,0(sp)
   105fc:	2021883a 	mov	r16,r4
   10600:	2809883a 	mov	r4,r5
   10604:	dfc00215 	stw	ra,8(sp)
   10608:	dc400115 	stw	r17,4(sp)
   1060c:	2823883a 	mov	r17,r5
   10610:	00106cc0 	call	106cc <strlen>
   10614:	81400217 	ldw	r5,8(r16)
   10618:	00c00074 	movhi	r3,1
   1061c:	18c31a04 	addi	r3,r3,3176
   10620:	28c00115 	stw	r3,4(r5)
   10624:	100f883a 	mov	r7,r2
   10628:	880d883a 	mov	r6,r17
   1062c:	8009883a 	mov	r4,r16
   10630:	0010c680 	call	10c68 <__sfvwrite_small_dev>
   10634:	10ffffe0 	cmpeqi	r3,r2,-1
   10638:	1800091e 	bne	r3,zero,10660 <_puts_r+0x6c>
   1063c:	81400217 	ldw	r5,8(r16)
   10640:	01800074 	movhi	r6,1
   10644:	01c00044 	movi	r7,1
   10648:	28800117 	ldw	r2,4(r5)
   1064c:	31853504 	addi	r6,r6,5332
   10650:	8009883a 	mov	r4,r16
   10654:	103ee83a 	callr	r2
   10658:	10bfffe0 	cmpeqi	r2,r2,-1
   1065c:	0085c83a 	sub	r2,zero,r2
   10660:	dfc00217 	ldw	ra,8(sp)
   10664:	dc400117 	ldw	r17,4(sp)
   10668:	dc000017 	ldw	r16,0(sp)
   1066c:	dec00304 	addi	sp,sp,12
   10670:	f800283a 	ret

00010674 <puts>:
   10674:	00800074 	movhi	r2,1
   10678:	200b883a 	mov	r5,r4
   1067c:	1105a017 	ldw	r4,5760(r2)
   10680:	00105f41 	jmpi	105f4 <_puts_r>

00010684 <_sbrk_r>:
   10684:	defffe04 	addi	sp,sp,-8
   10688:	dc000015 	stw	r16,0(sp)
   1068c:	00800074 	movhi	r2,1
   10690:	2021883a 	mov	r16,r4
   10694:	2809883a 	mov	r4,r5
   10698:	dfc00115 	stw	ra,4(sp)
   1069c:	10060f15 	stw	zero,6204(r2)
   106a0:	0010fcc0 	call	10fcc <sbrk>
   106a4:	10ffffd8 	cmpnei	r3,r2,-1
   106a8:	1800041e 	bne	r3,zero,106bc <_sbrk_r+0x38>
   106ac:	00c00074 	movhi	r3,1
   106b0:	18c60f17 	ldw	r3,6204(r3)
   106b4:	18000126 	beq	r3,zero,106bc <_sbrk_r+0x38>
   106b8:	80c00015 	stw	r3,0(r16)
   106bc:	dfc00117 	ldw	ra,4(sp)
   106c0:	dc000017 	ldw	r16,0(sp)
   106c4:	dec00204 	addi	sp,sp,8
   106c8:	f800283a 	ret

000106cc <strlen>:
   106cc:	2005883a 	mov	r2,r4
   106d0:	10c00007 	ldb	r3,0(r2)
   106d4:	1800021e 	bne	r3,zero,106e0 <strlen+0x14>
   106d8:	1105c83a 	sub	r2,r2,r4
   106dc:	f800283a 	ret
   106e0:	10800044 	addi	r2,r2,1
   106e4:	003ffa06 	br	106d0 <strlen+0x4>

000106e8 <print_repeat>:
   106e8:	defffb04 	addi	sp,sp,-20
   106ec:	dc800315 	stw	r18,12(sp)
   106f0:	dc400215 	stw	r17,8(sp)
   106f4:	dc000115 	stw	r16,4(sp)
   106f8:	dfc00415 	stw	ra,16(sp)
   106fc:	2025883a 	mov	r18,r4
   10700:	2823883a 	mov	r17,r5
   10704:	d9800005 	stb	r6,0(sp)
   10708:	3821883a 	mov	r16,r7
   1070c:	04000716 	blt	zero,r16,1072c <print_repeat+0x44>
   10710:	0005883a 	mov	r2,zero
   10714:	dfc00417 	ldw	ra,16(sp)
   10718:	dc800317 	ldw	r18,12(sp)
   1071c:	dc400217 	ldw	r17,8(sp)
   10720:	dc000117 	ldw	r16,4(sp)
   10724:	dec00504 	addi	sp,sp,20
   10728:	f800283a 	ret
   1072c:	88800117 	ldw	r2,4(r17)
   10730:	01c00044 	movi	r7,1
   10734:	d80d883a 	mov	r6,sp
   10738:	880b883a 	mov	r5,r17
   1073c:	9009883a 	mov	r4,r18
   10740:	103ee83a 	callr	r2
   10744:	843fffc4 	addi	r16,r16,-1
   10748:	103ff026 	beq	r2,zero,1070c <print_repeat+0x24>
   1074c:	00bfffc4 	movi	r2,-1
   10750:	003ff006 	br	10714 <print_repeat+0x2c>

00010754 <___vfprintf_internal_r>:
   10754:	deffe604 	addi	sp,sp,-104
   10758:	ddc01715 	stw	r23,92(sp)
   1075c:	dd801615 	stw	r22,88(sp)
   10760:	dd401515 	stw	r21,84(sp)
   10764:	dd001415 	stw	r20,80(sp)
   10768:	dcc01315 	stw	r19,76(sp)
   1076c:	dc801215 	stw	r18,72(sp)
   10770:	dc401115 	stw	r17,68(sp)
   10774:	dc001015 	stw	r16,64(sp)
   10778:	dfc01915 	stw	ra,100(sp)
   1077c:	df001815 	stw	fp,96(sp)
   10780:	2025883a 	mov	r18,r4
   10784:	2823883a 	mov	r17,r5
   10788:	d9800515 	stw	r6,20(sp)
   1078c:	382f883a 	mov	r23,r7
   10790:	0021883a 	mov	r16,zero
   10794:	d8000215 	stw	zero,8(sp)
   10798:	d8000015 	stw	zero,0(sp)
   1079c:	002b883a 	mov	r21,zero
   107a0:	0029883a 	mov	r20,zero
   107a4:	0027883a 	mov	r19,zero
   107a8:	002d883a 	mov	r22,zero
   107ac:	d8000115 	stw	zero,4(sp)
   107b0:	0005883a 	mov	r2,zero
   107b4:	00000206 	br	107c0 <___vfprintf_internal_r+0x6c>
   107b8:	114000e0 	cmpeqi	r5,r2,3
   107bc:	28004c1e 	bne	r5,zero,108f0 <___vfprintf_internal_r+0x19c>
   107c0:	d8c00517 	ldw	r3,20(sp)
   107c4:	19000003 	ldbu	r4,0(r3)
   107c8:	18c00044 	addi	r3,r3,1
   107cc:	d8c00515 	stw	r3,20(sp)
   107d0:	20c03fcc 	andi	r3,r4,255
   107d4:	18c0201c 	xori	r3,r3,128
   107d8:	18ffe004 	addi	r3,r3,-128
   107dc:	18001026 	beq	r3,zero,10820 <___vfprintf_internal_r+0xcc>
   107e0:	114000a0 	cmpeqi	r5,r2,2
   107e4:	28001f1e 	bne	r5,zero,10864 <___vfprintf_internal_r+0x110>
   107e8:	114000c8 	cmpgei	r5,r2,3
   107ec:	283ff21e 	bne	r5,zero,107b8 <___vfprintf_internal_r+0x64>
   107f0:	1000181e 	bne	r2,zero,10854 <___vfprintf_internal_r+0x100>
   107f4:	18c00960 	cmpeqi	r3,r3,37
   107f8:	1801061e 	bne	r3,zero,10c14 <___vfprintf_internal_r+0x4c0>
   107fc:	88800117 	ldw	r2,4(r17)
   10800:	d9000805 	stb	r4,32(sp)
   10804:	01c00044 	movi	r7,1
   10808:	d9800804 	addi	r6,sp,32
   1080c:	880b883a 	mov	r5,r17
   10810:	9009883a 	mov	r4,r18
   10814:	103ee83a 	callr	r2
   10818:	10001c26 	beq	r2,zero,1088c <___vfprintf_internal_r+0x138>
   1081c:	043fffc4 	movi	r16,-1
   10820:	8005883a 	mov	r2,r16
   10824:	dfc01917 	ldw	ra,100(sp)
   10828:	df001817 	ldw	fp,96(sp)
   1082c:	ddc01717 	ldw	r23,92(sp)
   10830:	dd801617 	ldw	r22,88(sp)
   10834:	dd401517 	ldw	r21,84(sp)
   10838:	dd001417 	ldw	r20,80(sp)
   1083c:	dcc01317 	ldw	r19,76(sp)
   10840:	dc801217 	ldw	r18,72(sp)
   10844:	dc401117 	ldw	r17,68(sp)
   10848:	dc001017 	ldw	r16,64(sp)
   1084c:	dec01a04 	addi	sp,sp,104
   10850:	f800283a 	ret
   10854:	18800c20 	cmpeqi	r2,r3,48
   10858:	1000f71e 	bne	r2,zero,10c38 <___vfprintf_internal_r+0x4e4>
   1085c:	18800958 	cmpnei	r2,r3,37
   10860:	103fe626 	beq	r2,zero,107fc <___vfprintf_internal_r+0xa8>
   10864:	213ff404 	addi	r4,r4,-48
   10868:	21003fcc 	andi	r4,r4,255
   1086c:	208002a8 	cmpgeui	r2,r4,10
   10870:	10000a1e 	bne	r2,zero,1089c <___vfprintf_internal_r+0x148>
   10874:	98bfffe0 	cmpeqi	r2,r19,-1
   10878:	1000061e 	bne	r2,zero,10894 <___vfprintf_internal_r+0x140>
   1087c:	9cc002a4 	muli	r19,r19,10
   10880:	24e7883a 	add	r19,r4,r19
   10884:	00800084 	movi	r2,2
   10888:	003fcd06 	br	107c0 <___vfprintf_internal_r+0x6c>
   1088c:	84000044 	addi	r16,r16,1
   10890:	003fcb06 	br	107c0 <___vfprintf_internal_r+0x6c>
   10894:	0027883a 	mov	r19,zero
   10898:	003ff906 	br	10880 <___vfprintf_internal_r+0x12c>
   1089c:	18800ba0 	cmpeqi	r2,r3,46
   108a0:	1000e91e 	bne	r2,zero,10c48 <___vfprintf_internal_r+0x4f4>
   108a4:	18801b20 	cmpeqi	r2,r3,108
   108a8:	1000e61e 	bne	r2,zero,10c44 <___vfprintf_internal_r+0x4f0>
   108ac:	a0bfffe0 	cmpeqi	r2,r20,-1
   108b0:	10001a1e 	bne	r2,zero,1091c <___vfprintf_internal_r+0x1c8>
   108b4:	d8000115 	stw	zero,4(sp)
   108b8:	18801be0 	cmpeqi	r2,r3,111
   108bc:	1000b41e 	bne	r2,zero,10b90 <___vfprintf_internal_r+0x43c>
   108c0:	18801c08 	cmpgei	r2,r3,112
   108c4:	1000561e 	bne	r2,zero,10a20 <___vfprintf_internal_r+0x2cc>
   108c8:	188018e0 	cmpeqi	r2,r3,99
   108cc:	1000b71e 	bne	r2,zero,10bac <___vfprintf_internal_r+0x458>
   108d0:	18801908 	cmpgei	r2,r3,100
   108d4:	1000131e 	bne	r2,zero,10924 <___vfprintf_internal_r+0x1d0>
   108d8:	18c01620 	cmpeqi	r3,r3,88
   108dc:	183fb426 	beq	r3,zero,107b0 <___vfprintf_internal_r+0x5c>
   108e0:	b000701e 	bne	r22,zero,10aa4 <___vfprintf_internal_r+0x350>
   108e4:	00800044 	movi	r2,1
   108e8:	d8800215 	stw	r2,8(sp)
   108ec:	00006e06 	br	10aa8 <___vfprintf_internal_r+0x354>
   108f0:	213ff404 	addi	r4,r4,-48
   108f4:	21003fcc 	andi	r4,r4,255
   108f8:	214002a8 	cmpgeui	r5,r4,10
   108fc:	283fe91e 	bne	r5,zero,108a4 <___vfprintf_internal_r+0x150>
   10900:	a0ffffe0 	cmpeqi	r3,r20,-1
   10904:	1800031e 	bne	r3,zero,10914 <___vfprintf_internal_r+0x1c0>
   10908:	a50002a4 	muli	r20,r20,10
   1090c:	2529883a 	add	r20,r4,r20
   10910:	003fab06 	br	107c0 <___vfprintf_internal_r+0x6c>
   10914:	0029883a 	mov	r20,zero
   10918:	003ffc06 	br	1090c <___vfprintf_internal_r+0x1b8>
   1091c:	05000044 	movi	r20,1
   10920:	003fe506 	br	108b8 <___vfprintf_internal_r+0x164>
   10924:	18801920 	cmpeqi	r2,r3,100
   10928:	1000021e 	bne	r2,zero,10934 <___vfprintf_internal_r+0x1e0>
   1092c:	18c01a60 	cmpeqi	r3,r3,105
   10930:	183f9f26 	beq	r3,zero,107b0 <___vfprintf_internal_r+0x5c>
   10934:	b8800104 	addi	r2,r23,4
   10938:	d8800415 	stw	r2,16(sp)
   1093c:	d8800017 	ldw	r2,0(sp)
   10940:	10009426 	beq	r2,zero,10b94 <___vfprintf_internal_r+0x440>
   10944:	bdc00017 	ldw	r23,0(r23)
   10948:	b800960e 	bge	r23,zero,10ba4 <___vfprintf_internal_r+0x450>
   1094c:	05efc83a 	sub	r23,zero,r23
   10950:	02400044 	movi	r9,1
   10954:	df000804 	addi	fp,sp,32
   10958:	e00d883a 	mov	r6,fp
   1095c:	b800541e 	bne	r23,zero,10ab0 <___vfprintf_internal_r+0x35c>
   10960:	e185c83a 	sub	r2,fp,r6
   10964:	d8800315 	stw	r2,12(sp)
   10968:	a085c83a 	sub	r2,r20,r2
   1096c:	00800b0e 	bge	zero,r2,1099c <___vfprintf_internal_r+0x248>
   10970:	d8c01004 	addi	r3,sp,64
   10974:	e0c0072e 	bgeu	fp,r3,10994 <___vfprintf_internal_r+0x240>
   10978:	e085883a 	add	r2,fp,r2
   1097c:	01000c04 	movi	r4,48
   10980:	e7000044 	addi	fp,fp,1
   10984:	e13fffc5 	stb	r4,-1(fp)
   10988:	17000226 	beq	r2,fp,10994 <___vfprintf_internal_r+0x240>
   1098c:	d8c01004 	addi	r3,sp,64
   10990:	e0fffb36 	bltu	fp,r3,10980 <___vfprintf_internal_r+0x22c>
   10994:	e185c83a 	sub	r2,fp,r6
   10998:	d8800315 	stw	r2,12(sp)
   1099c:	d8800317 	ldw	r2,12(sp)
   109a0:	4891883a 	add	r8,r9,r2
   109a4:	d8800117 	ldw	r2,4(sp)
   109a8:	9a2fc83a 	sub	r23,r19,r8
   109ac:	10005526 	beq	r2,zero,10b04 <___vfprintf_internal_r+0x3b0>
   109b0:	48000a26 	beq	r9,zero,109dc <___vfprintf_internal_r+0x288>
   109b4:	00800b44 	movi	r2,45
   109b8:	d88007c5 	stb	r2,31(sp)
   109bc:	88800117 	ldw	r2,4(r17)
   109c0:	01c00044 	movi	r7,1
   109c4:	d98007c4 	addi	r6,sp,31
   109c8:	880b883a 	mov	r5,r17
   109cc:	9009883a 	mov	r4,r18
   109d0:	103ee83a 	callr	r2
   109d4:	103f911e 	bne	r2,zero,1081c <___vfprintf_internal_r+0xc8>
   109d8:	84000044 	addi	r16,r16,1
   109dc:	05c0070e 	bge	zero,r23,109fc <___vfprintf_internal_r+0x2a8>
   109e0:	b80f883a 	mov	r7,r23
   109e4:	01800c04 	movi	r6,48
   109e8:	880b883a 	mov	r5,r17
   109ec:	9009883a 	mov	r4,r18
   109f0:	00106e80 	call	106e8 <print_repeat>
   109f4:	103f891e 	bne	r2,zero,1081c <___vfprintf_internal_r+0xc8>
   109f8:	85e1883a 	add	r16,r16,r23
   109fc:	d8800317 	ldw	r2,12(sp)
   10a00:	e011883a 	mov	r8,fp
   10a04:	172fc83a 	sub	r23,r2,fp
   10a08:	ba05883a 	add	r2,r23,r8
   10a0c:	00805316 	blt	zero,r2,10b5c <___vfprintf_internal_r+0x408>
   10a10:	8707883a 	add	r3,r16,fp
   10a14:	ddc00417 	ldw	r23,16(sp)
   10a18:	1a21c83a 	sub	r16,r3,r8
   10a1c:	003f6406 	br	107b0 <___vfprintf_internal_r+0x5c>
   10a20:	18801d60 	cmpeqi	r2,r3,117
   10a24:	10005b1e 	bne	r2,zero,10b94 <___vfprintf_internal_r+0x440>
   10a28:	18801e20 	cmpeqi	r2,r3,120
   10a2c:	10001e1e 	bne	r2,zero,10aa8 <___vfprintf_internal_r+0x354>
   10a30:	18c01ce0 	cmpeqi	r3,r3,115
   10a34:	183f5e26 	beq	r3,zero,107b0 <___vfprintf_internal_r+0x5c>
   10a38:	b8800104 	addi	r2,r23,4
   10a3c:	d8800315 	stw	r2,12(sp)
   10a40:	b8800017 	ldw	r2,0(r23)
   10a44:	1009883a 	mov	r4,r2
   10a48:	1039883a 	mov	fp,r2
   10a4c:	00106cc0 	call	106cc <strlen>
   10a50:	988fc83a 	sub	r7,r19,r2
   10a54:	102f883a 	mov	r23,r2
   10a58:	01c0080e 	bge	zero,r7,10a7c <___vfprintf_internal_r+0x328>
   10a5c:	01800804 	movi	r6,32
   10a60:	880b883a 	mov	r5,r17
   10a64:	9009883a 	mov	r4,r18
   10a68:	d9c00415 	stw	r7,16(sp)
   10a6c:	00106e80 	call	106e8 <print_repeat>
   10a70:	103f6a1e 	bne	r2,zero,1081c <___vfprintf_internal_r+0xc8>
   10a74:	d9c00417 	ldw	r7,16(sp)
   10a78:	81e1883a 	add	r16,r16,r7
   10a7c:	88800117 	ldw	r2,4(r17)
   10a80:	b80f883a 	mov	r7,r23
   10a84:	e00d883a 	mov	r6,fp
   10a88:	880b883a 	mov	r5,r17
   10a8c:	9009883a 	mov	r4,r18
   10a90:	103ee83a 	callr	r2
   10a94:	103f611e 	bne	r2,zero,1081c <___vfprintf_internal_r+0xc8>
   10a98:	85e1883a 	add	r16,r16,r23
   10a9c:	ddc00317 	ldw	r23,12(sp)
   10aa0:	003f4706 	br	107c0 <___vfprintf_internal_r+0x6c>
   10aa4:	dd800215 	stw	r22,8(sp)
   10aa8:	05400404 	movi	r21,16
   10aac:	00003906 	br	10b94 <___vfprintf_internal_r+0x440>
   10ab0:	b809883a 	mov	r4,r23
   10ab4:	a80b883a 	mov	r5,r21
   10ab8:	da400315 	stw	r9,12(sp)
   10abc:	0010e540 	call	10e54 <__udivsi3>
   10ac0:	1549383a 	mul	r4,r2,r21
   10ac4:	da400317 	ldw	r9,12(sp)
   10ac8:	d9800804 	addi	r6,sp,32
   10acc:	b92fc83a 	sub	r23,r23,r4
   10ad0:	b9000288 	cmpgei	r4,r23,10
   10ad4:	2000051e 	bne	r4,zero,10aec <___vfprintf_internal_r+0x398>
   10ad8:	bdc00c04 	addi	r23,r23,48
   10adc:	e7000044 	addi	fp,fp,1
   10ae0:	e5ffffc5 	stb	r23,-1(fp)
   10ae4:	102f883a 	mov	r23,r2
   10ae8:	003f9c06 	br	1095c <___vfprintf_internal_r+0x208>
   10aec:	d8c00217 	ldw	r3,8(sp)
   10af0:	18000226 	beq	r3,zero,10afc <___vfprintf_internal_r+0x3a8>
   10af4:	bdc00dc4 	addi	r23,r23,55
   10af8:	003ff806 	br	10adc <___vfprintf_internal_r+0x388>
   10afc:	bdc015c4 	addi	r23,r23,87
   10b00:	003ff606 	br	10adc <___vfprintf_internal_r+0x388>
   10b04:	05c0090e 	bge	zero,r23,10b2c <___vfprintf_internal_r+0x3d8>
   10b08:	b80f883a 	mov	r7,r23
   10b0c:	01800804 	movi	r6,32
   10b10:	880b883a 	mov	r5,r17
   10b14:	9009883a 	mov	r4,r18
   10b18:	da400615 	stw	r9,24(sp)
   10b1c:	00106e80 	call	106e8 <print_repeat>
   10b20:	103f3e1e 	bne	r2,zero,1081c <___vfprintf_internal_r+0xc8>
   10b24:	da400617 	ldw	r9,24(sp)
   10b28:	85e1883a 	add	r16,r16,r23
   10b2c:	483fb326 	beq	r9,zero,109fc <___vfprintf_internal_r+0x2a8>
   10b30:	00800b44 	movi	r2,45
   10b34:	d88007c5 	stb	r2,31(sp)
   10b38:	88800117 	ldw	r2,4(r17)
   10b3c:	01c00044 	movi	r7,1
   10b40:	d98007c4 	addi	r6,sp,31
   10b44:	880b883a 	mov	r5,r17
   10b48:	9009883a 	mov	r4,r18
   10b4c:	103ee83a 	callr	r2
   10b50:	103f321e 	bne	r2,zero,1081c <___vfprintf_internal_r+0xc8>
   10b54:	84000044 	addi	r16,r16,1
   10b58:	003fa806 	br	109fc <___vfprintf_internal_r+0x2a8>
   10b5c:	40bfffc3 	ldbu	r2,-1(r8)
   10b60:	01c00044 	movi	r7,1
   10b64:	423fffc4 	addi	r8,r8,-1
   10b68:	d88007c5 	stb	r2,31(sp)
   10b6c:	88800117 	ldw	r2,4(r17)
   10b70:	d98007c4 	addi	r6,sp,31
   10b74:	880b883a 	mov	r5,r17
   10b78:	9009883a 	mov	r4,r18
   10b7c:	da000315 	stw	r8,12(sp)
   10b80:	103ee83a 	callr	r2
   10b84:	da000317 	ldw	r8,12(sp)
   10b88:	103f9f26 	beq	r2,zero,10a08 <___vfprintf_internal_r+0x2b4>
   10b8c:	003f2306 	br	1081c <___vfprintf_internal_r+0xc8>
   10b90:	05400204 	movi	r21,8
   10b94:	b8800104 	addi	r2,r23,4
   10b98:	d8800415 	stw	r2,16(sp)
   10b9c:	bdc00017 	ldw	r23,0(r23)
   10ba0:	d8000015 	stw	zero,0(sp)
   10ba4:	0013883a 	mov	r9,zero
   10ba8:	003f6a06 	br	10954 <___vfprintf_internal_r+0x200>
   10bac:	98800090 	cmplti	r2,r19,2
   10bb0:	1000091e 	bne	r2,zero,10bd8 <___vfprintf_internal_r+0x484>
   10bb4:	99ffffc4 	addi	r7,r19,-1
   10bb8:	01800804 	movi	r6,32
   10bbc:	880b883a 	mov	r5,r17
   10bc0:	9009883a 	mov	r4,r18
   10bc4:	d9c00315 	stw	r7,12(sp)
   10bc8:	00106e80 	call	106e8 <print_repeat>
   10bcc:	103f131e 	bne	r2,zero,1081c <___vfprintf_internal_r+0xc8>
   10bd0:	d9c00317 	ldw	r7,12(sp)
   10bd4:	81e1883a 	add	r16,r16,r7
   10bd8:	b8800017 	ldw	r2,0(r23)
   10bdc:	b8c00104 	addi	r3,r23,4
   10be0:	01c00044 	movi	r7,1
   10be4:	d8800805 	stb	r2,32(sp)
   10be8:	88800117 	ldw	r2,4(r17)
   10bec:	d9800804 	addi	r6,sp,32
   10bf0:	880b883a 	mov	r5,r17
   10bf4:	9009883a 	mov	r4,r18
   10bf8:	d8c00315 	stw	r3,12(sp)
   10bfc:	103ee83a 	callr	r2
   10c00:	103f061e 	bne	r2,zero,1081c <___vfprintf_internal_r+0xc8>
   10c04:	d8c00317 	ldw	r3,12(sp)
   10c08:	84000044 	addi	r16,r16,1
   10c0c:	182f883a 	mov	r23,r3
   10c10:	003eeb06 	br	107c0 <___vfprintf_internal_r+0x6c>
   10c14:	00800044 	movi	r2,1
   10c18:	d8000215 	stw	zero,8(sp)
   10c1c:	002d883a 	mov	r22,zero
   10c20:	d8000115 	stw	zero,4(sp)
   10c24:	d8800015 	stw	r2,0(sp)
   10c28:	05400284 	movi	r21,10
   10c2c:	053fffc4 	movi	r20,-1
   10c30:	04ffffc4 	movi	r19,-1
   10c34:	003ee206 	br	107c0 <___vfprintf_internal_r+0x6c>
   10c38:	00800044 	movi	r2,1
   10c3c:	d8800115 	stw	r2,4(sp)
   10c40:	003f1006 	br	10884 <___vfprintf_internal_r+0x130>
   10c44:	05800044 	movi	r22,1
   10c48:	008000c4 	movi	r2,3
   10c4c:	003edc06 	br	107c0 <___vfprintf_internal_r+0x6c>

00010c50 <__vfprintf_internal>:
   10c50:	00800074 	movhi	r2,1
   10c54:	300f883a 	mov	r7,r6
   10c58:	280d883a 	mov	r6,r5
   10c5c:	200b883a 	mov	r5,r4
   10c60:	1105a017 	ldw	r4,5760(r2)
   10c64:	00107541 	jmpi	10754 <___vfprintf_internal_r>

00010c68 <__sfvwrite_small_dev>:
   10c68:	2880000b 	ldhu	r2,0(r5)
   10c6c:	1080020c 	andi	r2,r2,8
   10c70:	10002526 	beq	r2,zero,10d08 <__sfvwrite_small_dev+0xa0>
   10c74:	2880008f 	ldh	r2,2(r5)
   10c78:	defffb04 	addi	sp,sp,-20
   10c7c:	dcc00315 	stw	r19,12(sp)
   10c80:	dc800215 	stw	r18,8(sp)
   10c84:	dc400115 	stw	r17,4(sp)
   10c88:	dc000015 	stw	r16,0(sp)
   10c8c:	dfc00415 	stw	ra,16(sp)
   10c90:	2027883a 	mov	r19,r4
   10c94:	2821883a 	mov	r16,r5
   10c98:	3025883a 	mov	r18,r6
   10c9c:	3823883a 	mov	r17,r7
   10ca0:	1000100e 	bge	r2,zero,10ce4 <__sfvwrite_small_dev+0x7c>
   10ca4:	8080000b 	ldhu	r2,0(r16)
   10ca8:	10801014 	ori	r2,r2,64
   10cac:	8080000d 	sth	r2,0(r16)
   10cb0:	00bfffc4 	movi	r2,-1
   10cb4:	00000d06 	br	10cec <__sfvwrite_small_dev+0x84>
   10cb8:	88810050 	cmplti	r2,r17,1025
   10cbc:	880f883a 	mov	r7,r17
   10cc0:	1000011e 	bne	r2,zero,10cc8 <__sfvwrite_small_dev+0x60>
   10cc4:	01c10004 	movi	r7,1024
   10cc8:	8140008f 	ldh	r5,2(r16)
   10ccc:	900d883a 	mov	r6,r18
   10cd0:	9809883a 	mov	r4,r19
   10cd4:	0010d100 	call	10d10 <_write_r>
   10cd8:	00bff20e 	bge	zero,r2,10ca4 <__sfvwrite_small_dev+0x3c>
   10cdc:	88a3c83a 	sub	r17,r17,r2
   10ce0:	90a5883a 	add	r18,r18,r2
   10ce4:	047ff416 	blt	zero,r17,10cb8 <__sfvwrite_small_dev+0x50>
   10ce8:	0005883a 	mov	r2,zero
   10cec:	dfc00417 	ldw	ra,16(sp)
   10cf0:	dcc00317 	ldw	r19,12(sp)
   10cf4:	dc800217 	ldw	r18,8(sp)
   10cf8:	dc400117 	ldw	r17,4(sp)
   10cfc:	dc000017 	ldw	r16,0(sp)
   10d00:	dec00504 	addi	sp,sp,20
   10d04:	f800283a 	ret
   10d08:	00bfffc4 	movi	r2,-1
   10d0c:	f800283a 	ret

00010d10 <_write_r>:
   10d10:	defffe04 	addi	sp,sp,-8
   10d14:	dc000015 	stw	r16,0(sp)
   10d18:	00800074 	movhi	r2,1
   10d1c:	2021883a 	mov	r16,r4
   10d20:	2809883a 	mov	r4,r5
   10d24:	300b883a 	mov	r5,r6
   10d28:	380d883a 	mov	r6,r7
   10d2c:	dfc00115 	stw	ra,4(sp)
   10d30:	10060f15 	stw	zero,6204(r2)
   10d34:	001101c0 	call	1101c <write>
   10d38:	10ffffd8 	cmpnei	r3,r2,-1
   10d3c:	1800041e 	bne	r3,zero,10d50 <_write_r+0x40>
   10d40:	00c00074 	movhi	r3,1
   10d44:	18c60f17 	ldw	r3,6204(r3)
   10d48:	18000126 	beq	r3,zero,10d50 <_write_r+0x40>
   10d4c:	80c00015 	stw	r3,0(r16)
   10d50:	dfc00117 	ldw	ra,4(sp)
   10d54:	dc000017 	ldw	r16,0(sp)
   10d58:	dec00204 	addi	sp,sp,8
   10d5c:	f800283a 	ret

00010d60 <__divsi3>:
   10d60:	20001a16 	blt	r4,zero,10dcc <__divsi3+0x6c>
   10d64:	000f883a 	mov	r7,zero
   10d68:	2800020e 	bge	r5,zero,10d74 <__divsi3+0x14>
   10d6c:	014bc83a 	sub	r5,zero,r5
   10d70:	39c0005c 	xori	r7,r7,1
   10d74:	200d883a 	mov	r6,r4
   10d78:	00c00044 	movi	r3,1
   10d7c:	2900092e 	bgeu	r5,r4,10da4 <__divsi3+0x44>
   10d80:	00800804 	movi	r2,32
   10d84:	00c00044 	movi	r3,1
   10d88:	00000106 	br	10d90 <__divsi3+0x30>
   10d8c:	10001226 	beq	r2,zero,10dd8 <__divsi3+0x78>
   10d90:	294b883a 	add	r5,r5,r5
   10d94:	10bfffc4 	addi	r2,r2,-1
   10d98:	18c7883a 	add	r3,r3,r3
   10d9c:	293ffb36 	bltu	r5,r4,10d8c <__divsi3+0x2c>
   10da0:	18000d26 	beq	r3,zero,10dd8 <__divsi3+0x78>
   10da4:	0005883a 	mov	r2,zero
   10da8:	31400236 	bltu	r6,r5,10db4 <__divsi3+0x54>
   10dac:	314dc83a 	sub	r6,r6,r5
   10db0:	10c4b03a 	or	r2,r2,r3
   10db4:	1806d07a 	srli	r3,r3,1
   10db8:	280ad07a 	srli	r5,r5,1
   10dbc:	183ffa1e 	bne	r3,zero,10da8 <__divsi3+0x48>
   10dc0:	38000126 	beq	r7,zero,10dc8 <__divsi3+0x68>
   10dc4:	0085c83a 	sub	r2,zero,r2
   10dc8:	f800283a 	ret
   10dcc:	0109c83a 	sub	r4,zero,r4
   10dd0:	01c00044 	movi	r7,1
   10dd4:	003fe406 	br	10d68 <__divsi3+0x8>
   10dd8:	0005883a 	mov	r2,zero
   10ddc:	003ff806 	br	10dc0 <__divsi3+0x60>

00010de0 <__modsi3>:
   10de0:	20001716 	blt	r4,zero,10e40 <__modsi3+0x60>
   10de4:	000f883a 	mov	r7,zero
   10de8:	2005883a 	mov	r2,r4
   10dec:	2800010e 	bge	r5,zero,10df4 <__modsi3+0x14>
   10df0:	014bc83a 	sub	r5,zero,r5
   10df4:	00c00044 	movi	r3,1
   10df8:	2900092e 	bgeu	r5,r4,10e20 <__modsi3+0x40>
   10dfc:	01800804 	movi	r6,32
   10e00:	00c00044 	movi	r3,1
   10e04:	00000106 	br	10e0c <__modsi3+0x2c>
   10e08:	30001026 	beq	r6,zero,10e4c <__modsi3+0x6c>
   10e0c:	294b883a 	add	r5,r5,r5
   10e10:	31bfffc4 	addi	r6,r6,-1
   10e14:	18c7883a 	add	r3,r3,r3
   10e18:	293ffb36 	bltu	r5,r4,10e08 <__modsi3+0x28>
   10e1c:	18000b26 	beq	r3,zero,10e4c <__modsi3+0x6c>
   10e20:	1806d07a 	srli	r3,r3,1
   10e24:	11400136 	bltu	r2,r5,10e2c <__modsi3+0x4c>
   10e28:	1145c83a 	sub	r2,r2,r5
   10e2c:	280ad07a 	srli	r5,r5,1
   10e30:	183ffb1e 	bne	r3,zero,10e20 <__modsi3+0x40>
   10e34:	38000126 	beq	r7,zero,10e3c <__modsi3+0x5c>
   10e38:	0085c83a 	sub	r2,zero,r2
   10e3c:	f800283a 	ret
   10e40:	0109c83a 	sub	r4,zero,r4
   10e44:	01c00044 	movi	r7,1
   10e48:	003fe706 	br	10de8 <__modsi3+0x8>
   10e4c:	2005883a 	mov	r2,r4
   10e50:	003ff806 	br	10e34 <__modsi3+0x54>

00010e54 <__udivsi3>:
   10e54:	200d883a 	mov	r6,r4
   10e58:	2900152e 	bgeu	r5,r4,10eb0 <__udivsi3+0x5c>
   10e5c:	28001416 	blt	r5,zero,10eb0 <__udivsi3+0x5c>
   10e60:	00800804 	movi	r2,32
   10e64:	00c00044 	movi	r3,1
   10e68:	00000206 	br	10e74 <__udivsi3+0x20>
   10e6c:	10000e26 	beq	r2,zero,10ea8 <__udivsi3+0x54>
   10e70:	28000416 	blt	r5,zero,10e84 <__udivsi3+0x30>
   10e74:	294b883a 	add	r5,r5,r5
   10e78:	10bfffc4 	addi	r2,r2,-1
   10e7c:	18c7883a 	add	r3,r3,r3
   10e80:	293ffa36 	bltu	r5,r4,10e6c <__udivsi3+0x18>
   10e84:	18000826 	beq	r3,zero,10ea8 <__udivsi3+0x54>
   10e88:	0005883a 	mov	r2,zero
   10e8c:	31400236 	bltu	r6,r5,10e98 <__udivsi3+0x44>
   10e90:	314dc83a 	sub	r6,r6,r5
   10e94:	10c4b03a 	or	r2,r2,r3
   10e98:	1806d07a 	srli	r3,r3,1
   10e9c:	280ad07a 	srli	r5,r5,1
   10ea0:	183ffa1e 	bne	r3,zero,10e8c <__udivsi3+0x38>
   10ea4:	f800283a 	ret
   10ea8:	0005883a 	mov	r2,zero
   10eac:	f800283a 	ret
   10eb0:	00c00044 	movi	r3,1
   10eb4:	003ff406 	br	10e88 <__udivsi3+0x34>

00010eb8 <__umodsi3>:
   10eb8:	2005883a 	mov	r2,r4
   10ebc:	2900132e 	bgeu	r5,r4,10f0c <__umodsi3+0x54>
   10ec0:	28001216 	blt	r5,zero,10f0c <__umodsi3+0x54>
   10ec4:	01800804 	movi	r6,32
   10ec8:	00c00044 	movi	r3,1
   10ecc:	00000206 	br	10ed8 <__umodsi3+0x20>
   10ed0:	30000c26 	beq	r6,zero,10f04 <__umodsi3+0x4c>
   10ed4:	28000416 	blt	r5,zero,10ee8 <__umodsi3+0x30>
   10ed8:	294b883a 	add	r5,r5,r5
   10edc:	31bfffc4 	addi	r6,r6,-1
   10ee0:	18c7883a 	add	r3,r3,r3
   10ee4:	293ffa36 	bltu	r5,r4,10ed0 <__umodsi3+0x18>
   10ee8:	18000626 	beq	r3,zero,10f04 <__umodsi3+0x4c>
   10eec:	1806d07a 	srli	r3,r3,1
   10ef0:	11400136 	bltu	r2,r5,10ef8 <__umodsi3+0x40>
   10ef4:	1145c83a 	sub	r2,r2,r5
   10ef8:	280ad07a 	srli	r5,r5,1
   10efc:	183ffb1e 	bne	r3,zero,10eec <__umodsi3+0x34>
   10f00:	f800283a 	ret
   10f04:	2005883a 	mov	r2,r4
   10f08:	f800283a 	ret
   10f0c:	00c00044 	movi	r3,1
   10f10:	003ff606 	br	10eec <__umodsi3+0x34>

00010f14 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10f14:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10f18:	01000074 	movhi	r4,1
   10f1c:	01400074 	movhi	r5,1
   10f20:	dfc00015 	stw	ra,0(sp)
   10f24:	21054504 	addi	r4,r4,5396
   10f28:	2945a904 	addi	r5,r5,5796
   10f2c:	21400426 	beq	r4,r5,10f40 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
   10f30:	01800074 	movhi	r6,1
   10f34:	3185a904 	addi	r6,r6,5796
   10f38:	310dc83a 	sub	r6,r6,r4
   10f3c:	00114540 	call	11454 <memcpy>
  if (to != from)
   10f40:	01000074 	movhi	r4,1
   10f44:	01400074 	movhi	r5,1
   10f48:	21000804 	addi	r4,r4,32
   10f4c:	29400804 	addi	r5,r5,32
   10f50:	21400426 	beq	r4,r5,10f64 <alt_load+0x50>
      *to++ = *from++;
   10f54:	01800074 	movhi	r6,1
   10f58:	31800804 	addi	r6,r6,32
   10f5c:	310dc83a 	sub	r6,r6,r4
   10f60:	00114540 	call	11454 <memcpy>
  if (to != from)
   10f64:	01000074 	movhi	r4,1
   10f68:	01400074 	movhi	r5,1
   10f6c:	21051f04 	addi	r4,r4,5244
   10f70:	29451f04 	addi	r5,r5,5244
   10f74:	21400426 	beq	r4,r5,10f88 <alt_load+0x74>
      *to++ = *from++;
   10f78:	01800074 	movhi	r6,1
   10f7c:	31854504 	addi	r6,r6,5396
   10f80:	310dc83a 	sub	r6,r6,r4
   10f84:	00114540 	call	11454 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10f88:	00112bc0 	call	112bc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10f8c:	dfc00017 	ldw	ra,0(sp)
   10f90:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   10f94:	00113b41 	jmpi	113b4 <alt_icache_flush_all>

00010f98 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10f98:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10f9c:	0009883a 	mov	r4,zero
{
   10fa0:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   10fa4:	00110780 	call	11078 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10fa8:	00110980 	call	11098 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10fac:	d1a07117 	ldw	r6,-32316(gp)
   10fb0:	d1607217 	ldw	r5,-32312(gp)
   10fb4:	d1207317 	ldw	r4,-32308(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10fb8:	dfc00017 	ldw	ra,0(sp)
   10fbc:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   10fc0:	001006c1 	jmpi	1006c <main>

00010fc4 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
   10fc4:	f800283a 	ret

00010fc8 <__malloc_unlock>:

/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
   10fc8:	f800283a 	ret

00010fcc <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fcc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fd0:	00bfff84 	movi	r2,-2
   10fd4:	1884703a 	and	r2,r3,r2
   10fd8:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10fdc:	d0a00217 	ldw	r2,-32760(gp)
   10fe0:	017fff04 	movi	r5,-4
   10fe4:	108000c4 	addi	r2,r2,3
   10fe8:	1144703a 	and	r2,r2,r5
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10fec:	014000b4 	movhi	r5,2
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10ff0:	d0a00215 	stw	r2,-32760(gp)
  if ((heap_end + incr) > __alt_heap_limit) {
   10ff4:	1109883a 	add	r4,r2,r4
   10ff8:	29680004 	addi	r5,r5,-24576
   10ffc:	2900032e 	bgeu	r5,r4,1100c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11000:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   11004:	00bfffc4 	movi	r2,-1
   11008:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   1100c:	d1200215 	stw	r4,-32760(gp)
   11010:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   11014:	f800283a 	ret

00011018 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   11018:	00112381 	jmpi	11238 <alt_busy_sleep>

0001101c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   1101c:	213fffc4 	addi	r4,r4,-1
   11020:	210000a8 	cmpgeui	r4,r4,2
   11024:	2000041e 	bne	r4,zero,11038 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   11028:	01000074 	movhi	r4,1
   1102c:	000f883a 	mov	r7,zero
   11030:	2105a204 	addi	r4,r4,5768
   11034:	00110a81 	jmpi	110a8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11038:	d0a00917 	ldw	r2,-32732(gp)
   1103c:	10000926 	beq	r2,zero,11064 <write+0x48>
{
   11040:	deffff04 	addi	sp,sp,-4
   11044:	dfc00015 	stw	ra,0(sp)
   11048:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   1104c:	00c01444 	movi	r3,81
   11050:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   11054:	00bfffc4 	movi	r2,-1
   11058:	dfc00017 	ldw	ra,0(sp)
   1105c:	dec00104 	addi	sp,sp,4
   11060:	f800283a 	ret
   11064:	d0a07004 	addi	r2,gp,-32320
        ALT_ERRNO = EBADFD;
   11068:	00c01444 	movi	r3,81
   1106c:	10c00015 	stw	r3,0(r2)
}
   11070:	00bfffc4 	movi	r2,-1
   11074:	f800283a 	ret

00011078 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11078:	deffff04 	addi	sp,sp,-4
   1107c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   11080:	00113c00 	call	113c0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11084:	00800044 	movi	r2,1
   11088:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1108c:	dfc00017 	ldw	ra,0(sp)
   11090:	dec00104 	addi	sp,sp,4
   11094:	f800283a 	ret

00011098 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11098:	01000074 	movhi	r4,1
   1109c:	d1600504 	addi	r5,gp,-32748
   110a0:	21057e04 	addi	r4,r4,5624
   110a4:	00112dc1 	jmpi	112dc <alt_dev_llist_insert>

000110a8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   110a8:	20c00017 	ldw	r3,0(r4)
{
   110ac:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   110b0:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   110b4:	01bfffd4 	movui	r6,65535
  while (ptr < end)
   110b8:	29000136 	bltu	r5,r4,110c0 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   110bc:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   110c0:	19c00137 	ldwio	r7,4(r3)
   110c4:	31fffc2e 	bgeu	r6,r7,110b8 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   110c8:	29c00007 	ldb	r7,0(r5)
   110cc:	29400044 	addi	r5,r5,1
   110d0:	19c00035 	stwio	r7,0(r3)
   110d4:	003ff806 	br	110b8 <altera_avalon_jtag_uart_write+0x10>

000110d8 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   110d8:	d1600504 	addi	r5,gp,-32748
   110dc:	00113441 	jmpi	11344 <alt_find_dev>

000110e0 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   110e0:	20800a17 	ldw	r2,40(r4)
   110e4:	10800023 	ldbuio	r2,0(r2)
   110e8:	28800005 	stb	r2,0(r5)

	return 0;
}
   110ec:	0005883a 	mov	r2,zero
   110f0:	f800283a 	ret

000110f4 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   110f4:	20800a17 	ldw	r2,40(r4)
   110f8:	29400fcc 	andi	r5,r5,63
   110fc:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11100:	20800a17 	ldw	r2,40(r4)
   11104:	10800063 	ldbuio	r2,1(r2)
   11108:	30800005 	stb	r2,0(r6)

	return 0;
}
   1110c:	0005883a 	mov	r2,zero
   11110:	f800283a 	ret

00011114 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11114:	20800a17 	ldw	r2,40(r4)
   11118:	29400fcc 	andi	r5,r5,63
   1111c:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   11120:	20800a17 	ldw	r2,40(r4)
   11124:	11800065 	stbio	r6,1(r2)

	return 0;
}
   11128:	0005883a 	mov	r2,zero
   1112c:	f800283a 	ret

00011130 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11130:	20800a17 	ldw	r2,40(r4)
   11134:	00c00c84 	movi	r3,50
   11138:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1113c:	20800a17 	ldw	r2,40(r4)
   11140:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11144:	00c00cc4 	movi	r3,51
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11148:	10803fcc 	andi	r2,r2,255
   1114c:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11150:	20800a17 	ldw	r2,40(r4)
   11154:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11158:	20800a17 	ldw	r2,40(r4)
   1115c:	10800063 	ldbuio	r2,1(r2)
   11160:	10803fcc 	andi	r2,r2,255
   11164:	28c00017 	ldw	r3,0(r5)
   11168:	1004923a 	slli	r2,r2,8
   1116c:	10c5883a 	add	r2,r2,r3

	if (*(x_axis) & 0x00008000)
   11170:	10e0000c 	andi	r3,r2,32768
   11174:	18000126 	beq	r3,zero,1117c <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   11178:	10bffff4 	orhi	r2,r2,65535
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1117c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11180:	0005883a 	mov	r2,zero
   11184:	f800283a 	ret

00011188 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11188:	20800a17 	ldw	r2,40(r4)
   1118c:	00c00d04 	movi	r3,52
   11190:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11194:	20800a17 	ldw	r2,40(r4)
   11198:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1119c:	00c00d44 	movi	r3,53
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   111a0:	10803fcc 	andi	r2,r2,255
   111a4:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   111a8:	20800a17 	ldw	r2,40(r4)
   111ac:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   111b0:	20800a17 	ldw	r2,40(r4)
   111b4:	10800063 	ldbuio	r2,1(r2)
   111b8:	10803fcc 	andi	r2,r2,255
   111bc:	28c00017 	ldw	r3,0(r5)
   111c0:	1004923a 	slli	r2,r2,8
   111c4:	10c5883a 	add	r2,r2,r3

	if (*(y_axis) & 0x00008000)
   111c8:	10e0000c 	andi	r3,r2,32768
   111cc:	18000126 	beq	r3,zero,111d4 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   111d0:	10bffff4 	orhi	r2,r2,65535
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   111d4:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   111d8:	0005883a 	mov	r2,zero
   111dc:	f800283a 	ret

000111e0 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   111e0:	20800a17 	ldw	r2,40(r4)
   111e4:	00c00d84 	movi	r3,54
   111e8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   111ec:	20800a17 	ldw	r2,40(r4)
   111f0:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   111f4:	00c00dc4 	movi	r3,55
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   111f8:	10803fcc 	andi	r2,r2,255
   111fc:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11200:	20800a17 	ldw	r2,40(r4)
   11204:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11208:	20800a17 	ldw	r2,40(r4)
   1120c:	10800063 	ldbuio	r2,1(r2)
   11210:	10803fcc 	andi	r2,r2,255
   11214:	28c00017 	ldw	r3,0(r5)
   11218:	1004923a 	slli	r2,r2,8
   1121c:	10c5883a 	add	r2,r2,r3

	if (*(z_axis) & 0x00008000)
   11220:	10e0000c 	andi	r3,r2,32768
   11224:	18000126 	beq	r3,zero,1122c <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   11228:	10bffff4 	orhi	r2,r2,65535
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1122c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11230:	0005883a 	mov	r2,zero
   11234:	f800283a 	ret

00011238 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11238:	defffe04 	addi	sp,sp,-8
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1123c:	00820034 	movhi	r2,2048
{
   11240:	dc000015 	stw	r16,0(sp)
   11244:	dfc00115 	stw	ra,4(sp)
  if (big_loops)
   11248:	10bfff84 	addi	r2,r2,-2
{
   1124c:	2021883a 	mov	r16,r4
  if (big_loops)
   11250:	1100162e 	bgeu	r2,r4,112ac <alt_busy_sleep+0x74>
  big_loops = us / (INT_MAX/
   11254:	01420034 	movhi	r5,2048
   11258:	297fffc4 	addi	r5,r5,-1
   1125c:	0010e540 	call	10e54 <__udivsi3>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11260:	01200034 	movhi	r4,32768
    for(i=0;i<big_loops;i++)
   11264:	0007883a 	mov	r3,zero
      __asm__ volatile (
   11268:	213fffc4 	addi	r4,r4,-1
   1126c:	213fffc4 	addi	r4,r4,-1
   11270:	203ffe1e 	bne	r4,zero,1126c <alt_busy_sleep+0x34>
    for(i=0;i<big_loops;i++)
   11274:	18c00044 	addi	r3,r3,1
   11278:	18bffc16 	blt	r3,r2,1126c <alt_busy_sleep+0x34>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1127c:	00fe0034 	movhi	r3,63488
   11280:	18c00044 	addi	r3,r3,1
   11284:	10c5383a 	mul	r2,r2,r3
   11288:	1405883a 	add	r2,r2,r16
   1128c:	1004913a 	slli	r2,r2,4
    __asm__ volatile (
   11290:	10bfffc4 	addi	r2,r2,-1
   11294:	103ffe1e 	bne	r2,zero,11290 <alt_busy_sleep+0x58>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   11298:	0005883a 	mov	r2,zero
   1129c:	dfc00117 	ldw	ra,4(sp)
   112a0:	dc000017 	ldw	r16,0(sp)
   112a4:	dec00204 	addi	sp,sp,8
   112a8:	f800283a 	ret
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   112ac:	2020913a 	slli	r16,r4,4
    __asm__ volatile (
   112b0:	843fffc4 	addi	r16,r16,-1
   112b4:	043ffe16 	blt	zero,r16,112b0 <alt_busy_sleep+0x78>
   112b8:	003ff706 	br	11298 <alt_busy_sleep+0x60>

000112bc <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   112bc:	0005883a 	mov	r2,zero
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   112c0:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   112c4:	10800804 	addi	r2,r2,32
   112c8:	10c20018 	cmpnei	r3,r2,2048
   112cc:	183ffc1e 	bne	r3,zero,112c0 <alt_dcache_flush_all+0x4>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   112d0:	f800283a 	ret

000112d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   112d4:	3005883a 	mov	r2,r6
  return len;
}
   112d8:	f800283a 	ret

000112dc <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   112dc:	20000226 	beq	r4,zero,112e8 <alt_dev_llist_insert+0xc>
   112e0:	20800217 	ldw	r2,8(r4)
   112e4:	10000b1e 	bne	r2,zero,11314 <alt_dev_llist_insert+0x38>
   112e8:	d0a00917 	ldw	r2,-32732(gp)
   112ec:	10001026 	beq	r2,zero,11330 <alt_dev_llist_insert+0x54>
{
   112f0:	deffff04 	addi	sp,sp,-4
   112f4:	dfc00015 	stw	ra,0(sp)
   112f8:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
   112fc:	00c00584 	movi	r3,22
   11300:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11304:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11308:	dfc00017 	ldw	ra,0(sp)
   1130c:	dec00104 	addi	sp,sp,4
   11310:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   11314:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
   11318:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   1131c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   11320:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   11324:	29000015 	stw	r4,0(r5)
  return 0;  
   11328:	0005883a 	mov	r2,zero
   1132c:	f800283a 	ret
   11330:	d0a07004 	addi	r2,gp,-32320
    ALT_ERRNO = EINVAL;
   11334:	00c00584 	movi	r3,22
   11338:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1133c:	00bffa84 	movi	r2,-22
}
   11340:	f800283a 	ret

00011344 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11344:	defffb04 	addi	sp,sp,-20
   11348:	dcc00315 	stw	r19,12(sp)
   1134c:	dc800215 	stw	r18,8(sp)
   11350:	dc400115 	stw	r17,4(sp)
   11354:	dc000015 	stw	r16,0(sp)
   11358:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
   1135c:	2c000017 	ldw	r16,0(r5)
{
   11360:	2027883a 	mov	r19,r4
   11364:	2823883a 	mov	r17,r5
  alt_32 len;

  len  = strlen(name) + 1;
   11368:	00106cc0 	call	106cc <strlen>
   1136c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11370:	8440091e 	bne	r16,r17,11398 <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11374:	0021883a 	mov	r16,zero
}
   11378:	8005883a 	mov	r2,r16
   1137c:	dfc00417 	ldw	ra,16(sp)
   11380:	dcc00317 	ldw	r19,12(sp)
   11384:	dc800217 	ldw	r18,8(sp)
   11388:	dc400117 	ldw	r17,4(sp)
   1138c:	dc000017 	ldw	r16,0(sp)
   11390:	dec00504 	addi	sp,sp,20
   11394:	f800283a 	ret
    if (!memcmp (next->name, name, len))
   11398:	81000217 	ldw	r4,8(r16)
   1139c:	900d883a 	mov	r6,r18
   113a0:	980b883a 	mov	r5,r19
   113a4:	00114240 	call	11424 <memcmp>
   113a8:	103ff326 	beq	r2,zero,11378 <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
   113ac:	84000017 	ldw	r16,0(r16)
   113b0:	003fef06 	br	11370 <alt_find_dev+0x2c>

000113b4 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   113b4:	01440004 	movi	r5,4096
   113b8:	0009883a 	mov	r4,zero
   113bc:	00113c81 	jmpi	113c8 <alt_icache_flush>

000113c0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   113c0:	000170fa 	wrctl	ienable,zero
}
   113c4:	f800283a 	ret

000113c8 <alt_icache_flush>:

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   113c8:	28840070 	cmpltui	r2,r5,4097
   113cc:	1000011e 	bne	r2,zero,113d4 <alt_icache_flush+0xc>
   113d0:	01440004 	movi	r5,4096
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   113d4:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   113d8:	2005883a 	mov	r2,r4
   113dc:	11400c36 	bltu	r2,r5,11410 <alt_icache_flush+0x48>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   113e0:	208007cc 	andi	r2,r4,31
   113e4:	10000826 	beq	r2,zero,11408 <alt_icache_flush+0x40>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   113e8:	20bff844 	addi	r2,r4,-31
   113ec:	28800b36 	bltu	r5,r2,1141c <alt_icache_flush+0x54>
   113f0:	290bc83a 	sub	r5,r5,r4
   113f4:	294007c4 	addi	r5,r5,31
   113f8:	280ad17a 	srli	r5,r5,5
   113fc:	280a917a 	slli	r5,r5,5
   11400:	2149883a 	add	r4,r4,r5
   11404:	2000603a 	flushi	r4
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11408:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1140c:	f800283a 	ret
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11410:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11414:	10800804 	addi	r2,r2,32
   11418:	003ff006 	br	113dc <alt_icache_flush+0x14>
    __asm__ volatile ("flushi %0" :: "r" (i));
   1141c:	000b883a 	mov	r5,zero
   11420:	003ff706 	br	11400 <alt_icache_flush+0x38>

00011424 <memcmp>:
   11424:	0007883a 	mov	r3,zero
   11428:	30c0021e 	bne	r6,r3,11434 <memcmp+0x10>
   1142c:	0005883a 	mov	r2,zero
   11430:	f800283a 	ret
   11434:	20c5883a 	add	r2,r4,r3
   11438:	18c00044 	addi	r3,r3,1
   1143c:	28cf883a 	add	r7,r5,r3
   11440:	10800003 	ldbu	r2,0(r2)
   11444:	39ffffc3 	ldbu	r7,-1(r7)
   11448:	11fff726 	beq	r2,r7,11428 <memcmp+0x4>
   1144c:	11c5c83a 	sub	r2,r2,r7
   11450:	f800283a 	ret

00011454 <memcpy>:
   11454:	2005883a 	mov	r2,r4
   11458:	0007883a 	mov	r3,zero
   1145c:	30c0011e 	bne	r6,r3,11464 <memcpy+0x10>
   11460:	f800283a 	ret
   11464:	28cf883a 	add	r7,r5,r3
   11468:	39c00003 	ldbu	r7,0(r7)
   1146c:	10c9883a 	add	r4,r2,r3
   11470:	18c00044 	addi	r3,r3,1
   11474:	21c00005 	stb	r7,0(r4)
   11478:	003ff806 	br	1145c <memcpy+0x8>
