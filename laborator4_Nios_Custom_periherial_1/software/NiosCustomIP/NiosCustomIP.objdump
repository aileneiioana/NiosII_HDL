
NiosCustomIP.elf:     file format elf32-littlenios2
NiosCustomIP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000b9c memsz 0x00000b9c flags r-x
    LOAD off    0x00001bbc vaddr 0x00010bbc paddr 0x00010cb0 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00000da4 vaddr 0x00010da4 paddr 0x00010da4 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001cb0  2**0
                  CONTENTS
  2 .text         00000b5c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  00010b7c  00010b7c  00001b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00010bbc  00010cb0  00001bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00010da4  00010da4  00001da4  2**2
                  ALLOC, SMALL_DATA
  6 .SRAM         00000000  00010db4  00010db4  00001cb0  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002a8  00000000  00000000  00001ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00003a30  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000014fa  00000000  00000000  000059b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000012c0  00000000  00000000  00006eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  0000035c  00000000  00000000  00008174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00000a8b  00000000  00000000  000084d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000030  00000000  00000000  00008f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  00008f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000188  00000000  00000000  00008fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000a9a  00000000  00000000  00009138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00001028  00000000  00000000  00009bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  0000bcc2  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0000bcc5  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0000bcd1  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0000bcd2  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000005  00000000  00000000  0000bcd3  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000005  00000000  00000000  0000bcd8  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000005  00000000  00000000  0000bcdd  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000c  00000000  00000000  0000bce2  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000037  00000000  00000000  0000bcee  2**0
                  CONTENTS, READONLY
 28 .jdi          0000519c  00000000  00000000  0000bd25  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00030dd2  00000000  00000000  00010ec1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00010b7c l    d  .rodata	00000000 .rodata
00010bbc l    d  .rwdata	00000000 .rwdata
00010da4 l    d  .bss	00000000 .bss
00010db4 l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.o
00010068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010124 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00010bbc l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcpy.c
000109f0 g     F .text	0000002c alt_main
00010cb0 g       *ABS*	00000000 __flash_rwdata_start
000100dc g     F .text	00000048 printf
00010af0 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010da4 g     O .bss	00000004 errno
00010dac g     O .bss	00000004 alt_argv
00018ca0 g       *ABS*	00000000 _gp
00010b54 g     F .text	00000028 memcpy
000100a0 g     F .text	0000003c _printf_r
000108ac g     F .text	00000064 .hidden __udivsi3
00010af8 g     F .text	0000005c alt_icache_flush
00010ca0 g     O .rwdata	00000004 _global_impure_ptr
00010db4 g       *ABS*	00000000 __bss_end
00010acc g     F .text	00000018 alt_dcache_flush_all
00010cb0 g       *ABS*	00000000 __ram_rwdata_end
00010a1c g     F .text	0000005c write
00010bbc g       *ABS*	00000000 __ram_rodata_end
00010ca8 g     O .rwdata	00000004 DEBUG
00010910 g     F .text	0000005c .hidden __umodsi3
00010db4 g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010a9c g     F .text	00000030 altera_avalon_jtag_uart_write
00010190 g     F .text	000004fc ___vfprintf_internal_r
00010020 g     F .text	0000004c _start
00010a98 g     F .text	00000004 alt_sys_init
00010bbc g       *ABS*	00000000 __ram_rwdata_start
00010b7c g       *ABS*	00000000 __ram_rodata_start
00010db4 g       *ABS*	00000000 __alt_stack_base
000106a4 g     F .text	000000a8 __sfvwrite_small_dev
00010da4 g       *ABS*	00000000 __bss_start
0001006c g     F .text	00000034 main
00010da8 g     O .bss	00000004 alt_envp
00010cac g     O .rwdata	00000004 alt_errno
000107b8 g     F .text	00000080 .hidden __divsi3
00010b7c g       *ABS*	00000000 __flash_rodata_start
00010a78 g     F .text	00000020 alt_irq_init
00010768 g     F .text	00000050 _write_r
00010ca4 g     O .rwdata	00000004 _impure_ptr
00010db0 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010cb0 g       *ABS*	00000000 _edata
00010db4 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010838 g     F .text	00000074 .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
0001001c g       .entry	00000000 _exit
0001074c g     F .text	0000001c strlen
00010000 g       *ABS*	00000000 __alt_mem_SRAM
00010ae4 g     F .text	0000000c alt_icache_flush_all
0001068c g     F .text	00000018 __vfprintf_internal
0001096c g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08400814 	ori	at,at,32
    jmp r1
   10018:	0800683a 	jmp	at

0001001c <_exit>:
   1001c:	00000000 	call	0 <__reset-0x10000>

Disassembly of section .text:

00010020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   1002c:	00bffd16 	blt	zero,r2,10024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10030:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10034:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1003c:	d6a32814 	ori	gp,gp,36000
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10040:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10044:	10836914 	ori	r2,r2,3492

    movhi r3, %hi(__bss_end)
   10048:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1004c:	18c36d14 	ori	r3,r3,3508

    beq r2, r3, 1f
   10050:	10c00326 	beq	r2,r3,10060 <_start+0x40>

0:
    stw zero, (r2)
   10054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1005c:	10fffd36 	bltu	r2,r3,10054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10060:	001096c0 	call	1096c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10064:	00109f00 	call	109f0 <alt_main>

00010068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10068:	003fff06 	br	10068 <alt_after_alt_main>

0001006c <main>:
#include <system.h>
#include <io.h>

int main (void){

	printf("Welcome to the Custom Peripheral");
   1006c:	01000074 	movhi	r4,1
int main (void){
   10070:	deffff04 	addi	sp,sp,-4
	printf("Welcome to the Custom Peripheral");
   10074:	2102df04 	addi	r4,r4,2940
int main (void){
   10078:	dfc00015 	stw	ra,0(sp)
	printf("Welcome to the Custom Peripheral");
   1007c:	00100dc0 	call	100dc <printf>

	IOWR(LEDS_BASE, 0, 0x155);
   10080:	00c05544 	movi	r3,341
   10084:	008000b4 	movhi	r2,2
   10088:	10c40035 	stwio	r3,4096(r2)

	printf("Custom Perifheral: 0x%x\n", IORD(LEDS_BASE, 0));
   1008c:	11440037 	ldwio	r5,4096(r2)
   10090:	01000074 	movhi	r4,1
   10094:	2102e804 	addi	r4,r4,2976
   10098:	00100dc0 	call	100dc <printf>

	while(1){
   1009c:	003fff06 	br	1009c <main+0x30>

000100a0 <_printf_r>:
   100a0:	defffd04 	addi	sp,sp,-12
   100a4:	dfc00015 	stw	ra,0(sp)
   100a8:	d9800115 	stw	r6,4(sp)
   100ac:	d9c00215 	stw	r7,8(sp)
   100b0:	21800217 	ldw	r6,8(r4)
   100b4:	00c00074 	movhi	r3,1
   100b8:	18c1a904 	addi	r3,r3,1700
   100bc:	30c00115 	stw	r3,4(r6)
   100c0:	280d883a 	mov	r6,r5
   100c4:	21400217 	ldw	r5,8(r4)
   100c8:	d9c00104 	addi	r7,sp,4
   100cc:	00101900 	call	10190 <___vfprintf_internal_r>
   100d0:	dfc00017 	ldw	ra,0(sp)
   100d4:	dec00304 	addi	sp,sp,12
   100d8:	f800283a 	ret

000100dc <printf>:
   100dc:	defffc04 	addi	sp,sp,-16
   100e0:	dfc00015 	stw	ra,0(sp)
   100e4:	d9400115 	stw	r5,4(sp)
   100e8:	d9800215 	stw	r6,8(sp)
   100ec:	d9c00315 	stw	r7,12(sp)
   100f0:	00800074 	movhi	r2,1
   100f4:	10c32917 	ldw	r3,3236(r2)
   100f8:	00800074 	movhi	r2,1
   100fc:	1081a904 	addi	r2,r2,1700
   10100:	19400217 	ldw	r5,8(r3)
   10104:	d9800104 	addi	r6,sp,4
   10108:	28800115 	stw	r2,4(r5)
   1010c:	200b883a 	mov	r5,r4
   10110:	19000217 	ldw	r4,8(r3)
   10114:	001068c0 	call	1068c <__vfprintf_internal>
   10118:	dfc00017 	ldw	ra,0(sp)
   1011c:	dec00404 	addi	sp,sp,16
   10120:	f800283a 	ret

00010124 <print_repeat>:
   10124:	defffb04 	addi	sp,sp,-20
   10128:	dc800315 	stw	r18,12(sp)
   1012c:	dc400215 	stw	r17,8(sp)
   10130:	dc000115 	stw	r16,4(sp)
   10134:	dfc00415 	stw	ra,16(sp)
   10138:	2025883a 	mov	r18,r4
   1013c:	2823883a 	mov	r17,r5
   10140:	d9800005 	stb	r6,0(sp)
   10144:	3821883a 	mov	r16,r7
   10148:	04000716 	blt	zero,r16,10168 <print_repeat+0x44>
   1014c:	0005883a 	mov	r2,zero
   10150:	dfc00417 	ldw	ra,16(sp)
   10154:	dc800317 	ldw	r18,12(sp)
   10158:	dc400217 	ldw	r17,8(sp)
   1015c:	dc000117 	ldw	r16,4(sp)
   10160:	dec00504 	addi	sp,sp,20
   10164:	f800283a 	ret
   10168:	88800117 	ldw	r2,4(r17)
   1016c:	01c00044 	movi	r7,1
   10170:	d80d883a 	mov	r6,sp
   10174:	880b883a 	mov	r5,r17
   10178:	9009883a 	mov	r4,r18
   1017c:	103ee83a 	callr	r2
   10180:	843fffc4 	addi	r16,r16,-1
   10184:	103ff026 	beq	r2,zero,10148 <print_repeat+0x24>
   10188:	00bfffc4 	movi	r2,-1
   1018c:	003ff006 	br	10150 <print_repeat+0x2c>

00010190 <___vfprintf_internal_r>:
   10190:	deffe604 	addi	sp,sp,-104
   10194:	ddc01715 	stw	r23,92(sp)
   10198:	dd801615 	stw	r22,88(sp)
   1019c:	dd401515 	stw	r21,84(sp)
   101a0:	dd001415 	stw	r20,80(sp)
   101a4:	dcc01315 	stw	r19,76(sp)
   101a8:	dc801215 	stw	r18,72(sp)
   101ac:	dc401115 	stw	r17,68(sp)
   101b0:	dc001015 	stw	r16,64(sp)
   101b4:	dfc01915 	stw	ra,100(sp)
   101b8:	df001815 	stw	fp,96(sp)
   101bc:	2025883a 	mov	r18,r4
   101c0:	2823883a 	mov	r17,r5
   101c4:	d9800515 	stw	r6,20(sp)
   101c8:	382f883a 	mov	r23,r7
   101cc:	0021883a 	mov	r16,zero
   101d0:	d8000215 	stw	zero,8(sp)
   101d4:	d8000015 	stw	zero,0(sp)
   101d8:	002b883a 	mov	r21,zero
   101dc:	0029883a 	mov	r20,zero
   101e0:	0027883a 	mov	r19,zero
   101e4:	002d883a 	mov	r22,zero
   101e8:	d8000115 	stw	zero,4(sp)
   101ec:	0005883a 	mov	r2,zero
   101f0:	00000206 	br	101fc <___vfprintf_internal_r+0x6c>
   101f4:	114000e0 	cmpeqi	r5,r2,3
   101f8:	28004c1e 	bne	r5,zero,1032c <___vfprintf_internal_r+0x19c>
   101fc:	d8c00517 	ldw	r3,20(sp)
   10200:	19000003 	ldbu	r4,0(r3)
   10204:	18c00044 	addi	r3,r3,1
   10208:	d8c00515 	stw	r3,20(sp)
   1020c:	20c03fcc 	andi	r3,r4,255
   10210:	18c0201c 	xori	r3,r3,128
   10214:	18ffe004 	addi	r3,r3,-128
   10218:	18001026 	beq	r3,zero,1025c <___vfprintf_internal_r+0xcc>
   1021c:	114000a0 	cmpeqi	r5,r2,2
   10220:	28001f1e 	bne	r5,zero,102a0 <___vfprintf_internal_r+0x110>
   10224:	114000c8 	cmpgei	r5,r2,3
   10228:	283ff21e 	bne	r5,zero,101f4 <___vfprintf_internal_r+0x64>
   1022c:	1000181e 	bne	r2,zero,10290 <___vfprintf_internal_r+0x100>
   10230:	18c00960 	cmpeqi	r3,r3,37
   10234:	1801061e 	bne	r3,zero,10650 <___vfprintf_internal_r+0x4c0>
   10238:	88800117 	ldw	r2,4(r17)
   1023c:	d9000805 	stb	r4,32(sp)
   10240:	01c00044 	movi	r7,1
   10244:	d9800804 	addi	r6,sp,32
   10248:	880b883a 	mov	r5,r17
   1024c:	9009883a 	mov	r4,r18
   10250:	103ee83a 	callr	r2
   10254:	10001c26 	beq	r2,zero,102c8 <___vfprintf_internal_r+0x138>
   10258:	043fffc4 	movi	r16,-1
   1025c:	8005883a 	mov	r2,r16
   10260:	dfc01917 	ldw	ra,100(sp)
   10264:	df001817 	ldw	fp,96(sp)
   10268:	ddc01717 	ldw	r23,92(sp)
   1026c:	dd801617 	ldw	r22,88(sp)
   10270:	dd401517 	ldw	r21,84(sp)
   10274:	dd001417 	ldw	r20,80(sp)
   10278:	dcc01317 	ldw	r19,76(sp)
   1027c:	dc801217 	ldw	r18,72(sp)
   10280:	dc401117 	ldw	r17,68(sp)
   10284:	dc001017 	ldw	r16,64(sp)
   10288:	dec01a04 	addi	sp,sp,104
   1028c:	f800283a 	ret
   10290:	18800c20 	cmpeqi	r2,r3,48
   10294:	1000f71e 	bne	r2,zero,10674 <___vfprintf_internal_r+0x4e4>
   10298:	18800958 	cmpnei	r2,r3,37
   1029c:	103fe626 	beq	r2,zero,10238 <___vfprintf_internal_r+0xa8>
   102a0:	213ff404 	addi	r4,r4,-48
   102a4:	21003fcc 	andi	r4,r4,255
   102a8:	208002a8 	cmpgeui	r2,r4,10
   102ac:	10000a1e 	bne	r2,zero,102d8 <___vfprintf_internal_r+0x148>
   102b0:	98bfffe0 	cmpeqi	r2,r19,-1
   102b4:	1000061e 	bne	r2,zero,102d0 <___vfprintf_internal_r+0x140>
   102b8:	9cc002a4 	muli	r19,r19,10
   102bc:	24e7883a 	add	r19,r4,r19
   102c0:	00800084 	movi	r2,2
   102c4:	003fcd06 	br	101fc <___vfprintf_internal_r+0x6c>
   102c8:	84000044 	addi	r16,r16,1
   102cc:	003fcb06 	br	101fc <___vfprintf_internal_r+0x6c>
   102d0:	0027883a 	mov	r19,zero
   102d4:	003ff906 	br	102bc <___vfprintf_internal_r+0x12c>
   102d8:	18800ba0 	cmpeqi	r2,r3,46
   102dc:	1000e91e 	bne	r2,zero,10684 <___vfprintf_internal_r+0x4f4>
   102e0:	18801b20 	cmpeqi	r2,r3,108
   102e4:	1000e61e 	bne	r2,zero,10680 <___vfprintf_internal_r+0x4f0>
   102e8:	a0bfffe0 	cmpeqi	r2,r20,-1
   102ec:	10001a1e 	bne	r2,zero,10358 <___vfprintf_internal_r+0x1c8>
   102f0:	d8000115 	stw	zero,4(sp)
   102f4:	18801be0 	cmpeqi	r2,r3,111
   102f8:	1000b41e 	bne	r2,zero,105cc <___vfprintf_internal_r+0x43c>
   102fc:	18801c08 	cmpgei	r2,r3,112
   10300:	1000561e 	bne	r2,zero,1045c <___vfprintf_internal_r+0x2cc>
   10304:	188018e0 	cmpeqi	r2,r3,99
   10308:	1000b71e 	bne	r2,zero,105e8 <___vfprintf_internal_r+0x458>
   1030c:	18801908 	cmpgei	r2,r3,100
   10310:	1000131e 	bne	r2,zero,10360 <___vfprintf_internal_r+0x1d0>
   10314:	18c01620 	cmpeqi	r3,r3,88
   10318:	183fb426 	beq	r3,zero,101ec <___vfprintf_internal_r+0x5c>
   1031c:	b000701e 	bne	r22,zero,104e0 <___vfprintf_internal_r+0x350>
   10320:	00800044 	movi	r2,1
   10324:	d8800215 	stw	r2,8(sp)
   10328:	00006e06 	br	104e4 <___vfprintf_internal_r+0x354>
   1032c:	213ff404 	addi	r4,r4,-48
   10330:	21003fcc 	andi	r4,r4,255
   10334:	214002a8 	cmpgeui	r5,r4,10
   10338:	283fe91e 	bne	r5,zero,102e0 <___vfprintf_internal_r+0x150>
   1033c:	a0ffffe0 	cmpeqi	r3,r20,-1
   10340:	1800031e 	bne	r3,zero,10350 <___vfprintf_internal_r+0x1c0>
   10344:	a50002a4 	muli	r20,r20,10
   10348:	2529883a 	add	r20,r4,r20
   1034c:	003fab06 	br	101fc <___vfprintf_internal_r+0x6c>
   10350:	0029883a 	mov	r20,zero
   10354:	003ffc06 	br	10348 <___vfprintf_internal_r+0x1b8>
   10358:	05000044 	movi	r20,1
   1035c:	003fe506 	br	102f4 <___vfprintf_internal_r+0x164>
   10360:	18801920 	cmpeqi	r2,r3,100
   10364:	1000021e 	bne	r2,zero,10370 <___vfprintf_internal_r+0x1e0>
   10368:	18c01a60 	cmpeqi	r3,r3,105
   1036c:	183f9f26 	beq	r3,zero,101ec <___vfprintf_internal_r+0x5c>
   10370:	b8800104 	addi	r2,r23,4
   10374:	d8800415 	stw	r2,16(sp)
   10378:	d8800017 	ldw	r2,0(sp)
   1037c:	10009426 	beq	r2,zero,105d0 <___vfprintf_internal_r+0x440>
   10380:	bdc00017 	ldw	r23,0(r23)
   10384:	b800960e 	bge	r23,zero,105e0 <___vfprintf_internal_r+0x450>
   10388:	05efc83a 	sub	r23,zero,r23
   1038c:	02400044 	movi	r9,1
   10390:	df000804 	addi	fp,sp,32
   10394:	e00d883a 	mov	r6,fp
   10398:	b800541e 	bne	r23,zero,104ec <___vfprintf_internal_r+0x35c>
   1039c:	e185c83a 	sub	r2,fp,r6
   103a0:	d8800315 	stw	r2,12(sp)
   103a4:	a085c83a 	sub	r2,r20,r2
   103a8:	00800b0e 	bge	zero,r2,103d8 <___vfprintf_internal_r+0x248>
   103ac:	d8c01004 	addi	r3,sp,64
   103b0:	e0c0072e 	bgeu	fp,r3,103d0 <___vfprintf_internal_r+0x240>
   103b4:	e085883a 	add	r2,fp,r2
   103b8:	01000c04 	movi	r4,48
   103bc:	e7000044 	addi	fp,fp,1
   103c0:	e13fffc5 	stb	r4,-1(fp)
   103c4:	17000226 	beq	r2,fp,103d0 <___vfprintf_internal_r+0x240>
   103c8:	d8c01004 	addi	r3,sp,64
   103cc:	e0fffb36 	bltu	fp,r3,103bc <___vfprintf_internal_r+0x22c>
   103d0:	e185c83a 	sub	r2,fp,r6
   103d4:	d8800315 	stw	r2,12(sp)
   103d8:	d8800317 	ldw	r2,12(sp)
   103dc:	4891883a 	add	r8,r9,r2
   103e0:	d8800117 	ldw	r2,4(sp)
   103e4:	9a2fc83a 	sub	r23,r19,r8
   103e8:	10005526 	beq	r2,zero,10540 <___vfprintf_internal_r+0x3b0>
   103ec:	48000a26 	beq	r9,zero,10418 <___vfprintf_internal_r+0x288>
   103f0:	00800b44 	movi	r2,45
   103f4:	d88007c5 	stb	r2,31(sp)
   103f8:	88800117 	ldw	r2,4(r17)
   103fc:	01c00044 	movi	r7,1
   10400:	d98007c4 	addi	r6,sp,31
   10404:	880b883a 	mov	r5,r17
   10408:	9009883a 	mov	r4,r18
   1040c:	103ee83a 	callr	r2
   10410:	103f911e 	bne	r2,zero,10258 <___vfprintf_internal_r+0xc8>
   10414:	84000044 	addi	r16,r16,1
   10418:	05c0070e 	bge	zero,r23,10438 <___vfprintf_internal_r+0x2a8>
   1041c:	b80f883a 	mov	r7,r23
   10420:	01800c04 	movi	r6,48
   10424:	880b883a 	mov	r5,r17
   10428:	9009883a 	mov	r4,r18
   1042c:	00101240 	call	10124 <print_repeat>
   10430:	103f891e 	bne	r2,zero,10258 <___vfprintf_internal_r+0xc8>
   10434:	85e1883a 	add	r16,r16,r23
   10438:	d8800317 	ldw	r2,12(sp)
   1043c:	e011883a 	mov	r8,fp
   10440:	172fc83a 	sub	r23,r2,fp
   10444:	ba05883a 	add	r2,r23,r8
   10448:	00805316 	blt	zero,r2,10598 <___vfprintf_internal_r+0x408>
   1044c:	8707883a 	add	r3,r16,fp
   10450:	ddc00417 	ldw	r23,16(sp)
   10454:	1a21c83a 	sub	r16,r3,r8
   10458:	003f6406 	br	101ec <___vfprintf_internal_r+0x5c>
   1045c:	18801d60 	cmpeqi	r2,r3,117
   10460:	10005b1e 	bne	r2,zero,105d0 <___vfprintf_internal_r+0x440>
   10464:	18801e20 	cmpeqi	r2,r3,120
   10468:	10001e1e 	bne	r2,zero,104e4 <___vfprintf_internal_r+0x354>
   1046c:	18c01ce0 	cmpeqi	r3,r3,115
   10470:	183f5e26 	beq	r3,zero,101ec <___vfprintf_internal_r+0x5c>
   10474:	b8800104 	addi	r2,r23,4
   10478:	d8800315 	stw	r2,12(sp)
   1047c:	b8800017 	ldw	r2,0(r23)
   10480:	1009883a 	mov	r4,r2
   10484:	1039883a 	mov	fp,r2
   10488:	001074c0 	call	1074c <strlen>
   1048c:	988fc83a 	sub	r7,r19,r2
   10490:	102f883a 	mov	r23,r2
   10494:	01c0080e 	bge	zero,r7,104b8 <___vfprintf_internal_r+0x328>
   10498:	01800804 	movi	r6,32
   1049c:	880b883a 	mov	r5,r17
   104a0:	9009883a 	mov	r4,r18
   104a4:	d9c00415 	stw	r7,16(sp)
   104a8:	00101240 	call	10124 <print_repeat>
   104ac:	103f6a1e 	bne	r2,zero,10258 <___vfprintf_internal_r+0xc8>
   104b0:	d9c00417 	ldw	r7,16(sp)
   104b4:	81e1883a 	add	r16,r16,r7
   104b8:	88800117 	ldw	r2,4(r17)
   104bc:	b80f883a 	mov	r7,r23
   104c0:	e00d883a 	mov	r6,fp
   104c4:	880b883a 	mov	r5,r17
   104c8:	9009883a 	mov	r4,r18
   104cc:	103ee83a 	callr	r2
   104d0:	103f611e 	bne	r2,zero,10258 <___vfprintf_internal_r+0xc8>
   104d4:	85e1883a 	add	r16,r16,r23
   104d8:	ddc00317 	ldw	r23,12(sp)
   104dc:	003f4706 	br	101fc <___vfprintf_internal_r+0x6c>
   104e0:	dd800215 	stw	r22,8(sp)
   104e4:	05400404 	movi	r21,16
   104e8:	00003906 	br	105d0 <___vfprintf_internal_r+0x440>
   104ec:	b809883a 	mov	r4,r23
   104f0:	a80b883a 	mov	r5,r21
   104f4:	da400315 	stw	r9,12(sp)
   104f8:	00108ac0 	call	108ac <__udivsi3>
   104fc:	1549383a 	mul	r4,r2,r21
   10500:	da400317 	ldw	r9,12(sp)
   10504:	d9800804 	addi	r6,sp,32
   10508:	b92fc83a 	sub	r23,r23,r4
   1050c:	b9000288 	cmpgei	r4,r23,10
   10510:	2000051e 	bne	r4,zero,10528 <___vfprintf_internal_r+0x398>
   10514:	bdc00c04 	addi	r23,r23,48
   10518:	e7000044 	addi	fp,fp,1
   1051c:	e5ffffc5 	stb	r23,-1(fp)
   10520:	102f883a 	mov	r23,r2
   10524:	003f9c06 	br	10398 <___vfprintf_internal_r+0x208>
   10528:	d8c00217 	ldw	r3,8(sp)
   1052c:	18000226 	beq	r3,zero,10538 <___vfprintf_internal_r+0x3a8>
   10530:	bdc00dc4 	addi	r23,r23,55
   10534:	003ff806 	br	10518 <___vfprintf_internal_r+0x388>
   10538:	bdc015c4 	addi	r23,r23,87
   1053c:	003ff606 	br	10518 <___vfprintf_internal_r+0x388>
   10540:	05c0090e 	bge	zero,r23,10568 <___vfprintf_internal_r+0x3d8>
   10544:	b80f883a 	mov	r7,r23
   10548:	01800804 	movi	r6,32
   1054c:	880b883a 	mov	r5,r17
   10550:	9009883a 	mov	r4,r18
   10554:	da400615 	stw	r9,24(sp)
   10558:	00101240 	call	10124 <print_repeat>
   1055c:	103f3e1e 	bne	r2,zero,10258 <___vfprintf_internal_r+0xc8>
   10560:	da400617 	ldw	r9,24(sp)
   10564:	85e1883a 	add	r16,r16,r23
   10568:	483fb326 	beq	r9,zero,10438 <___vfprintf_internal_r+0x2a8>
   1056c:	00800b44 	movi	r2,45
   10570:	d88007c5 	stb	r2,31(sp)
   10574:	88800117 	ldw	r2,4(r17)
   10578:	01c00044 	movi	r7,1
   1057c:	d98007c4 	addi	r6,sp,31
   10580:	880b883a 	mov	r5,r17
   10584:	9009883a 	mov	r4,r18
   10588:	103ee83a 	callr	r2
   1058c:	103f321e 	bne	r2,zero,10258 <___vfprintf_internal_r+0xc8>
   10590:	84000044 	addi	r16,r16,1
   10594:	003fa806 	br	10438 <___vfprintf_internal_r+0x2a8>
   10598:	40bfffc3 	ldbu	r2,-1(r8)
   1059c:	01c00044 	movi	r7,1
   105a0:	423fffc4 	addi	r8,r8,-1
   105a4:	d88007c5 	stb	r2,31(sp)
   105a8:	88800117 	ldw	r2,4(r17)
   105ac:	d98007c4 	addi	r6,sp,31
   105b0:	880b883a 	mov	r5,r17
   105b4:	9009883a 	mov	r4,r18
   105b8:	da000315 	stw	r8,12(sp)
   105bc:	103ee83a 	callr	r2
   105c0:	da000317 	ldw	r8,12(sp)
   105c4:	103f9f26 	beq	r2,zero,10444 <___vfprintf_internal_r+0x2b4>
   105c8:	003f2306 	br	10258 <___vfprintf_internal_r+0xc8>
   105cc:	05400204 	movi	r21,8
   105d0:	b8800104 	addi	r2,r23,4
   105d4:	d8800415 	stw	r2,16(sp)
   105d8:	bdc00017 	ldw	r23,0(r23)
   105dc:	d8000015 	stw	zero,0(sp)
   105e0:	0013883a 	mov	r9,zero
   105e4:	003f6a06 	br	10390 <___vfprintf_internal_r+0x200>
   105e8:	98800090 	cmplti	r2,r19,2
   105ec:	1000091e 	bne	r2,zero,10614 <___vfprintf_internal_r+0x484>
   105f0:	99ffffc4 	addi	r7,r19,-1
   105f4:	01800804 	movi	r6,32
   105f8:	880b883a 	mov	r5,r17
   105fc:	9009883a 	mov	r4,r18
   10600:	d9c00315 	stw	r7,12(sp)
   10604:	00101240 	call	10124 <print_repeat>
   10608:	103f131e 	bne	r2,zero,10258 <___vfprintf_internal_r+0xc8>
   1060c:	d9c00317 	ldw	r7,12(sp)
   10610:	81e1883a 	add	r16,r16,r7
   10614:	b8800017 	ldw	r2,0(r23)
   10618:	b8c00104 	addi	r3,r23,4
   1061c:	01c00044 	movi	r7,1
   10620:	d8800805 	stb	r2,32(sp)
   10624:	88800117 	ldw	r2,4(r17)
   10628:	d9800804 	addi	r6,sp,32
   1062c:	880b883a 	mov	r5,r17
   10630:	9009883a 	mov	r4,r18
   10634:	d8c00315 	stw	r3,12(sp)
   10638:	103ee83a 	callr	r2
   1063c:	103f061e 	bne	r2,zero,10258 <___vfprintf_internal_r+0xc8>
   10640:	d8c00317 	ldw	r3,12(sp)
   10644:	84000044 	addi	r16,r16,1
   10648:	182f883a 	mov	r23,r3
   1064c:	003eeb06 	br	101fc <___vfprintf_internal_r+0x6c>
   10650:	00800044 	movi	r2,1
   10654:	d8000215 	stw	zero,8(sp)
   10658:	002d883a 	mov	r22,zero
   1065c:	d8000115 	stw	zero,4(sp)
   10660:	d8800015 	stw	r2,0(sp)
   10664:	05400284 	movi	r21,10
   10668:	053fffc4 	movi	r20,-1
   1066c:	04ffffc4 	movi	r19,-1
   10670:	003ee206 	br	101fc <___vfprintf_internal_r+0x6c>
   10674:	00800044 	movi	r2,1
   10678:	d8800115 	stw	r2,4(sp)
   1067c:	003f1006 	br	102c0 <___vfprintf_internal_r+0x130>
   10680:	05800044 	movi	r22,1
   10684:	008000c4 	movi	r2,3
   10688:	003edc06 	br	101fc <___vfprintf_internal_r+0x6c>

0001068c <__vfprintf_internal>:
   1068c:	00800074 	movhi	r2,1
   10690:	300f883a 	mov	r7,r6
   10694:	280d883a 	mov	r6,r5
   10698:	200b883a 	mov	r5,r4
   1069c:	11032917 	ldw	r4,3236(r2)
   106a0:	00101901 	jmpi	10190 <___vfprintf_internal_r>

000106a4 <__sfvwrite_small_dev>:
   106a4:	2880000b 	ldhu	r2,0(r5)
   106a8:	1080020c 	andi	r2,r2,8
   106ac:	10002526 	beq	r2,zero,10744 <__sfvwrite_small_dev+0xa0>
   106b0:	2880008f 	ldh	r2,2(r5)
   106b4:	defffb04 	addi	sp,sp,-20
   106b8:	dcc00315 	stw	r19,12(sp)
   106bc:	dc800215 	stw	r18,8(sp)
   106c0:	dc400115 	stw	r17,4(sp)
   106c4:	dc000015 	stw	r16,0(sp)
   106c8:	dfc00415 	stw	ra,16(sp)
   106cc:	2027883a 	mov	r19,r4
   106d0:	2821883a 	mov	r16,r5
   106d4:	3025883a 	mov	r18,r6
   106d8:	3823883a 	mov	r17,r7
   106dc:	1000100e 	bge	r2,zero,10720 <__sfvwrite_small_dev+0x7c>
   106e0:	8080000b 	ldhu	r2,0(r16)
   106e4:	10801014 	ori	r2,r2,64
   106e8:	8080000d 	sth	r2,0(r16)
   106ec:	00bfffc4 	movi	r2,-1
   106f0:	00000d06 	br	10728 <__sfvwrite_small_dev+0x84>
   106f4:	88810050 	cmplti	r2,r17,1025
   106f8:	880f883a 	mov	r7,r17
   106fc:	1000011e 	bne	r2,zero,10704 <__sfvwrite_small_dev+0x60>
   10700:	01c10004 	movi	r7,1024
   10704:	8140008f 	ldh	r5,2(r16)
   10708:	900d883a 	mov	r6,r18
   1070c:	9809883a 	mov	r4,r19
   10710:	00107680 	call	10768 <_write_r>
   10714:	00bff20e 	bge	zero,r2,106e0 <__sfvwrite_small_dev+0x3c>
   10718:	88a3c83a 	sub	r17,r17,r2
   1071c:	90a5883a 	add	r18,r18,r2
   10720:	047ff416 	blt	zero,r17,106f4 <__sfvwrite_small_dev+0x50>
   10724:	0005883a 	mov	r2,zero
   10728:	dfc00417 	ldw	ra,16(sp)
   1072c:	dcc00317 	ldw	r19,12(sp)
   10730:	dc800217 	ldw	r18,8(sp)
   10734:	dc400117 	ldw	r17,4(sp)
   10738:	dc000017 	ldw	r16,0(sp)
   1073c:	dec00504 	addi	sp,sp,20
   10740:	f800283a 	ret
   10744:	00bfffc4 	movi	r2,-1
   10748:	f800283a 	ret

0001074c <strlen>:
   1074c:	2005883a 	mov	r2,r4
   10750:	10c00007 	ldb	r3,0(r2)
   10754:	1800021e 	bne	r3,zero,10760 <strlen+0x14>
   10758:	1105c83a 	sub	r2,r2,r4
   1075c:	f800283a 	ret
   10760:	10800044 	addi	r2,r2,1
   10764:	003ffa06 	br	10750 <strlen+0x4>

00010768 <_write_r>:
   10768:	defffe04 	addi	sp,sp,-8
   1076c:	dc000015 	stw	r16,0(sp)
   10770:	00800074 	movhi	r2,1
   10774:	2021883a 	mov	r16,r4
   10778:	2809883a 	mov	r4,r5
   1077c:	300b883a 	mov	r5,r6
   10780:	380d883a 	mov	r6,r7
   10784:	dfc00115 	stw	ra,4(sp)
   10788:	10036915 	stw	zero,3492(r2)
   1078c:	0010a1c0 	call	10a1c <write>
   10790:	10ffffd8 	cmpnei	r3,r2,-1
   10794:	1800041e 	bne	r3,zero,107a8 <_write_r+0x40>
   10798:	00c00074 	movhi	r3,1
   1079c:	18c36917 	ldw	r3,3492(r3)
   107a0:	18000126 	beq	r3,zero,107a8 <_write_r+0x40>
   107a4:	80c00015 	stw	r3,0(r16)
   107a8:	dfc00117 	ldw	ra,4(sp)
   107ac:	dc000017 	ldw	r16,0(sp)
   107b0:	dec00204 	addi	sp,sp,8
   107b4:	f800283a 	ret

000107b8 <__divsi3>:
   107b8:	20001a16 	blt	r4,zero,10824 <__divsi3+0x6c>
   107bc:	000f883a 	mov	r7,zero
   107c0:	2800020e 	bge	r5,zero,107cc <__divsi3+0x14>
   107c4:	014bc83a 	sub	r5,zero,r5
   107c8:	39c0005c 	xori	r7,r7,1
   107cc:	200d883a 	mov	r6,r4
   107d0:	00c00044 	movi	r3,1
   107d4:	2900092e 	bgeu	r5,r4,107fc <__divsi3+0x44>
   107d8:	00800804 	movi	r2,32
   107dc:	00c00044 	movi	r3,1
   107e0:	00000106 	br	107e8 <__divsi3+0x30>
   107e4:	10001226 	beq	r2,zero,10830 <__divsi3+0x78>
   107e8:	294b883a 	add	r5,r5,r5
   107ec:	10bfffc4 	addi	r2,r2,-1
   107f0:	18c7883a 	add	r3,r3,r3
   107f4:	293ffb36 	bltu	r5,r4,107e4 <__divsi3+0x2c>
   107f8:	18000d26 	beq	r3,zero,10830 <__divsi3+0x78>
   107fc:	0005883a 	mov	r2,zero
   10800:	31400236 	bltu	r6,r5,1080c <__divsi3+0x54>
   10804:	314dc83a 	sub	r6,r6,r5
   10808:	10c4b03a 	or	r2,r2,r3
   1080c:	1806d07a 	srli	r3,r3,1
   10810:	280ad07a 	srli	r5,r5,1
   10814:	183ffa1e 	bne	r3,zero,10800 <__divsi3+0x48>
   10818:	38000126 	beq	r7,zero,10820 <__divsi3+0x68>
   1081c:	0085c83a 	sub	r2,zero,r2
   10820:	f800283a 	ret
   10824:	0109c83a 	sub	r4,zero,r4
   10828:	01c00044 	movi	r7,1
   1082c:	003fe406 	br	107c0 <__divsi3+0x8>
   10830:	0005883a 	mov	r2,zero
   10834:	003ff806 	br	10818 <__divsi3+0x60>

00010838 <__modsi3>:
   10838:	20001716 	blt	r4,zero,10898 <__modsi3+0x60>
   1083c:	000f883a 	mov	r7,zero
   10840:	2005883a 	mov	r2,r4
   10844:	2800010e 	bge	r5,zero,1084c <__modsi3+0x14>
   10848:	014bc83a 	sub	r5,zero,r5
   1084c:	00c00044 	movi	r3,1
   10850:	2900092e 	bgeu	r5,r4,10878 <__modsi3+0x40>
   10854:	01800804 	movi	r6,32
   10858:	00c00044 	movi	r3,1
   1085c:	00000106 	br	10864 <__modsi3+0x2c>
   10860:	30001026 	beq	r6,zero,108a4 <__modsi3+0x6c>
   10864:	294b883a 	add	r5,r5,r5
   10868:	31bfffc4 	addi	r6,r6,-1
   1086c:	18c7883a 	add	r3,r3,r3
   10870:	293ffb36 	bltu	r5,r4,10860 <__modsi3+0x28>
   10874:	18000b26 	beq	r3,zero,108a4 <__modsi3+0x6c>
   10878:	1806d07a 	srli	r3,r3,1
   1087c:	11400136 	bltu	r2,r5,10884 <__modsi3+0x4c>
   10880:	1145c83a 	sub	r2,r2,r5
   10884:	280ad07a 	srli	r5,r5,1
   10888:	183ffb1e 	bne	r3,zero,10878 <__modsi3+0x40>
   1088c:	38000126 	beq	r7,zero,10894 <__modsi3+0x5c>
   10890:	0085c83a 	sub	r2,zero,r2
   10894:	f800283a 	ret
   10898:	0109c83a 	sub	r4,zero,r4
   1089c:	01c00044 	movi	r7,1
   108a0:	003fe706 	br	10840 <__modsi3+0x8>
   108a4:	2005883a 	mov	r2,r4
   108a8:	003ff806 	br	1088c <__modsi3+0x54>

000108ac <__udivsi3>:
   108ac:	200d883a 	mov	r6,r4
   108b0:	2900152e 	bgeu	r5,r4,10908 <__udivsi3+0x5c>
   108b4:	28001416 	blt	r5,zero,10908 <__udivsi3+0x5c>
   108b8:	00800804 	movi	r2,32
   108bc:	00c00044 	movi	r3,1
   108c0:	00000206 	br	108cc <__udivsi3+0x20>
   108c4:	10000e26 	beq	r2,zero,10900 <__udivsi3+0x54>
   108c8:	28000416 	blt	r5,zero,108dc <__udivsi3+0x30>
   108cc:	294b883a 	add	r5,r5,r5
   108d0:	10bfffc4 	addi	r2,r2,-1
   108d4:	18c7883a 	add	r3,r3,r3
   108d8:	293ffa36 	bltu	r5,r4,108c4 <__udivsi3+0x18>
   108dc:	18000826 	beq	r3,zero,10900 <__udivsi3+0x54>
   108e0:	0005883a 	mov	r2,zero
   108e4:	31400236 	bltu	r6,r5,108f0 <__udivsi3+0x44>
   108e8:	314dc83a 	sub	r6,r6,r5
   108ec:	10c4b03a 	or	r2,r2,r3
   108f0:	1806d07a 	srli	r3,r3,1
   108f4:	280ad07a 	srli	r5,r5,1
   108f8:	183ffa1e 	bne	r3,zero,108e4 <__udivsi3+0x38>
   108fc:	f800283a 	ret
   10900:	0005883a 	mov	r2,zero
   10904:	f800283a 	ret
   10908:	00c00044 	movi	r3,1
   1090c:	003ff406 	br	108e0 <__udivsi3+0x34>

00010910 <__umodsi3>:
   10910:	2005883a 	mov	r2,r4
   10914:	2900132e 	bgeu	r5,r4,10964 <__umodsi3+0x54>
   10918:	28001216 	blt	r5,zero,10964 <__umodsi3+0x54>
   1091c:	01800804 	movi	r6,32
   10920:	00c00044 	movi	r3,1
   10924:	00000206 	br	10930 <__umodsi3+0x20>
   10928:	30000c26 	beq	r6,zero,1095c <__umodsi3+0x4c>
   1092c:	28000416 	blt	r5,zero,10940 <__umodsi3+0x30>
   10930:	294b883a 	add	r5,r5,r5
   10934:	31bfffc4 	addi	r6,r6,-1
   10938:	18c7883a 	add	r3,r3,r3
   1093c:	293ffa36 	bltu	r5,r4,10928 <__umodsi3+0x18>
   10940:	18000626 	beq	r3,zero,1095c <__umodsi3+0x4c>
   10944:	1806d07a 	srli	r3,r3,1
   10948:	11400136 	bltu	r2,r5,10950 <__umodsi3+0x40>
   1094c:	1145c83a 	sub	r2,r2,r5
   10950:	280ad07a 	srli	r5,r5,1
   10954:	183ffb1e 	bne	r3,zero,10944 <__umodsi3+0x34>
   10958:	f800283a 	ret
   1095c:	2005883a 	mov	r2,r4
   10960:	f800283a 	ret
   10964:	00c00044 	movi	r3,1
   10968:	003ff606 	br	10944 <__umodsi3+0x34>

0001096c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1096c:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10970:	01000074 	movhi	r4,1
   10974:	01400074 	movhi	r5,1
   10978:	dfc00015 	stw	ra,0(sp)
   1097c:	2102ef04 	addi	r4,r4,3004
   10980:	29432c04 	addi	r5,r5,3248
   10984:	21400426 	beq	r4,r5,10998 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
   10988:	01800074 	movhi	r6,1
   1098c:	31832c04 	addi	r6,r6,3248
   10990:	310dc83a 	sub	r6,r6,r4
   10994:	0010b540 	call	10b54 <memcpy>
  if (to != from)
   10998:	01000074 	movhi	r4,1
   1099c:	01400074 	movhi	r5,1
   109a0:	21000804 	addi	r4,r4,32
   109a4:	29400804 	addi	r5,r5,32
   109a8:	21400426 	beq	r4,r5,109bc <alt_load+0x50>
      *to++ = *from++;
   109ac:	01800074 	movhi	r6,1
   109b0:	31800804 	addi	r6,r6,32
   109b4:	310dc83a 	sub	r6,r6,r4
   109b8:	0010b540 	call	10b54 <memcpy>
  if (to != from)
   109bc:	01000074 	movhi	r4,1
   109c0:	01400074 	movhi	r5,1
   109c4:	2102df04 	addi	r4,r4,2940
   109c8:	2942df04 	addi	r5,r5,2940
   109cc:	21400426 	beq	r4,r5,109e0 <alt_load+0x74>
      *to++ = *from++;
   109d0:	01800074 	movhi	r6,1
   109d4:	3182ef04 	addi	r6,r6,3004
   109d8:	310dc83a 	sub	r6,r6,r4
   109dc:	0010b540 	call	10b54 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   109e0:	0010acc0 	call	10acc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   109e4:	dfc00017 	ldw	ra,0(sp)
   109e8:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   109ec:	0010ae41 	jmpi	10ae4 <alt_icache_flush_all>

000109f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   109f0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   109f4:	0009883a 	mov	r4,zero
{
   109f8:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   109fc:	0010a780 	call	10a78 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10a00:	0010a980 	call	10a98 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10a04:	d1a04217 	ldw	r6,-32504(gp)
   10a08:	d1604317 	ldw	r5,-32500(gp)
   10a0c:	d1204417 	ldw	r4,-32496(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10a10:	dfc00017 	ldw	ra,0(sp)
   10a14:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   10a18:	001006c1 	jmpi	1006c <main>

00010a1c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10a1c:	213fffc4 	addi	r4,r4,-1
   10a20:	210000a8 	cmpgeui	r4,r4,2
   10a24:	2000041e 	bne	r4,zero,10a38 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   10a28:	01000074 	movhi	r4,1
   10a2c:	000f883a 	mov	r7,zero
   10a30:	21032a04 	addi	r4,r4,3240
   10a34:	0010a9c1 	jmpi	10a9c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10a38:	d0a00317 	ldw	r2,-32756(gp)
   10a3c:	10000926 	beq	r2,zero,10a64 <write+0x48>
{
   10a40:	deffff04 	addi	sp,sp,-4
   10a44:	dfc00015 	stw	ra,0(sp)
   10a48:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10a4c:	00c01444 	movi	r3,81
   10a50:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10a54:	00bfffc4 	movi	r2,-1
   10a58:	dfc00017 	ldw	ra,0(sp)
   10a5c:	dec00104 	addi	sp,sp,4
   10a60:	f800283a 	ret
   10a64:	d0a04104 	addi	r2,gp,-32508
        ALT_ERRNO = EBADFD;
   10a68:	00c01444 	movi	r3,81
   10a6c:	10c00015 	stw	r3,0(r2)
}
   10a70:	00bfffc4 	movi	r2,-1
   10a74:	f800283a 	ret

00010a78 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10a78:	deffff04 	addi	sp,sp,-4
   10a7c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSCUSTOMIP, NiosCustomIP);
   10a80:	0010af00 	call	10af0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10a84:	00800044 	movi	r2,1
   10a88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10a8c:	dfc00017 	ldw	ra,0(sp)
   10a90:	dec00104 	addi	sp,sp,4
   10a94:	f800283a 	ret

00010a98 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( DEBUG, DEBUG);
}
   10a98:	f800283a 	ret

00010a9c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10a9c:	20c00017 	ldw	r3,0(r4)
{
   10aa0:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   10aa4:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10aa8:	01bfffd4 	movui	r6,65535
  while (ptr < end)
   10aac:	29000136 	bltu	r5,r4,10ab4 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   10ab0:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10ab4:	19c00137 	ldwio	r7,4(r3)
   10ab8:	31fffc2e 	bgeu	r6,r7,10aac <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10abc:	29c00007 	ldb	r7,0(r5)
   10ac0:	29400044 	addi	r5,r5,1
   10ac4:	19c00035 	stwio	r7,0(r3)
   10ac8:	003ff806 	br	10aac <altera_avalon_jtag_uart_write+0x10>

00010acc <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10acc:	0005883a 	mov	r2,zero
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10ad0:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10ad4:	10800804 	addi	r2,r2,32
   10ad8:	10c20018 	cmpnei	r3,r2,2048
   10adc:	183ffc1e 	bne	r3,zero,10ad0 <alt_dcache_flush_all+0x4>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10ae0:	f800283a 	ret

00010ae4 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10ae4:	01440004 	movi	r5,4096
   10ae8:	0009883a 	mov	r4,zero
   10aec:	0010af81 	jmpi	10af8 <alt_icache_flush>

00010af0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10af0:	000170fa 	wrctl	ienable,zero
}
   10af4:	f800283a 	ret

00010af8 <alt_icache_flush>:

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10af8:	28840070 	cmpltui	r2,r5,4097
   10afc:	1000011e 	bne	r2,zero,10b04 <alt_icache_flush+0xc>
   10b00:	01440004 	movi	r5,4096
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   10b04:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10b08:	2005883a 	mov	r2,r4
   10b0c:	11400c36 	bltu	r2,r5,10b40 <alt_icache_flush+0x48>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10b10:	208007cc 	andi	r2,r4,31
   10b14:	10000826 	beq	r2,zero,10b38 <alt_icache_flush+0x40>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10b18:	20bff844 	addi	r2,r4,-31
   10b1c:	28800b36 	bltu	r5,r2,10b4c <alt_icache_flush+0x54>
   10b20:	290bc83a 	sub	r5,r5,r4
   10b24:	294007c4 	addi	r5,r5,31
   10b28:	280ad17a 	srli	r5,r5,5
   10b2c:	280a917a 	slli	r5,r5,5
   10b30:	2149883a 	add	r4,r4,r5
   10b34:	2000603a 	flushi	r4
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10b38:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10b3c:	f800283a 	ret
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10b40:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10b44:	10800804 	addi	r2,r2,32
   10b48:	003ff006 	br	10b0c <alt_icache_flush+0x14>
    __asm__ volatile ("flushi %0" :: "r" (i));
   10b4c:	000b883a 	mov	r5,zero
   10b50:	003ff706 	br	10b30 <alt_icache_flush+0x38>

00010b54 <memcpy>:
   10b54:	2005883a 	mov	r2,r4
   10b58:	0007883a 	mov	r3,zero
   10b5c:	30c0011e 	bne	r6,r3,10b64 <memcpy+0x10>
   10b60:	f800283a 	ret
   10b64:	28cf883a 	add	r7,r5,r3
   10b68:	39c00003 	ldbu	r7,0(r7)
   10b6c:	10c9883a 	add	r4,r2,r3
   10b70:	18c00044 	addi	r3,r3,1
   10b74:	21c00005 	stb	r7,0(r4)
   10b78:	003ff806 	br	10b5c <memcpy+0x8>
